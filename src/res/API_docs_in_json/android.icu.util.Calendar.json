{"Functions": {"setRepeatedWallTimeOption(int)": {"Returns": [], "Parameters": [["int", "int: the behavior for handling repeating wall time, either WALLTIME_FIRST or WALLTIME_LAST."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "when option is neither WALLTIME_FIRST nor WALLTIME_LAST."]], "SeeAlso": ["@B_android#icu#util#Calendar#getRepeatedWallTimeOption_E@", "@B_android#icu#util#Calendar_E@"], "Permissions": [], "Description": "WALLTIME_FIRST is used, the wall time 1:30AM in this example will be interpreted as 1:30 AM EDT (first occurrence). When WALLTIME_LAST is used, it will be interpreted as 1:30 AM EST (last occurrence). The default value is WALLTIME_LAST.", "history": "Added in API level 24", "FullName": "public void setRepeatedWallTimeOption (int option)"}, "getStamp(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the timestamp of a field.", "history": "Added in API level 24", "FullName": "protected final int getStamp (int field)"}, "getGregorianDayOfYear()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#computeGregorianFields_E@"], "Permissions": [], "Description": "Returns the day of year (1-based) on the Gregorian calendar as computed by computeGregorianFields().", "history": "Added in API level 24", "FullName": "protected final int getGregorianDayOfYear ()"}, "set(int, int, int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR time field."], ["int", "int: the value used to set the MONTH time field. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DATE time field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the values for the fields year, month, and date. Previous values of other fields are retained. If this is not desired, call @B_android#icu#util#Calendar#clear_E@ first.", "history": "added in API level 24", "FullName": "public final void set (int year, int month, int date)"}, "handleGetLimit(int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: one of the above field numbers"], ["int", "int: one of MINIMUM, GREATEST_MINIMUM, LEAST_MAXIMUM, or MAXIMUM"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclass API for defining limits of different types. Subclasses must implement this method to return limits for the following fields:", "history": "added in API level 24", "FullName": "protected abstract int handleGetLimit (int field, int limitType)"}, "setTimeZone(android.icu.util.TimeZone)": {"Returns": [], "Parameters": [["@B_android#icu#util#TimeZone_E@", "TimeZone: the given time zone."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time zone with the given time zone value.", "history": "Added in API level 24", "FullName": "public void setTimeZone (TimeZone value)"}, "after(java.lang.Object)": {"Returns": [["boolean", "true if the current time of this Calendar is after the time of Calendar when; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the Calendar to be compared with this Calendar."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the time field records. Equivalent to comparing result of conversion to UTC.", "history": "Added in API level 24", "FullName": "public boolean after (Object when)"}, "floorDivide(int,int,int[])": {"Returns": [["int", "the floor of the quotient."]], "Parameters": [["int", "int: the numerator"], ["int", "int: a divisor which must be > 0"], ["int[]", "int: an array of at least one element in which the value numerator mod denominator is returned. Unlike numerator % denominator, this will always be non-negative."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Divide two integers, returning the floor of the quotient, and the modulus remainder. Unlike the built-in division, this is mathematically well-behaved. E.g., -1/4 => 0 and -1%4 => -1, but floorDivide(-1,4) => -1 with remainder[0] => 3.", "history": "Added in API level 24", "FullName": "protected static final int floorDivide (int numerator, int denominator, int[] remainder)"}, "getWeekData()": {"Returns": [["@B_android#icu#util#Calendar#WeekData_E@", "the WeekData for this calendar."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public Calendar.WeekData getWeekData ()"}, "handleGetMonthLength(int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of days in the given month of the given extended year of this calendar system. Subclasses should override this method if they can provide a more correct or more efficient implementation than the default implementation in Calendar.", "history": "added in API level 24", "FullName": "protected int handleGetMonthLength (int extendedYear, int month)"}, "isWeekend(java.util.Date)": {"Returns": [["boolean", "true if the given date and time is part of the weekend"]], "Parameters": [["@B_java#util#Date_E@", "Date: the date and time"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#isWeekend_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public boolean isWeekend (Date date)"}, "internalGet(int)": {"Returns": [["int", "the value for the given time field."]], "Parameters": [["int", "int: the given time field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value for a given time field. This is an internal method for subclasses that does not trigger any calculations.", "history": "Added in API level 24", "FullName": "protected final int internalGet (int field)"}, "handleGetMonthLength(int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of days in the given month of the given extended year of this calendar system. Subclasses should override this method if they can provide a more correct or more efficient implementation than the default implementation in Calendar.", "history": "Added in API level 24", "FullName": "protected int handleGetMonthLength (int extendedYear, int month)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are the same; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this calendar to the specified object. The result is true if and only if the argument is not null and is a Calendar object that represents the same calendar as this object.", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "gregorianMonthLength(int,int)": {"Returns": [["int", "the number of days in the given month"]], "Parameters": [["int", "int: the extended year"], ["int", "int: the 0-based month number"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of a month of the Gregorian calendar.", "history": "Added in API level 24", "FullName": "protected static final int gregorianMonthLength (int y, int m)"}, "internalGet(int, int)": {"Returns": [["int", "the value for the given time field of defaultValue if the field is unset"]], "Parameters": [["int", "int: the given time field."], ["int", "int: value to return if field is not set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value for a given time field, or return the given default value if the field is not set. This is an internal method for subclasses that does not trigger any calculations.", "history": "added in API level 24", "FullName": "protected final int internalGet (int field, int defaultValue)"}, "handleComputeJulianDay(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses may override this. This method calls handleGetMonthLength() to obtain the calendar-specific month length.", "history": "Added in API level 24", "FullName": "protected int handleComputeJulianDay (int bestField)"}, "getMinimum(int)": {"Returns": [["int", "the minimum value for the given time field."]], "Parameters": [["int", "int: the given time field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum value for the given time field. e.g., for Gregorian DAY_OF_MONTH, 1.", "history": "Added in API level 24", "FullName": "public final int getMinimum (int field)"}, "roll(int,int)": {"Returns": [], "Parameters": [["int", "int: the calendar field to roll."], ["int", "int: the amount by which the field should be rolled."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the field is invalid or refers to a field that cannot be handled by this method."]], "SeeAlso": ["@B_android#icu#util#Calendar#roll_E@", "@B_android#icu#util#Calendar#add_E@"], "Permissions": [], "Description": "Rolls (up/down) a specified amount time on the given field. For example, to roll the current date up by three days, you can call roll(Calendar.DATE, 3). If the field is rolled past its maximum allowable value, it will \"wrap\" back to its minimum and continue rolling. For example, calling roll(Calendar.DATE, 10) on a Gregorian calendar set to 4/25/96 will result in the date 4/5/96. When rolling on certain fields, the values of other fields may conflict and need to be changed. For example, when rolling the @B_android#icu#util#Calendar#MONTH_E@ field for the Gregorian date 1/31/96 by +1, the @B_android#icu#util#Calendar#DAY_OF_MONTH_E@ field must be adjusted so that the result is 2/29/96 rather than the invalid 2/31/96. Rolling by a positive value always means rolling forward in time (unless the limit of the field is reached, in which case it may pin or wrap), so for the Gregorian calendar, starting with 100 BC and rolling the year by + 1 results in 99 BC. When eras have a definite beginning and end (as in the Chinese calendar, or as in most eras in the Japanese calendar) then rolling the year past either limit of the era will cause the year to wrap around. When eras only have a limit at one end, then attempting to roll the year past that limit will result in pinning the year at that limit. Note that for most calendars in which era 0 years move forward in time (such as Buddhist, Hebrew, or Islamic), it is possible for add or roll to result in negative years for era 0 (that is the only way to represent years before the calendar epoch in such calendars). @B_android#icu#util#Calendar#ERA_E@, @B_android#icu#util#Calendar#DST_OFFSET_E@, and @B_android#icu#util#Calendar#ZONE_OFFSET_E@. Subclasses may, of course, add support for additional fields in their overrides of roll. This implementation of roll assumes that the behavior of the field is continuous between its minimum and maximum, which are found by calling @B_android#icu#util#Calendar#getActualMinimum_E@ and @B_android#icu#util#Calendar#getActualMaximum_E@. For most such fields, simple addition, subtraction, and modulus operations are sufficient to perform the roll. For week-related fields, the results of @B_android#icu#util#Calendar#getFirstDayOfWeek_E@ and @B_android#icu#util#Calendar#getMinimalDaysInFirstWeek_E@ are also necessary. Subclasses can override these two methods if their values differ from the defaults. Subclasses that have fields for which the assumption of continuity breaks down must overide roll to handle those fields specially. For example, in the Hebrew calendar the month \"Adar I\" only occurs in leap years; in other years the calendar jumps from Shevat (month #4) to Adar (month #6). The @B_android#icu#util#Calendar#roll_E@ method takes this into account, so that rolling the month of Shevat by one gives the proper result (Adar) in a non-leap year.", "history": "Added in API level 24", "FullName": "public void roll (int field, int amount)"}, "isGregorianLeapYear(int)": {"Returns": [["boolean", "true if the given year is a leap year; false otherwise."]], "Parameters": [["int", "int: the given year."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if the given year is a leap year. Returns true if the given year is a leap year.", "history": "Added in API level 24", "FullName": "protected static final boolean isGregorianLeapYear (int year)"}, "getInstance(android.icu.util.ULocale)": {"Returns": [["@B_android#icu#util#Calendar_E@", "a Calendar."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the ulocale for the week data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a calendar using the default time zone and specified locale.", "history": "Added in API level 24", "FullName": "public static Calendar getInstance (ULocale locale)"}, "handleGetYearLength(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of days in the given extended year of this calendar system. Subclasses should override this method if they can provide a more correct or more efficient implementation than the default implementation in Calendar.", "history": "Added in API level 24", "FullName": "protected int handleGetYearLength (int eyear)"}, "getDisplayName(java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#util#Locale_E@", "Locale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this calendar in the language of the given locale.", "history": "Added in API level 24", "FullName": "public String getDisplayName (Locale loc)"}, "newestStamp(int,int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the newest stamp of a given range of fields.", "history": "Added in API level 24", "FullName": "protected int newestStamp (int first, int last, int bestStampSoFar)"}, "computeGregorianFields(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#computeGregorianMonthStart_E@"], "Permissions": [], "Description": "Compute the Gregorian calendar year, month, and day of month from the Julian day. These values are not stored in fields, but in member variables gregorianXxx. They are used for time zone computations and by subclasses that are Gregorian derivatives. Subclasses may call this method to perform a Gregorian calendar millis->fields computation. To perform a Gregorian calendar fields->millis computation, call computeGregorianMonthStart().", "history": "Added in API level 24", "FullName": "protected final void computeGregorianFields (int julianDay)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this calendar."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this calendar. This method is intended to be used only for debugging purposes, and the format of the returned string may vary between implementations. The returned string may be empty but may not be null.", "history": "Added in API level 24", "FullName": "public String toString ()"}, "floorDivide(long,int,int[])": {"Returns": [["int", "the floor of the quotient."]], "Parameters": [["long", "long: the numerator"], ["int", "int: a divisor which must be > 0"], ["int[]", "int: an array of at least one element in which the value numerator mod denominator is returned. Unlike numerator % denominator, this will always be non-negative."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Divide two integers, returning the floor of the quotient, and the modulus remainder. Unlike the built-in division, this is mathematically well-behaved. E.g., -1/4 => 0 and -1%4 => -1, but floorDivide(-1,4) => -1 with remainder[0] => 3.", "history": "Added in API level 24", "FullName": "protected static final int floorDivide (long numerator, int denominator, int[] remainder)"}, "weekNumber(int,int)": {"Returns": [["int", "The week number (one-based), or zero if the day falls before the first week because @B_android#icu#util#Calendar#getMinimalDaysInFirstWeek_E@ is more than one."]], "Parameters": [["int", "int: The @B_android#icu#util#Calendar#DAY_OF_YEAR_E@ or @B_android#icu#util#Calendar#DAY_OF_MONTH_E@ whose week number is desired. Should be 1 for the first day of the period."], ["int", "int: The @B_android#icu#util#Calendar#DAY_OF_WEEK_E@ for the day corresponding to the dayOfPeriod parameter. 1-based with 1=Sunday."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the week number of a day, within a period. This may be the week number in a year, or the week number in a month. Usually this will be a value >= 1, but if some initial days of the period are excluded from week 1, because @B_android#icu#util#Calendar#getMinimalDaysInFirstWeek_E@ is > 1, then the week number will be zero for those initial days. This method requires the day of week for the given date in order to determine the result. This method is intended for use by subclasses in implementing their @B_android#icu#util#Calendar#computeTime_E@ and/or @B_android#icu#util#Calendar#computeFields_E@ methods. It is often useful in @B_android#icu#util#Calendar#getActualMinimum_E@ and @B_android#icu#util#Calendar#getActualMaximum_E@ as well.", "history": "Added in API level 24", "FullName": "protected final int weekNumber (int dayOfPeriod, int dayOfWeek)"}, "getKeywordValuesForLocale(java.lang.String,android.icu.util.ULocale,boolean)": {"Returns": [["@B_java#lang#String_E@", "an array of string values for the given key and the locale."]], "Parameters": [["@B_java#lang#String_E@", "String: one of the keys supported by this service. For now, only \"calendar\" is supported."], ["@B_android#icu#util#ULocale_E@", "ULocale: the locale"], ["boolean", "boolean: if set to true it will return only commonly used values with the given locale in preferred order. Otherwise, it will return all the available values for the locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static final String[] getKeywordValuesForLocale (String key, ULocale locale, boolean commonlyUsed)"}, "pinField(int)": {"Returns": [], "Parameters": [["int", "int: The calendar field whose value should be pinned."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#getActualMinimum_E@", "@B_android#icu#util#Calendar#getActualMaximum_E@"], "Permissions": [], "Description": "Adjust the specified field so that it is within the allowable range for the date to which this calendar is set. For example, in a Gregorian calendar pinning the @B_android#icu#util#Calendar#DAY_OF_MONTH_E@ field for a calendar set to April 31 would cause it to be set to April 30. This utility method is intended for use by subclasses that need to implement their own overrides of @B_android#icu#util#Calendar#roll_E@ and @B_android#icu#util#Calendar#add_E@. pinField is implemented in terms of @B_android#icu#util#Calendar#getActualMinimum_E@ and @B_android#icu#util#Calendar#getActualMaximum_E@. If either of those methods uses a slow, iterative algorithm for a particular field, it would be unwise to attempt to call pinField for that field. If you really do need to do so, you should override this method to do something more efficient for that field.", "history": "Added in API level 24", "FullName": "protected void pinField (int field)"}, "floorDivide(int, int, int[])": {"Returns": [["int", "the floor of the quotient."]], "Parameters": [["int", "int: the numerator"], ["int", "int: a divisor which must be > 0"], ["int[]", "int: an array of at least one element in which the value numerator mod denominator is returned. Unlike numerator % denominator, this will always be non-negative."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Divide two integers, returning the floor of the quotient, and the modulus remainder. Unlike the built-in division, this is mathematically well-behaved. E.g., -1/4 => 0 and -1%4 => -1, but floorDivide(-1,4) => -1 with remainder[0] => 3.", "history": "added in API level 24", "FullName": "protected static final int floorDivide (int numerator, int denominator, int[] remainder)"}, "getGregorianDayOfMonth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#computeGregorianFields_E@"], "Permissions": [], "Description": "Returns the day of month (1-based) on the Gregorian calendar as computed by computeGregorianFields().", "history": "Added in API level 24", "FullName": "protected final int getGregorianDayOfMonth ()"}, "getActualMaximum(int)": {"Returns": [["int", "the maximum of the given field for the current date of this calendar"]], "Parameters": [["int", "int: the field whose maximum is desired"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#getMaximum_E@", "@B_android#icu#util#Calendar#getLeastMaximum_E@"], "Permissions": [], "Description": "Returns the maximum value that this field could have, given the current date. For example, with the Gregorian date February 3, 1997 and the @B_android#icu#util#Calendar#DAY_OF_MONTH_E@ field, the actual maximum is 28; for February 3, 1996 it is 29. The actual maximum computation ignores smaller fields and the current value of like-sized fields. For example, the actual maximum of the DAY_OF_YEAR or MONTH depends only on the year and supra-year fields. The actual maximum of the DAY_OF_MONTH depends, in addition, on the MONTH field and any other fields at that granularity (such as IS_LEAP_MONTH). The DAY_OF_WEEK_IN_MONTH field does not depend on the current DAY_OF_WEEK; it returns the maximum for any day of week in the current month. Likewise for the WEEK_OF_MONTH and WEEK_OF_YEAR fields.", "history": "Added in API level 24", "FullName": "public int getActualMaximum (int field)"}, "getInstance(java.util.Locale)": {"Returns": [["@B_android#icu#util#Calendar_E@", "a Calendar."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale for the week data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a calendar using the default time zone and specified locale.", "history": "Added in API level 24", "FullName": "public static Calendar getInstance (Locale aLocale)"}, "clear(int)": {"Returns": [], "Parameters": [["int", "int: the time field to be cleared."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the value in the given time field.", "history": "Added in API level 24", "FullName": "public final void clear (int field)"}, "set(int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR time field."], ["int", "int: the value used to set the MONTH time field. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DATE time field."], ["int", "int: the value used to set the HOUR_OF_DAY time field."], ["int", "int: the value used to set the MINUTE time field."], ["int", "int: the value used to set the SECOND time field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the values for the fields year, month, date, hour, minute, and second. Previous values of other fields are retained. If this is not desired, call @B_android#icu#util#Calendar#clear_E@ first.", "history": "Added in API level 24", "FullName": "public final void set (int year, int month, int date, int hour, int minute, int second)"}, "gregorianMonthLength(int, int)": {"Returns": [["int", "the number of days in the given month"]], "Parameters": [["int", "int: the extended year"], ["int", "int: the 0-based month number"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of a month of the Gregorian calendar.", "history": "added in API level 24", "FullName": "protected static final int gregorianMonthLength (int y, int m)"}, "before(java.lang.Object)": {"Returns": [["boolean", "true if the current time of this Calendar is before the time of Calendar when; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the Calendar to be compared with this Calendar."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the time field records. Equivalent to comparing result of conversion to UTC.", "history": "Added in API level 24", "FullName": "public boolean before (Object when)"}, "setFirstDayOfWeek(int)": {"Returns": [], "Parameters": [["int", "int: the given first day of the week, where 1 = @B_android#icu#util#Calendar#SUNDAY_E@ and 7 = @B_android#icu#util#Calendar#SATURDAY_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets what the first day of the week is, where 1 = @B_android#icu#util#Calendar#SUNDAY_E@ and 7 = @B_android#icu#util#Calendar#SATURDAY_E@.", "history": "Added in API level 24", "FullName": "public void setFirstDayOfWeek (int value)"}, "weekNumber(int, int)": {"Returns": [["int", "The week number (one-based), or zero if the day falls before the first week because @B_android#icu#util#Calendar#getMinimalDaysInFirstWeek_E@ is more than one."]], "Parameters": [["int", "int: The @B_android#icu#util#Calendar#DAY_OF_YEAR_E@ or @B_android#icu#util#Calendar#DAY_OF_MONTH_E@ whose week number is desired. Should be 1 for the first day of the period."], ["int", "int: The @B_android#icu#util#Calendar#DAY_OF_WEEK_E@ for the day corresponding to the dayOfPeriod parameter. 1-based with 1=Sunday."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the week number of a day, within a period. This may be the week number in a year, or the week number in a month. Usually this will be a value >= 1, but if some initial days of the period are excluded from week 1, because @B_android#icu#util#Calendar#getMinimalDaysInFirstWeek_E@ is > 1, then the week number will be zero for those initial days. This method requires the day of week for the given date in order to determine the result. This method is intended for use by subclasses in implementing their @B_android#icu#util#Calendar#computeTime_E@ and/or @B_android#icu#util#Calendar#computeFields_E@ methods. It is often useful in @B_android#icu#util#Calendar#getActualMinimum_E@ and @B_android#icu#util#Calendar#getActualMaximum_E@ as well.", "history": "added in API level 24", "FullName": "protected final int weekNumber (int dayOfPeriod, int dayOfWeek)"}, "newestStamp(int, int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the newest stamp of a given range of fields.", "history": "added in API level 24", "FullName": "protected int newestStamp (int first, int last, int bestStampSoFar)"}, "isLenient()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tell whether date/time interpretation is to be lenient.", "history": "Added in API level 24", "FullName": "public boolean isLenient ()"}, "add(int, int)": {"Returns": [], "Parameters": [["int", "int: the time field."], ["int", "int: the amount to add to the field."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the field is invalid or refers to a field that cannot be handled by this method."]], "SeeAlso": ["@B_android#icu#util#Calendar#roll_E@"], "Permissions": [], "Description": "Add a signed amount to a specified field, using this calendar's rules. For example, to add three days to the current date, you can call add(Calendar.DATE, 3). When adding to certain fields, the values of other fields may conflict and need to be changed. For example, when adding one to the @B_android#icu#util#Calendar#MONTH_E@ field for the Gregorian date 1/31/96, the @B_android#icu#util#Calendar#DAY_OF_MONTH_E@ field must be adjusted so that the result is 2/29/96 rather than the invalid 2/31/96. Adding a positive value always means moving forward in time, so for the Gregorian calendar, starting with 100 BC and adding +1 to year results in 99 BC (even though this actually reduces the numeric value of the field itself). @B_android#icu#util#Calendar#ERA_E@, @B_android#icu#util#Calendar#DST_OFFSET_E@, and @B_android#icu#util#Calendar#ZONE_OFFSET_E@. Subclasses may, of course, add support for additional fields in their overrides of add. This implementation of add assumes that the behavior of the field is continuous between its minimum and maximum, which are found by calling @B_android#icu#util#Calendar#getActualMinimum_E@ and @B_android#icu#util#Calendar#getActualMaximum_E@. For such fields, simple arithmetic operations are sufficient to perform the add. Subclasses that have fields for which this assumption of continuity breaks down must overide add to handle those fields specially. For example, in the Hebrew calendar the month \"Adar I\" only occurs in leap years; in other years the calendar jumps from Shevat (month #4) to Adar (month #6). The @B_android#icu#util#HebrewCalendar#add_E@ method takes this into account, so that adding one month to a date in Shevat gives the proper result (Adar) in a non-leap year.", "history": "added in API level 24", "FullName": "public void add (int field, int amount)"}, "roll(int, int)": {"Returns": [], "Parameters": [["int", "int: the calendar field to roll."], ["int", "int: the amount by which the field should be rolled."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the field is invalid or refers to a field that cannot be handled by this method."]], "SeeAlso": ["@B_android#icu#util#Calendar#roll_E@", "@B_android#icu#util#Calendar#add_E@"], "Permissions": [], "Description": "Rolls (up/down) a specified amount time on the given field. For example, to roll the current date up by three days, you can call roll(Calendar.DATE, 3). If the field is rolled past its maximum allowable value, it will \"wrap\" back to its minimum and continue rolling. For example, calling roll(Calendar.DATE, 10) on a Gregorian calendar set to 4/25/96 will result in the date 4/5/96. When rolling on certain fields, the values of other fields may conflict and need to be changed. For example, when rolling the @B_android#icu#util#Calendar#MONTH_E@ field for the Gregorian date 1/31/96 by +1, the @B_android#icu#util#Calendar#DAY_OF_MONTH_E@ field must be adjusted so that the result is 2/29/96 rather than the invalid 2/31/96. Rolling by a positive value always means rolling forward in time (unless the limit of the field is reached, in which case it may pin or wrap), so for the Gregorian calendar, starting with 100 BC and rolling the year by + 1 results in 99 BC. When eras have a definite beginning and end (as in the Chinese calendar, or as in most eras in the Japanese calendar) then rolling the year past either limit of the era will cause the year to wrap around. When eras only have a limit at one end, then attempting to roll the year past that limit will result in pinning the year at that limit. Note that for most calendars in which era 0 years move forward in time (such as Buddhist, Hebrew, or Islamic), it is possible for add or roll to result in negative years for era 0 (that is the only way to represent years before the calendar epoch in such calendars). @B_android#icu#util#Calendar#ERA_E@, @B_android#icu#util#Calendar#DST_OFFSET_E@, and @B_android#icu#util#Calendar#ZONE_OFFSET_E@. Subclasses may, of course, add support for additional fields in their overrides of roll. This implementation of roll assumes that the behavior of the field is continuous between its minimum and maximum, which are found by calling @B_android#icu#util#Calendar#getActualMinimum_E@ and @B_android#icu#util#Calendar#getActualMaximum_E@. For most such fields, simple addition, subtraction, and modulus operations are sufficient to perform the roll. For week-related fields, the results of @B_android#icu#util#Calendar#getFirstDayOfWeek_E@ and @B_android#icu#util#Calendar#getMinimalDaysInFirstWeek_E@ are also necessary. Subclasses can override these two methods if their values differ from the defaults. Subclasses that have fields for which the assumption of continuity breaks down must overide roll to handle those fields specially. For example, in the Hebrew calendar the month \"Adar I\" only occurs in leap years; in other years the calendar jumps from Shevat (month #4) to Adar (month #6). The @B_android#icu#util#Calendar#roll_E@ method takes this into account, so that rolling the month of Shevat by one gives the proper result (Adar) in a non-leap year.", "history": "added in API level 24", "FullName": "public void roll (int field, int amount)"}, "getActualMinimum(int)": {"Returns": [["int", "the minimum of the given field for the current date of this calendar"]], "Parameters": [["int", "int: the field whose actual minimum value is desired."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#getMinimum_E@", "@B_android#icu#util#Calendar#getGreatestMinimum_E@"], "Permissions": [], "Description": "Returns the minimum value that this field could have, given the current date. For most fields, this is the same as @B_android#icu#util#Calendar#getMinimum_E@ and @B_android#icu#util#Calendar#getGreatestMinimum_E@. However, some fields, especially those related to week number, are more complicated. For example, assume @B_android#icu#util#Calendar#getMinimalDaysInFirstWeek_E@ returns 4 and @B_android#icu#util#Calendar#getFirstDayOfWeek_E@ returns SUNDAY. If the first day of the month is Sunday, Monday, Tuesday, or Wednesday there will be four or more days in the first week, so it will be week number 1, and getActualMinimum(WEEK_OF_MONTH) will return 1. However, if the first of the month is a Thursday, Friday, or Saturday, there are not four days in that week, so it is week number 0, and getActualMinimum(WEEK_OF_MONTH) will return 0.", "history": "Added in API level 24", "FullName": "public int getActualMinimum (int field)"}, "getSkippedWallTimeOption()": {"Returns": [["int", "the behavior for handling skipped wall time, one of WALLTIME_FIRST, WALLTIME_LAST and WALLTIME_NEXT_VALID."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#setSkippedWallTimeOption_E@", "@B_android#icu#util#Calendar_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public int getSkippedWallTimeOption ()"}, "set(int,int)": {"Returns": [], "Parameters": [["int", "int: the given time field."], ["int", "int: the value to be set for the given time field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time field with the given value.", "history": "Added in API level 24", "FullName": "public final void set (int field, int value)"}, "getInstance()": {"Returns": [["@B_android#icu#util#Calendar_E@", "a Calendar."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a calendar using the default time zone and locale.", "history": "Added in API level 24", "FullName": "public static Calendar getInstance ()"}, "weekNumber(int, int, int)": {"Returns": [["int", "The week number (one-based), or zero if the day falls before the first week because @B_android#icu#util#Calendar#getMinimalDaysInFirstWeek_E@ is more than one."]], "Parameters": [["int", "int: The @B_android#icu#util#Calendar#DAY_OF_YEAR_E@ or @B_android#icu#util#Calendar#DAY_OF_MONTH_E@ whose week number is desired. Should be 1 for the first day of the period."], ["int", "int: The @B_android#icu#util#Calendar#DAY_OF_YEAR_E@ or @B_android#icu#util#Calendar#DAY_OF_MONTH_E@ for a day in the period whose @B_android#icu#util#Calendar#DAY_OF_WEEK_E@ is specified by the dayOfWeek parameter. Should be 1 for first day of period."], ["int", "int: The @B_android#icu#util#Calendar#DAY_OF_WEEK_E@ for the day corresponding to the dayOfPeriod parameter. 1-based with 1=Sunday."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the week number of a day, within a period. This may be the week number in a year or the week number in a month. Usually this will be a value >= 1, but if some initial days of the period are excluded from week 1, because @B_android#icu#util#Calendar#getMinimalDaysInFirstWeek_E@ is > 1, then the week number will be zero for those initial days. This method requires the day number and day of week for some known date in the period in order to determine the day of week on the desired day. This method is intended for use by subclasses in implementing their @B_android#icu#util#Calendar#computeTime_E@ and/or @B_android#icu#util#Calendar#computeFields_E@ methods. It is often useful in @B_android#icu#util#Calendar#getActualMinimum_E@ and @B_android#icu#util#Calendar#getActualMaximum_E@ as well. This variant is handy for computing the week number of some other day of a period (often the first or last day of the period) when its day of the week is not known but the day number and day of week for some other day in the period (e.g. the current date) is known.", "history": "added in API level 24", "FullName": "protected int weekNumber (int desiredDay, int dayOfPeriod, int dayOfWeek)"}, "newerField(int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the field that is newer, either defaultField, or alternateField. If neither is newer or neither is set, return defaultField.", "history": "added in API level 24", "FullName": "protected int newerField (int defaultField, int alternateField)"}, "floorDivide(int,int)": {"Returns": [["int", "the floor of the quotient."]], "Parameters": [["int", "int: the numerator"], ["int", "int: a divisor which must be > 0"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Divide two integers, returning the floor of the quotient. Unlike the built-in division, this is mathematically well-behaved. E.g., -1/4 => 0 but floorDivide(-1,4) => -1.", "history": "Added in API level 24", "FullName": "protected static final int floorDivide (int numerator, int denominator)"}, "computeGregorianMonthStart(int, int)": {"Returns": [["int", "the Julian day number of the day before the first day of the given month in the given extended year"]], "Parameters": [["int", "int: extended Gregorian year"], ["int", "int: zero-based Gregorian month"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#computeGregorianFields_E@"], "Permissions": [], "Description": "Compute the Julian day of a month of the Gregorian calendar. Subclasses may call this method to perform a Gregorian calendar fields->millis computation. To perform a Gregorian calendar millis->fields computation, call computeGregorianFields().", "history": "added in API level 24", "FullName": "protected int computeGregorianMonthStart (int year, int month)"}, "internalGetTimeInMillis()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current milliseconds without recomputing.", "history": "Added in API level 24", "FullName": "protected final long internalGetTimeInMillis ()"}, "millisToJulianDay(long)": {"Returns": [["int", "the Julian day number."]], "Parameters": [["long", "long: the given milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts time as milliseconds to Julian day.", "history": "Added in API level 24", "FullName": "protected static final int millisToJulianDay (long millis)"}, "validateField(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#validateField_E@"], "Permissions": [], "Description": "Validate a single field of this calendar. Subclasses should override this method to validate any calendar-specific fields. Generic fields can be handled by Calendar.validateField().", "history": "Added in API level 24", "FullName": "protected void validateField (int field)"}, "handleGetLimit(int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: one of the above field numbers"], ["int", "int: one of MINIMUM, GREATEST_MINIMUM, LEAST_MAXIMUM, or MAXIMUM"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclass API for defining limits of different types. Subclasses must implement this method to return limits for the following fields:", "history": "Added in API level 24", "FullName": "protected abstract int handleGetLimit (int field, int limitType)"}, "add(int,int)": {"Returns": [], "Parameters": [["int", "int: the time field."], ["int", "int: the amount to add to the field."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the field is invalid or refers to a field that cannot be handled by this method."]], "SeeAlso": ["@B_android#icu#util#Calendar#roll_E@"], "Permissions": [], "Description": "Add a signed amount to a specified field, using this calendar's rules. For example, to add three days to the current date, you can call add(Calendar.DATE, 3). When adding to certain fields, the values of other fields may conflict and need to be changed. For example, when adding one to the @B_android#icu#util#Calendar#MONTH_E@ field for the Gregorian date 1/31/96, the @B_android#icu#util#Calendar#DAY_OF_MONTH_E@ field must be adjusted so that the result is 2/29/96 rather than the invalid 2/31/96. Adding a positive value always means moving forward in time, so for the Gregorian calendar, starting with 100 BC and adding +1 to year results in 99 BC (even though this actually reduces the numeric value of the field itself). @B_android#icu#util#Calendar#ERA_E@, @B_android#icu#util#Calendar#DST_OFFSET_E@, and @B_android#icu#util#Calendar#ZONE_OFFSET_E@. Subclasses may, of course, add support for additional fields in their overrides of add. This implementation of add assumes that the behavior of the field is continuous between its minimum and maximum, which are found by calling @B_android#icu#util#Calendar#getActualMinimum_E@ and @B_android#icu#util#Calendar#getActualMaximum_E@. For such fields, simple arithmetic operations are sufficient to perform the add. Subclasses that have fields for which this assumption of continuity breaks down must overide add to handle those fields specially. For example, in the Hebrew calendar the month \"Adar I\" only occurs in leap years; in other years the calendar jumps from Shevat (month #4) to Adar (month #6). The @B_android#icu#util#HebrewCalendar#add_E@ method takes this into account, so that adding one month to a date in Shevat gives the proper result (Adar) in a non-leap year.", "history": "Added in API level 24", "FullName": "public void add (int field, int amount)"}, "weekNumber(int,int,int)": {"Returns": [["int", "The week number (one-based), or zero if the day falls before the first week because @B_android#icu#util#Calendar#getMinimalDaysInFirstWeek_E@ is more than one."]], "Parameters": [["int", "int: The @B_android#icu#util#Calendar#DAY_OF_YEAR_E@ or @B_android#icu#util#Calendar#DAY_OF_MONTH_E@ whose week number is desired. Should be 1 for the first day of the period."], ["int", "int: The @B_android#icu#util#Calendar#DAY_OF_YEAR_E@ or @B_android#icu#util#Calendar#DAY_OF_MONTH_E@ for a day in the period whose @B_android#icu#util#Calendar#DAY_OF_WEEK_E@ is specified by the dayOfWeek parameter. Should be 1 for first day of period."], ["int", "int: The @B_android#icu#util#Calendar#DAY_OF_WEEK_E@ for the day corresponding to the dayOfPeriod parameter. 1-based with 1=Sunday."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the week number of a day, within a period. This may be the week number in a year or the week number in a month. Usually this will be a value >= 1, but if some initial days of the period are excluded from week 1, because @B_android#icu#util#Calendar#getMinimalDaysInFirstWeek_E@ is > 1, then the week number will be zero for those initial days. This method requires the day number and day of week for some known date in the period in order to determine the day of week on the desired day. This method is intended for use by subclasses in implementing their @B_android#icu#util#Calendar#computeTime_E@ and/or @B_android#icu#util#Calendar#computeFields_E@ methods. It is often useful in @B_android#icu#util#Calendar#getActualMinimum_E@ and @B_android#icu#util#Calendar#getActualMaximum_E@ as well. This variant is handy for computing the week number of some other day of a period (often the first or last day of the period) when its day of the week is not known but the day number and day of week for some other day in the period (e.g. the current date) is known.", "history": "Added in API level 24", "FullName": "protected int weekNumber (int desiredDay, int dayOfPeriod, int dayOfWeek)"}, "validateFields()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#isLenient_E@", "@B_android#icu#util#Calendar#validateField_E@"], "Permissions": [], "Description": "Ensure that each field is within its valid range by calling @B_android#icu#util#Calendar#validateField_E@ on each field that has been set. This method should only be called if this calendar is not lenient.", "history": "Added in API level 24", "FullName": "protected void validateFields ()"}, "get(int)": {"Returns": [["int", "the value for the given time field."]], "Parameters": [["int", "int: the given time field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value for a given time field.", "history": "Added in API level 24", "FullName": "public final int get (int field)"}, "prepareGetActual(int,boolean)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prepare this calendar for computing the actual minimum or maximum. This method modifies this calendar's fields; it is called on a temporary calendar. Rationale: The semantics of getActualXxx() is to return the maximum or minimum value that the given field can take, taking into account other relevant fields. In general these other fields are larger fields. For example, when computing the actual maximum DAY_OF_MONTH, the current value of DAY_OF_MONTH itself is ignored, as is the value of any field smaller. The time fields all have fixed minima and maxima, so we don't need to worry about them. This also lets us set the MILLISECONDS_IN_DAY to zero to erase any effects the time fields might have when computing date fields. DAY_OF_WEEK is adjusted specially for the WEEK_OF_MONTH and WEEK_OF_YEAR fields to ensure that they are computed correctly.", "history": "Added in API level 24", "FullName": "protected void prepareGetActual (int field, boolean isMinimum)"}, "getTime()": {"Returns": [["@B_java#util#Date_E@", "the current time."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this Calendar's current time.", "history": "Added in API level 24", "FullName": "public final Date getTime ()"}, "set(int,int,int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR time field."], ["int", "int: the value used to set the MONTH time field. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DATE time field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the values for the fields year, month, and date. Previous values of other fields are retained. If this is not desired, call @B_android#icu#util#Calendar#clear_E@ first.", "history": "Added in API level 24", "FullName": "public final void set (int year, int month, int date)"}, "getType()": {"Returns": [["@B_java#lang#String_E@", "legacy calendar type name string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "See type=\"old type name\" for the calendar attribute of locale IDs at http://www.unicode.org/reports/tr35/#Key_Type_Definitions", "history": "Added in API level 24", "FullName": "public String getType ()"}, "computeGregorianMonthStart(int,int)": {"Returns": [["int", "the Julian day number of the day before the first day of the given month in the given extended year"]], "Parameters": [["int", "int: extended Gregorian year"], ["int", "int: zero-based Gregorian month"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#computeGregorianFields_E@"], "Permissions": [], "Description": "Compute the Julian day of a month of the Gregorian calendar. Subclasses may call this method to perform a Gregorian calendar fields->millis computation. To perform a Gregorian calendar millis->fields computation, call computeGregorianFields().", "history": "Added in API level 24", "FullName": "protected int computeGregorianMonthStart (int year, int month)"}, "resolveFields(int[][][])": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int[][][]", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given a precedence table, return the newest field combination in the table, or -1 if none is found. The precedence table is a 3-dimensional array of integers. It may be thought of as an array of groups. Each group is an array of lines. Each line is an array of field numbers. Within a line, if all fields are set, then the time stamp of the line is taken to be the stamp of the most recently set field. If any field of a line is unset, then the line fails to match. Within a group, the line with the newest time stamp is selected. The first field of the line is returned to indicate which line matched. In some cases, it may be desirable to map a line to field that whose stamp is NOT examined. For example, if the best field is DAY_OF_WEEK then the DAY_OF_WEEK_IN_MONTH algorithm may be used. In order to do this, insert the value REMAP_RESOLVE | F at the start of the line, where F is the desired return field value. This field will NOT be examined; it only determines the return value if the other fields in the line are the newest. If all lines of a group contain at least one unset field, then no line will match, and the group as a whole will fail to match. In that case, the next group will be processed. If all groups fail to match, then -1 is returned.", "history": "Added in API level 24", "FullName": "protected int resolveFields (int[][][] precedenceTable)"}, "getLeastMaximum(int)": {"Returns": [["int", "the lowest maximum value for the given time field."]], "Parameters": [["int", "int: the given time field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the lowest maximum value for the given field if varies. Otherwise same as getMaximum(). e.g., for Gregorian DAY_OF_MONTH, 28.", "history": "Added in API level 24", "FullName": "public final int getLeastMaximum (int field)"}, "getFieldCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "set() and get() are 0..getFieldCount()-1.", "history": "Added in API level 24", "FullName": "public final int getFieldCount ()"}, "handleComputeMonthStart(int, int, boolean)": {"Returns": [["int", "the Julian day number of the day before the first day of the given month and year"]], "Parameters": [["int", "int: the extended year"], ["int", "int: the zero-based month, or 0 if useMonth is false"], ["boolean", "boolean: if false, compute the day before the first day of the given year, otherwise, compute the day before the first day of the given month"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Julian day number of day before the first day of the given month in the given extended year. Subclasses should override this method to implement their calendar system.", "history": "added in API level 24", "FullName": "protected abstract int handleComputeMonthStart (int eyear, int month, boolean useMonth)"}, "handleGetDateFormat(java.lang.String,java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a DateFormat appropriate to this calendar"]], "Parameters": [["@B_java#lang#String_E@", "String: the pattern, specific to the DateFormat subclass"], ["@B_java#util#Locale_E@", "Locale: the locale for which the symbols should be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a DateFormat appropriate to this calendar. This is a framework method for subclasses to override. This method is responsible for creating the calendar-specific DateFormat and DateFormatSymbols objects as needed.", "history": "Added in API level 24", "FullName": "protected DateFormat handleGetDateFormat (String pattern, Locale locale)"}, "handleComputeMonthStart(int,int,boolean)": {"Returns": [["int", "the Julian day number of the day before the first day of the given month and year"]], "Parameters": [["int", "int: the extended year"], ["int", "int: the zero-based month, or 0 if useMonth is false"], ["boolean", "boolean: if false, compute the day before the first day of the given year, otherwise, compute the day before the first day of the given month"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Julian day number of day before the first day of the given month in the given extended year. Subclasses should override this method to implement their calendar system.", "history": "Added in API level 24", "FullName": "protected abstract int handleComputeMonthStart (int eyear, int month, boolean useMonth)"}, "handleCreateFields()": {"Returns": [["int[]", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses that use additional fields beyond those defined in Calendar should override this method to return an int[] array of the appropriate length. The length must be at least BASE_FIELD_COUNT and no more than MAX_FIELD_COUNT.", "history": "Added in API level 24", "FullName": "protected int[] handleCreateFields ()"}, "floorDivide(long, long)": {"Returns": [["long", "the floor of the quotient."]], "Parameters": [["long", "long: the numerator"], ["long", "long: a divisor which must be > 0"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Divide two long integers, returning the floor of the quotient. Unlike the built-in division, this is mathematically well-behaved. E.g., -1/4 => 0 but floorDivide(-1,4) => -1.", "history": "added in API level 24", "FullName": "protected static final long floorDivide (long numerator, long denominator)"}, "gregorianPreviousMonthLength(int,int)": {"Returns": [["int", "the number of days in the month previous to the given month"]], "Parameters": [["int", "int: the extended year"], ["int", "int: the 0-based month number"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of a previous month of the Gregorian calendar.", "history": "Added in API level 24", "FullName": "protected static final int gregorianPreviousMonthLength (int y, int m)"}, "getTimeInMillis()": {"Returns": [["long", "the current time as UTC milliseconds from the epoch."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this Calendar's current time as a long.", "history": "Added in API level 24", "FullName": "public long getTimeInMillis ()"}, "getRepeatedWallTimeOption()": {"Returns": [["int", "the behavior for handling repeating wall time, either WALLTIME_FIRST or WALLTIME_LAST."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#setRepeatedWallTimeOption_E@", "@B_android#icu#util#Calendar_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public int getRepeatedWallTimeOption ()"}, "computeZoneOffset(long, int)": {"Returns": [["int", "total zone offset (raw + DST) for the given moment"]], "Parameters": [["long", "long: milliseconds of the date fields (local midnight millis)"], ["int", "int: milliseconds of the time fields; may be out or range."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ICU 60 This method can assume EXTENDED_YEAR has been set.", "history": "added in API level 24", "FullName": "protected int computeZoneOffset (long millis, int millisInDay)"}, "handleGetDateFormat(java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a DateFormat appropriate to this calendar"]], "Parameters": [["@B_java#lang#String_E@", "String: the pattern, specific to the DateFormat subclass"], ["@B_android#icu#util#ULocale_E@", "ULocale: the locale for which the symbols should be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a DateFormat appropriate to this calendar. This is a framework method for subclasses to override. This method is responsible for creating the calendar-specific DateFormat and DateFormatSymbols objects as needed.", "history": "Added in API level 24", "FullName": "protected DateFormat handleGetDateFormat (String pattern, ULocale locale)"}, "set(int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR time field."], ["int", "int: the value used to set the MONTH time field. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DATE time field."], ["int", "int: the value used to set the HOUR_OF_DAY time field."], ["int", "int: the value used to set the MINUTE time field."], ["int", "int: the value used to set the SECOND time field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the values for the fields year, month, date, hour, minute, and second. Previous values of other fields are retained. If this is not desired, call @B_android#icu#util#Calendar#clear_E@ first.", "history": "added in API level 24", "FullName": "public final void set (int year, int month, int date, int hour, int minute, int second)"}, "prepareGetActual(int, boolean)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prepare this calendar for computing the actual minimum or maximum. This method modifies this calendar's fields; it is called on a temporary calendar. Rationale: The semantics of getActualXxx() is to return the maximum or minimum value that the given field can take, taking into account other relevant fields. In general these other fields are larger fields. For example, when computing the actual maximum DAY_OF_MONTH, the current value of DAY_OF_MONTH itself is ignored, as is the value of any field smaller. The time fields all have fixed minima and maxima, so we don't need to worry about them. This also lets us set the MILLISECONDS_IN_DAY to zero to erase any effects the time fields might have when computing date fields. DAY_OF_WEEK is adjusted specially for the WEEK_OF_MONTH and WEEK_OF_YEAR fields to ensure that they are computed correctly.", "history": "added in API level 24", "FullName": "protected void prepareGetActual (int field, boolean isMinimum)"}, "roll(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the calendar field to roll."], ["boolean", "boolean: indicates if the value of the specified time field is to be rolled up or rolled down. Use true if rolling up, false otherwise."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the field is invalid or refers to a field that cannot be handled by this method."]], "SeeAlso": ["@B_android#icu#util#Calendar#roll_E@", "@B_android#icu#util#Calendar#add_E@"], "Permissions": [], "Description": "Rolls (up/down) a single unit of time on the given field. If the field is rolled past its maximum allowable value, it will \"wrap\" back to its minimum and continue rolling. For example, to roll the current date up by one day, you can call: roll(DATE, true) When rolling on the @B_android#icu#util#Calendar#YEAR_E@ field, it will roll the year value in the range between 1 and the value returned by calling @B_android#icu#util#Calendar#getMaximum_E@(@B_android#icu#util#Calendar#YEAR_E@). When rolling on certain fields, the values of other fields may conflict and need to be changed. For example, when rolling the MONTH field for the Gregorian date 1/31/96 upward, the DAY_OF_MONTH field must be adjusted so that the result is 2/29/96 rather than the invalid 2/31/96. Rolling up always means rolling forward in time (unless the limit of the field is reached, in which case it may pin or wrap), so for the Gregorian calendar, starting with 100 BC and rolling the year up results in 99 BC. When eras have a definite beginning and end (as in the Chinese calendar, or as in most eras in the Japanese calendar) then rolling the year past either limit of the era will cause the year to wrap around. When eras only have a limit at one end, then attempting to roll the year past that limit will result in pinning the year at that limit. Note that for most calendars in which era 0 years move forward in time (such as Buddhist, Hebrew, or Islamic), it is possible for add or roll to result in negative years for era 0 (that is the only way to represent years before the calendar epoch in such calendars). not necessarily equivalent to calling", "history": "added in API level 24", "FullName": "public final void roll (int field, boolean up)"}, "getGreatestMinimum(int)": {"Returns": [["int", "the highest minimum value for the given time field."]], "Parameters": [["int", "int: the given time field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the highest minimum value for the given field if varies. Otherwise same as getMinimum(). For Gregorian, no difference.", "history": "Added in API level 24", "FullName": "public final int getGreatestMinimum (int field)"}, "setSkippedWallTimeOption(int)": {"Returns": [], "Parameters": [["int", "int: the behavior for handling skipped wall time at positive time zone offset transitions, one of WALLTIME_FIRST, WALLTIME_LAST and WALLTIME_NEXT_VALID."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "when option is not any of WALLTIME_FIRST, WALLTIME_LAST and WALLTIME_NEXT_VALID."]], "SeeAlso": ["@B_android#icu#util#Calendar#getSkippedWallTimeOption_E@", "@B_android#icu#util#Calendar_E@"], "Permissions": [], "Description": "WALLTIME_FIRST is used, 2:30 AM is interpreted as 30 minutes before 3:00 AM EDT, therefore, it will be resolved as 1:30 AM EST. When WALLTIME_LAST is used, 2:30 AM is interpreted as 31 minutes after 1:59 AM EST, therefore, it will be resolved as 3:30 AM EDT. When WALLTIME_NEXT_VALID is used, 2:30 AM will be resolved as next valid wall time, that is 3:00 AM EDT. The default value is WALLTIME_LAST. @B_android#icu#util#Calendar#isLenient_E@. When the calendar is strict, such non-existing wall time will cause an exception.", "history": "Added in API level 24", "FullName": "public void setSkippedWallTimeOption (int option)"}, "getMaximum(int)": {"Returns": [["int", "the maximum value for the given time field."]], "Parameters": [["int", "int: the given time field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum value for the given time field. e.g. for Gregorian DAY_OF_MONTH, 31.", "history": "Added in API level 24", "FullName": "public final int getMaximum (int field)"}, "getMinimalDaysInFirstWeek()": {"Returns": [["int", "the minimal days required in the first week of the year."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns what the minimal days required in the first week of the year are. That is, if the first week is defined as one that contains the first day of the first month of a year, getMinimalDaysInFirstWeek returns 1. If the minimal days required must be a full week, getMinimalDaysInFirstWeek returns 7.", "history": "Added in API level 24", "FullName": "public int getMinimalDaysInFirstWeek ()"}, "roll(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the calendar field to roll."], ["boolean", "boolean: indicates if the value of the specified time field is to be rolled up or rolled down. Use true if rolling up, false otherwise."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the field is invalid or refers to a field that cannot be handled by this method."]], "SeeAlso": ["@B_android#icu#util#Calendar#roll_E@", "@B_android#icu#util#Calendar#add_E@"], "Permissions": [], "Description": "Rolls (up/down) a single unit of time on the given field. If the field is rolled past its maximum allowable value, it will \"wrap\" back to its minimum and continue rolling. For example, to roll the current date up by one day, you can call: roll(DATE, true) When rolling on the @B_android#icu#util#Calendar#YEAR_E@ field, it will roll the year value in the range between 1 and the value returned by calling @B_android#icu#util#Calendar#getMaximum_E@(@B_android#icu#util#Calendar#YEAR_E@). When rolling on certain fields, the values of other fields may conflict and need to be changed. For example, when rolling the MONTH field for the Gregorian date 1/31/96 upward, the DAY_OF_MONTH field must be adjusted so that the result is 2/29/96 rather than the invalid 2/31/96. Rolling up always means rolling forward in time (unless the limit of the field is reached, in which case it may pin or wrap), so for the Gregorian calendar, starting with 100 BC and rolling the year up results in 99 BC. When eras have a definite beginning and end (as in the Chinese calendar, or as in most eras in the Japanese calendar) then rolling the year past either limit of the era will cause the year to wrap around. When eras only have a limit at one end, then attempting to roll the year past that limit will result in pinning the year at that limit. Note that for most calendars in which era 0 years move forward in time (such as Buddhist, Hebrew, or Islamic), it is possible for add or roll to result in negative years for era 0 (that is the only way to represent years before the calendar epoch in such calendars). not necessarily equivalent to calling", "history": "Added in API level 24", "FullName": "public final void roll (int field, boolean up)"}, "handleGetExtendedYear()": {"Returns": [["int", "the extended year"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the extended year defined by the current fields. This will use the EXTENDED_YEAR field or the YEAR and supra-year fields (such as ERA) specific to the calendar system, depending on which set of fields is newer.", "history": "Added in API level 24", "FullName": "protected abstract int handleGetExtendedYear ()"}, "Calendar()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#TimeZone#getDefault_E@", "@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a Calendar with the default time zone and the default FORMAT locale.", "history": "Added in API level 24", "FullName": "protected Calendar ()"}, "complete()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fills in any unset fields in the time field list.", "history": "Added in API level 24", "FullName": "protected void complete ()"}, "computeFields()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#complete_E@"], "Permissions": [], "Description": "Converts the current millisecond time value time to field values in fields[]. This synchronizes the time field values with a new time that is set for the calendar. The time is not recomputed first; to recompute the time, then the fields, call the complete method.", "history": "Added in API level 24", "FullName": "protected void computeFields ()"}, "getTimeZone()": {"Returns": [["@B_android#icu#util#TimeZone_E@", "the time zone object associated with this calendar."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time zone.", "history": "Added in API level 24", "FullName": "public TimeZone getTimeZone ()"}, "internalGet(int,int)": {"Returns": [["int", "the value for the given time field of defaultValue if the field is unset"]], "Parameters": [["int", "int: the given time field."], ["int", "int: value to return if field is not set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value for a given time field, or return the given default value if the field is not set. This is an internal method for subclasses that does not trigger any calculations.", "history": "Added in API level 24", "FullName": "protected final int internalGet (int field, int defaultValue)"}, "getLimit(int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: the field, from 0..getFieldCount()-1"], ["int", "int: the type specifier for the limit"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar_E@"], "Permissions": [], "Description": "Returns a limit for a field.", "history": "added in API level 24", "FullName": "protected int getLimit (int field, int limitType)"}, "gregorianPreviousMonthLength(int, int)": {"Returns": [["int", "the number of days in the month previous to the given month"]], "Parameters": [["int", "int: the extended year"], ["int", "int: the 0-based month number"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of a previous month of the Gregorian calendar.", "history": "added in API level 24", "FullName": "protected static final int gregorianPreviousMonthLength (int y, int m)"}, "getDateTimeFormat(int,int,android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_android#icu#util#ULocale_E@", "ULocale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DateFormat appropriate to this calendar. Subclasses wishing to specialize this behavior should override @B_android#icu#util#Calendar#handleGetDateFormat_E@.", "history": "Added in API level 24", "FullName": "public DateFormat getDateTimeFormat (int dateStyle, int timeStyle, ULocale loc)"}, "set(int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR time field."], ["int", "int: the value used to set the MONTH time field. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DATE time field."], ["int", "int: the value used to set the HOUR_OF_DAY time field."], ["int", "int: the value used to set the MINUTE time field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the values for the fields year, month, date, hour, and minute. Previous values of other fields are retained. If this is not desired, call @B_android#icu#util#Calendar#clear_E@ first.", "history": "added in API level 24", "FullName": "public final void set (int year, int month, int date, int hour, int minute)"}, "Calendar(android.icu.util.TimeZone,android.icu.util.ULocale)": {"Returns": [], "Parameters": [["@B_android#icu#util#TimeZone_E@", "TimeZone: the time zone to use"], ["@B_android#icu#util#ULocale_E@", "ULocale: the ulocale for the week data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a calendar with the specified time zone and locale.", "history": "Added in API level 24", "FullName": "protected Calendar (TimeZone zone, ULocale locale)"}, "set(int, int)": {"Returns": [], "Parameters": [["int", "int: the given time field."], ["int", "int: the value to be set for the given time field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time field with the given value.", "history": "added in API level 24", "FullName": "public final void set (int field, int value)"}, "set(int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR time field."], ["int", "int: the value used to set the MONTH time field. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DATE time field."], ["int", "int: the value used to set the HOUR_OF_DAY time field."], ["int", "int: the value used to set the MINUTE time field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the values for the fields year, month, date, hour, and minute. Previous values of other fields are retained. If this is not desired, call @B_android#icu#util#Calendar#clear_E@ first.", "history": "Added in API level 24", "FullName": "public final void set (int year, int month, int date, int hour, int minute)"}, "computeZoneOffset(long,int)": {"Returns": [["int", "total zone offset (raw + DST) for the given moment"]], "Parameters": [["long", "long: milliseconds of the date fields (local midnight millis)"], ["int", "int: milliseconds of the time fields; may be out or range."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ICU 60 This method can assume EXTENDED_YEAR has been set.", "history": "Added in API level 24 Deprecated in API level 26", "FullName": "protected int computeZoneOffset (long millis, int millisInDay)"}, "handleGetDateFormat(java.lang.String,java.lang.String,java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a DateFormat appropriate to this calendar"]], "Parameters": [["@B_java#lang#String_E@", "String: the pattern, specific to the DateFormat subclass"], ["@B_java#lang#String_E@", "String: The override string. A numbering system override string can take one of the following forms: 1). If just a numbering system name is specified, it applies to all numeric fields in the date format pattern. 2). To specify an alternate numbering system on a field by field basis, use the field letters from the pattern followed by an = sign, followed by the numbering system name. For example, to specify that just the year be formatted using Hebrew digits, use the override \"y=hebr\". Multiple overrides can be specified in a single string by separating them with a semi-colon. For example, the override string \"m=thai;y=deva\" would format using Thai digits for the month and Devanagari digits for the year."], ["@B_java#util#Locale_E@", "Locale: the locale for which the symbols should be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a DateFormat appropriate to this calendar. This is a framework method for subclasses to override. This method is responsible for creating the calendar-specific DateFormat and DateFormatSymbols objects as needed.", "history": "Added in API level 24", "FullName": "protected DateFormat handleGetDateFormat (String pattern, String override, Locale locale)"}, "newerField(int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the field that is newer, either defaultField, or alternateField. If neither is newer or neither is set, return defaultField.", "history": "Added in API level 24", "FullName": "protected int newerField (int defaultField, int alternateField)"}, "isWeekend()": {"Returns": [["boolean", "true if the given date and time is part of the weekend"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#isWeekend_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public boolean isWeekend ()"}, "setTimeInMillis(long)": {"Returns": [], "Parameters": [["long", "long: the new time in UTC milliseconds from the epoch."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this Calendar's current time from the given long value. An IllegalIcuArgumentException is thrown when millis is outside the range permitted by a Calendar object when in strict mode. When in lenient mode the out of range values are pinned to their respective min/max.", "history": "Added in API level 24", "FullName": "public void setTimeInMillis (long millis)"}, "computeJulianDay()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the Julian day number as specified by this calendar's fields.", "history": "Added in API level 24", "FullName": "protected int computeJulianDay ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for this calendar.", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "julianDayToMillis(int)": {"Returns": [["long", "time as milliseconds."]], "Parameters": [["int", "int: the given Julian day number."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts Julian day to time as milliseconds.", "history": "Added in API level 24", "FullName": "protected static final long julianDayToMillis (int julian)"}, "getAvailableLocales()": {"Returns": [["@B_java#util#Locale_E@", "the list of locales for which Calendars are installed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of locales for which Calendars are installed.", "history": "Added in API level 24", "FullName": "public static Locale[] getAvailableLocales ()"}, "fieldName(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string name for a field, for debugging and exceptions.", "history": "Added in API level 24", "FullName": "protected String fieldName (int field)"}, "isEquivalentTo(android.icu.util.Calendar)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: the Calendar to be compared with this Calendar"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public boolean isEquivalentTo (Calendar other)"}, "setTime(java.util.Date)": {"Returns": [], "Parameters": [["@B_java#util#Date_E@", "Date: the given Date."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this Calendar's current time with the given Date. Note: Calling setTime with Date(Long.MAX_VALUE) or Date(Long.MIN_VALUE) may yield incorrect field values from @B_android#icu#util#Calendar#get_E@.", "history": "Added in API level 24", "FullName": "public final void setTime (Date date)"}, "getFieldResolutionTable()": {"Returns": [["int[][][]", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#resolveFields_E@"], "Permissions": [], "Description": "Returns the field resolution array for this calendar. Calendars that define additional fields or change the semantics of existing fields should override this method to adjust the field resolution semantics accordingly. Other subclasses should not override this method.", "history": "Added in API level 24", "FullName": "protected int[][][] getFieldResolutionTable ()"}, "julianDayToDayOfWeek(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the day of week, from SUNDAY to SATURDAY, given a Julian day.", "history": "Added in API level 24", "FullName": "protected static final int julianDayToDayOfWeek (int julian)"}, "computeMillisInDay()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ICU 60 Compute the milliseconds in the day from the fields. This is a value from 0 to 23:59:59.999 inclusive, unless fields are out of range, in which case it can be an arbitrary value. This value reflects local zone wall time.", "history": "Added in API level 24 Deprecated in API level 26", "FullName": "protected int computeMillisInDay ()"}, "getLimit(int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: the field, from 0..getFieldCount()-1"], ["int", "int: the type specifier for the limit"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar_E@"], "Permissions": [], "Description": "Returns a limit for a field.", "history": "Added in API level 24", "FullName": "protected int getLimit (int field, int limitType)"}, "getInstance(android.icu.util.TimeZone,android.icu.util.ULocale)": {"Returns": [["@B_android#icu#util#Calendar_E@", "a Calendar."]], "Parameters": [["@B_android#icu#util#TimeZone_E@", "TimeZone: the time zone to use"], ["@B_android#icu#util#ULocale_E@", "ULocale: the ulocale for the week data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a calendar with the specified time zone and locale.", "history": "Added in API level 24", "FullName": "public static Calendar getInstance (TimeZone zone, ULocale locale)"}, "setMinimalDaysInFirstWeek(int)": {"Returns": [], "Parameters": [["int", "int: the given minimal days required in the first week of the year."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets what the minimal days required in the first week of the year are. For example, if the first week is defined as one that contains the first day of the first month of a year, call the method with value 1. If it must be a full week, use value 7.", "history": "Added in API level 24", "FullName": "public void setMinimalDaysInFirstWeek (int value)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the values of all the time fields.", "history": "Added in API level 24", "FullName": "public final void clear ()"}, "getFirstDayOfWeek()": {"Returns": [["int", "the first day of the week, where 1 = @B_android#icu#util#Calendar#SUNDAY_E@ and 7 = @B_android#icu#util#Calendar#SATURDAY_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns what the first day of the week is, where 1 = @B_android#icu#util#Calendar#SUNDAY_E@ and 7 = @B_android#icu#util#Calendar#SATURDAY_E@. e.g., Sunday in US, Monday in France", "history": "Added in API level 24", "FullName": "public int getFirstDayOfWeek ()"}, "isSet(int)": {"Returns": [["boolean", "true if the given time field has a value set; false otherwise."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if the given time field has a value set.", "history": "Added in API level 24", "FullName": "public final boolean isSet (int field)"}, "fieldDifference(java.util.Date, int)": {"Returns": [["int", "the difference, either positive or negative, between this calendar's time and when, in terms of field."]], "Parameters": [["@B_java#util#Date_E@", "Date: the date to compare this calendar's time to"], ["int", "int: the field in which to compute the result"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "before the given time, the returned value will be positive. If this calendar is set after the given time, the returned value will be negative. The field parameter specifies the units of the return value. For example, if fieldDifference(when, Calendar.MONTH) returns 3, then this calendar is set to 3 months before when, and possibly some additional time less than one month. As a side effect of this call, this calendar is advanced toward when by the given amount. That is, calling this method has the side effect of calling add(field, n), where n is the return value. Usage: To use this method, call it first with the largest field of interest, then with progressively smaller fields. For example: cal and when in years, months, and days. Note: fieldDifference() is asymmetrical. That is, in the following code: m1 == -m2 && d1 == -d2. However, this is not generally the case, because of irregularities in the underlying calendar system (e.g., the Gregorian calendar has a varying number of days per month).", "history": "added in API level 24", "FullName": "public int fieldDifference (Date when, int field)"}, "fieldDifference(java.util.Date,int)": {"Returns": [["int", "the difference, either positive or negative, between this calendar's time and when, in terms of field."]], "Parameters": [["@B_java#util#Date_E@", "Date: the date to compare this calendar's time to"], ["int", "int: the field in which to compute the result"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "before the given time, the returned value will be positive. If this calendar is set after the given time, the returned value will be negative. The field parameter specifies the units of the return value. For example, if fieldDifference(when, Calendar.MONTH) returns 3, then this calendar is set to 3 months before when, and possibly some additional time less than one month. As a side effect of this call, this calendar is advanced toward when by the given amount. That is, calling this method has the side effect of calling add(field, n), where n is the return value. Usage: To use this method, call it first with the largest field of interest, then with progressively smaller fields. For example: cal and when in years, months, and days. Note: fieldDifference() is asymmetrical. That is, in the following code: m1 == -m2 && d1 == -d2. However, this is not generally the case, because of irregularities in the underlying calendar system (e.g., the Gregorian calendar has a varying number of days per month).", "history": "Added in API level 24", "FullName": "public int fieldDifference (Date when, int field)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides Cloneable", "history": "Added in API level 24", "FullName": "public Object clone ()"}, "validateField(int,int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Validate a single field of this calendar given its minimum and maximum allowed value. If the field is out of range, throw a descriptive IllegalArgumentException. Subclasses may use this method in their implementation of @B_android#icu#util#Calendar#validateField_E@.", "history": "Added in API level 24", "FullName": "protected final void validateField (int field, int min, int max)"}, "validateField(int, int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Validate a single field of this calendar given its minimum and maximum allowed value. If the field is out of range, throw a descriptive IllegalArgumentException. Subclasses may use this method in their implementation of @B_android#icu#util#Calendar#validateField_E@.", "history": "added in API level 24", "FullName": "protected final void validateField (int field, int min, int max)"}, "floorDivide(long, int, int[])": {"Returns": [["int", "the floor of the quotient."]], "Parameters": [["long", "long: the numerator"], ["int", "int: a divisor which must be > 0"], ["int[]", "int: an array of at least one element in which the value numerator mod denominator is returned. Unlike numerator % denominator, this will always be non-negative."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Divide two integers, returning the floor of the quotient, and the modulus remainder. Unlike the built-in division, this is mathematically well-behaved. E.g., -1/4 => 0 and -1%4 => -1, but floorDivide(-1,4) => -1 with remainder[0] => 3.", "history": "added in API level 24", "FullName": "protected static final int floorDivide (long numerator, int denominator, int[] remainder)"}, "internalSet(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a field to a value. Subclasses should use this method when computing fields. It sets the time stamp in the stamp[] array to INTERNALLY_SET. If a field that may not be set by subclasses is passed in, an IllegalArgumentException is thrown. This prevents subclasses from modifying fields that are intended to be calendar-system invariant.", "history": "Added in API level 24", "FullName": "protected final void internalSet (int field, int value)"}, "setWeekData(android.icu.util.Calendar.WeekData)": {"Returns": [["@B_android#icu#util#Calendar_E@", "this, for chaining"]], "Parameters": [["@B_android#icu#util#Calendar#WeekData_E@", "Calendar.WeekData: The week data to use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public Calendar setWeekData (Calendar.WeekData wdata)"}, "getDateTimeFormat(int, int, java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#util#Locale_E@", "Locale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DateFormat appropriate to this calendar. Subclasses wishing to specialize this behavior should override @B_android#icu#util#Calendar#handleGetDateFormat_E@.", "history": "added in API level 24", "FullName": "public DateFormat getDateTimeFormat (int dateStyle, int timeStyle, Locale loc)"}, "floorDivide(long,long)": {"Returns": [["long", "the floor of the quotient."]], "Parameters": [["long", "long: the numerator"], ["long", "long: a divisor which must be > 0"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Divide two long integers, returning the floor of the quotient. Unlike the built-in division, this is mathematically well-behaved. E.g., -1/4 => 0 but floorDivide(-1,4) => -1.", "history": "Added in API level 24", "FullName": "protected static final long floorDivide (long numerator, long denominator)"}, "getGregorianYear()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#computeGregorianFields_E@"], "Permissions": [], "Description": "Returns the extended year on the Gregorian calendar as computed by computeGregorianFields().", "history": "Added in API level 24", "FullName": "protected final int getGregorianYear ()"}, "getGregorianMonth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#computeGregorianFields_E@"], "Permissions": [], "Description": "Returns the month (0-based) on the Gregorian calendar as computed by computeGregorianFields().", "history": "Added in API level 24", "FullName": "protected final int getGregorianMonth ()"}, "setLenient(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat#setLenient_E@"], "Permissions": [], "Description": "Specify whether or not date/time interpretation is to be lenient. With lenient interpretation, a date such as \"February 942, 1996\" will be treated as being equivalent to the 941st day after February 1, 1996. With strict interpretation, such dates will cause an exception to be thrown.", "history": "Added in API level 24", "FullName": "public void setLenient (boolean lenient)"}, "getInstance(android.icu.util.TimeZone)": {"Returns": [["@B_android#icu#util#Calendar_E@", "a Calendar."]], "Parameters": [["@B_android#icu#util#TimeZone_E@", "TimeZone: the time zone to use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a calendar using the specified time zone and default locale.", "history": "Added in API level 24", "FullName": "public static Calendar getInstance (TimeZone zone)"}, "getDateTimeFormat(int,int,java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#util#Locale_E@", "Locale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DateFormat appropriate to this calendar. Subclasses wishing to specialize this behavior should override @B_android#icu#util#Calendar#handleGetDateFormat_E@.", "history": "Added in API level 24", "FullName": "public DateFormat getDateTimeFormat (int dateStyle, int timeStyle, Locale loc)"}, "floorDivide(int, int)": {"Returns": [["int", "the floor of the quotient."]], "Parameters": [["int", "int: the numerator"], ["int", "int: a divisor which must be > 0"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Divide two integers, returning the floor of the quotient. Unlike the built-in division, this is mathematically well-behaved. E.g., -1/4 => 0 but floorDivide(-1,4) => -1.", "history": "added in API level 24", "FullName": "protected static final int floorDivide (int numerator, int denominator)"}, "getDisplayName(android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this calendar in the language of the given locale.", "history": "Added in API level 24", "FullName": "public String getDisplayName (ULocale loc)"}, "computeTime()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the current field values in fields[] to the millisecond time value time.", "history": "Added in API level 24", "FullName": "protected void computeTime ()"}, "Calendar(android.icu.util.TimeZone,java.util.Locale)": {"Returns": [], "Parameters": [["@B_android#icu#util#TimeZone_E@", "TimeZone: the time zone to use"], ["@B_java#util#Locale_E@", "Locale: the locale for the week data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a calendar with the specified time zone and locale.", "history": "Added in API level 24", "FullName": "protected Calendar (TimeZone zone, Locale aLocale)"}, "handleComputeFields(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses may override this method to compute several fields specific to each calendar system. These are: ERA YEAR MONTH DAY_OF_MONTH DAY_OF_YEAR EXTENDED_YEAR Subclasses can refer to the DAY_OF_WEEK and DOW_LOCAL fields, which will be set when this method is called. Subclasses can also call the getGregorianXxx() methods to obtain Gregorian calendar equivalents for the given Julian day. In addition, subclasses should compute any subclass-specific fields, that is, fields from BASE_FIELD_COUNT to getFieldCount() - 1. The default implementation in Calendar implements a pure proleptic Gregorian calendar.", "history": "Added in API level 24", "FullName": "protected void handleComputeFields (int julianDay)"}, "internalSet(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a field to a value. Subclasses should use this method when computing fields. It sets the time stamp in the stamp[] array to INTERNALLY_SET. If a field that may not be set by subclasses is passed in, an IllegalArgumentException is thrown. This prevents subclasses from modifying fields that are intended to be calendar-system invariant.", "history": "added in API level 24", "FullName": "protected final void internalSet (int field, int value)"}, "getInstance(android.icu.util.TimeZone,java.util.Locale)": {"Returns": [["@B_android#icu#util#Calendar_E@", "a Calendar."]], "Parameters": [["@B_android#icu#util#TimeZone_E@", "TimeZone: the time zone to use"], ["@B_java#util#Locale_E@", "Locale: the locale for the week data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a calendar with the specified time zone and locale.", "history": "Added in API level 24", "FullName": "public static Calendar getInstance (TimeZone zone, Locale aLocale)"}, "getWeekDataForRegion(java.lang.String)": {"Returns": [["@B_android#icu#util#Calendar#WeekData_E@", "the WeekData for the input region. It is never null."]], "Parameters": [["@B_java#lang#String_E@", "String: The input region. The results are undefined if the region code is not valid."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static Calendar.WeekData getWeekDataForRegion (String region)"}, "compareTo(android.icu.util.Calendar)": {"Returns": [["int", "0 if the time represented by this Calendar is equal to the time represented by that Calendar, a value less than 0 if the time represented by this is before the time represented by that, and a value greater than 0 if the time represented by this is after the time represented by that."]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: the Calendar to compare to this."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if that Calendar is null."], ["@B_java#lang#IllegalArgumentException_E@", "if the time of that Calendar can't be obtained because of invalid calendar values."]], "SeeAlso": [], "Permissions": [], "Description": "Compares the times (in millis) represented by two Calendar objects.", "history": "Added in API level 24", "FullName": "public int compareTo (Calendar that)"}}, "Inheritance": [], "ClassName": "android.icu.util.Calendar", "ClassDesc": "@B_java#util#Calendar_E@. Methods, fields, and other functionality specific to ICU are labeled 'Calendar is an abstract base class for converting between a Date object and a set of integer fields such as YEAR, MONTH, DAY, HOUR, and so on. (A Date object represents a specific instant in time with millisecond precision. See @B_java#util#Date_E@ for information about the Date class.) Subclasses of Calendar interpret a Date according to the rules of a specific calendar system. ICU4J contains several subclasses implementing different international calendar systems. Like other locale-sensitive classes, Calendar provides a class method, getInstance, for getting a generally useful object of this type. Calendar's getInstance method returns a calendar of a type appropriate to the locale, whose time fields have been initialized with the current date and time: When a ULocale is used by getInstance, its 'calendar' tag and value are retrieved if present. If a recognized value is supplied, a calendar is provided and configured as appropriate. Currently recognized tags are \"buddhist\", \"chinese\", \"coptic\", \"ethiopic\", \"gregorian\", \"hebrew\", \"islamic\", \"islamic-civil\", \"japanese\", and \"roc\". For example: A Calendar object can produce all the time field values needed to implement the date-time formatting for a particular language and calendar style (for example, Japanese-Gregorian, Japanese-Traditional). Calendar defines the range of values returned by certain fields, as well as their meaning. For example, the first month of the year has value MONTH == JANUARY for all calendars. Other values are defined by the concrete subclass, such as ERA and YEAR. See individual field documentation and subclass documentation for details. When a Calendar is lenient, it accepts a wider range of field values than it produces. For example, a lenient GregorianCalendar interprets MONTH == JANUARY, DAY_OF_MONTH == 32 as February 1. A non-lenient GregorianCalendar throws an exception when given out-of-range field settings. When calendars recompute field values for return by get(), they normalize them. For example, a GregorianCalendar always produces DAY_OF_MONTH values between 1 and the length of the month. Calendar defines a locale-specific seven day week using two parameters: the first day of the week and the minimal days in first week (from 1 to 7). These numbers are taken from the locale resource data when a Calendar is constructed. They may also be specified explicitly through the API. When setting or getting the WEEK_OF_MONTH or WEEK_OF_YEAR fields, Calendar must determine the first week of the month or year as a reference point. The first week of a month or year is defined as the earliest seven day period beginning on getFirstDayOfWeek() and containing at least getMinimalDaysInFirstWeek() days of that month or year. Weeks numbered ..., -1, 0 precede the first week; weeks numbered 2, 3,... follow it. Note that the normalized numbering returned by get() may be different. For example, a specific Calendar subclass may designate the week before week 1 of a year as week n of the previous year. When computing a Date from time fields, some special circumstances may arise: there may be insufficient information to compute the Date (such as only year and month but no day in the month), there may be inconsistent information (such as \"Tuesday, July 15, 1996\" -- July 15, 1996 is actually a Monday), or the input time might be ambiguous because of time zone transition. On the date switching back to standard time, wall clock time is moved back one hour at 2:00 AM. So wall clock time from 1:00 AM to 1:59 AM occur twice. In this case, the ICU Calendar resolves the time using the UTC offset after the transition by default. For example, 1:30 AM on the date is resolved as 1:30 AM standard time. Ambiguous wall clock time resolution behaviors can be customized by Calendar APIs @B_android#icu#util#Calendar#setRepeatedWallTimeOption_E@ and @B_android#icu#util#Calendar#setSkippedWallTimeOption_E@. These methods are available in ICU 49 or later versions. and day-of-week in some cases. The date or time format strings are not part of the definition of a calendar, as those must be modifiable or overridable by the user at runtime. Use @B_android#icu#text#DateFormat_E@ to format dates. Calendar fields can be changed using three methods: set(), add(), and roll(). f to value. In addition, it sets an internal member variable to indicate that field f has been changed. Although field f is changed immediately, the calendar's milliseconds is not recomputed until the next call to get(), getTime(), or getTimeInMillis() is made. Thus, multiple calls to set() do not trigger multiple, unnecessary computations. As a result of changing a field using set(), other fields may also change, depending on the field, the field value, and the calendar system. In addition, get(f) will not necessarily return value after the fields have been recomputed. The specifics are determined by the concrete calendar class. Example: Consider a GregorianCalendar originally set to August 31, 1999. Calling set(Calendar.MONTH, Calendar.SEPTEMBER) sets the calendar to September 31, 1999. This is a temporary internal representation that resolves to October 1, 1999 if getTime()is then called. However, a call to set(Calendar.DAY_OF_MONTH, 30) before the call to getTime() sets the calendar to September 30, 1999, since no recomputation occurs after set() itself. delta to field f. This is equivalent to calling set(f, get(f) + delta) with two adjustments: In addition, unlike set(), add() forces an immediate recomputation of the calendar's milliseconds and all fields. Example: Consider a GregorianCalendar originally set to August 31, 1999. Calling add(Calendar.MONTH, 13) sets the calendar to September 30, 2000. MONTH field to September, since adding 13 months to August gives September of the next year. Since DAY_OF_MONTH cannot be 31 in September in a GregorianCalendar, DAY_OF_MONTH to 30, the closest possible value. Although it is a smaller field, DAY_OF_WEEK is not adjusted by rule 2, since it is expected to change when the month changes in a GregorianCalendar. delta to field f without changing larger fields. This is equivalent to calling add(f, delta) with the following adjustment: Example: Consider a GregorianCalendar originally set to August 31, 1999. Calling roll(Calendar.MONTH, 8) sets the calendar to April 30, MONTH field to April. Using a GregorianCalendar, the DAY_OF_MONTH cannot be 31 in the month April. Add rule 2 sets it to the closest possible value, 30. Finally, the YEAR field value of 1999. Example: Consider a GregorianCalendar originally set to Sunday June 6, 1999. Calling roll(Calendar.WEEK_OF_MONTH, -1) sets the calendar to Tuesday June 1, 1999, whereas calling add(Calendar.WEEK_OF_MONTH, -1) sets the calendar to Sunday May 30, 1999. This is because the roll rule imposes an additional constraint: The MONTH must not change when the WEEK_OF_MONTH is rolled. Taken together with add rule 1, the resultant date must be between Tuesday June 1 and Saturday June 5. According to add rule 2, the DAY_OF_WEEK, an invariant when changing the WEEK_OF_MONTH, is set to Tuesday, the closest possible value to Sunday (where Sunday is the first day of the week). add() and roll(), consider a user interface component with increment and decrement buttons for the month, day, and year, and an underlying GregorianCalendar. If the interface reads January 31, 1999 and the user presses the month increment button, what should it read? If the underlying implementation uses set(), it might read March 3, 1999. A better result would be February 28, 1999. Furthermore, if the user presses the month increment button again, it should read March 31, 1999, not March 28, 1999. By saving the original date and using either add() or roll(), depending on whether larger fields should be affected, the user interface can behave as most users will intuitively expect. @B_android#icu#util#Calendar#roll_E@ and @B_android#icu#util#Calendar#add_E@ rather than attempting to perform arithmetic operations directly on the fields of a Recently the implementation of Calendar has changed significantly in order to better support subclassing. The original Calendar class was designed to support subclassing, but it had only one implemented subclass, GregorianCalendar. With the implementation of several new calendar subclasses, including the BuddhistCalendar, ChineseCalendar, HebrewCalendar, IslamicCalendar, and JapaneseCalendar, the subclassing API has been reworked thoroughly. This section details the new subclassing API and other ways in which android.icu.util.Calendar differs from java.util.Calendar. Overview of changes between the classic Calendar architecture and the new architecture. The fields[] array is private now instead of protected. Subclasses must access it using the methods @B_android#icu#util#Calendar#internalSet_E@ and @B_android#icu#util#Calendar#internalGet_E@. The time long word is private now instead of protected. Subclasses may access it using the method @B_android#icu#util#Calendar#internalGetTimeInMillis_E@, which does not provoke an update. The scope of responsibility of subclasses has been drastically reduced. As much functionality as possible is implemented in the Calendar base class. As a result, it is much easier to subclass Calendar. @B_android#icu#util#Calendar#add_E@ and @B_android#icu#util#Calendar#roll_E@) behavior of many fields, and the field validation system. The subclassing API has been completely redesigned. The Calendar base class contains some Gregorian calendar algorithmic support that subclasses can use (specifically in @B_android#icu#util#Calendar#handleComputeFields_E@). Subclasses can use the methods getGregorianXxx() to obtain precomputed values. Calendar subclasses in order to implement consistent time zone behavior, and Gregorian-derived systems can use the already computed data. The FIELD_COUNT constant has been removed. Use @B_android#icu#util#Calendar#getFieldCount_E@. In addition, framework API has been added to allow subclasses to define additional fields. The range of handled dates has been narrowed from +/- ~300,000,000 years to +/- ~5,000,000 years. In practical terms this should not affect clients. However, it does mean that client code cannot be guaranteed well-behaved results with dates such as Date(Long.MIN_VALUE) or Date(Long.MAX_VALUE). Instead, the Calendar protected constants should be used. @B_android#icu#util#Calendar#JULIAN_DAY_E@ field, Julian day numbers must be restricted to a 32-bit int. This restricts the overall supported range. Furthermore, restricting the supported range simplifies the computations by removing special case code that was used to accomodate arithmetic overflow at millis near Long.MIN_VALUE and Long.MAX_VALUE. New fields are implemented: @B_android#icu#util#Calendar#JULIAN_DAY_E@ defines single-field specification of the date. @B_android#icu#util#Calendar#MILLISECONDS_IN_DAY_E@ defines a single-field specification of the wall time. @B_android#icu#util#Calendar#DOW_LOCAL_E@ and @B_android#icu#util#Calendar#YEAR_WOY_E@ implement localized day-of-week and week-of-year behavior. Subclasses can access protected millisecond constants defined in Calendar. New API has been added to support calendar-specific subclasses of DateFormat. Several subclasses have been implemented, representing various international calendar systems. The original Calendar API was based on the experience of implementing a only a single subclass, GregorianCalendar. As a result, all of the subclassing kinks had not been worked out. The new subclassing API has been refined based on several implemented subclasses. This includes methods that must be overridden and methods for subclasses to call. Subclasses no longer have direct access to fields and stamp. Instead, they have new API to access these. Subclasses are able to allocate the fields array through a protected framework method; this allows subclasses to specify additional fields. More functionality has been moved into the base class. The base class now contains much of the computational machinery to support the Gregorian calendar. This is based on two things: (1) Many calendars are based on the Gregorian calendar (such as the Buddhist and Japanese imperial calendars). (2) All calendars require basic Gregorian support in order to handle timezone computations. Common computations have been moved into Calendar. Subclasses no longer compute the week related fields and the time related fields. These are commonly handled for all calendars by the base class. The @B_android#icu#util#Calendar#ERA_E@, @B_android#icu#util#Calendar#YEAR_E@, @B_android#icu#util#Calendar#EXTENDED_YEAR_E@, @B_android#icu#util#Calendar#MONTH_E@, @B_android#icu#util#Calendar#DAY_OF_MONTH_E@, and @B_android#icu#util#Calendar#DAY_OF_YEAR_E@ fields are computed by the subclass, based on the Julian day. All other fields are computed by Calendar. Subclasses should implement @B_android#icu#util#Calendar#handleComputeFields_E@ to compute the @B_android#icu#util#Calendar#ERA_E@, @B_android#icu#util#Calendar#YEAR_E@, @B_android#icu#util#Calendar#EXTENDED_YEAR_E@, @B_android#icu#util#Calendar#MONTH_E@, @B_android#icu#util#Calendar#DAY_OF_MONTH_E@, and @B_android#icu#util#Calendar#DAY_OF_YEAR_E@ fields, based on the value of the @B_android#icu#util#Calendar#JULIAN_DAY_E@ field. If there are calendar-specific fields not defined by Calendar, they must also be computed. These are the only fields that the subclass should compute. All other fields are computed by the base class, so time and week fields behave in a consistent way across all calendars. The default version of this method in Calendar implements a proleptic Gregorian calendar. Within this method, subclasses may call getGregorianXxx() to obtain the Gregorian calendar month, day of month, and extended year for the given date. The interpretation of most field values is handled entirely by Calendar. Calendar determines which fields are set, which are not, which are set more recently, and so on. In addition, Calendar handles the computation of the time from the time fields and handles the week-related fields. The only thing the subclass must do is determine the extended year, based on the year fields, and then, given an extended year and a month, it must return a Julian day number. Subclasses should implement @B_android#icu#util#Calendar#handleGetExtendedYear_E@ to return the extended year for this calendar system, based on the @B_android#icu#util#Calendar#YEAR_E@, @B_android#icu#util#Calendar#EXTENDED_YEAR_E@, and any fields that the calendar system uses that are larger than a year, such as @B_android#icu#util#Calendar#ERA_E@. Subclasses should implement @B_android#icu#util#Calendar#handleComputeMonthStart_E@ to return the Julian day number associated with a month and extended year. This is the Julian day number of the day before the first day of the month. The month number is zero-based. This computation should not depend on any field values. Subclasses should implement @B_android#icu#util#Calendar#handleGetMonthLength_E@ to return the number of days in a given month of a given extended year. The month number, as always, is zero-based. Subclasses should implement @B_android#icu#util#Calendar#handleGetYearLength_E@ to return the number of days in the given extended year. This method is used by @B_android#icu#util#Calendar#WEEK_OF_YEAR_E@ and @B_android#icu#util#Calendar#YEAR_WOY_E@ fields. Subclasses should implement @B_android#icu#util#Calendar#handleGetLimit_E@ to return the protected values of a field, depending on the value of limitType. This method only needs to handle the fields @B_android#icu#util#Calendar#ERA_E@, @B_android#icu#util#Calendar#YEAR_E@, @B_android#icu#util#Calendar#MONTH_E@, @B_android#icu#util#Calendar#WEEK_OF_YEAR_E@, @B_android#icu#util#Calendar#WEEK_OF_MONTH_E@, @B_android#icu#util#Calendar#DAY_OF_MONTH_E@, @B_android#icu#util#Calendar#DAY_OF_YEAR_E@, @B_android#icu#util#Calendar#DAY_OF_WEEK_IN_MONTH_E@, @B_android#icu#util#Calendar#YEAR_WOY_E@, and @B_android#icu#util#Calendar#EXTENDED_YEAR_E@. Other fields are invariant (with respect to calendar system) and are handled by the base class. Optionally, subclasses may override @B_android#icu#util#Calendar#validateField_E@ to check any subclass-specific fields. If the field's value is out of range, the method should throw an IllegalArgumentException. The method may call super.validateField(field) to handle fields in a generic way, that is, to compare them to the range getMinimum(field)..getMaximum(field). Optionally, subclasses may override @B_android#icu#util#Calendar#handleCreateFields_E@ to create an int[] array large enough to hold the calendar's fields. This is only necessary if the calendar defines additional fields beyond those defined by Calendar. The length of the result must be be between the base and maximum field counts. Optionally, subclasses may override @B_android#icu#util#Calendar#handleGetDateFormat_E@ to create a DateFormat appropriate to this calendar. This is only required if a calendar subclass redefines the use of a field (for example, changes the @B_android#icu#util#Calendar#ERA_E@ field from a symbolic field to a numeric one) or defines an additional field. Optionally, subclasses may override @B_android#icu#util#Calendar#roll_E@ and @B_android#icu#util#Calendar#add_E@ to handle fields that are discontinuous. For example, in the Hebrew calendar the month \"Adar I\" only occurs in leap years; in other years the calendar jumps from Shevat (month #4) to Adar (month #6). The @B_android#icu#util#HebrewCalendar#add_E@ and @B_android#icu#util#Calendar#roll_E@ methods take this into account, so that adding 1 month to Shevat gives the proper result (Adar) in a non-leap year. The protected utility method @B_android#icu#util#Calendar#pinField_E@ is often useful when implementing these two methods. The behavior of certain fields has been made consistent across all calendar systems and implemented in Calendar. Time is normalized. Even though some calendar systems transition between days at sunset or at other times, all ICU4J calendars transition between days at local zone midnight. This allows ICU4J to centralize the time computations in Calendar and to maintain basic correpsondences between calendar systems. Affected fields: @B_android#icu#util#Calendar#AM_PM_E@, @B_android#icu#util#Calendar#HOUR_E@, @B_android#icu#util#Calendar#HOUR_OF_DAY_E@, @B_android#icu#util#Calendar#MINUTE_E@, @B_android#icu#util#Calendar#SECOND_E@, @B_android#icu#util#Calendar#MILLISECOND_E@, @B_android#icu#util#Calendar#ZONE_OFFSET_E@, and @B_android#icu#util#Calendar#DST_OFFSET_E@. DST behavior is normalized. Daylight savings time behavior is computed the same for all calendar systems, and depends on the value of several GregorianCalendar fields: the @B_android#icu#util#Calendar#YEAR_E@, @B_android#icu#util#Calendar#MONTH_E@, and @B_android#icu#util#Calendar#DAY_OF_MONTH_E@. As a result, Calendar always computes these fields, even for non-Gregorian calendar systems. These fields are available to subclasses. Weeks are normalized. Although locales define the week differently, in terms of the day on which it starts, and the designation of week number one of a month or year, they all use a common mechanism. Furthermore, the day of the week has a simple and consistent definition throughout history. For example, although the Gregorian calendar introduced a discontinuity when first instituted, the day of week was not disrupted. For this reason, the fields @B_android#icu#util#Calendar#DAY_OF_WEEK_E@, WEEK_OF_YEAR, WEEK_OF_MONTH, @B_android#icu#util#Calendar#DAY_OF_WEEK_IN_MONTH_E@, @B_android#icu#util#Calendar#DOW_LOCAL_E@, @B_android#icu#util#Calendar#YEAR_WOY_E@ are all computed in a consistent way in the base class, based on the @B_android#icu#util#Calendar#EXTENDED_YEAR_E@, @B_android#icu#util#Calendar#DAY_OF_YEAR_E@, @B_android#icu#util#Calendar#MONTH_E@, and @B_android#icu#util#Calendar#DAY_OF_MONTH_E@, which are computed by the subclass. The allowable range of Calendar has been narrowed. GregorianCalendar used to attempt to support the range of dates with millisecond values from Long.MIN_VALUE to Long.MAX_VALUE. This introduced awkward constructions (hacks) which slowed down performance. It also introduced non-uniform behavior at the boundaries. The new Calendar protocol specifies the maximum range of supportable dates as those having Julian day numbers of -0x7F000000 to +0x7F000000. This corresponds to years from ~5,800,000 BCE to ~5,800,000 CE. Programmers should use the protected constants in Calendar to specify an extremely early or extremely late date. Calendars implementations are proleptic. For example, even though the Gregorian calendar was not instituted until the 16th century, the GregorianCalendar class supports dates before the historical onset of the calendar by extending the calendar system backward in time. Similarly, the HebrewCalendar extends backward before the start of its epoch into zero and negative years. Subclasses do not throw exceptions because a date precedes the historical start of a calendar system. Instead, they implement @B_android#icu#util#Calendar#handleGetLimit_E@ to return appropriate limits on @B_android#icu#util#Calendar#YEAR_E@, @B_android#icu#util#Calendar#ERA_E@, etc. fields. Then, if the calendar is set to not be lenient, out-of-range field values will trigger an exception. Calendar system subclasses compute a extended year. This differs from the @B_android#icu#util#Calendar#YEAR_E@ field in that it ranges over all integer values, including zero and negative values, and it encapsulates the information of the @B_android#icu#util#Calendar#YEAR_E@ field and all larger fields. Thus, for the Gregorian calendar, the @B_android#icu#util#Calendar#EXTENDED_YEAR_E@ is computed as ERA==AD ? YEAR : 1-YEAR. Another example is the Mayan long count, which has years (KUN) and nested cycles of years (KATUN and BAKTUN). The Mayan @B_android#icu#util#Calendar#EXTENDED_YEAR_E@ is computed as TUN + 20 * (KATUN + 20 * BAKTUN). The Calendar base class uses the @B_android#icu#util#Calendar#EXTENDED_YEAR_E@ field to compute the week-related fields."}