{"Functions": {"init(int,java.security.SecureRandom)": {"Returns": [], "Parameters": [["int", "int: the keysize. This is an algorithm-specific metric, specified in number of bits."], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness for this key generator"]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if the keysize is wrong or not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this key generator for a certain keysize, using a user-provided source of randomness.", "history": "Added in API level 1", "FullName": "public final void init (int keysize, SecureRandom random)"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the algorithm name of this KeyGenerator object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the algorithm name of this KeyGenerator object. This is the same name that was specified in one of the getInstance calls that created this KeyGenerator object.", "history": "Added in API level 1", "FullName": "public final String getAlgorithm ()"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_javax#crypto#KeyGenerator_E@", "the new KeyGenerator object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested key algorithm. See the KeyGenerator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified algorithm is null."], ["@B_java#security#NoSuchAlgorithmException_E@", "if a KeyGeneratorSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyGenerator object that generates secret keys for the specified algorithm. A new KeyGenerator object encapsulating the KeyGeneratorSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static final KeyGenerator getInstance (String algorithm, String provider)"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_javax#crypto#KeyGenerator_E@", "the new KeyGenerator object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested key algorithm. See the KeyGenerator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified algorithm is null."], ["@B_java#security#NoSuchAlgorithmException_E@", "if a KeyGeneratorSpi implementation for the specified algorithm is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyGenerator object that generates secret keys for the specified algorithm. A new KeyGenerator object encapsulating the KeyGeneratorSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static final KeyGenerator getInstance (String algorithm, Provider provider)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this KeyGenerator object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this KeyGenerator object.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "KeyGenerator(javax.crypto.KeyGeneratorSpi,java.security.Provider,java.lang.String)": {"Returns": [], "Parameters": [["@B_javax#crypto#KeyGeneratorSpi_E@", "KeyGeneratorSpi: the delegate"], ["@B_java#security#Provider_E@", "Provider: the provider"], ["@B_java#lang#String_E@", "String: the algorithm"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a KeyGenerator object.", "history": "Added in API level 1", "FullName": "protected KeyGenerator (KeyGeneratorSpi keyGenSpi, Provider provider, String algorithm)"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_javax#crypto#KeyGenerator_E@", "the new KeyGenerator object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested key algorithm. See the KeyGenerator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified algorithm is null."], ["@B_java#security#NoSuchAlgorithmException_E@", "if a KeyGeneratorSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyGenerator object that generates secret keys for the specified algorithm. A new KeyGenerator object encapsulating the KeyGeneratorSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static final KeyGenerator getInstance (String algorithm, String provider)"}, "init(java.security.SecureRandom)": {"Returns": [], "Parameters": [["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness for this generator"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes this key generator.", "history": "Added in API level 1", "FullName": "public final void init (SecureRandom random)"}, "generateKey()": {"Returns": [["@B_javax#crypto#SecretKey_E@", "the new key"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates a secret key.", "history": "Added in API level 1", "FullName": "public final SecretKey generateKey ()"}, "getInstance(java.lang.String)": {"Returns": [["@B_javax#crypto#KeyGenerator_E@", "the new KeyGenerator object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested key algorithm. See the KeyGenerator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified algorithm is null."], ["@B_java#security#NoSuchAlgorithmException_E@", "if no Provider supports a KeyGeneratorSpi implementation for the specified algorithm."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyGenerator object that generates secret keys for the specified algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new KeyGenerator object encapsulating the KeyGeneratorSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static final KeyGenerator getInstance (String algorithm)"}, "init(int)": {"Returns": [], "Parameters": [["int", "int: the keysize. This is an algorithm-specific metric, specified in number of bits."]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if the keysize is wrong or not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this key generator for a certain keysize. If this key generator requires any random bytes, it will get them using the @B_java#security#SecureRandom_E@ implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness will be used.)", "history": "Added in API level 1", "FullName": "public final void init (int keysize)"}, "init(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {"Returns": [], "Parameters": [["@B_java#security#spec#AlgorithmParameterSpec_E@", "AlgorithmParameterSpec: the key generation parameters"], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness for this key generator"]], "Throws": [["@B_java#security#InvalidAlgorithmParameterException_E@", "if params is inappropriate for this key generator"]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this key generator with the specified parameter set and a user-provided source of randomness.", "history": "Added in API level 1", "FullName": "public final void init (AlgorithmParameterSpec params, SecureRandom random)"}, "init(int, java.security.SecureRandom)": {"Returns": [], "Parameters": [["int", "int: the keysize. This is an algorithm-specific metric, specified in number of bits."], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness for this key generator"]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if the keysize is wrong or not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this key generator for a certain keysize, using a user-provided source of randomness.", "history": "added in API level 1", "FullName": "public final void init (int keysize, SecureRandom random)"}, "init(java.security.spec.AlgorithmParameterSpec)": {"Returns": [], "Parameters": [["@B_java#security#spec#AlgorithmParameterSpec_E@", "AlgorithmParameterSpec: the key generation parameters"]], "Throws": [["@B_java#security#InvalidAlgorithmParameterException_E@", "if the given parameters are inappropriate for this key generator"]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this key generator with the specified parameter set. If this key generator requires any random bytes, it will get them using the @B_java#security#SecureRandom_E@ implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness will be used.)", "history": "Added in API level 1", "FullName": "public final void init (AlgorithmParameterSpec params)"}}, "Inheritance": [], "ClassName": "javax.crypto.KeyGenerator", "ClassDesc": "This class provides the functionality of a secret (symmetric) key generator. Key generators are constructed using one of the getInstance class methods of this class. KeyGenerator objects are reusable, i.e., after a key has been generated, the same KeyGenerator object can be re-used to generate further keys. There are two ways to generate a key: in an algorithm-independent manner, and in an algorithm-specific manner. The only difference between the two is the initialization of the object: All key generators share the concepts of a @B_javax#crypto#KeyGenerator#init_E@ method in this KeyGenerator class that takes these two universally shared types of arguments. There is also one that takes just a keysize argument, and uses the SecureRandom implementation of the highest-priority installed provider as the source of randomness (or a system-provided source of randomness if none of the installed providers supply a SecureRandom implementation), and one that takes just a source of randomness. Since no other parameters are specified when you call the above algorithm-independent init methods, it is up to the provider what to do about the algorithm-specific parameters (if any) to be associated with each of the keys. For situations where a set of algorithm-specific parameters already exists, there are two @B_javax#crypto#KeyGenerator#init_E@ methods that have an AlgorithmParameterSpec argument. One also has a SecureRandom argument, while the other uses the SecureRandom implementation of the highest-priority installed provider as the source of randomness (or a system-provided source of randomness if none of the installed providers supply a SecureRandom implementation). In case the client does not explicitly initialize the KeyGenerator (via a call to an init method), each provider must supply (and document) a default initialization. Android provides the following KeyGenerator algorithms:"}