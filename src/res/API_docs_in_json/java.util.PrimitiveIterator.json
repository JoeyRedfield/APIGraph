{"Functions": {"forEachRemaining(T_CONS)": {"Returns": [], "Parameters": [["T_CONS", "T_CONS: The action to be performed for each element"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified action is null"]], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each remaining element, in the order elements occur when iterating, until all elements have been processed or the action throws an exception. Errors or runtime exceptions thrown by the action are relayed to the caller.", "history": "Added in API level 24", "FullName": "public abstract void forEachRemaining (T_CONS action)"}}, "Inheritance": [], "ClassName": "java.util.PrimitiveIterator<T, T_CONS>", "ClassDesc": "A base type for primitive specializations of Iterator. Specialized subtypes are provided for @B_java#util#PrimitiveIterator#OfInt_E@, @B_java#util#PrimitiveIterator#OfLong_E@, and @B_java#util#PrimitiveIterator#OfDouble_E@ values. The specialized subtype default implementations of @B_java#util#Iterator#next_E@ and @B_java#util#Iterator#forEachRemaining_E@ box primitive values to instances of their corresponding wrapper class. Such boxing may offset any advantages gained when using the primitive specializations. To avoid boxing, the corresponding primitive-based methods should be used. For example, @B_java#util#PrimitiveIterator#OfInt#nextInt_E@ and @B_java#util#PrimitiveIterator#OfInt#forEachRemaining_E@ should be used in preference to @B_java#util#PrimitiveIterator#OfInt#next_E@ and @B_java#util#Iterator#forEachRemaining_E@. Iteration of primitive values using boxing-based methods @B_java#util#Iterator#next_E@ and @B_java#util#Iterator#forEachRemaining_E@, does not affect the order in which the values, transformed to boxed values, are encountered."}