{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "the String representation of the current value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the String representation of the current value.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getAndSet(boolean)": {"Returns": [["boolean", "the previous value"]], "Parameters": [["boolean", "boolean: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets to the given value and returns the previous value.", "history": "Added in API level 1", "FullName": "public final boolean getAndSet (boolean newValue)"}, "get()": {"Returns": [["boolean", "the current value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current value.", "history": "Added in API level 1", "FullName": "public final boolean get ()"}, "compareAndSet(boolean, boolean)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["boolean", "boolean: the expected value"], ["boolean", "boolean: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value.", "history": "added in API level 1", "FullName": "public final boolean compareAndSet (boolean expect, boolean update)"}, "set(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unconditionally sets to the given value.", "history": "Added in API level 1", "FullName": "public final void set (boolean newValue)"}, "AtomicBoolean()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicBoolean with initial value false.", "history": "Added in API level 1", "FullName": "public AtomicBoolean ()"}, "lazySet(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Eventually sets to the given value.", "history": "Added in API level 9", "FullName": "public final void lazySet (boolean newValue)"}, "weakCompareAndSet(boolean, boolean)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["boolean", "boolean: the expected value"], ["boolean", "boolean: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value. compareAndSet.", "history": "added in API level 1", "FullName": "public boolean weakCompareAndSet (boolean expect, boolean update)"}, "compareAndSet(boolean,boolean)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["boolean", "boolean: the expected value"], ["boolean", "boolean: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value.", "history": "Added in API level 1", "FullName": "public final boolean compareAndSet (boolean expect, boolean update)"}, "AtomicBoolean(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the initial value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicBoolean with the given initial value.", "history": "Added in API level 1", "FullName": "public AtomicBoolean (boolean initialValue)"}, "weakCompareAndSet(boolean,boolean)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["boolean", "boolean: the expected value"], ["boolean", "boolean: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value. compareAndSet.", "history": "Added in API level 1", "FullName": "public boolean weakCompareAndSet (boolean expect, boolean update)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.atomic.AtomicBoolean", "ClassDesc": "A boolean value that may be updated atomically. See the @B_java#util#concurrent#atomic#package-summary_E@ package specification for description of the properties of atomic variables. An AtomicBoolean is used in applications such as atomically updated flags, and cannot be used as a replacement for a @B_java#lang#Boolean_E@."}