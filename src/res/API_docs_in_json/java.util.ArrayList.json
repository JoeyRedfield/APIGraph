{"Functions": {"add(int,E)": {"Returns": [], "Parameters": [["int", "int: index at which the specified element is to be inserted"], ["E", "E: element to be inserted"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).", "history": "Added in API level 1", "FullName": "public void add (int index, E element)"}, "removeIf(java.util.function.Predicate<?superE>)": {"Returns": [["boolean", "true if any elements were removed"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a predicate which returns true for elements to be removed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements of this collection that satisfy the given predicate. Errors or runtime exceptions thrown during iteration or by the predicate are relayed to the caller.", "history": "Added in API level 24", "FullName": "public boolean removeIf (Predicate<? super E> filter)"}, "listIterator()": {"Returns": [["@B_java#util#ListIterator_E@", "a list iterator over the elements in this list (in proper sequence)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#ArrayList#listIterator_E@"], "Permissions": [], "Description": "Returns a list iterator over the elements in this list (in proper sequence). The returned list iterator is", "history": "Added in API level 1", "FullName": "public ListIterator<E> listIterator ()"}, "sort(java.util.Comparator<? super E>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the Comparator used to compare list elements. A null value indicates that the elements' natural ordering should be used"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts this list according to the order induced by the specified @B_java#util#Comparator_E@. All elements in this list must be c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the list). If the specified comparator is null then all elements in this list must implement the @B_java#lang#Comparable_E@ interface and the elements' This list must be modifiable, but need not be resizable. For apps running on and targeting Android versions greater than Nougat (API level > 25), @B_java#util#Collections#sort_E@ delegates to this method. Such apps must not call @B_java#util#Collections#sort_E@ from this method. Instead, prefer not overriding this method at all. If you must override it, consider this implementation:", "history": "added in API level 24", "FullName": "public void sort (Comparator<? super E> c)"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: element to be appended to this list"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified element to the end of this list.", "history": "Added in API level 1", "FullName": "public boolean add (E e)"}, "equals(java.lang.Object)": {"Returns": [["", "true if the specified object is equal to this list, false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "the object to compare to this object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the specified object to this list and return true if they are equal. Two lists are equal when they both contain the same objects in the same order.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "remove(int)": {"Returns": [["E", "the element that was removed from the list"]], "Parameters": [["int", "int: the index of the element to be removed"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes the element at the specified position in this list. Shifts any subsequent elements to the left (subtracts one from their indices).", "history": "Added in API level 1", "FullName": "public E remove (int index)"}, "hashCode()": {"Returns": [["", "the hash code."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hash code of this list. The hash code is calculated by taking each element's hashcode into account.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "size()": {"Returns": [["int", "the number of elements in this list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this list.", "history": "Added in API level 1", "FullName": "public int size ()"}, "listIterator(int)": {"Returns": [["@B_java#util#ListIterator_E@", "a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list"]], "Parameters": [["int", "int: index of the first element to be returned from the list iterator (by a call to @B_java#util#ListIterator#next_E@)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list. The specified index indicates the first element that would be returned by an initial call to @B_java#util#ListIterator#next_E@. An initial call to @B_java#util#ListIterator#previous_E@ would return the element with the specified index minus one. The returned list iterator is", "history": "Added in API level 1", "FullName": "public ListIterator<E> listIterator (int index)"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this list contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this list, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the first occurrence of the specified element from this list, if it is present. If the list does not contain the element, it is unchanged. More formally, removes the element with the lowest index", "history": "Added in API level 1", "FullName": "public boolean remove (Object o)"}, "removeRange(int,int)": {"Returns": [], "Parameters": [["int", "int: index of first element to be removed"], ["int", "int: index after last element to be removed"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if fromIndex or toIndex is out of range (fromIndex < 0 || fromIndex >= size() || toIndex > size() || toIndex < fromIndex)"]], "SeeAlso": [], "Permissions": [], "Description": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (toIndex - fromIndex) elements. (If toIndex==fromIndex, this operation has no effect.)", "history": "Added in API level 1", "FullName": "protected void removeRange (int fromIndex, int toIndex)"}, "addAll(int, java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["int", "int: index at which to insert the first element from the specified collection"], ["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts all of the elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator.", "history": "added in API level 1", "FullName": "public boolean addAll (int index, Collection<? extends E> c)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this list in proper sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this list in proper sequence (from first to last element). The returned array will be \"safe\" in that no references to it are maintained by this list. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 1", "FullName": "public Object[] toArray ()"}, "subList(int, int)": {"Returns": [["@B_java#util#List_E@", "a view of the specified range within this list"]], "Parameters": [["int", "int: low endpoint (inclusive) of the subList"], ["int", "int: high endpoint (exclusive) of the subList"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive. (If fromIndex and toIndex are equal, the returned list is empty.) The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa. The returned list supports all of the optional list operations. This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list. For example, the following idiom removes a range of elements from a list: @B_java#util#ArrayList#indexOf_E@ and @B_java#util#ArrayList#lastIndexOf_E@, and all of the algorithms in the @B_java#util#Collections_E@ class can be applied to a subList. The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is", "history": "added in API level 1", "FullName": "public List<E> subList (int fromIndex, int toIndex)"}, "removeRange(int, int)": {"Returns": [], "Parameters": [["int", "int: index of first element to be removed"], ["int", "int: index after last element to be removed"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if fromIndex or toIndex is out of range (fromIndex < 0 || fromIndex >= size() || toIndex > size() || toIndex < fromIndex)"]], "SeeAlso": [], "Permissions": [], "Description": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (toIndex - fromIndex) elements. (If toIndex==fromIndex, this operation has no effect.)", "history": "added in API level 1", "FullName": "protected void removeRange (int fromIndex, int toIndex)"}, "addAll(java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this list, and this list is nonempty.)", "history": "Added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "lastIndexOf(java.lang.Object)": {"Returns": [["int", "the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the highest index", "history": "Added in API level 1", "FullName": "public int lastIndexOf (Object o)"}, "ArrayList()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty list with an initial capacity of ten.", "history": "Added in API level 1", "FullName": "public ArrayList ()"}, "forEach(java.util.function.Consumer<?superE>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public void forEach (Consumer<? super E> action)"}, "ArrayList(java.util.Collection<? extends E>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose elements are to be placed into this list"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a list containing the elements of the specified collection, in the order they are returned by the collection's iterator.", "history": "added in API level 1", "FullName": "public ArrayList (Collection<? extends E> c)"}, "removeIf(java.util.function.Predicate<? super E>)": {"Returns": [["boolean", "true if any elements were removed"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a predicate which returns true for elements to be removed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements of this collection that satisfy the given predicate. Errors or runtime exceptions thrown during iteration or by the predicate are relayed to the caller.", "history": "added in API level 24", "FullName": "public boolean removeIf (Predicate<? super E> filter)"}, "addAll(java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this list, and this list is nonempty.)", "history": "added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "add(int, E)": {"Returns": [], "Parameters": [["int", "int: index at which the specified element is to be inserted"], ["E", "E: element to be inserted"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).", "history": "added in API level 1", "FullName": "public void add (int index, E element)"}, "replaceAll(java.util.function.UnaryOperator<E>)": {"Returns": [], "Parameters": [["@B_java#util#function#UnaryOperator_E@", "UnaryOperator: the operator to apply to each element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces each element of this list with the result of applying the operator to that element. Errors or runtime exceptions thrown by the operator are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void replaceAll (UnaryOperator<E> operator)"}, "sort(java.util.Comparator<?superE>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the Comparator used to compare list elements. A null value indicates that the elements' Comparable should be used"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts this list according to the order induced by the specified @B_java#util#Comparator_E@. All elements in this list must be c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the list). If the specified comparator is null then all elements in this list must implement the @B_java#lang#Comparable_E@ interface and the elements' This list must be modifiable, but need not be resizable. For apps running on and targeting Android versions greater than Nougat (API level > 25), @B_java#util#Collections#sort_E@ delegates to this method. Such apps must not call @B_java#util#Collections#sort_E@ from this method. Instead, prefer not overriding this method at all. If you must override it, consider this implementation:", "history": "Added in API level 24", "FullName": "public void sort (Comparator<? super E> c)"}, "ArrayList(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose elements are to be placed into this list"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a list containing the elements of the specified collection, in the order they are returned by the collection's iterator.", "history": "Added in API level 1", "FullName": "public ArrayList (Collection<? extends E> c)"}, "removeAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be removed from this list"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of an element of this list is incompatible with the specified collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if this list contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null"]], "SeeAlso": ["@B_java#util#Collection#contains_E@"], "Permissions": [], "Description": "Removes from this list all of its elements that are contained in the specified collection.", "history": "Added in API level 1", "FullName": "public boolean removeAll (Collection<?> c)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this list. The list will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a and fail-fast @B_java#util#Spliterator_E@ over the elements in this list. The Spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, and @B_java#util#Spliterator#ORDERED_E@. Overriding implementations should document the reporting of additional characteristic values.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "addAll(int,java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["int", "int: index at which to insert the first element from the specified collection"], ["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts all of the elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator.", "history": "Added in API level 1", "FullName": "public boolean addAll (int index, Collection<? extends E> c)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this list in proper sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this list in proper sequence. The returned iterator is", "history": "Added in API level 1", "FullName": "public Iterator<E> iterator ()"}, "ensureCapacity(int)": {"Returns": [], "Parameters": [["int", "int: the desired minimum capacity"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Increases the capacity of this", "history": "Added in API level 1", "FullName": "public void ensureCapacity (int minCapacity)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this ArrayList instance"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a shallow copy of this", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "retainAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be retained in this list"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of an element of this list is incompatible with the specified collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if this list contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null"]], "SeeAlso": ["@B_java#util#Collection#contains_E@"], "Permissions": [], "Description": "Retains only the elements in this list that are contained in the specified collection. In other words, removes from this list all of its elements that are not contained in the specified collection.", "history": "Added in API level 1", "FullName": "public boolean retainAll (Collection<?> c)"}, "indexOf(java.lang.Object)": {"Returns": [["int", "the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the lowest index", "history": "Added in API level 1", "FullName": "public int indexOf (Object o)"}, "set(int,E)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: index of the element to replace"], ["E", "E: element to be stored at the specified position"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the element at the specified position in this list with the specified element.", "history": "Added in API level 1", "FullName": "public E set (int index, E element)"}, "forEach(java.util.function.Consumer<? super E>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public void forEach (Consumer<? super E> action)"}, "isEmpty()": {"Returns": [["boolean", "true if this list contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "toArray(T[])": {"Returns": [["T[]", "an array containing the elements of the list"]], "Parameters": [["T[]", "T: the array into which the elements of the list are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose."]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this list"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array. If the list fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list. If the list fits in the specified array with room to spare (i.e., the array has more elements than the list), the element in the array immediately following the end of the collection is set to", "history": "Added in API level 1", "FullName": "public T[] toArray (T[] a)"}, "get(int)": {"Returns": [["E", "the element at the specified position in this list"]], "Parameters": [["int", "int: index of the element to return"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the element at the specified position in this list.", "history": "Added in API level 1", "FullName": "public E get (int index)"}, "ArrayList(int)": {"Returns": [], "Parameters": [["int", "int: the initial capacity of the list"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified initial capacity is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty list with the specified initial capacity.", "history": "Added in API level 1", "FullName": "public ArrayList (int initialCapacity)"}, "trimToSize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Trims the capacity of this", "history": "Added in API level 1", "FullName": "public void trimToSize ()"}, "set(int, E)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: index of the element to replace"], ["E", "E: element to be stored at the specified position"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the element at the specified position in this list with the specified element.", "history": "added in API level 1", "FullName": "public E set (int index, E element)"}, "subList(int,int)": {"Returns": [["@B_java#util#List_E@", "a view of the specified range within this list"]], "Parameters": [["int", "int: low endpoint (inclusive) of the subList"], ["int", "int: high endpoint (exclusive) of the subList"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive. (If fromIndex and toIndex are equal, the returned list is empty.) The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa. The returned list supports all of the optional list operations. This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list. For example, the following idiom removes a range of elements from a list: @B_java#util#ArrayList#indexOf_E@ and @B_java#util#ArrayList#lastIndexOf_E@, and all of the algorithms in the @B_java#util#Collections_E@ class can be applied to a subList. The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is", "history": "Added in API level 1", "FullName": "public List<E> subList (int fromIndex, int toIndex)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this list contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element whose presence in this list is to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public boolean contains (Object o)"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractList_E@"], "ClassName": "java.util.ArrayList<E>", "ClassDesc": "Resizable-array implementation of the The Each An application can increase the capacity of an @B_java#util#Collections#synchronizedList_E@ method. This is best done at creation time, to prevent accidental unsynchronized access to the list:@B_java#util#ListIterator#remove_E@ or @B_java#util#ListIterator#add_E@ methods, the iterator will throw a @B_java#util#ConcurrentModificationException_E@. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw ConcurrentModificationException on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: This class is a member of the"}