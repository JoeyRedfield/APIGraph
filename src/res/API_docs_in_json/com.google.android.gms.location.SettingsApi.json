{"Functions": {"checkLocationSettings(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.location.LocationSettingsRequest)": {"Returns": [["", "result containing the status of the request."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "an existing GoogleApiClient. It does not need to be connected at the time of this call, but the result will be delayed until the connection is complete."], ["@B_com#google#android#gms#location#LocationSettingsRequest_E@", "an object that contains all the location requirements that the client is interested in."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the relevant system settings are enabled on the device to carry out the desired location requests.", "history": "", "FullName": "public abstract PendingResult<LocationSettingsResult> checkLocationSettings (GoogleApiClient client, LocationSettingsRequest locationSettingsRequest)"}}, "Inheritance": [], "ClassName": "com.google.android.gms.location.SettingsApi", "ClassDesc": "The main entry point for interacting with the location settings-enabler APIs. This API makes it easy for an app to ensure that the device's system settings are properly configured for the app's location needs. When making a request to location services, the device's system settings may be in a state that prevents an app from obtaining the location data that it needs. For example, GPS or Wi-Fi scanning may be switched off. This intent makes it easy to: Determine if the relevant system settings are enabled on the device to carry out the desired location request. Optionally, invoke a dialog that allows the user to enable the necessary location settings with a single tap. To use this API, first create a GoogleApiClient which supports at least @B_com#google#android#gms#location#LocationServices#API_E@. Then connect the client to Google Play services: Then create a @B_com#google#android#gms#location#LocationSettingsRequest#Builder_E@ and add all of the @B_com#google#android#gms#location#LocationRequest_E@ that the app will be using: If the client is using BLE scans to derive location, it can request that BLE be enabled by calling @B_com#google#android#gms#location#LocationSettingsRequest#Builder#setNeedBle_E@: Then check whether current location settings are satisfied: When the @B_com#google#android#gms#common#api#PendingResult_E@ returns, the client can check the location settings by looking at the status code from the @B_com#google#android#gms#location#LocationSettingsResult_E@ object. The client can also retrieve the current state of the relevant location settings by calling @B_com#google#android#gms#location#LocationSettingsResult#getLocationSettingsStates_E@: If the status code is @B_com#google#android#gms#common#api#CommonStatusCodes#RESOLUTION_REQUIRED_E@, the client can call @B_com#google#android#gms#common#api#Status#startResolutionForResult_E@ to bring up a dialog, asking for user's permission to modify the location settings to satisfy those requests. The result of the dialog will be returned via @B_android#app#Activity#onActivityResult_E@. If the client is interested in which location providers are available, it can retrieve a @B_com#google#android#gms#location#LocationSettingsStates_E@ from the @B_android#content#Intent_E@ by calling @B_com#google#android#gms#location#LocationSettingsStates#fromIntent_E@:"}