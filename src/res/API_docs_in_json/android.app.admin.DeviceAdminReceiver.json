{"Functions": {"onSecurityLogsAvailable(android.content.Context,android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#retrieveSecurityLogs_E@"], "Permissions": [], "Description": "Called when a new batch of security logs can be retrieved. If a secondary user or profile is created, this callback won't be received until all users become affiliated again (even if security logging is enabled). See @B_android#app#admin#DevicePolicyManager#setAffiliationIds_E@ This callback will be re-triggered if the logs are not retrieved. This callback is only applicable to device owners.", "history": "Added in API level 24", "FullName": "public void onSecurityLogsAvailable (Context context, Intent intent)"}, "onUserRemoved(android.content.Context,android.content.Intent,android.os.UserHandle)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The @B_android#os#UserHandle_E@ of the user that has just been removed. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a user or profile is removed. This callback is only applicable to device owners.", "history": "Added in API level 26", "FullName": "public void onUserRemoved (Context context, Intent intent, UserHandle removedUser)"}, "onPasswordFailed(android.content.Context,android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "From @B_android#os#Build#VERSION_CODES#O_E@, use @B_android#app#admin#DeviceAdminReceiver#onPasswordFailed_E@ instead. Called after the user has failed at entering their device or profile challenge password, as a result of receiving @B_android#app#admin#DeviceAdminReceiver#ACTION_PASSWORD_FAILED_E@. At this point you can use @B_android#app#admin#DevicePolicyManager#getCurrentFailedPasswordAttempts_E@ to retrieve the number of failed password attempts.", "history": "Added in API level 8 Deprecated in API level 26", "FullName": "public void onPasswordFailed (Context context, Intent intent)"}, "getWho(android.content.Context)": {"Returns": [["@B_android#content#ComponentName_E@", "This value will never be null."]], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the ComponentName describing who this device administrator is, for use in @B_android#app#admin#DevicePolicyManager_E@ APIs that require the administrator to identify itself.", "history": "Added in API level 8", "FullName": "public ComponentName getWho (Context context)"}, "onBugreportShared(android.content.Context,android.content.Intent,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. Contains the URI of the bugreport file (with MIME type \"application/vnd.android.bugreport\"), that can be accessed by calling @B_android#content#Intent#getData_E@ This value must never be null."], ["@B_java#lang#String_E@", "String: SHA-256 hash of the bugreport file. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#requestBugreport_E@"], "Permissions": [], "Description": "Called when the bugreport has been shared with the device administrator app. This callback is only applicable to device owners.", "history": "Added in API level 24", "FullName": "public void onBugreportShared (Context context, Intent intent, String bugreportHash)"}, "DeviceAdminReceiver()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 8", "FullName": "public DeviceAdminReceiver ()"}, "onPasswordSucceeded(android.content.Context,android.content.Intent,android.os.UserHandle)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The user of profile for whom the password check succeeded. To see whether this user is the current profile or a parent user, check for equality with @B_android#os#Process#myUserHandle_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called after the user has succeeded at entering their device or profile challenge password, as a result of receiving @B_android#app#admin#DeviceAdminReceiver#ACTION_PASSWORD_SUCCEEDED_E@. This will only be received the first time they succeed after having previously failed.", "history": "Added in API level 26", "FullName": "public void onPasswordSucceeded (Context context, Intent intent, UserHandle user)"}, "onPasswordExpiring(android.content.Context,android.content.Intent,android.os.UserHandle)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The user or profile for whom the password is expiring. To see whether this user is the current profile or a parent user, check for equality with @B_android#os#Process#myUserHandle_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called periodically when the device or profile challenge password is about to expire or has expired. It will typically be called at these times: on device boot, once per day before the password expires, and at the time when the password expires. If the password is not updated by the user, this method will continue to be called once per day until the password is changed or the device admin disables password expiration. The admin will typically post a notification requesting the user to change their password in response to this call. The actual password expiration time can be obtained by calling @B_android#app#admin#DevicePolicyManager#getPasswordExpiration_E@ The admin should be sure to take down any notifications it posted in response to this call when it receives @B_android#app#admin#DeviceAdminReceiver#onPasswordChanged_E@.", "history": "Added in API level 26", "FullName": "public void onPasswordExpiring (Context context, Intent intent, UserHandle user)"}, "onChoosePrivateKeyAlias(android.content.Context,android.content.Intent,int,android.net.Uri,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The private key alias to return and grant access to."]], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["int", "int: The uid of the app asking for the private key and certificate pair."], ["@B_android#net#Uri_E@", "Uri: The URI to authenticate, may be null. This value may be null."], ["@B_java#lang#String_E@", "String: The alias preselected by the client, or null. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#security#KeyChain#choosePrivateKeyAlias_E@"], "Permissions": [], "Description": "Allows this receiver to select the alias for a private key and certificate pair for authentication. If this method returns null, the default @B_android#app#Activity_E@ will be shown that lets the user pick a private key and certificate pair.", "history": "Added in API level 23", "FullName": "public String onChoosePrivateKeyAlias (Context context, Intent intent, int uid, Uri uri, String alias)"}, "getManager(android.content.Context)": {"Returns": [["@B_android#app#admin#DevicePolicyManager_E@", "This value will never be null."]], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the DevicePolicyManager interface for this administrator to work with the system.", "history": "Added in API level 8", "FullName": "public DevicePolicyManager getManager (Context context)"}, "onTransferOwnershipComplete(android.content.Context,android.os.PersistableBundle)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@ This value must never be null."], ["@B_android#os#PersistableBundle_E@", "PersistableBundle: the data to be passed to the new owner This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called on the newly assigned owner (either device owner or profile owner) when the ownership transfer has completed successfully. The bundle parameter allows the original owner to pass data to the new one.", "history": "Added in API level 28", "FullName": "public void onTransferOwnershipComplete (Context context, PersistableBundle bundle)"}, "onProfileProvisioningComplete(android.content.Context,android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when provisioning of a managed profile or managed device has completed successfully. As a prerequisite for the execution of this callback the @B_android#app#admin#DeviceAdminReceiver_E@ has to declare an intent filter for @B_android#app#admin#DeviceAdminReceiver#ACTION_PROFILE_PROVISIONING_COMPLETE_E@. Its component must also be specified in the @B_android#app#admin#DevicePolicyManager#EXTRA_DEVICE_ADMIN_E@ of the @B_android#app#admin#DevicePolicyManager#ACTION_PROVISION_MANAGED_PROFILE_E@ intent that started the managed provisioning. When provisioning of a managed profile is complete, the managed profile is hidden until the profile owner calls @B_android#app#admin#DevicePolicyManager#setProfileEnabled_E@. Typically a profile owner will enable the profile when it has finished any additional setup such as adding an account by using the @B_android#accounts#AccountManager_E@ and calling APIs to bring the profile into the desired state. Note that provisioning completes without waiting for any server interactions, so the profile owner needs to wait for data to be available if required (e.g. Android device IDs or other data that is set as a result of server interactions). From version @B_android#os#Build#VERSION_CODES#O_E@, when managed provisioning has completed, along with this callback the activity intent @B_android#app#admin#DevicePolicyManager#ACTION_PROVISIONING_SUCCESSFUL_E@ will also be sent to the same application.", "history": "Added in API level 21", "FullName": "public void onProfileProvisioningComplete (Context context, Intent intent)"}, "onEnabled(android.content.Context,android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#createAndManageUser_E@"], "Permissions": [], "Description": "Called after the administrator is first enabled, as a result of receiving @B_android#app#admin#DeviceAdminReceiver#ACTION_DEVICE_ADMIN_ENABLED_E@. At this point you can use @B_android#app#admin#DevicePolicyManager_E@ to set your desired policies. If the admin is activated by a device owner, then the intent may contain private extras that are relevant to user setup.", "history": "Added in API level 8", "FullName": "public void onEnabled (Context context, Intent intent)"}, "onLockTaskModeExiting(android.content.Context,android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a device is exiting lock task mode.", "history": "Added in API level 21", "FullName": "public void onLockTaskModeExiting (Context context, Intent intent)"}, "onReceive(android.content.Context,android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."], ["@B_android#content#Intent_E@", "Intent: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Intercept standard device administrator broadcasts. Implementations should not override this method; it is better to implement the convenience callbacks for each action.", "history": "Added in API level 8", "FullName": "public void onReceive (Context context, Intent intent)"}, "onPasswordFailed(android.content.Context,android.content.Intent,android.os.UserHandle)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The user or profile for whom the password check failed. To see whether this user is the current profile or a parent user, check for equality with @B_android#os#Process#myUserHandle_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called after the user has failed at entering their device or profile challenge password, as a result of receiving @B_android#app#admin#DeviceAdminReceiver#ACTION_PASSWORD_FAILED_E@. At this point you can use @B_android#app#admin#DevicePolicyManager#getCurrentFailedPasswordAttempts_E@ to retrieve the number of failed password attempts.", "history": "Added in API level 26", "FullName": "public void onPasswordFailed (Context context, Intent intent, UserHandle user)"}, "onPasswordChanged(android.content.Context,android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "From @B_android#os#Build#VERSION_CODES#O_E@, use @B_android#app#admin#DeviceAdminReceiver#onPasswordChanged_E@ instead. Called after the user has changed their device or profile challenge password, as a result of receiving @B_android#app#admin#DeviceAdminReceiver#ACTION_PASSWORD_CHANGED_E@. At this point you can use @B_android#app#admin#DevicePolicyManager#getPasswordQuality_E@ to retrieve the active password characteristics.", "history": "Added in API level 8 Deprecated in API level 26", "FullName": "public void onPasswordChanged (Context context, Intent intent)"}, "onNetworkLogsAvailable(android.content.Context,android.content.Intent,long,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["long", "long: The token representing the current batch of network logs."], ["int", "int: The total count of events in the current batch of network logs. Value is 1 or greater"]], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#retrieveNetworkLogs_E@"], "Permissions": [], "Description": "Called each time a new batch of network logs can be retrieved. This callback method will only ever be called when network logging is enabled. The logs can only be retrieved while network logging is enabled. If a secondary user or profile is created, this callback won't be received until all users become affiliated again (even if network logging is enabled). It will also no longer be possible to retrieve the network logs batch with the most recent batchToken provided by this callback. See @B_android#app#admin#DevicePolicyManager#setAffiliationIds_E@. This callback is only applicable to device owners.", "history": "Added in API level 26", "FullName": "public void onNetworkLogsAvailable (Context context, Intent intent, long batchToken, int networkLogsCount)"}, "onUserStarted(android.content.Context,android.content.Intent,android.os.UserHandle)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The @B_android#os#UserHandle_E@ of the user that has just been started. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a user or profile is started. This callback is only applicable to device owners.", "history": "Added in API level 28", "FullName": "public void onUserStarted (Context context, Intent intent, UserHandle startedUser)"}, "onDisableRequested(android.content.Context,android.content.Intent)": {"Returns": [["@B_java#lang#CharSequence_E@", "Return the warning message to display to the user before being disabled; if null is returned, no message is displayed."]], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the user has asked to disable the administrator, as a result of receiving @B_android#app#admin#DeviceAdminReceiver#ACTION_DEVICE_ADMIN_DISABLE_REQUESTED_E@, giving you a chance to present a warning message to them. The message is returned as the result; if null is returned (the default implementation), no message will be displayed.", "history": "Added in API level 8", "FullName": "public CharSequence onDisableRequested (Context context, Intent intent)"}, "onBugreportFailed(android.content.Context,android.content.Intent,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["int", "int: int containing failure code. One of @B_android#app#admin#DeviceAdminReceiver#BUGREPORT_FAILURE_FAILED_COMPLETING_E@ or @B_android#app#admin#DeviceAdminReceiver#BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE_E@ Value is @B_android#app#admin#DeviceAdminReceiver#BUGREPORT_FAILURE_FAILED_COMPLETING_E@, or @B_android#app#admin#DeviceAdminReceiver#BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE_E@"]], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#requestBugreport_E@"], "Permissions": [], "Description": "Called when the bugreport collection flow has failed. This callback is only applicable to device owners.", "history": "Added in API level 24", "FullName": "public void onBugreportFailed (Context context, Intent intent, int failureCode)"}, "onPasswordChanged(android.content.Context,android.content.Intent,android.os.UserHandle)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The user or profile for whom the password changed. To see whether this user is the current profile or a parent user, check for equality with @B_android#os#Process#myUserHandle_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called after the user has changed their device or profile challenge password, as a result of receiving @B_android#app#admin#DeviceAdminReceiver#ACTION_PASSWORD_CHANGED_E@. At this point you can use @B_android#app#admin#DevicePolicyManager#getPasswordQuality_E@ to retrieve the active password characteristics.", "history": "Added in API level 26", "FullName": "public void onPasswordChanged (Context context, Intent intent, UserHandle user)"}, "onUserAdded(android.content.Context,android.content.Intent,android.os.UserHandle)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The @B_android#os#UserHandle_E@ of the user that has just been added. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a user or profile is created. This callback is only applicable to device owners.", "history": "Added in API level 26", "FullName": "public void onUserAdded (Context context, Intent intent, UserHandle newUser)"}, "onBugreportSharingDeclined(android.content.Context,android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#requestBugreport_E@"], "Permissions": [], "Description": "Called when sharing a bugreport has been cancelled by the user of the device. This callback is only applicable to device owners.", "history": "Added in API level 24", "FullName": "public void onBugreportSharingDeclined (Context context, Intent intent)"}, "onPasswordSucceeded(android.content.Context,android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "From @B_android#os#Build#VERSION_CODES#O_E@, use @B_android#app#admin#DeviceAdminReceiver#onPasswordSucceeded_E@ instead. Called after the user has succeeded at entering their device or profile challenge password, as a result of receiving @B_android#app#admin#DeviceAdminReceiver#ACTION_PASSWORD_SUCCEEDED_E@. This will only be received the first time they succeed after having previously failed.", "history": "Added in API level 8 Deprecated in API level 26", "FullName": "public void onPasswordSucceeded (Context context, Intent intent)"}, "onLockTaskModeEntering(android.content.Context,android.content.Intent,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_java#lang#String_E@", "String: The authorized package using lock task mode. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a device is entering lock task mode.", "history": "Added in API level 21", "FullName": "public void onLockTaskModeEntering (Context context, Intent intent, String pkg)"}, "onDisabled(android.content.Context,android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called prior to the administrator being disabled, as a result of receiving @B_android#app#admin#DeviceAdminReceiver#ACTION_DEVICE_ADMIN_DISABLED_E@. Upon return, you can no longer use the protected parts of the @B_android#app#admin#DevicePolicyManager_E@ API.", "history": "Added in API level 8", "FullName": "public void onDisabled (Context context, Intent intent)"}, "onSystemUpdatePending(android.content.Context,android.content.Intent,long)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["long", "long: The time as given by @B_java#lang#System#currentTimeMillis_E@ indicating when the current pending update was first available. -1 if no pending update is available."]], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#getPendingSystemUpdate_E@"], "Permissions": [], "Description": "Called when the information about a pending system update is available. Allows the receiver to be notified when information about a pending system update is available from the system update service. The same pending system update can trigger multiple calls to this method, so it is necessary to examine the incoming parameters for details about the update. This callback is only applicable to device owners and profile owners. To get further information about a pending system update (for example, whether or not the update is a security patch), the device owner or profile owner can call @B_android#app#admin#DevicePolicyManager#getPendingSystemUpdate_E@.", "history": "Added in API level 23", "FullName": "public void onSystemUpdatePending (Context context, Intent intent, long receivedTime)"}, "onPasswordExpiring(android.content.Context,android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "From @B_android#os#Build#VERSION_CODES#O_E@, use @B_android#app#admin#DeviceAdminReceiver#onPasswordExpiring_E@ instead. Called periodically when the device or profile challenge password is about to expire or has expired. It will typically be called at these times: on device boot, once per day before the password expires, and at the time when the password expires. If the password is not updated by the user, this method will continue to be called once per day until the password is changed or the device admin disables password expiration. The admin will typically post a notification requesting the user to change their password in response to this call. The actual password expiration time can be obtained by calling @B_android#app#admin#DevicePolicyManager#getPasswordExpiration_E@ The admin should be sure to take down any notifications it posted in response to this call when it receives @B_android#app#admin#DeviceAdminReceiver#onPasswordChanged_E@.", "history": "Added in API level 11 Deprecated in API level 26", "FullName": "public void onPasswordExpiring (Context context, Intent intent)"}, "onTransferAffiliatedProfileOwnershipComplete(android.content.Context,android.os.UserHandle)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@ This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: the @B_android#os#UserHandle_E@ of the affiliated user This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#transferOwnership_E@"], "Permissions": [], "Description": "Called on the device owner when the ownership of one of its affiliated profiles is transferred. This can be used when transferring both device and profile ownership when using work profile on a fully managed device. The process would look like this:", "history": "Added in API level 28", "FullName": "public void onTransferAffiliatedProfileOwnershipComplete (Context context, UserHandle user)"}, "onReadyForUserInitialization(android.content.Context,android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Do not use Called during provisioning of a managed device to allow the device initializer to perform user setup steps.", "history": "Added in API level 23 Deprecated in API level 24", "FullName": "public void onReadyForUserInitialization (Context context, Intent intent)"}, "onUserStopped(android.content.Context,android.content.Intent,android.os.UserHandle)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The @B_android#os#UserHandle_E@ of the user that has just been stopped. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a user or profile is stopped. This callback is only applicable to device owners.", "history": "Added in API level 28", "FullName": "public void onUserStopped (Context context, Intent intent, UserHandle stoppedUser)"}, "onUserSwitched(android.content.Context,android.content.Intent,android.os.UserHandle)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The running context as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The received intent as per @B_android#app#admin#DeviceAdminReceiver#onReceive_E@. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The @B_android#os#UserHandle_E@ of the user that has just been switched to. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a user or profile is switched to. This callback is only applicable to device owners.", "history": "Added in API level 28", "FullName": "public void onUserSwitched (Context context, Intent intent, UserHandle switchedUser)"}}, "Inheritance": ["@B_android#content#BroadcastReceiver_E@"], "ClassName": "android.app.admin.DeviceAdminReceiver", "ClassDesc": "Base class for implementing a device administration component. This class provides a convenience for interpreting the raw intent actions that are sent by the system. The callback methods, like the base @B_android#content#BroadcastReceiver#onReceive_E@ method, happen on the main thread of the process. Thus long running operations must be done on another thread. Note that because a receiver is done once returning from its receive function, such long-running operations should probably be done in a @B_android#app#Service_E@. When publishing your DeviceAdmin subclass as a receiver, it must handle @B_android#app#admin#DeviceAdminReceiver#ACTION_DEVICE_ADMIN_ENABLED_E@ and require the @B_android#Manifest#permission#BIND_DEVICE_ADMIN_E@ permission. A typical manifest entry would look like: The meta-data referenced here provides addition information specific to the device administrator, as parsed by the @B_android#app#admin#DeviceAdminInfo_E@ class. A typical file would be:"}