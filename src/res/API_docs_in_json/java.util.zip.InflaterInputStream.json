{"Functions": {"skip(long)": {"Returns": [["long", "the actual number of bytes skipped."]], "Parameters": [["long", "long: the number of bytes to skip"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error has occurred"], ["@B_java#lang#IllegalArgumentException_E@", "if n < 0"]], "SeeAlso": [], "Permissions": [], "Description": "Skips specified number of bytes of uncompressed data.", "history": "Added in API level 1", "FullName": "public long skip (long n)"}, "InflaterInputStream(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new input stream with a default decompressor and buffer size.", "history": "Added in API level 1", "FullName": "public InflaterInputStream (InputStream in)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if this method is invoked."]], "SeeAlso": ["@B_java#io#InputStream#mark_E@", "@B_java#io#IOException_E@"], "Permissions": [], "Description": "Repositions this stream to the position at the time the mark method was last called on this input stream. The method reset for class InflaterInputStream does nothing except throw an IOException.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "read()": {"Returns": [["int", "the byte read, or -1 if end of compressed input is reached"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a byte of uncompressed data. This method will block until enough input is available for decompression.", "history": "Added in API level 1", "FullName": "public int read ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Closes this input stream and releases any system resources associated with the stream.", "history": "Added in API level 1", "FullName": "public void close ()"}, "InflaterInputStream(java.io.InputStream,java.util.zip.Inflater)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream"], ["@B_java#util#zip#Inflater_E@", "Inflater: the decompressor (\"inflater\")"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new input stream with the specified decompressor and a default buffer size.", "history": "Added in API level 1", "FullName": "public InflaterInputStream (InputStream in, Inflater inf)"}, "fill()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Fills input buffer with more data to decompress.", "history": "Added in API level 1", "FullName": "protected void fill ()"}, "available()": {"Returns": [["int", "1 before EOF and 0 after EOF."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns 0 after EOF has been reached, otherwise always return 1. Programs should not count on this method to return the actual number of bytes that could be read without blocking.", "history": "Added in API level 1", "FullName": "public int available ()"}, "read(byte[],int,int)": {"Returns": [["int", "the actual number of bytes read, or -1 if the end of the compressed input is reached or a preset dictionary is needed"]], "Parameters": [["byte[]", "byte: the buffer into which the data is read"], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#util#zip#ZipException_E@", "if a ZIP format error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Reads uncompressed data into an array of bytes. If len is not zero, the method will block until some input can be decompressed; otherwise, no bytes are read and 0 is returned.", "history": "Added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "read(byte[], int, int)": {"Returns": [["int", "the actual number of bytes read, or -1 if the end of the compressed input is reached or a preset dictionary is needed"]], "Parameters": [["byte[]", "byte: the buffer into which the data is read"], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#util#zip#ZipException_E@", "if a ZIP format error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Reads uncompressed data into an array of bytes. If len is not zero, the method will block until some input can be decompressed; otherwise, no bytes are read and 0 is returned.", "history": "added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "InflaterInputStream(java.io.InputStream,java.util.zip.Inflater,int)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream"], ["@B_java#util#zip#Inflater_E@", "Inflater: the decompressor (\"inflater\")"], ["int", "int: the input buffer size"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if size <= 0"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new input stream with the specified decompressor and buffer size.", "history": "Added in API level 1", "FullName": "public InflaterInputStream (InputStream in, Inflater inf, int size)"}, "mark(int)": {"Returns": [], "Parameters": [["int", "int: the maximum limit of bytes that can be read before the mark position becomes invalid."]], "Throws": [], "SeeAlso": ["@B_java#io#InputStream#reset_E@"], "Permissions": [], "Description": "Marks the current position in this input stream. The mark method of InflaterInputStream does nothing.", "history": "Added in API level 1", "FullName": "public void mark (int readlimit)"}, "markSupported()": {"Returns": [["boolean", "a boolean indicating if this stream type supports the mark and reset methods."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#InputStream#mark_E@", "@B_java#io#InputStream#reset_E@"], "Permissions": [], "Description": "Tests if this input stream supports the mark and reset methods. The markSupported method of InflaterInputStream returns false.", "history": "Added in API level 1", "FullName": "public boolean markSupported ()"}}, "Inheritance": ["@B_java#io#InputStream_E@", "@B_java#io#FilterInputStream_E@"], "ClassName": "java.util.zip.InflaterInputStream", "ClassDesc": "This class implements a stream filter for uncompressing data in the \"deflate\" compression format. It is also used as the basis for other decompression filters, such as GZIPInputStream."}