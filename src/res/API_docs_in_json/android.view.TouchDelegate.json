{"Functions": {"getTouchDelegateInfo()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo#TouchDelegateInfo_E@", "A TouchDelegateInfo. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_android#view#accessibility#AccessibilityNodeInfo#TouchDelegateInfo_E@ mapping from regions (in view coordinates) to delegated views for accessibility usage.", "history": "Added in API level 29", "FullName": "public AccessibilityNodeInfo.TouchDelegateInfo getTouchDelegateInfo ()"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was consumed by the delegate, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The touch event to forward This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Forward touch events to the delegate view if the event is within the bounds specified in the constructor.", "history": "Added in API level 1", "FullName": "public boolean onTouchEvent (MotionEvent event)"}, "TouchDelegate(android.graphics.Rect,android.view.View)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: Bounds in local coordinates of the containing view that should be mapped to the delegate view"], ["@B_android#view#View_E@", "View: The view that should receive motion events"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor", "history": "Added in API level 1", "FullName": "public TouchDelegate (Rect bounds, View delegateView)"}, "onTouchExplorationHoverEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was consumed by the delegate, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The hover event to forward This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityManager#isTouchExplorationEnabled_E@"], "Permissions": [], "Description": "Forward hover events to the delegate view if the event is within the bounds specified in the constructor and touch exploration is enabled. This method is provided for accessibility purposes so touch exploration, which is commonly used by screen readers, can properly place accessibility focus on views that use touch delegates. Therefore, touch exploration must be enabled for hover events to be dispatched through the delegate.", "history": "Added in API level 29", "FullName": "public boolean onTouchExplorationHoverEvent (MotionEvent event)"}}, "Inheritance": [], "ClassName": "android.view.TouchDelegate", "ClassDesc": "Helper class to handle situations where you want a view to have a larger touch area than its actual view bounds. The view whose touch area is changed is called the delegate view. This class should be used by an ancestor of the delegate. To use a TouchDelegate, first create an instance that specifies the bounds that should be mapped to the delegate and the delegate view itself. The ancestor should then forward all of its touch events received in its @B_android#view#View#onTouchEvent_E@ to @B_android#view#TouchDelegate#onTouchEvent_E@."}