{"Functions": {"getMotionRanges()": {"Returns": [["@B_java#util#List_E@", "The motion ranges for the device."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#InputDevice#getMotionRange_E@"], "Permissions": [], "Description": "Gets the ranges for all axes supported by the device.", "history": "Added in API level 12", "FullName": "public List<InputDevice.MotionRange> getMotionRanges ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 9", "FullName": "public int describeContents ()"}, "getDeviceIds()": {"Returns": [["int[]", "The input device ids."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the ids of all input devices in the system.", "history": "Added in API level 9", "FullName": "public static int[] getDeviceIds ()"}, "getKeyboardType()": {"Returns": [["int", "The keyboard type."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the keyboard type.", "history": "Added in API level 9", "FullName": "public int getKeyboardType ()"}, "isVirtual()": {"Returns": [["boolean", "True if the device is virtual."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyCharacterMap_E@"], "Permissions": [], "Description": "Returns true if the device is a virtual input device rather than a real one, such as the virtual keyboard (see @B_android#view#KeyCharacterMap#VIRTUAL_KEYBOARD_E@). Virtual input devices are provided to implement system-level functionality and should not be seen or configured by users.", "history": "Added in API level 16", "FullName": "public boolean isVirtual ()"}, "hasMicrophone()": {"Returns": [["boolean", "Whether the device has a built-in microphone."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports whether the device has a built-in microphone.", "history": "Added in API level 23", "FullName": "public boolean hasMicrophone ()"}, "getId()": {"Returns": [["int", "The input device id."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the input device id. Each input device receives a unique id when it is first configured by the system. The input device id may change when the system is restarted or if the input device is disconnected, reconnected or reconfigured at any time. If you require a stable identifier for a device that persists across boots and reconfigurations, use @B_android#view#InputDevice#getDescriptor_E@.", "history": "Added in API level 9", "FullName": "public int getId ()"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "The input device name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the name of this input device.", "history": "Added in API level 9", "FullName": "public String getName ()"}, "getMotionRange(int)": {"Returns": [["@B_android#view#InputDevice#MotionRange_E@", "The range of values, or null if the requested axis is not supported by the device."]], "Parameters": [["int", "int: The axis constant."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Gets information about the range of values for a particular @B_android#view#MotionEvent_E@ axis. If the device supports multiple sources, the same axis may have different meanings for each source. Returns information about the first axis found for any source. To obtain information about the axis for a specific source, use @B_android#view#InputDevice#getMotionRange_E@.", "history": "Added in API level 9", "FullName": "public InputDevice.MotionRange getMotionRange (int axis)"}, "getDescriptor()": {"Returns": [["@B_java#lang#String_E@", "The input device descriptor."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the input device descriptor, which is a stable identifier for an input device. An input device descriptor uniquely identifies an input device. Its value is intended to be persistent across system restarts, and should not change even if the input device is disconnected, reconnected or reconfigured at any time. It is possible for there to be multiple @B_android#view#InputDevice_E@ instances that have the same input device descriptor. This might happen in situations where a single human input device registers multiple @B_android#view#InputDevice_E@ instances (HID collections) that describe separate features of the device, such as a keyboard that also has a trackpad. Alternately, it may be that the input devices are simply indistinguishable, such as two keyboards made by the same manufacturer. The input device descriptor returned by @B_android#view#InputDevice#getDescriptor_E@ should only be used when an application needs to remember settings associated with a particular input device. For all other purposes when referring to a logical @B_android#view#InputDevice_E@ instance at runtime use the id returned by @B_android#view#InputDevice#getId_E@.", "history": "Added in API level 16", "FullName": "public String getDescriptor ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 9", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "getControllerNumber()": {"Returns": [["int", "The controller number of the device."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The controller number for a given input device. Each gamepad or joystick is given a unique, positive controller number when initially configured by the system. This number may change due to events such as device disconnects / reconnects or user initiated reassignment. Any change in number will trigger an event that can be observed by registering an @B_android#hardware#input#InputManager#InputDeviceListener_E@. All input devices which are not gamepads or joysticks will be assigned a controller number of 0.", "history": "Added in API level 19", "FullName": "public int getControllerNumber ()"}, "getDevice(int)": {"Returns": [["@B_android#view#InputDevice_E@", "The input device or null if not found."]], "Parameters": [["int", "int: The device id."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets information about the input device with the specified id.", "history": "Added in API level 9", "FullName": "public static InputDevice getDevice (int id)"}, "getKeyCharacterMap()": {"Returns": [["@B_android#view#KeyCharacterMap_E@", "The key character map."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the key character map associated with this input device.", "history": "Added in API level 9", "FullName": "public KeyCharacterMap getKeyCharacterMap ()"}, "getMotionRange(int, int)": {"Returns": [["@B_android#view#InputDevice#MotionRange_E@", "The range of values, or null if the requested axis is not supported by the device."]], "Parameters": [["int", "int: The axis constant."], ["int", "int: The source for which to return information."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Gets information about the range of values for a particular @B_android#view#MotionEvent_E@ axis used by a particular source on the device. If the device supports multiple sources, the same axis may have different meanings for each source.", "history": "added in API level 12", "FullName": "public InputDevice.MotionRange getMotionRange (int axis, int source)"}, "getProductId()": {"Returns": [["int", "The product id of a given device"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the product id for the given device, if available. A product id uniquely identifies which product within the address space of a given vendor, identified by the device's vendor id. A value of 0 will be assigned where a product id is not available.", "history": "Added in API level 19", "FullName": "public int getProductId ()"}, "isEnabled()": {"Returns": [["boolean", "Whether the input device is enabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if input device is enabled.", "history": "Added in API level 27", "FullName": "public boolean isEnabled ()"}, "getVendorId()": {"Returns": [["int", "The vendor id of a given device"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the vendor id for the given device, if available. A vendor id uniquely identifies the company who manufactured the device. A value of 0 will be assigned where a vendor id is not available.", "history": "Added in API level 19", "FullName": "public int getVendorId ()"}, "getMotionRange(int,int)": {"Returns": [["@B_android#view#InputDevice#MotionRange_E@", "The range of values, or null if the requested axis is not supported by the device."]], "Parameters": [["int", "int: The axis constant."], ["int", "int: The source for which to return information."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Gets information about the range of values for a particular @B_android#view#MotionEvent_E@ axis used by a particular source on the device. If the device supports multiple sources, the same axis may have different meanings for each source.", "history": "Added in API level 12", "FullName": "public InputDevice.MotionRange getMotionRange (int axis, int source)"}, "getSources()": {"Returns": [["int", "The supported input sources."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the input sources supported by this input device as a combined bitfield.", "history": "Added in API level 9", "FullName": "public int getSources ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 9", "FullName": "public String toString ()"}, "hasKeys(int...)": {"Returns": [["boolean[]", "An array of booleans where each member specifies whether the device is capable of generating the keycode given by the corresponding value at the same index in the keys array."]], "Parameters": [["int...", "int: The list of android keycodes to check for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether the device is capable of producing the list of keycodes.", "history": "Added in API level 19", "FullName": "public boolean[] hasKeys (int... keys)"}, "getVibrator()": {"Returns": [["@B_android#os#Vibrator_E@", "The vibrator service associated with the device, never null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the vibrator service associated with the device, if there is one. Even if the device does not have a vibrator, the result is never null. Use @B_android#os#Vibrator#hasVibrator_E@ to determine whether a vibrator is present. Note that the vibrator associated with the device may be different from the system vibrator. To obtain an instance of the system vibrator instead, call @B_android#content#Context#getSystemService_E@ with @B_android#content#Context#VIBRATOR_SERVICE_E@ as argument.", "history": "Added in API level 16", "FullName": "public Vibrator getVibrator ()"}, "isExternal()": {"Returns": [["boolean", "True if the device is external."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the device is external (connected to USB or Bluetooth or some other peripheral bus), otherwise it is built-in.", "history": "Added in API level 29", "FullName": "public boolean isExternal ()"}, "supportsSource(int)": {"Returns": [["boolean", "Whether the device can produce all of the given sources."]], "Parameters": [["int", "int: The input source or sources to check against. This can be a generic device type such as @B_android#view#InputDevice#SOURCE_MOUSE_E@, a more generic device class, such as @B_android#view#InputDevice#SOURCE_CLASS_POINTER_E@, or a combination of sources bitwise ORed together."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether the input device supports the given source or sources.", "history": "Added in API level 21", "FullName": "public boolean supportsSource (int source)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 9", "FullName": "public void writeToParcel (Parcel out, int flags)"}}, "Inheritance": [], "ClassName": "android.view.InputDevice", "ClassDesc": "Describes the capabilities of a particular input device. Each input device may support multiple classes of input. For example, a multi-function keyboard may compose the capabilities of a standard keyboard together with a track pad mouse or other pointing device. Some input devices present multiple distinguishable sources of input. Applications can query the framework about the characteristics of each distinct source. As a further wrinkle, different kinds of input sources uses different coordinate systems to describe motion events. Refer to the comments on the input source constants for the appropriate interpretation."}