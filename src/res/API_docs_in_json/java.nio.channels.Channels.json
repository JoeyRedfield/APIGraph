{"Functions": {"newChannel(java.io.OutputStream)": {"Returns": [["@B_java#nio#channels#WritableByteChannel_E@", "A new writable byte channel"]], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: The stream to which bytes are to be written"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a channel that writes bytes to the given stream. The resulting channel will not be buffered; it will simply redirect its I/O operations to the given stream. Closing the channel will in turn cause the stream to be closed.", "history": "Added in API level 1", "FullName": "public static WritableByteChannel newChannel (OutputStream out)"}, "newWriter(java.nio.channels.WritableByteChannel,java.nio.charset.CharsetEncoder,int)": {"Returns": [["@B_java#io#Writer_E@", "A new writer"]], "Parameters": [["@B_java#nio#channels#WritableByteChannel_E@", "WritableByteChannel: The channel to which bytes will be written"], ["@B_java#nio#charset#CharsetEncoder_E@", "CharsetEncoder: The charset encoder to be used"], ["int", "int: The minimum capacity of the internal byte buffer, or -1 if an implementation-dependent default capacity is to be used"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a writer that encodes characters using the given encoder and writes the resulting bytes to the given channel. The resulting stream will contain an internal output buffer of at least @B_java#nio#channels#IllegalBlockingModeException_E@ will be thrown. The resulting stream will not otherwise be buffered. Closing the stream will in turn cause the channel to be closed.", "history": "Added in API level 1", "FullName": "public static Writer newWriter (WritableByteChannel ch, CharsetEncoder enc, int minBufferCap)"}, "newReader(java.nio.channels.ReadableByteChannel,java.nio.charset.CharsetDecoder,int)": {"Returns": [["@B_java#io#Reader_E@", "A new reader"]], "Parameters": [["@B_java#nio#channels#ReadableByteChannel_E@", "ReadableByteChannel: The channel from which bytes will be read"], ["@B_java#nio#charset#CharsetDecoder_E@", "CharsetDecoder: The charset decoder to be used"], ["int", "int: The minimum capacity of the internal byte buffer, or -1 if an implementation-dependent default capacity is to be used"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a reader that decodes bytes from the given channel using the given decoder. The resulting stream will contain an internal input buffer of at least @B_java#nio#channels#IllegalBlockingModeException_E@ will be thrown. The resulting stream will not otherwise be buffered, and it will not support the @B_java#io#Reader#mark_E@ or @B_java#io#Reader#reset_E@ methods. Closing the stream will in turn cause the channel to be closed.", "history": "Added in API level 1", "FullName": "public static Reader newReader (ReadableByteChannel ch, CharsetDecoder dec, int minBufferCap)"}, "newOutputStream(java.nio.channels.WritableByteChannel)": {"Returns": [["@B_java#io#OutputStream_E@", "A new output stream"]], "Parameters": [["@B_java#nio#channels#WritableByteChannel_E@", "WritableByteChannel: The channel to which bytes will be written"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a stream that writes bytes to the given channel. The @B_java#nio#channels#IllegalBlockingModeException_E@ if invoked while the underlying channel is in non-blocking mode. The stream will not be buffered. The stream will be safe for access by multiple concurrent threads. Closing the stream will in turn cause the channel to be closed.", "history": "Added in API level 1", "FullName": "public static OutputStream newOutputStream (WritableByteChannel ch)"}, "newInputStream(java.nio.channels.AsynchronousByteChannel)": {"Returns": [["@B_java#io#InputStream_E@", "A new input stream"]], "Parameters": [["@B_java#nio#channels#AsynchronousByteChannel_E@", "AsynchronousByteChannel: The channel from which bytes will be read"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a stream that reads bytes from the given channel. The stream will not be buffered, and it will not support the @B_java#io#InputStream#mark_E@ or @B_java#io#InputStream#reset_E@ methods. The stream will be safe for access by multiple concurrent threads. Closing the stream will in turn cause the channel to be closed.", "history": "Added in API level 26", "FullName": "public static InputStream newInputStream (AsynchronousByteChannel ch)"}, "newWriter(java.nio.channels.WritableByteChannel,java.lang.String)": {"Returns": [["@B_java#io#Writer_E@", "A new writer"]], "Parameters": [["@B_java#nio#channels#WritableByteChannel_E@", "WritableByteChannel: The channel to which bytes will be written"], ["@B_java#lang#String_E@", "String: The name of the charset to be used"]], "Throws": [["@B_java#nio#charset#UnsupportedCharsetException_E@", "If no support for the named charset is available in this instance of the Java virtual machine"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a writer that encodes characters according to the named charset and writes the resulting bytes to the given channel. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public static Writer newWriter (WritableByteChannel ch, String csName)"}, "newReader(java.nio.channels.ReadableByteChannel,java.lang.String)": {"Returns": [["@B_java#io#Reader_E@", "A new reader"]], "Parameters": [["@B_java#nio#channels#ReadableByteChannel_E@", "ReadableByteChannel: The channel from which bytes will be read"], ["@B_java#lang#String_E@", "String: The name of the charset to be used"]], "Throws": [["@B_java#nio#charset#UnsupportedCharsetException_E@", "If no support for the named charset is available in this instance of the Java virtual machine"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a reader that decodes bytes from the given channel according to the named charset. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public static Reader newReader (ReadableByteChannel ch, String csName)"}, "newChannel(java.io.InputStream)": {"Returns": [["@B_java#nio#channels#ReadableByteChannel_E@", "A new readable byte channel"]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: The stream from which bytes are to be read"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a channel that reads bytes from the given stream. The resulting channel will not be buffered; it will simply redirect its I/O operations to the given stream. Closing the channel will in turn cause the stream to be closed.", "history": "Added in API level 1", "FullName": "public static ReadableByteChannel newChannel (InputStream in)"}, "newInputStream(java.nio.channels.ReadableByteChannel)": {"Returns": [["@B_java#io#InputStream_E@", "A new input stream"]], "Parameters": [["@B_java#nio#channels#ReadableByteChannel_E@", "ReadableByteChannel: The channel from which bytes will be read"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a stream that reads bytes from the given channel. The @B_java#nio#channels#IllegalBlockingModeException_E@ if invoked while the underlying channel is in non-blocking mode. The stream will not be buffered, and it will not support the @B_java#io#InputStream#mark_E@ or @B_java#io#InputStream#reset_E@ methods. The stream will be safe for access by multiple concurrent threads. Closing the stream will in turn cause the channel to be closed.", "history": "Added in API level 1", "FullName": "public static InputStream newInputStream (ReadableByteChannel ch)"}, "newOutputStream(java.nio.channels.AsynchronousByteChannel)": {"Returns": [["@B_java#io#OutputStream_E@", "A new output stream"]], "Parameters": [["@B_java#nio#channels#AsynchronousByteChannel_E@", "AsynchronousByteChannel: The channel to which bytes will be written"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a stream that writes bytes to the given channel. The stream will not be buffered. The stream will be safe for access by multiple concurrent threads. Closing the stream will in turn cause the channel to be closed.", "history": "Added in API level 26", "FullName": "public static OutputStream newOutputStream (AsynchronousByteChannel ch)"}}, "Inheritance": [], "ClassName": "java.nio.channels.Channels", "ClassDesc": "Utility methods for channels and streams. This class defines static methods that support the interoperation of the stream classes of the"}