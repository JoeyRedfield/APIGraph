{"Functions": {"onCloseWindow(android.webkit.WebView)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that needs to be closed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application to close the given WebView and remove it from the view system if necessary. At this point, WebCore has stopped any loading in this window and has removed any cross-scripting ability in javascript. As with @B_android#webkit#WebChromeClient#onCreateWindow_E@, the application should ensure that any URL or security indicator displayed is updated so that the user can tell that the page they were interacting with has been closed.", "history": "Added in API level 1", "FullName": "public void onCloseWindow (WebView window)"}, "onRequestFocus(android.webkit.WebView)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that needs to be focused."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request display and focus for this WebView. This may happen due to another WebView opening a link in this WebView and requesting that this WebView be displayed.", "history": "Added in API level 1", "FullName": "public void onRequestFocus (WebView view)"}, "onShowCustomView(android.view.View,int,android.webkit.WebChromeClient.CustomViewCallback)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: is the View object to be shown."], ["int", "int: An orientation constant as used in @B_android#content#pm#ActivityInfo#screenOrientation_E@."], ["@B_android#webkit#WebChromeClient#CustomViewCallback_E@", "WebChromeClient.CustomViewCallback: is the callback to be invoked if and when the view is dismissed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method supports the obsolete plugin mechanism, and will not be invoked in future Notify the host application that the current page would like to show a custom View in a particular orientation.", "history": "Added in API level 14 Deprecated in API level 18", "FullName": "public void onShowCustomView (View view, int requestedOrientation, WebChromeClient.CustomViewCallback callback)"}, "onShowFileChooser(android.webkit.WebView,android.webkit.ValueCallback<android.net.Uri[]>,android.webkit.WebChromeClient.FileChooserParams)": {"Returns": [["boolean", "true if filePathCallback will be invoked, false to use default handling."]], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView instance that is initiating the request."], ["@B_android#webkit#ValueCallback_E@", "ValueCallback: Invoke this callback to supply the list of paths to files to upload, or null to cancel. Must only be called if the @B_android#webkit#WebChromeClient#onShowFileChooser_E@ implementation returns true."], ["@B_android#webkit#WebChromeClient#FileChooserParams_E@", "WebChromeClient.FileChooserParams: Describes the mode of file chooser to be opened, and options to be used with it."]], "Throws": [], "SeeAlso": ["@B_android#webkit#WebChromeClient#FileChooserParams_E@"], "Permissions": [], "Description": "Tell the client to show a file chooser. This is called to handle HTML forms with 'file' input type, in response to the user pressing the \"Select File\" button. To cancel the request, call filePathCallback.onReceiveValue(null) and return true.", "history": "Added in API level 21", "FullName": "public boolean onShowFileChooser (WebView webView, ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)"}, "onGeolocationPermissionsHidePrompt()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that a request for Geolocation permissions, made with a previous call to @B_android#webkit#WebChromeClient#onGeolocationPermissionsShowPrompt_E@ has been canceled. Any related UI should therefore be hidden.", "history": "Added in API level 5", "FullName": "public void onGeolocationPermissionsHidePrompt ()"}, "getDefaultVideoPoster()": {"Returns": [["@B_android#graphics#Bitmap_E@", "Bitmap The image to use as a default poster, or null if no such image is available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When not playing, video elements are represented by a 'poster' image. The image to use can be specified by the poster attribute of the video tag in HTML. If the attribute is absent, then a default poster will be used. This method allows the ChromeClient to provide that default image.", "history": "Added in API level 7", "FullName": "public Bitmap getDefaultVideoPoster ()"}, "onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)": {"Returns": [["boolean", "boolean Whether the client will handle the confirm dialog."]], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that initiated the callback."], ["@B_java#lang#String_E@", "String: The url of the page requesting the dialog."], ["@B_java#lang#String_E@", "String: Message to be displayed in the window."], ["@B_android#webkit#JsResult_E@", "JsResult: A JsResult used to send the user's response to javascript."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tell the client to display a confirm dialog to the user. If the client returns true, WebView will assume that the client will handle the confirm dialog and call the appropriate JsResult method. If the client returns false, a default value of false will be returned to javascript. The default behavior is to return false.", "history": "Added in API level 1", "FullName": "public boolean onJsConfirm (WebView view, String url, String message, JsResult result)"}, "onPermissionRequest(android.webkit.PermissionRequest)": {"Returns": [], "Parameters": [["@B_android#webkit#PermissionRequest_E@", "PermissionRequest: the PermissionRequest from current web content."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that web content is requesting permission to access the specified resources and the permission currently isn't granted or denied. The host application must invoke @B_android#webkit#PermissionRequest#grant_E@ or @B_android#webkit#PermissionRequest#deny_E@. If this method isn't overridden, the permission is denied.", "history": "Added in API level 21", "FullName": "public void onPermissionRequest (PermissionRequest request)"}, "onJsTimeout()": {"Returns": [["boolean", "boolean Whether the JavaScript execution should be interrupted."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is no longer supported and will not be invoked. Tell the client that a JavaScript execution timeout has occured. And the client may decide whether or not to interrupt the execution. If the client returns true, the JavaScript will be interrupted. If the client returns false, the execution will continue. Note that in the case of continuing execution, the timeout counter will be reset, and the callback will continue to occur if the script does not finish at the next check point.", "history": "Added in API level 7 Deprecated in API level 17", "FullName": "public boolean onJsTimeout ()"}, "WebChromeClient()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public WebChromeClient ()"}, "onPermissionRequestCanceled(android.webkit.PermissionRequest)": {"Returns": [], "Parameters": [["@B_android#webkit#PermissionRequest_E@", "PermissionRequest: the PermissionRequest that needs be canceled."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that the given permission request has been canceled. Any related UI should therefore be hidden.", "history": "Added in API level 21", "FullName": "public void onPermissionRequestCanceled (PermissionRequest request)"}, "onHideCustomView()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that the current page has exited full screen mode. The host application must hide the custom View (the View which was previously passed to @B_android#webkit#WebChromeClient#onShowCustomView_E@). After this call, web content will render in the original WebView again. @B_android#webkit#WebChromeClient#onShowCustomView_E@.", "history": "Added in API level 7", "FullName": "public void onHideCustomView ()"}, "onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions.Callback)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The origin of the web content attempting to use the Geolocation API."], ["@B_android#webkit#GeolocationPermissions#Callback_E@", "GeolocationPermissions.Callback: The callback to use to set the permission state for the origin."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that web content from the specified origin is attempting to use the Geolocation API, but no permission state is currently set for that origin. The host application should invoke the specified callback with the desired permission state. See @B_android#webkit#GeolocationPermissions_E@ for details. Note that for applications targeting Android N and later SDKs (API level > @B_android#os#Build#VERSION_CODES#M_E@) this method is only called for requests originating from secure origins such as https. On non-secure origins geolocation requests are automatically denied.", "history": "Added in API level 5", "FullName": "public void onGeolocationPermissionsShowPrompt (String origin, GeolocationPermissions.Callback callback)"}, "onShowCustomView(android.view.View,android.webkit.WebChromeClient.CustomViewCallback)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: is the View object to be shown."], ["@B_android#webkit#WebChromeClient#CustomViewCallback_E@", "WebChromeClient.CustomViewCallback: invoke this callback to request the page to exit full screen mode."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that the current page has entered full screen mode. After this call, web content will no longer be rendered in the WebView, but will instead be rendered in view. The host application should add this View to a Window which is configured with @B_android#view#WindowManager#LayoutParams#FLAG_FULLSCREEN_E@ flag in order to actually display this web content full screen. The application may explicitly exit fullscreen mode by invoking callback (ex. when the user presses the back button). However, this is generally not necessary as the web page will often show its own UI to close out of fullscreen. Regardless of how the WebView exits fullscreen mode, WebView will invoke @B_android#webkit#WebChromeClient#onHideCustomView_E@, signaling for the application to remove the custom View. If this method is not overridden, WebView will report to the web page it does not support fullscreen mode and will not honor the web page's request to run in fullscreen mode. @B_android#webkit#WebChromeClient#onHideCustomView_E@.", "history": "Added in API level 7", "FullName": "public void onShowCustomView (View view, WebChromeClient.CustomViewCallback callback)"}, "onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage.QuotaUpdater)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The URL of the page that triggered the notification"], ["@B_java#lang#String_E@", "String: The identifier of the database where the quota was exceeded."], ["long", "long: The quota for the origin, in bytes"], ["long", "long: The estimated size of the offending database, in bytes"], ["long", "long: The total quota for all origins, in bytes"], ["@B_android#webkit#WebStorage#QuotaUpdater_E@", "WebStorage.QuotaUpdater: An instance of @B_android#webkit#WebStorage#QuotaUpdater_E@ which must be used to inform the WebView of the new quota."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is no longer called; WebView now uses the HTML5 / JavaScript Quota Management API. Tell the client that the quota has been exceeded for the Web SQL Database API for a particular origin and request a new quota. The client must respond by invoking the @B_android#webkit#WebStorage#QuotaUpdater#updateQuota_E@ method of the supplied @B_android#webkit#WebStorage#QuotaUpdater_E@ instance. The minimum value that can be set for the new quota is the current quota. The default implementation responds with the current quota, so the quota will not be increased.", "history": "Added in API level 5 Deprecated in API level 19", "FullName": "public void onExceededDatabaseQuota (String url, String databaseIdentifier, long quota, long estimatedDatabaseSize, long totalQuota, WebStorage.QuotaUpdater quotaUpdater)"}, "onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage.QuotaUpdater)": {"Returns": [], "Parameters": [["long", "long: The amount of storage required by the Application Cache operation that triggered this notification, in bytes."], ["long", "long: the current maximum Application Cache size, in bytes"], ["@B_android#webkit#WebStorage#QuotaUpdater_E@", "WebStorage.QuotaUpdater: An instance of @B_android#webkit#WebStorage#QuotaUpdater_E@ which must be used to inform the WebView of the new quota."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is no longer called; WebView now uses the HTML5 / JavaScript Quota Management API. Notify the host application that the Application Cache has reached the maximum size. The client must respond by invoking the @B_android#webkit#WebStorage#QuotaUpdater#updateQuota_E@ method of the supplied @B_android#webkit#WebStorage#QuotaUpdater_E@ instance. The minimum value that can be set for the new quota is the current quota. The default implementation responds with the current quota, so the quota will not be increased.", "history": "Added in API level 7 Deprecated in API level 19", "FullName": "public void onReachedMaxAppCacheSize (long requiredStorage, long quota, WebStorage.QuotaUpdater quotaUpdater)"}, "onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult)": {"Returns": [["boolean", "boolean Whether the client will handle the prompt dialog."]], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that initiated the callback."], ["@B_java#lang#String_E@", "String: The url of the page requesting the dialog."], ["@B_java#lang#String_E@", "String: Message to be displayed in the window."], ["@B_java#lang#String_E@", "String: The default value displayed in the prompt dialog."], ["@B_android#webkit#JsPromptResult_E@", "JsPromptResult: A JsPromptResult used to send the user's reponse to javascript."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tell the client to display a prompt dialog to the user. If the client returns true, WebView will assume that the client will handle the prompt dialog and call the appropriate JsPromptResult method. If the client returns false, a default value of false will be returned to to javascript. The default behavior is to return false.", "history": "Added in API level 1", "FullName": "public boolean onJsPrompt (WebView view, String url, String message, String defaultValue, JsPromptResult result)"}, "onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)": {"Returns": [["boolean", "boolean Whether the client will handle the alert dialog."]], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that initiated the callback."], ["@B_java#lang#String_E@", "String: The url of the page requesting the dialog."], ["@B_java#lang#String_E@", "String: Message to be displayed in the window."], ["@B_android#webkit#JsResult_E@", "JsResult: A JsResult to confirm that the user hit enter."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tell the client to display a javascript alert dialog. If the client returns true, WebView will assume that the client will handle the dialog. If the client returns false, it will continue execution.", "history": "Added in API level 1", "FullName": "public boolean onJsAlert (WebView view, String url, String message, JsResult result)"}, "getVideoLoadingProgressView()": {"Returns": [["@B_android#view#View_E@", "View The View to be displayed whilst the video is loading. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a View to be displayed while buffering of full screen video is taking place. The host application can override this method to provide a View containing a spinner or similar.", "history": "Added in API level 7", "FullName": "public View getVideoLoadingProgressView ()"}, "onConsoleMessage(android.webkit.ConsoleMessage)": {"Returns": [["boolean", "true if the message is handled by the client."]], "Parameters": [["@B_android#webkit#ConsoleMessage_E@", "ConsoleMessage: Object containing details of the console message."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report a JavaScript console message to the host application. The ChromeClient should override this to process the log message as they see fit.", "history": "Added in API level 8", "FullName": "public boolean onConsoleMessage (ConsoleMessage consoleMessage)"}, "onJsBeforeUnload(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)": {"Returns": [["boolean", "boolean Whether the client will handle the confirm dialog."]], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that initiated the callback."], ["@B_java#lang#String_E@", "String: The url of the page requesting the dialog."], ["@B_java#lang#String_E@", "String: Message to be displayed in the window."], ["@B_android#webkit#JsResult_E@", "JsResult: A JsResult used to send the user's response to javascript."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tell the client to display a dialog to confirm navigation away from the current page. This is the result of the onbeforeunload javascript event. If the client returns true, WebView will assume that the client will handle the confirm dialog and call the appropriate JsResult method. If the client returns false, a default value of true will be returned to javascript to accept navigation away from the current page. The default behavior is to return false. Setting the JsResult to true will navigate away from the current page, false will cancel the navigation.", "history": "Added in API level 1", "FullName": "public boolean onJsBeforeUnload (WebView view, String url, String message, JsResult result)"}, "onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)": {"Returns": [["boolean", "This method should return true if the host application will create a new window, in which case resultMsg should be sent to its target. Otherwise, this method should return false. Returning false from this method but also sending resultMsg will result in undefined behavior."]], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView from which the request for a new window originated."], ["boolean", "boolean: true if the new window should be a dialog, rather than a full-size window."], ["boolean", "boolean: true if the request was initiated by a user gesture, such as the user clicking a link."], ["@B_android#os#Message_E@", "Message: The message to send when once a new WebView has been created. resultMsg.obj is a @B_android#webkit#WebView#WebViewTransport_E@ object. This should be used to transport the new WebView, by calling @B_android#webkit#WebView#WebViewTransport#setWebView_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request the host application to create a new window. If the host application chooses to honor this request, it should return true from this method, create a new WebView to host the window, insert it into the View system and send the supplied resultMsg message to its target with the new WebView as an argument. If the host application chooses not to honor the request, it should return false from this method. The default implementation of this method does nothing and hence returns false. Applications should typically not allow windows to be created when the isUserGesture flag is false, as this may be an unwanted popup. Applications should be careful how they display the new window: don't simply overlay it over the existing WebView as this may mislead the user about which site they are viewing. If your application displays the URL of the main page, make sure to also display the URL of the new window in a similar fashion. If your application does not display URLs, consider disallowing the creation of new windows entirely.", "history": "Added in API level 1", "FullName": "public boolean onCreateWindow (WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg)"}, "onReceivedTouchIconUrl(android.webkit.WebView,java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that initiated the callback."], ["@B_java#lang#String_E@", "String: The icon url."], ["boolean", "boolean: true if the url is for a precomposed touch icon."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application of the url for an apple-touch-icon.", "history": "Added in API level 7", "FullName": "public void onReceivedTouchIconUrl (WebView view, String url, boolean precomposed)"}, "onReceivedTitle(android.webkit.WebView,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that initiated the callback."], ["@B_java#lang#String_E@", "String: A String containing the new title of the document."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application of a change in the document title.", "history": "Added in API level 1", "FullName": "public void onReceivedTitle (WebView view, String title)"}, "onReceivedIcon(android.webkit.WebView,android.graphics.Bitmap)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that initiated the callback."], ["@B_android#graphics#Bitmap_E@", "Bitmap: A Bitmap containing the favicon for the current page."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application of a new favicon for the current page.", "history": "Added in API level 1", "FullName": "public void onReceivedIcon (WebView view, Bitmap icon)"}, "onProgressChanged(android.webkit.WebView,int)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that initiated the callback."], ["int", "int: Current page loading progress, represented by an integer between 0 and 100."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tell the host application the current progress of loading a page.", "history": "Added in API level 1", "FullName": "public void onProgressChanged (WebView view, int newProgress)"}, "onConsoleMessage(java.lang.String,int,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The error message to report."], ["int", "int: The line number of the error."], ["@B_java#lang#String_E@", "String: The name of the source file that caused the error."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#webkit#WebChromeClient#onConsoleMessage_E@ instead. Report a JavaScript error message to the host application. The ChromeClient should override this to process the log message as they see fit.", "history": "Added in API level 7 Deprecated in API level 15", "FullName": "public void onConsoleMessage (String message, int lineNumber, String sourceID)"}, "onProgressChanged(android.webkit.WebView, int)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that initiated the callback."], ["int", "int: Current page loading progress, represented by an integer between 0 and 100."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tell the host application the current progress of loading a page.", "history": "added in API level 1", "FullName": "public void onProgressChanged (WebView view, int newProgress)"}, "getVisitedHistory(android.webkit.ValueCallback<java.lang.String[]>)": {"Returns": [], "Parameters": [["@B_android#webkit#ValueCallback_E@", "ValueCallback no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a list of all visited history items, used for link coloring", "history": "Added in API level 7", "FullName": "public void getVisitedHistory (ValueCallback<String[]> callback)"}}, "Inheritance": [], "ClassName": "android.webkit.WebChromeClient", "ClassDesc": ""}