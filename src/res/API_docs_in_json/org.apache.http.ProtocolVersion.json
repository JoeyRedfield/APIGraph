{"Functions": {"getProtocol()": {"Returns": [["", "the protocol name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the protocol.", "history": "Added in API level 1", "FullName": "public final String getProtocol ()"}, "ProtocolVersion(java.lang.String, int, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "the name of the protocol, for example \"HTTP\""], ["int", "the major version number of the protocol"], ["int", "the minor version number of the protocol"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a protocol version designator.", "history": "Added in API level 1", "FullName": "public ProtocolVersion (String protocol, int major, int minor)"}, "compareToVersion(org.apache.http.ProtocolVersion)": {"Returns": [["", "a negative integer, zero, or a positive integer as this version is less than, equal to, or greater than the argument version."]], "Parameters": [["@B_org#apache#http#ProtocolVersion_E@", "the protocl version to compare with"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the argument has a different protocol name than this object, or if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Compares this protocol version with another one. Only protocol versions with the same protocol name can be compared. This method does @B_java#lang#Comparable_E@.", "history": "Added in API level 1", "FullName": "public int compareToVersion (ProtocolVersion that)"}, "isComparable(org.apache.http.ProtocolVersion)": {"Returns": [["", "true if @B_org#apache#http#ProtocolVersion#compareToVersion_E@ can be called with the argument, false otherwise"]], "Parameters": [["@B_org#apache#http#ProtocolVersion_E@", "the protocol version to consider"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether this protocol can be compared to another one. Only protocol versions with the same protocol name can be @B_org#apache#http#ProtocolVersion#compareToVersion_E@.", "history": "Added in API level 1", "FullName": "public boolean isComparable (ProtocolVersion that)"}, "getMinor()": {"Returns": [["", "the minor version number."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minor version number of the HTTP protocol.", "history": "Added in API level 1", "FullName": "public final int getMinor ()"}, "lessEquals(org.apache.http.ProtocolVersion)": {"Returns": [["", "true if this protocol version is @B_org#apache#http#ProtocolVersion#isComparable_E@ to the argument and @B_org#apache#http#ProtocolVersion#compareToVersion_E@ as less or equal, false otherwise"]], "Parameters": [["@B_org#apache#http#ProtocolVersion_E@", "the version against which to check this version"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if this protocol version is less or equal to the given one.", "history": "Added in API level 1", "FullName": "public final boolean lessEquals (ProtocolVersion version)"}, "forVersion(int, int)": {"Returns": [["", "a protocol version with the same protocol name and the argument version"]], "Parameters": [["int", "the major version"], ["int", "the minor version"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a specific version of this protocol. This can be used by derived classes to instantiate themselves instead of the base class, and to define constants for commonly used versions. The default implementation in this class returns this if the version matches, and creates a new @B_org#apache#http#ProtocolVersion_E@ otherwise.", "history": "Added in API level 1", "FullName": "public ProtocolVersion forVersion (int major, int minor)"}, "toString()": {"Returns": [["", "a protocol version string, like \"HTTP/1.1\""]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this protocol version to a string.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "greaterEquals(org.apache.http.ProtocolVersion)": {"Returns": [["", "true if this protocol version is @B_org#apache#http#ProtocolVersion#isComparable_E@ to the argument and @B_org#apache#http#ProtocolVersion#compareToVersion_E@ as greater or equal, false otherwise"]], "Parameters": [["@B_org#apache#http#ProtocolVersion_E@", "the version against which to check this version"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if this protocol version is greater or equal to the given one.", "history": "Added in API level 1", "FullName": "public final boolean greaterEquals (ProtocolVersion version)"}, "getMajor()": {"Returns": [["", "the major version number."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the major version number of the protocol.", "history": "Added in API level 1", "FullName": "public final int getMajor ()"}, "equals(java.lang.Object)": {"Returns": [["", "true if the argument is the same protocol version, false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "the object to compare with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks equality of this protocol version with an object. The object is equal if it is a protocl version with the same protocol name, major version number, and minor version number. The specific class of the object is", "history": "Added in API level 1", "FullName": "public final boolean equals (Object obj)"}, "clone()": {"Returns": [["", "a copy of this object."]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this Object. The default implementation returns a so-called \"shallow\" copy: It creates a new instance of the same class and then copies the field values (including object references) from this instance to the new instance. A \"deep\" copy, in contrast, would also recursively clone nested objects. A subclass that needs to implement this kind of cloning should call super.clone() to create the new instance and then create deep copies of the nested, mutable objects.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "hashCode()": {"Returns": [["", "the hashcode of this protocol version"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a hash code consistent with @B_org#apache#http#ProtocolVersion#equals_E@.", "history": "Added in API level 1", "FullName": "public final int hashCode ()"}}, "Inheritance": [], "ClassName": "org.apache.http.ProtocolVersion", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Represents a protocol version, as specified in RFC 2616. RFC 2616 specifies only HTTP versions, like \"HTTP/1.1\" and \"HTTP/1.0\". RFC 3261 specifies a message format that is identical to HTTP except for the protocol name. It defines a protocol version \"SIP/2.0\". There are some nitty-gritty differences between the interpretation of versions in HTTP and SIP. In those cases, HTTP takes precedence. This class defines a protocol version as a combination of protocol name, major version number, and minor version number. Note that @B_org#apache#http#ProtocolVersion#equals_E@ and @B_org#apache#http#ProtocolVersion#hashCode_E@ are defined as final here, they cannot be overridden in derived classes."}