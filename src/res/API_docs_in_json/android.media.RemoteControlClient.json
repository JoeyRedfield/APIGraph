{"Functions": {"setPlaybackPositionUpdateListener(android.media.RemoteControlClient.OnPlaybackPositionUpdateListener)": {"Returns": [], "Parameters": [["@B_android#media#RemoteControlClient#OnPlaybackPositionUpdateListener_E@", "RemoteControlClient.OnPlaybackPositionUpdateListener: the position update listener to be called"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener to be called whenever the media playback position is requested to be updated. Notifications will be received in the same thread as the one in which RemoteControlClient was created.", "history": "Added in API level 18 Deprecated in API level 21", "FullName": "public void setPlaybackPositionUpdateListener (RemoteControlClient.OnPlaybackPositionUpdateListener l)"}, "setPlaybackState(int)": {"Returns": [], "Parameters": [["int", "int: The current playback state, one of the following values: @B_android#media#RemoteControlClient#PLAYSTATE_STOPPED_E@, @B_android#media#RemoteControlClient#PLAYSTATE_PAUSED_E@, @B_android#media#RemoteControlClient#PLAYSTATE_PLAYING_E@, @B_android#media#RemoteControlClient#PLAYSTATE_FAST_FORWARDING_E@, @B_android#media#RemoteControlClient#PLAYSTATE_REWINDING_E@, @B_android#media#RemoteControlClient#PLAYSTATE_SKIPPING_FORWARDS_E@, @B_android#media#RemoteControlClient#PLAYSTATE_SKIPPING_BACKWARDS_E@, @B_android#media#RemoteControlClient#PLAYSTATE_BUFFERING_E@, @B_android#media#RemoteControlClient#PLAYSTATE_ERROR_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the current playback state.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public void setPlaybackState (int state)"}, "setPlaybackState(int, long, float)": {"Returns": [], "Parameters": [["int", "int: The current playback state, one of the following values: @B_android#media#RemoteControlClient#PLAYSTATE_STOPPED_E@, @B_android#media#RemoteControlClient#PLAYSTATE_PAUSED_E@, @B_android#media#RemoteControlClient#PLAYSTATE_PLAYING_E@, @B_android#media#RemoteControlClient#PLAYSTATE_FAST_FORWARDING_E@, @B_android#media#RemoteControlClient#PLAYSTATE_REWINDING_E@, @B_android#media#RemoteControlClient#PLAYSTATE_SKIPPING_FORWARDS_E@, @B_android#media#RemoteControlClient#PLAYSTATE_SKIPPING_BACKWARDS_E@, @B_android#media#RemoteControlClient#PLAYSTATE_BUFFERING_E@, @B_android#media#RemoteControlClient#PLAYSTATE_ERROR_E@."], ["long", "long: a 0 or positive value for the current media position expressed in ms (same unit as for when sending the media duration, if applicable, with @B_android#media#MediaMetadataRetriever#METADATA_KEY_DURATION_E@ in the @B_android#media#RemoteControlClient#MetadataEditor_E@). Negative values imply that position is not known (e.g. listening to a live stream of a radio) or not applicable (e.g. when state is @B_android#media#RemoteControlClient#PLAYSTATE_BUFFERING_E@ and nothing had played yet)."], ["float", "float: a value expressed as a ratio of 1x playback: 1.0f is normal playback, 2.0f is 2x, 0.5f is half-speed, -2.0f is rewind at 2x speed. 0.0f means nothing is playing (e.g. when state is @B_android#media#RemoteControlClient#PLAYSTATE_ERROR_E@)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the current playback state and the matching media position for the current playback speed.", "history": "added in API level 18", "FullName": "public void setPlaybackState (int state, long timeInMs, float playbackSpeed)"}, "setMetadataUpdateListener(android.media.RemoteControlClient.OnMetadataUpdateListener)": {"Returns": [], "Parameters": [["@B_android#media#RemoteControlClient#OnMetadataUpdateListener_E@", "RemoteControlClient.OnMetadataUpdateListener: the metadata update listener"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener to be called whenever the metadata is updated. New metadata values will be received in the same thread as the one in which RemoteControlClient was created.", "history": "Added in API level 19 Deprecated in API level 21", "FullName": "public void setMetadataUpdateListener (RemoteControlClient.OnMetadataUpdateListener l)"}, "getMediaSession()": {"Returns": [["@B_android#media#session#MediaSession_E@", "A media session object or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a @B_android#media#session#MediaSession_E@ associated with this RCC. It will only have a session while it is registered with @B_android#media#AudioManager#registerRemoteControlClient_E@. The session returned should not be modified directly by the application but may be used with other APIs that require a session.", "history": "Added in API level 21 Deprecated in API level 21", "FullName": "public MediaSession getMediaSession ()"}, "setTransportControlFlags(int)": {"Returns": [], "Parameters": [["int", "int: A combination of the following flags: @B_android#media#RemoteControlClient#FLAG_KEY_MEDIA_PREVIOUS_E@, @B_android#media#RemoteControlClient#FLAG_KEY_MEDIA_REWIND_E@, @B_android#media#RemoteControlClient#FLAG_KEY_MEDIA_PLAY_E@, @B_android#media#RemoteControlClient#FLAG_KEY_MEDIA_PLAY_PAUSE_E@, @B_android#media#RemoteControlClient#FLAG_KEY_MEDIA_PAUSE_E@, @B_android#media#RemoteControlClient#FLAG_KEY_MEDIA_STOP_E@, @B_android#media#RemoteControlClient#FLAG_KEY_MEDIA_FAST_FORWARD_E@, @B_android#media#RemoteControlClient#FLAG_KEY_MEDIA_NEXT_E@, @B_android#media#RemoteControlClient#FLAG_KEY_MEDIA_POSITION_UPDATE_E@, @B_android#media#RemoteControlClient#FLAG_KEY_MEDIA_RATING_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the flags for the media transport control buttons that this client supports.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public void setTransportControlFlags (int transportControlFlags)"}, "RemoteControlClient(android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent: The intent that will be sent for the media button events sent by remote controls. This intent needs to have been constructed with the @B_android#content#Intent#ACTION_MEDIA_BUTTON_E@ action, and have a component that will handle the intent (set with @B_android#content#Intent#setComponent_E@) registered with @B_android#media#AudioManager#registerMediaButtonEventReceiver_E@ before this new RemoteControlClient can itself be registered with @B_android#media#AudioManager#registerRemoteControlClient_E@."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#registerMediaButtonEventReceiver_E@", "@B_android#media#AudioManager#registerRemoteControlClient_E@"], "Permissions": [], "Description": "Class constructor.", "history": "Added in API level 14", "FullName": "public RemoteControlClient (PendingIntent mediaButtonIntent)"}, "editMetadata(boolean)": {"Returns": [["@B_android#media#RemoteControlClient#MetadataEditor_E@", "a new MetadataEditor instance."]], "Parameters": [["boolean", "boolean: Set to false if you want the MetadataEditor to contain the metadata that was previously applied to the RemoteControlClient, or true if it is to be created empty."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#media#RemoteControlClient#MetadataEditor_E@.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public RemoteControlClient.MetadataEditor editMetadata (boolean startEmpty)"}, "setPlaybackState(int,long,float)": {"Returns": [], "Parameters": [["int", "int: The current playback state, one of the following values: @B_android#media#RemoteControlClient#PLAYSTATE_STOPPED_E@, @B_android#media#RemoteControlClient#PLAYSTATE_PAUSED_E@, @B_android#media#RemoteControlClient#PLAYSTATE_PLAYING_E@, @B_android#media#RemoteControlClient#PLAYSTATE_FAST_FORWARDING_E@, @B_android#media#RemoteControlClient#PLAYSTATE_REWINDING_E@, @B_android#media#RemoteControlClient#PLAYSTATE_SKIPPING_FORWARDS_E@, @B_android#media#RemoteControlClient#PLAYSTATE_SKIPPING_BACKWARDS_E@, @B_android#media#RemoteControlClient#PLAYSTATE_BUFFERING_E@, @B_android#media#RemoteControlClient#PLAYSTATE_ERROR_E@."], ["long", "long: a 0 or positive value for the current media position expressed in ms (same unit as for when sending the media duration, if applicable, with @B_android#media#MediaMetadataRetriever#METADATA_KEY_DURATION_E@ in the @B_android#media#RemoteControlClient#MetadataEditor_E@). Negative values imply that position is not known (e.g. listening to a live stream of a radio) or not applicable (e.g. when state is @B_android#media#RemoteControlClient#PLAYSTATE_BUFFERING_E@ and nothing had played yet)."], ["float", "float: a value expressed as a ratio of 1x playback: 1.0f is normal playback, 2.0f is 2x, 0.5f is half-speed, -2.0f is rewind at 2x speed. 0.0f means nothing is playing (e.g. when state is @B_android#media#RemoteControlClient#PLAYSTATE_ERROR_E@)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the current playback state and the matching media position for the current playback speed.", "history": "Added in API level 18 Deprecated in API level 21", "FullName": "public void setPlaybackState (int state, long timeInMs, float playbackSpeed)"}, "setOnGetPlaybackPositionListener(android.media.RemoteControlClient.OnGetPlaybackPositionListener)": {"Returns": [], "Parameters": [["@B_android#media#RemoteControlClient#OnGetPlaybackPositionListener_E@", "RemoteControlClient.OnGetPlaybackPositionListener: the listener to be called to retrieve the playback position"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener to be called whenever the media current playback position is needed. Queries will be received in the same thread as the one in which RemoteControlClient was created.", "history": "Added in API level 18 Deprecated in API level 21", "FullName": "public void setOnGetPlaybackPositionListener (RemoteControlClient.OnGetPlaybackPositionListener l)"}, "RemoteControlClient(android.app.PendingIntent,android.os.Looper)": {"Returns": [], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent: The intent that will be sent for the media button events sent by remote controls. This intent needs to have been constructed with the @B_android#content#Intent#ACTION_MEDIA_BUTTON_E@ action, and have a component that will handle the intent (set with @B_android#content#Intent#setComponent_E@) registered with @B_android#media#AudioManager#registerMediaButtonEventReceiver_E@ before this new RemoteControlClient can itself be registered with @B_android#media#AudioManager#registerRemoteControlClient_E@."], ["@B_android#os#Looper_E@", "Looper: The Looper running the event loop."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#registerMediaButtonEventReceiver_E@", "@B_android#media#AudioManager#registerRemoteControlClient_E@"], "Permissions": [], "Description": "Class constructor for a remote control client whose internal event handling happens on a user-provided Looper.", "history": "Added in API level 14", "FullName": "public RemoteControlClient (PendingIntent mediaButtonIntent, Looper looper)"}}, "Inheritance": [], "ClassName": "android.media.RemoteControlClient", "ClassDesc": "Use @B_android#media#session#MediaSession_E@ instead. RemoteControlClient enables exposing information meant to be consumed by remote controls capable of displaying metadata, artwork and media transport control buttons. A remote control client object is associated with a media button event receiver. This event receiver must have been previously registered with @B_android#media#AudioManager#registerMediaButtonEventReceiver_E@ before the RemoteControlClient can be registered through @B_android#media#AudioManager#registerRemoteControlClient_E@. Here is an example of creating a RemoteControlClient instance after registering a media button event receiver:"}