{"Functions": {"close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closes the stream and releases any system resources associated with it. Once the stream has been closed, further read(), ready(), mark(), reset(), or skip() invocations will throw an IOException. Closing a previously closed stream has no effect.", "history": "Added in API level 1", "FullName": "public void close ()"}, "skip(long)": {"Returns": [["long", "The number of characters actually skipped"]], "Parameters": [["long", "long: The number of characters to skip"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Skips characters.", "history": "Added in API level 1", "FullName": "public long skip (long n)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Resets the stream.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "markSupported()": {"Returns": [["boolean", "true if and only if this stream supports the mark operation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this stream supports the mark() operation.", "history": "Added in API level 1", "FullName": "public boolean markSupported ()"}, "read(char[], int, int)": {"Returns": [["int", "The number of characters read, or -1 if the end of the stream has been reached"]], "Parameters": [["char[]", "char: Destination buffer"], ["int", "int: Offset at which to start storing characters"], ["int", "int: Maximum number of characters to read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads characters into a portion of an array.", "history": "added in API level 1", "FullName": "public int read (char[] cbuf, int off, int len)"}, "FilterReader(java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: a Reader object providing the underlying stream."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if in is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new filtered reader.", "history": "Added in API level 1", "FullName": "protected FilterReader (Reader in)"}, "ready()": {"Returns": [["boolean", "True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this stream is ready to be read.", "history": "Added in API level 1", "FullName": "public boolean ready ()"}, "read()": {"Returns": [["int", "The character read, as an integer in the range 0 to 65535 (0x00-0xffff), or -1 if the end of the stream has been reached"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a single character.", "history": "Added in API level 1", "FullName": "public int read ()"}, "read(char[],int,int)": {"Returns": [["int", "The number of characters read, or -1 if the end of the stream has been reached"]], "Parameters": [["char[]", "char: Destination buffer"], ["int", "int: Offset at which to start storing characters"], ["int", "int: Maximum number of characters to read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads characters into a portion of an array.", "history": "Added in API level 1", "FullName": "public int read (char[] cbuf, int off, int len)"}, "mark(int)": {"Returns": [], "Parameters": [["int", "int: Limit on the number of characters that may be read while still preserving the mark. After reading this many characters, attempting to reset the stream may fail."]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Marks the present position in the stream.", "history": "Added in API level 1", "FullName": "public void mark (int readAheadLimit)"}}, "Inheritance": ["@B_java#io#Reader_E@"], "ClassName": "java.io.FilterReader", "ClassDesc": "Abstract class for reading filtered character streams. The abstract class FilterReader itself provides default methods that pass all requests to the contained stream. Subclasses of FilterReader should override some of these methods and may also provide additional methods and fields."}