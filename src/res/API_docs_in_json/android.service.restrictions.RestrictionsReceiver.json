{"Functions": {"RestrictionsReceiver()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 21", "FullName": "public RestrictionsReceiver ()"}, "onReceive(android.content.Context,android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context in which the receiver is running."], ["@B_android#content#Intent_E@", "Intent: The Intent being received."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Intercept standard Restrictions Provider broadcasts. Implementations should not override this method; it is better to implement the convenience callbacks for each action.", "history": "Added in API level 21", "FullName": "public void onReceive (Context context, Intent intent)"}, "onRequestPermission(android.content.Context,java.lang.String,java.lang.String,java.lang.String,android.os.PersistableBundle)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_java#lang#String_E@", "String: the application requesting permission."], ["@B_java#lang#String_E@", "String: the type of request, which determines the content and presentation of the request data."], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_android#os#PersistableBundle_E@", "PersistableBundle: the request data bundle containing at a minimum a request id."]], "Throws": [], "SeeAlso": ["@B_android#content#RestrictionsManager_E@"], "Permissions": [], "Description": "An asynchronous permission request made by an application for an operation that requires authorization by a local or remote administrator other than the user. The Restrictions Provider should transfer the request to the administrator and deliver back a response, when available. The calling application is aware that the response could take an indefinite amount of time. If the request bundle contains the key @B_android#content#RestrictionsManager#REQUEST_KEY_NEW_REQUEST_E@, then a new request must be sent. Otherwise the provider can look up any previous response to the same requestId and return the cached response.", "history": "Added in API level 21", "FullName": "public abstract void onRequestPermission (Context context, String packageName, String requestType, String requestId, PersistableBundle request)"}}, "Inheritance": ["@B_android#content#BroadcastReceiver_E@"], "ClassName": "android.service.restrictions.RestrictionsReceiver", "ClassDesc": "Abstract implementation of a Restrictions Provider BroadcastReceiver. To implement a Restrictions Provider, extend from this class and implement the abstract methods. Export this receiver in the manifest. A profile owner device admin can then register this component as a Restrictions Provider using @B_android#app#admin#DevicePolicyManager#setRestrictionsProvider_E@. The function of a Restrictions Provider is to transport permission requests from apps on this device to an administrator (most likely on a remote device or computer) and deliver back responses. The response should be sent back to the app via @B_android#content#RestrictionsManager#notifyPermissionResponse_E@."}