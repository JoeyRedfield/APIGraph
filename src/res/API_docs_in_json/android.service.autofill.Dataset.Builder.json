{"Functions": {"setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue)": {"Returns": [["@B_android#service#autofill#Dataset#Builder_E@", "this builder."]], "Parameters": [["@B_android#view#autofill#AutofillId_E@", "AutofillId: id returned by @B_android#app#assist#AssistStructure#ViewNode#getAutofillId_E@. This value must never be null."], ["@B_android#view#autofill#AutofillValue_E@", "AutofillValue: value to be autofilled. Pass null if you do not have the value but the target view is a logical part of the dataset. For example, if the dataset needs authentication and you have no access to the value. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a field. @B_android#os#Build#VERSION_CODES#P_E@, this method would throw an @B_java#lang#IllegalStateException_E@ if this builder was constructed without a @B_android#widget#RemoteViews_E@. Android @B_android#os#Build#VERSION_CODES#P_E@ and higher removed this restriction because datasets used as an @B_android#view#autofill#AutofillManager#EXTRA_AUTHENTICATION_RESULT_E@ do not need a presentation. But if you don't set the presentation in the constructor in a dataset that is meant to be shown to the user, the autofill UI for this field will not be displayed. @B_android#os#Build#VERSION_CODES#P_E@ and higher, datasets that require authentication can be also be filtered by passing a @B_android#view#autofill#AutofillValue#forText_E@ as the value parameter.", "history": "Added in API level 26", "FullName": "public Dataset.Builder setValue (AutofillId id, AutofillValue value)"}, "setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,java.util.regex.Pattern,android.widget.RemoteViews)": {"Returns": [["@B_android#service#autofill#Dataset#Builder_E@", "this builder."]], "Parameters": [["@B_android#view#autofill#AutofillId_E@", "AutofillId: id returned by @B_android#app#assist#AssistStructure#ViewNode#getAutofillId_E@. This value must never be null."], ["@B_android#view#autofill#AutofillValue_E@", "AutofillValue: the value to be autofilled. Pass null if you do not have the value but the target view is a logical part of the dataset. For example, if the dataset needs authentication and you have no access to the value. This value may be null."], ["@B_java#util#regex#Pattern_E@", "Pattern: regex used to determine if the dataset should be shown in the autofill UI; when null, it disables filtering on that dataset (this is the recommended approach when value is not null and field contains sensitive data such as passwords). This value may be null."], ["@B_android#widget#RemoteViews_E@", "RemoteViews: the presentation used to visualize this field. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a field, using a custom @B_android#widget#RemoteViews_E@ to visualize it and a This method is typically used when the dataset requires authentication and the service does not know its value but wants to hide the dataset after the user enters a minimum number of characters. For example, if the dataset represents a credit card number and the service does not want to show the \"Tap to authenticate\" message until the user tapped 4 digits, in which case the filter would be Pattern.compile(\"\\\\d.{4,}\"). @B_android#service#autofill#Dataset#Builder#setValue_E@ and using the value to filter.", "history": "Added in API level 28", "FullName": "public Dataset.Builder setValue (AutofillId id, AutofillValue value, Pattern filter, RemoteViews presentation)"}, "setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,android.widget.RemoteViews)": {"Returns": [["@B_android#service#autofill#Dataset#Builder_E@", "this builder."]], "Parameters": [["@B_android#view#autofill#AutofillId_E@", "AutofillId: id returned by @B_android#app#assist#AssistStructure#ViewNode#getAutofillId_E@. This value must never be null."], ["@B_android#view#autofill#AutofillValue_E@", "AutofillValue: the value to be autofilled. Pass null if you do not have the value but the target view is a logical part of the dataset. For example, if the dataset needs authentication and you have no access to the value. This value may be null."], ["@B_android#widget#RemoteViews_E@", "RemoteViews: the presentation used to visualize this field. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a field, using a custom @B_android#widget#RemoteViews_E@ to visualize it. @B_android#os#Build#VERSION_CODES#P_E@ and higher, datasets that require authentication can be also be filtered by passing a @B_android#view#autofill#AutofillValue#forText_E@ as the value parameter. Theme does not work with RemoteViews layout. Avoid hardcoded text color or background color: Autofill on different platforms may have different themes.", "history": "Added in API level 26", "FullName": "public Dataset.Builder setValue (AutofillId id, AutofillValue value, RemoteViews presentation)"}, "setId(java.lang.String)": {"Returns": [["@B_android#service#autofill#Dataset#Builder_E@", "this builder."]], "Parameters": [["@B_java#lang#String_E@", "String: id for this dataset or null to unset. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the id for the dataset so its usage can be tracked. Dataset usage can be tracked for 2 purposes: For statistical purposes, the service can call @B_android#service#autofill#AutofillService#getFillEventHistory_E@ when handling @B_android#service#autofill#AutofillService#onFillRequest_E@ calls. For normal autofill workflow, the service can call @B_android#service#autofill#SaveRequest#getDatasetIds_E@ when handling @B_android#service#autofill#AutofillService#onSaveRequest_E@ calls.", "history": "Added in API level 26", "FullName": "public Dataset.Builder setId (String id)"}, "setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,java.util.regex.Pattern)": {"Returns": [["@B_android#service#autofill#Dataset#Builder_E@", "this builder."]], "Parameters": [["@B_android#view#autofill#AutofillId_E@", "AutofillId: id returned by @B_android#app#assist#AssistStructure#ViewNode#getAutofillId_E@. This value must never be null."], ["@B_android#view#autofill#AutofillValue_E@", "AutofillValue: the value to be autofilled. Pass null if you do not have the value but the target view is a logical part of the dataset. For example, if the dataset needs authentication and you have no access to the value. This value may be null."], ["@B_java#util#regex#Pattern_E@", "Pattern: regex used to determine if the dataset should be shown in the autofill UI; when null, it disables filtering on that dataset (this is the recommended approach when value is not null and field contains sensitive data such as passwords). This value may be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the builder was constructed without a @B_android#widget#RemoteViews_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a field using an This method is typically used when the dataset requires authentication and the service does not know its value but wants to hide the dataset after the user enters a minimum number of characters. For example, if the dataset represents a credit card number and the service does not want to show the \"Tap to authenticate\" message until the user tapped 4 digits, in which case the filter would be Pattern.compile(\"\\\\d.{4,}\"). @B_android#service#autofill#Dataset#Builder#setValue_E@ and use the value to filter.", "history": "Added in API level 28", "FullName": "public Dataset.Builder setValue (AutofillId id, AutofillValue value, Pattern filter)"}, "setAuthentication(android.content.IntentSender)": {"Returns": [["@B_android#service#autofill#Dataset#Builder_E@", "this builder. This value will never be null."]], "Parameters": [["@B_android#content#IntentSender_E@", "IntentSender: Intent to an activity with your authentication flow. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#app#PendingIntent_E@"], "Permissions": [], "Description": "Triggers a custom UI before before autofilling the screen with the contents of this dataset. @B_android#service#autofill#AutofillService_E@ for examples. This method is called when you need to provide an authentication UI for the data set. For example, when a data set contains credit card information (such as number, expiration date, and verification code), you can display UI asking for the verification code before filing in the data. Even if the data set is completely populated the system will launch the specified authentication intent and will need your approval to fill it in. Since the data set is \"locked\" until the user authenticates it, typically this data set name is masked (for example, \"VISA....1234\"). Typically you would want to store the data set labels non-encrypted and the actual sensitive data encrypted and not in memory. This allows showing the labels in the UI while involving the user if one of the items with these labels is chosen. Note that if you use sensitive data as a label, for example an email address, then it should also be encrypted. When a user triggers autofill, the system launches the provided intent whose extras will have the @B_android#view#autofill#AutofillManager#EXTRA_ASSIST_STRUCTURE_E@, and your @B_android#view#autofill#AutofillManager#EXTRA_CLIENT_STATE_E@. Once you complete your authentication flow you should set the activity result to @B_android#app#Activity#RESULT_OK_E@ and provide the fully populated @B_android#service#autofill#Dataset_E@ or a fully-populated @B_android#service#autofill#FillResponse_E@ by setting it to the @B_android#view#autofill#AutofillManager#EXTRA_AUTHENTICATION_RESULT_E@ extra. If you provide a dataset in the result, it will replace the authenticated dataset and will be immediately filled in. If you provide a response, it will replace the current response and the UI will be refreshed. For example, if you provided credit card information without the CVV for the data set in the @B_android#service#autofill#FillResponse_E@ then the returned data set should contain the CVV entry. @B_android#app#PendingIntent#FLAG_IMMUTABLE_E@ as the platform needs to fill in the authentication arguments.", "history": "Added in API level 26", "FullName": "public Dataset.Builder setAuthentication (IntentSender authentication)"}, "build()": {"Returns": [["@B_android#service#autofill#Dataset_E@", "The built dataset. This value will never be null."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if no field was set (through @B_android#service#autofill#Dataset#Builder#setValue_E@ or @B_android#service#autofill#Dataset#Builder#setValue_E@)."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new @B_android#service#autofill#Dataset_E@ instance. You should not interact with this builder once this method is called.", "history": "Added in API level 26", "FullName": "public Dataset build ()"}, "Dataset.Builder(android.widget.RemoteViews)": {"Returns": [], "Parameters": [["@B_android#widget#RemoteViews_E@", "RemoteViews: The presentation used to visualize this dataset. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new builder.", "history": "Added in API level 26", "FullName": "public Dataset.Builder (RemoteViews presentation)"}, "Dataset.Builder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new builder for a dataset where each field will be visualized independently. When using this constructor, fields must be set through @B_android#service#autofill#Dataset#Builder#setValue_E@ or @B_android#service#autofill#Dataset#Builder#setValue_E@.", "history": "Added in API level 26", "FullName": "public Dataset.Builder ()"}}, "Inheritance": [], "ClassName": "android.service.autofill.Dataset.Builder", "ClassDesc": "A builder for @B_android#service#autofill#Dataset_E@ objects. You must provide at least one value for a field or set an authentication intent."}