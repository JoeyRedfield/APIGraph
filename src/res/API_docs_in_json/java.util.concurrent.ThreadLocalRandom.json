{"Functions": {"nextLong(long, long)": {"Returns": [["long", "a pseudorandom long value between the origin (inclusive) and the bound (exclusive)"]], "Parameters": [["long", "long: the least value returned"], ["long", "long: the upper bound (exclusive)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if origin is greater than or equal to bound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).", "history": "added in API level 21", "FullName": "public long nextLong (long origin, long bound)"}, "ints(int,int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["int", "int: the origin (inclusive) of each random value"], ["int", "int: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).", "history": "Added in API level 24", "FullName": "public IntStream ints (int randomNumberOrigin, int randomNumberBound)"}, "ints(long, int, int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["int", "int: the origin (inclusive) of each random value"], ["int", "int: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero, or randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).", "history": "added in API level 24", "FullName": "public IntStream ints (long streamSize, int randomNumberOrigin, int randomNumberBound)"}, "longs(long)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values"]], "Parameters": [["long", "long: the number of values to generate"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom long values.", "history": "Added in API level 24", "FullName": "public LongStream longs (long streamSize)"}, "nextBoolean()": {"Returns": [["boolean", "a pseudorandom boolean value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom boolean value.", "history": "Added in API level 21", "FullName": "public boolean nextBoolean ()"}, "ints(int, int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["int", "int: the origin (inclusive) of each random value"], ["int", "int: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).", "history": "added in API level 24", "FullName": "public IntStream ints (int randomNumberOrigin, int randomNumberBound)"}, "doubles(long)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of double values"]], "Parameters": [["long", "long: the number of values to generate"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive).", "history": "Added in API level 24", "FullName": "public DoubleStream doubles (long streamSize)"}, "nextDouble(double, double)": {"Returns": [["double", "a pseudorandom double value between the origin (inclusive) and the bound (exclusive)"]], "Parameters": [["double", "double: the least value returned"], ["double", "double: the upper bound (exclusive)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if origin is greater than or equal to bound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).", "history": "added in API level 21", "FullName": "public double nextDouble (double origin, double bound)"}, "longs(long, long, long)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["long", "long: the origin (inclusive) of each random value"], ["long", "long: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero, or randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive).", "history": "added in API level 24", "FullName": "public LongStream longs (long streamSize, long randomNumberOrigin, long randomNumberBound)"}, "ints()": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom int values.", "history": "Added in API level 24", "FullName": "public IntStream ints ()"}, "nextFloat()": {"Returns": [["float", "a pseudorandom float value between zero (inclusive) and one (exclusive)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom float value between zero (inclusive) and one (exclusive).", "history": "Added in API level 21", "FullName": "public float nextFloat ()"}, "doubles()": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of pseudorandom double values"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive).", "history": "Added in API level 24", "FullName": "public DoubleStream doubles ()"}, "longs()": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom long values.", "history": "Added in API level 24", "FullName": "public LongStream longs ()"}, "nextDouble(double,double)": {"Returns": [["double", "a pseudorandom double value between the origin (inclusive) and the bound (exclusive)"]], "Parameters": [["double", "double: the least value returned"], ["double", "double: the upper bound (exclusive)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if origin is greater than or equal to bound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).", "history": "Added in API level 21", "FullName": "public double nextDouble (double origin, double bound)"}, "nextDouble()": {"Returns": [["double", "a pseudorandom double value between zero (inclusive) and one (exclusive)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom double value between zero (inclusive) and one (exclusive).", "history": "Added in API level 21", "FullName": "public double nextDouble ()"}, "ints(long)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values"]], "Parameters": [["long", "long: the number of values to generate"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom int values.", "history": "Added in API level 24", "FullName": "public IntStream ints (long streamSize)"}, "nextDouble(double)": {"Returns": [["double", "a pseudorandom double value between zero (inclusive) and the bound (exclusive)"]], "Parameters": [["double", "double: the upper bound (exclusive). Must be positive."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if bound is not positive"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive).", "history": "Added in API level 21", "FullName": "public double nextDouble (double bound)"}, "current()": {"Returns": [["@B_java#util#concurrent#ThreadLocalRandom_E@", "the current thread's ThreadLocalRandom"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current thread's ThreadLocalRandom.", "history": "Added in API level 21", "FullName": "public static ThreadLocalRandom current ()"}, "nextInt(int, int)": {"Returns": [["int", "a pseudorandom int value between the origin (inclusive) and the bound (exclusive)"]], "Parameters": [["int", "int: the least value returned"], ["int", "int: the upper bound (exclusive)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if origin is greater than or equal to bound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).", "history": "added in API level 21", "FullName": "public int nextInt (int origin, int bound)"}, "nextInt(int,int)": {"Returns": [["int", "a pseudorandom int value between the origin (inclusive) and the bound (exclusive)"]], "Parameters": [["int", "int: the least value returned"], ["int", "int: the upper bound (exclusive)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if origin is greater than or equal to bound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).", "history": "Added in API level 21", "FullName": "public int nextInt (int origin, int bound)"}, "longs(long, long)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the origin (inclusive) of each random value"], ["long", "long: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive).", "history": "added in API level 24", "FullName": "public LongStream longs (long randomNumberOrigin, long randomNumberBound)"}, "doubles(double, double)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["double", "double: the origin (inclusive) of each random value"], ["double", "double: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).", "history": "added in API level 24", "FullName": "public DoubleStream doubles (double randomNumberOrigin, double randomNumberBound)"}, "doubles(long,double,double)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["double", "double: the origin (inclusive) of each random value"], ["double", "double: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero"], ["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).", "history": "Added in API level 24", "FullName": "public DoubleStream doubles (long streamSize, double randomNumberOrigin, double randomNumberBound)"}, "nextInt()": {"Returns": [["int", "a pseudorandom int value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom int value.", "history": "Added in API level 21", "FullName": "public int nextInt ()"}, "nextLong(long,long)": {"Returns": [["long", "a pseudorandom long value between the origin (inclusive) and the bound (exclusive)"]], "Parameters": [["long", "long: the least value returned"], ["long", "long: the upper bound (exclusive)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if origin is greater than or equal to bound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).", "history": "Added in API level 21", "FullName": "public long nextLong (long origin, long bound)"}, "longs(long,long)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the origin (inclusive) of each random value"], ["long", "long: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive).", "history": "Added in API level 24", "FullName": "public LongStream longs (long randomNumberOrigin, long randomNumberBound)"}, "nextLong(long)": {"Returns": [["long", "a pseudorandom long value between zero (inclusive) and the bound (exclusive)"]], "Parameters": [["long", "long: the upper bound (exclusive). Must be positive."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if bound is not positive"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).", "history": "Added in API level 21", "FullName": "public long nextLong (long bound)"}, "next(int)": {"Returns": [["int", "the next pseudorandom value from this random number generator's sequence"]], "Parameters": [["int", "int: random bits"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates the next pseudorandom number. Subclasses should override this, as this is used by all other methods. The general contract of next is that it returns an int value and if the argument bits is between 1 and 32 (inclusive), then that many low-order bits of the returned value will be (approximately) independently chosen bit values, each of which is (approximately) equally likely to be 0 or 1. The method next is implemented by class Random by atomically updating the seed to", "history": "Added in API level 21", "FullName": "protected int next (int bits)"}, "nextLong()": {"Returns": [["long", "a pseudorandom long value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom long value.", "history": "Added in API level 21", "FullName": "public long nextLong ()"}, "setSeed(long)": {"Returns": [], "Parameters": [["long", "long: the initial seed"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "always"]], "SeeAlso": [], "Permissions": [], "Description": "Throws UnsupportedOperationException. Setting seeds in this generator is not supported.", "history": "Added in API level 21", "FullName": "public void setSeed (long seed)"}, "doubles(long, double, double)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["double", "double: the origin (inclusive) of each random value"], ["double", "double: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero"], ["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).", "history": "added in API level 24", "FullName": "public DoubleStream doubles (long streamSize, double randomNumberOrigin, double randomNumberBound)"}, "nextInt(int)": {"Returns": [["int", "a pseudorandom int value between zero (inclusive) and the bound (exclusive)"]], "Parameters": [["int", "int: the upper bound (exclusive). Must be positive."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if bound is not positive"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).", "history": "Added in API level 21", "FullName": "public int nextInt (int bound)"}, "doubles(double,double)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["double", "double: the origin (inclusive) of each random value"], ["double", "double: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).", "history": "Added in API level 24", "FullName": "public DoubleStream doubles (double randomNumberOrigin, double randomNumberBound)"}, "nextGaussian()": {"Returns": [["double", "the next pseudorandom, Gaussian (\"normally\") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the next pseudorandom, Gaussian (\"normally\") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence. The general contract of nextGaussian is that one double value, chosen from (approximately) the usual normal distribution with mean 0.0 and standard deviation 1.0, is pseudorandomly generated and returned. The method nextGaussian is implemented by class Random as if by a threadsafe version of the following: StrictMath.log and one call to StrictMath.sqrt.", "history": "Added in API level 21", "FullName": "public double nextGaussian ()"}, "longs(long,long,long)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["long", "long: the origin (inclusive) of each random value"], ["long", "long: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero, or randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive).", "history": "Added in API level 24", "FullName": "public LongStream longs (long streamSize, long randomNumberOrigin, long randomNumberBound)"}, "ints(long,int,int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["int", "int: the origin (inclusive) of each random value"], ["int", "int: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero, or randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).", "history": "Added in API level 24", "FullName": "public IntStream ints (long streamSize, int randomNumberOrigin, int randomNumberBound)"}}, "Inheritance": ["@B_java#util#Random_E@"], "ClassName": "java.util.concurrent.ThreadLocalRandom", "ClassDesc": "A random number generator isolated to the current thread. Like the global @B_java#util#Random_E@ generator used by the @B_java#lang#Math_E@ class, a ThreadLocalRandom is initialized with an internally generated seed that may not otherwise be modified. When applicable, use of ThreadLocalRandom rather than shared Random objects in concurrent programs will typically encounter much less overhead and contention. Use of ThreadLocalRandom is particularly appropriate when multiple tasks (for example, each a @B_java#util#concurrent#ForkJoinTask_E@) use random numbers in parallel in thread pools. Usages of this class should typically be of the form: ThreadLocalRandom.current().nextX(...) (where X is Int, Long, etc). When all usages are of this form, it is never possible to accidently share a ThreadLocalRandom across multiple threads. This class also provides additional commonly used bounded random generation methods. Instances of ThreadLocalRandom are not cryptographically secure. Consider instead using @B_java#security#SecureRandom_E@ in security-sensitive applications. Additionally, default-constructed instances do not use a cryptographically random seed unless the java.util.secureRandomSeed is set to true."}