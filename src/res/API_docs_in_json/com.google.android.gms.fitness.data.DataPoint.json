{"Functions": {"setFloatValues(float...)": {"Returns": [], "Parameters": [["float...", "the value for each field of the data point, in order"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the values of this data point, where the format for all of its values is float.", "history": "", "FullName": "public DataPoint setFloatValues (float... values)"}, "extract(android.content.Intent)": {"Returns": [["", "the extracted DataPoint, or null if the given intent does not contain a DataPoint"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Extracts a data point from a callback intent received after registering to a data source with a PendingIntent.", "history": "", "FullName": "public static DataPoint extract (Intent intent)"}, "setTimestampNanos(long)": {"Returns": [], "Parameters": [["long", "the time of the reading, in nanoseconds since epoch."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the timestamp of the data point, in case the data point represents an instantaneous reading, measurement, or input. For data points that represent intervals, @B_com#google#android#gms#fitness#data#DataPoint#setTimeIntervalNanos_E@ should be used. Examples of data types with instantaneous timestamp include: @B_com#google#android#gms#fitness#data#DataTypes#ACTIVITY_SAMPLE_E@ @B_com#google#android#gms#fitness#data#DataTypes#HEART_RATE_BPM_E@ @B_com#google#android#gms#fitness#data#DataTypes#LOCATION_SAMPLE_E@ @B_com#google#android#gms#fitness#data#DataTypes#SPEED_E@", "history": "", "FullName": "public DataPoint setTimestampNanos (long timestampNanos)"}, "setTimestamp(long, java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [["long", "the timestamp in the given unit, representing elapsed time since epoch"], ["TimeUnit", "the unit of the given timestamp"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the timestamp of a data point that represent an instantaneous reading, measurement, or input. For data points that represent intervals, @B_com#google#android#gms#fitness#data#DataPoint#setTimeInterval_E@ should be used. Examples of data types with instantaneous timestamp include: @B_com#google#android#gms#fitness#data#DataType#TYPE_ACTIVITY_SAMPLE_E@ @B_com#google#android#gms#fitness#data#DataType#TYPE_HEART_RATE_BPM_E@ @B_com#google#android#gms#fitness#data#DataType#TYPE_LOCATION_SAMPLE_E@ @B_com#google#android#gms#fitness#data#DataType#TYPE_SPEED_E@ Google Fit accepts timestamps with up to nanosecond granularity for all @B_com#google#android#gms#fitness#data#DataType_E@ with the exception of", "history": "", "FullName": "public DataPoint setTimestamp (long timestamp, TimeUnit timeUnit)"}, "describeContents()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int describeContents ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "getStartTimeNanos()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the start time of the interval represented by this data point, in nanoseconds since epoch.", "history": "", "FullName": "public long getStartTimeNanos ()"}, "getDataType()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the data type defining the format of the values in this data point.", "history": "", "FullName": "public DataType getDataType ()"}, "equals(java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public boolean equals (Object o)"}, "getEndTime(java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the end time of the interval represented by this data point, in the given unit since epoch. This method is equivalent to @B_com#google#android#gms#fitness#data#DataPoint#getTimestamp_E@", "history": "", "FullName": "public long getEndTime (TimeUnit timeUnit)"}, "setIntValues(int...)": {"Returns": [], "Parameters": [["int...", "the value for each field of the data point, in order"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the values of this data point, where the format for all of its values is int.", "history": "", "FullName": "public DataPoint setIntValues (int... values)"}, "hashCode()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int hashCode ()"}, "getStartTime(java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the start time of the interval represented by this data point, in the given unit since epoch.", "history": "", "FullName": "public long getStartTime (TimeUnit timeUnit)"}, "toString()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public String toString ()"}, "setTimeIntervalNanos(long, long)": {"Returns": [], "Parameters": [["long", "the start time of the interval, in nanoseconds since epoch"], ["long", "the end time of the interval, in nanoseconds since epoch"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time interval for the data point, in case it represents an aggregation or average over a period of time. For data points that represent instantaneous samples, @B_com#google#android#gms#fitness#data#DataPoint#setTimestampNanos_E@ should be used. Examples of data types that represent intervals include: @B_com#google#android#gms#fitness#data#DataTypes#STEP_COUNT_DELTA_E@ @B_com#google#android#gms#fitness#data#DataTypes#ACTIVITY_SEGMENT_E@ @B_com#google#android#gms#fitness#data#DataTypes#DISTANCE_DELTA_E@", "history": "", "FullName": "public DataPoint setTimeIntervalNanos (long startTimeNanos, long endTimeNanos)"}, "getOriginalDataSource()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the original data source for this data point. The original data source helps identify the source of the data point as it gets merged and transformed into different streams. Note that, if this data point is part of a @B_com#google#android#gms#fitness#data#DataSet_E@, the data source returned here may be different from the data set's data source. In case of transformed or merged data sets, each data point's original data source will retain the original attribution as much as possible, while the data set's data source will represent the merged or transformed stream.", "history": "", "FullName": "public DataSource getOriginalDataSource ()"}, "getTimestampNanos()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the timestamp of the data point, in nanoseconds since epoch. For data points that represent intervals, this method will return the end time.", "history": "", "FullName": "public long getTimestampNanos ()"}, "getTimestamp(java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the timestamp of the data point, in the given unit since epoch. For data points that represent intervals, this method will return the end time.", "history": "", "FullName": "public long getTimestamp (TimeUnit timeUnit)"}, "create(com.google.android.gms.fitness.data.DataSource)": {"Returns": [["", "an empty data point instance"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new data point for the given dataSource. An unset @B_com#google#android#gms#fitness#data#Value_E@ is created for each field of the data source's", "history": "", "FullName": "public static DataPoint create (DataSource dataSource)"}, "getValue(com.google.android.gms.fitness.data.Field)": {"Returns": [["", "the Value associated with the given field"]], "Parameters": [["@B_com#google#android#gms#fitness#data#Field_E@", "one of the fields of this data type"]], "Throws": [["IllegalArgumentException", "if the given field doesn't match any of the fields for this DataPoint's data type."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value holder for the field with the given name. This method can be used both to query the value and to set it.", "history": "", "FullName": "public Value getValue (Field field)"}, "setTimeInterval(long, long, java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [["long", "the start time in the given unit, representing elapsed time since epoch"], ["long", "the end time in the given unit, representing elapsed time since epoch"], ["TimeUnit", "the time unit of both start and end timestamps"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time interval of a data point that represents an interval of time. For data points that represent instantaneous readings, @B_com#google#android#gms#fitness#data#DataPoint#setTimestamp_E@ should be used. Examples of data types that represent intervals include: @B_com#google#android#gms#fitness#data#DataType#TYPE_STEP_COUNT_DELTA_E@ @B_com#google#android#gms#fitness#data#DataType#TYPE_ACTIVITY_SEGMENT_E@ @B_com#google#android#gms#fitness#data#DataType#TYPE_DISTANCE_DELTA_E@ Google Fit accepts timestamps with up to nanosecond granularity.", "history": "", "FullName": "public DataPoint setTimeInterval (long startTime, long endTime, TimeUnit timeUnit)"}, "getEndTimeNanos()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the end time of the interval represented by this data point, in nanoseconds since epoch. This method is equivalent to @B_com#google#android#gms#fitness#data#DataPoint#getTimestampNanos_E@", "history": "", "FullName": "public long getEndTimeNanos ()"}, "getDataSource()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the data source for the data point. If the data point is part of a @B_com#google#android#gms#fitness#data#DataSet_E@, this will correspond to the data set's data source.", "history": "", "FullName": "public DataSource getDataSource ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.fitness.data.DataPoint", "ClassDesc": "Represents a single data point in a @B_com#google#android#gms#fitness#data#DataType_E@ stream from a particular @B_com#google#android#gms#fitness#data#DataSource_E@. A data point holds a value for each field, a timestamp and an optional start time. The exact semantics of each of these attributes is specified in the documentation for the particular data type, which can be found in the appropriate constant in @B_com#google#android#gms#fitness#data#DataType_E@. A data point can represent an instantaneous measurement, reading or inputted observation, as well as averages or aggregates over a time interval. Check the data type documentation to determine which is the case for a particular data type. DataPoints always contain one value for each the data type @B_com#google#android#gms#fitness#data#Field_E@. Initially, all of the values are unset. After creating the data point, the appropriate values and timestamps should be set."}