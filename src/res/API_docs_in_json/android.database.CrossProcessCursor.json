{"Functions": {"onMove(int, int)": {"Returns": [["boolean", "True if the move is successful, false otherwise."]], "Parameters": [["int", "int: The position that we're moving from."], ["int", "int: The position that we're moving to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called every time the cursor is successfully scrolled to a new position, giving the subclass a chance to update any state it may have. If it returns false the move function will also do so and the cursor will scroll to the beforeFirst position. This function should be called by methods such as @B_android#database#Cursor#moveToPosition_E@, so it will typically not be called from outside of the cursor class itself.", "history": "added in API level 1", "FullName": "public abstract boolean onMove (int oldPosition, int newPosition)"}, "onMove(int,int)": {"Returns": [["boolean", "True if the move is successful, false otherwise."]], "Parameters": [["int", "int: The position that we're moving from."], ["int", "int: The position that we're moving to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called every time the cursor is successfully scrolled to a new position, giving the subclass a chance to update any state it may have. If it returns false the move function will also do so and the cursor will scroll to the beforeFirst position. This function should be called by methods such as @B_android#database#Cursor#moveToPosition_E@, so it will typically not be called from outside of the cursor class itself.", "history": "Added in API level 1", "FullName": "public abstract boolean onMove (int oldPosition, int newPosition)"}, "fillWindow(int,android.database.CursorWindow)": {"Returns": [], "Parameters": [["int", "int: The zero-based index of the first row to copy into the window."], ["@B_android#database#CursorWindow_E@", "CursorWindow: The window to fill."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies cursor data into the window. Clears the window and fills it with data beginning at the requested row position until all of the data in the cursor is exhausted or the window runs out of space. The filled window uses the same row indices as the original cursor. For example, if you fill a window starting from row 5 from the cursor, you can query the contents of row 5 from the window just by asking it for row 5 because there is a direct correspondence between the row indices used by the cursor and the window. The current position of the cursor, as returned by @B_android#database#Cursor#getPosition_E@, is not changed by this method.", "history": "Added in API level 1", "FullName": "public abstract void fillWindow (int position, CursorWindow window)"}, "fillWindow(int, android.database.CursorWindow)": {"Returns": [], "Parameters": [["int", "int: The zero-based index of the first row to copy into the window."], ["@B_android#database#CursorWindow_E@", "CursorWindow: The window to fill."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies cursor data into the window. Clears the window and fills it with data beginning at the requested row position until all of the data in the cursor is exhausted or the window runs out of space. The filled window uses the same row indices as the original cursor. For example, if you fill a window starting from row 5 from the cursor, you can query the contents of row 5 from the window just by asking it for row 5 because there is a direct correspondence between the row indices used by the cursor and the window. The current position of the cursor, as returned by @B_android#database#Cursor#getPosition_E@, is not changed by this method.", "history": "added in API level 1", "FullName": "public abstract void fillWindow (int position, CursorWindow window)"}, "getWindow()": {"Returns": [["@B_android#database#CursorWindow_E@", "The pre-filled window, or null if none."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a pre-filled window that contains the data within this cursor. In particular, the window contains the row indicated by @B_android#database#Cursor#getPosition_E@. The window's contents are automatically scrolled whenever the current row moved outside the range covered by the window.", "history": "Added in API level 1", "FullName": "public abstract CursorWindow getWindow ()"}}, "Inheritance": [], "ClassName": "android.database.CrossProcessCursor", "ClassDesc": "A cross process cursor is an extension of a @B_android#database#Cursor_E@ that also supports usage from remote processes. The contents of a cross process cursor are marshalled to the remote process by filling @B_android#database#CursorWindow_E@ objects using @B_android#database#CrossProcessCursor#fillWindow_E@. As an optimization, the cursor can provide a pre-filled window to use via @B_android#database#CrossProcessCursor#getWindow_E@ thereby obviating the need to copy the data to yet another cursor window."}