{"Functions": {"getStartTime(java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the start time for the session, in the given time unit since epoch. A valid start time is always set.", "history": "", "FullName": "public long getStartTime (TimeUnit timeUnit)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "extract(android.content.Intent)": {"Returns": [["", "the extracted Session, or null if the given intent does not contain a Session"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Extracts the session extra from the given intent, such as a callback intent received after", "history": "", "FullName": "public static Session extract (Intent intent)"}, "getEndTimeMillis()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the end time for the session, in milliseconds since epoch. If the session is ongoing (it hasn't ended yet), this will return 0.", "history": "", "FullName": "public long getEndTimeMillis ()"}, "getIdentifier()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the identifier for this session, if set.", "history": "", "FullName": "public String getIdentifier ()"}, "hasActiveTime()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the session active time is set.", "history": "", "FullName": "public boolean hasActiveTime ()"}, "getActiveTime(java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [], "Throws": [["IllegalStateException", "@B_com#google#android#gms#fitness#data#Session#hasActiveTime_E@ returns false."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the active time period of the session. Make sure to use @B_com#google#android#gms#fitness#data#Session#hasActiveTime_E@ before using this method.", "history": "", "FullName": "public long getActiveTime (TimeUnit timeUnit)"}, "describeContents()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int describeContents ()"}, "toString()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public String toString ()"}, "getDescription()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the description for this session, if set.", "history": "", "FullName": "public String getDescription ()"}, "getAppPackageName()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the package name for the application responsible for adding the session. or null if unset/unknown. The @B_android#content#pm#PackageManager_E@ can be used to query relevant data on the application, such as the name, icon, logo, etc.", "history": "", "FullName": "public String getAppPackageName ()"}, "equals(java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public boolean equals (Object o)"}, "getMimeType(java.lang.String)": {"Returns": [], "Parameters": [["String", "one of the activities in @B_com#google#android#gms#fitness#FitnessActivities_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the MIME type which describes a Session for a particular activity. The MIME type is used in intents such as the", "history": "", "FullName": "public static String getMimeType (String activity)"}, "getActivity()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the activity associated with this session, if set. Else returns @B_com#google#android#gms#fitness#FitnessActivities#UNKNOWN_E@.", "history": "", "FullName": "public String getActivity ()"}, "getStartTimeMillis()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the start time for the session, in milliseconds since epoch. A valid start time is always set.", "history": "", "FullName": "public long getStartTimeMillis ()"}, "getEndTime(java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the end time for the session, in the given unit since epoch. If the session is ongoing (it hasn't ended yet), this will return 0.", "history": "", "FullName": "public long getEndTime (TimeUnit timeUnit)"}, "isOngoing()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the session is ongoing. If the session has ended, this will return false.", "history": "", "FullName": "public boolean isOngoing ()"}, "getName()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name for this session. A non-empty name is always set.", "history": "", "FullName": "public String getName ()"}, "hashCode()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int hashCode ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.fitness.data.Session", "ClassDesc": "A Session represents a time interval with associated metadata. Sessions provide a mechanism to store user-visible groups of related stream data in a useful and shareable manner, and allows for easy querying of the data in a detailed or aggregated fashion. The start and end times for sessions will be controlled by applications, and can be used to represent user-friendly groupings of activities, such as \"bike ride\", \"marathon training run\", etc. Any data in Google Fit which falls within this time range is implicitly associated with the session. A session consists of the following fields: startTime: the timestamp when the session started. This is a mandatory field. endTimeMillis: the timestamp when the session ended. If not specified, the session is considered to be still ongoing. If specified, the end time should be strictly later than the start time. This is an optional field. name: a human readable name, possibly specified by the user. For instance, \"Sunday bike ride\" identifier: a unique identifier for the session. Should be unique for the given application and user. The application can use this identifier to later fetch a particular session. If the identifier is not specified, one will be created from the start time and name. description: description of the session. Can be filled in by the user with specific notes for the session. This is an optional field. activity: the activity associated with this session; for instance, biking. Can be used to identify sessions that encompass a single user activity. This is an optional field. packageName: the package name of the application that added this session. This is inferred automatically by the Fitness Platform. Example usage:"}