{"Functions": {"registerOnProvideAssistDataListener(android.app.Application.OnProvideAssistDataListener)": {"Returns": [], "Parameters": [["@B_android#app#Application#OnProvideAssistDataListener_E@", "Application.OnProvideAssistDataListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 18", "FullName": "public void registerOnProvideAssistDataListener (Application.OnProvideAssistDataListener callback)"}, "getProcessName()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the current process. A package's default process name is the same as its package name. Non-default processes will look like \"$PACKAGE_NAME:$NAME\", where $NAME corresponds to an android:process attribute within AndroidManifest.xml.", "history": "Added in API level 28", "FullName": "public static String getProcessName ()"}, "Application()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Application ()"}, "onLowMemory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. While the exact point at which this will be called is not defined, generally it will happen when all background process have been killed. That is, before reaching the point of killing processes hosting service and foreground UI that we would like to avoid killing. You should implement this method to release any caches or other unnecessary resources you may be holding on to. The system will perform a garbage collection for you after returning from this method. Preferably, you should implement @B_android#content#ComponentCallbacks2#onTrimMemory_E@ from @B_android#content#ComponentCallbacks2_E@ to incrementally unload your resources based on various levels of memory demands. That API is available for API level 14 and higher, so you should only use this @B_android#content#ComponentCallbacks#onLowMemory_E@ method as a fallback for older versions, which can be treated the same as @B_android#content#ComponentCallbacks2#onTrimMemory_E@ with the @B_android#content#ComponentCallbacks2#TRIM_MEMORY_COMPLETE_E@ level. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void onLowMemory ()"}, "onTerminate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is for use in emulated process environments. It will never be called on a production Android device, where processes are removed by simply killing them; no user code (including this callback) is executed when doing so. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void onTerminate ()"}, "unregisterOnProvideAssistDataListener(android.app.Application.OnProvideAssistDataListener)": {"Returns": [], "Parameters": [["@B_android#app#Application#OnProvideAssistDataListener_E@", "Application.OnProvideAssistDataListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 18", "FullName": "public void unregisterOnProvideAssistDataListener (Application.OnProvideAssistDataListener callback)"}, "onConfigurationChanged(android.content.res.Configuration)": {"Returns": [], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system when the device configuration changes while your component is running. Note that, unlike activities, other components are never restarted when a configuration changes: they must always deal with the results of the change, such as by re-retrieving resources. At the time that this function has been called, your Resources object will have been updated to return resource values matching the new configuration. For more information, read must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void onConfigurationChanged (Configuration newConfig)"}, "onCreate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the application is starting, before any activity, service, or receiver objects (excluding content providers) have been created. Implementations should be as quick as possible (for example using lazy initialization of state) since the time spent in this function directly impacts the performance of starting the first activity, service, or receiver in a process. If you override this method, be sure to call super.onCreate(). Be aware that direct boot may also affect callback order on Android @B_android#os#Build#VERSION_CODES#N_E@ and later devices. Until the user unlocks the device, only direct boot aware components are allowed to run. You should consider that all direct boot unaware components, including such @B_android#content#ContentProvider_E@, are disabled until user unlock happens, especially when component callback order matters. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void onCreate ()"}, "onTrimMemory(int)": {"Returns": [], "Parameters": [["int", "int: The context of the trim, giving a hint of the amount of trimming the application may like to perform. Value is @B_android#content#ComponentCallbacks2#TRIM_MEMORY_COMPLETE_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_MODERATE_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_BACKGROUND_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_UI_HIDDEN_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_RUNNING_CRITICAL_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_RUNNING_LOW_E@, or @B_android#content#ComponentCallbacks2#TRIM_MEMORY_RUNNING_MODERATE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process. This will happen for example when it goes in the background and there is not enough memory to keep as many background processes running as desired. You should never compare to exact values of the level, since new intermediate values may be added -- you will typically want to compare if the value is greater or equal to a level you are interested in. To retrieve the processes current trim level at any point, you can use @B_android#app#ActivityManager#getMyMemoryState_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 14", "FullName": "public void onTrimMemory (int level)"}, "unregisterActivityLifecycleCallbacks(android.app.Application.ActivityLifecycleCallbacks)": {"Returns": [], "Parameters": [["@B_android#app#Application#ActivityLifecycleCallbacks_E@", "Application.ActivityLifecycleCallbacks no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public void unregisterActivityLifecycleCallbacks (Application.ActivityLifecycleCallbacks callback)"}, "registerComponentCallbacks(android.content.ComponentCallbacks)": {"Returns": [], "Parameters": [["@B_android#content#ComponentCallbacks_E@", "ComponentCallbacks: The interface to call. This can be either a @B_android#content#ComponentCallbacks_E@ or @B_android#content#ComponentCallbacks2_E@ interface."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new @B_android#content#ComponentCallbacks_E@ to the base application of the Context, which will be called at the same times as the ComponentCallbacks methods of activities and other components are called. Note that you must be sure to use @B_android#content#Context#unregisterComponentCallbacks_E@ when appropriate in the future; this will not be removed for you.", "history": "Added in API level 14", "FullName": "public void registerComponentCallbacks (ComponentCallbacks callback)"}, "unregisterComponentCallbacks(android.content.ComponentCallbacks)": {"Returns": [], "Parameters": [["@B_android#content#ComponentCallbacks_E@", "ComponentCallbacks no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a @B_android#content#ComponentCallbacks_E@ object that was previously registered with @B_android#content#Context#registerComponentCallbacks_E@.", "history": "Added in API level 14", "FullName": "public void unregisterComponentCallbacks (ComponentCallbacks callback)"}, "registerActivityLifecycleCallbacks(android.app.Application.ActivityLifecycleCallbacks)": {"Returns": [], "Parameters": [["@B_android#app#Application#ActivityLifecycleCallbacks_E@", "Application.ActivityLifecycleCallbacks no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public void registerActivityLifecycleCallbacks (Application.ActivityLifecycleCallbacks callback)"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@"], "ClassName": "android.app.Application", "ClassDesc": "Base class for maintaining global application state. You can provide your own implementation by creating a subclass and specifying the fully-qualified name of this subclass as the \"android:name\" attribute in your AndroidManifest.xml's <application> tag. The Application class, or your subclass of the Application class, is instantiated before any other class when the process for your application/package is created. @B_android#content#Context#getApplicationContext_E@ as a @B_android#content#Context_E@ argument when invoking your singleton's getInstance() method."}