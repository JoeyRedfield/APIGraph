{"Functions": {"onCreate()": {"Returns": [["boolean", "true if the provider was successfully loaded, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default FileProvider implementation does not need to be initialized. If you want to override this method, you must provide your own subclass of FileProvider.", "history": "added in version 22.0.0", "FullName": "boolean onCreate ()"}, "getType(android.net.Uri)": {"Returns": [["@B_java#lang#String_E@", "If the associated file has an extension, the MIME type associated with that extension; otherwise application/octet-stream."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: A content URI returned by @B_android#support#v4#content#FileProvider#getUriForFile_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the MIME type of a content URI returned by @B_android#support#v4#content#FileProvider#getUriForFile_E@.", "history": "added in version 22.0.0", "FullName": "String getType (Uri uri)"}, "FileProvider()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "FileProvider ()"}, "openFile(android.net.Uri, java.lang.String)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "A new @B_android#os#ParcelFileDescriptor_E@ with which you can access the file."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: A content URI associated with a file, as returned by @B_android#support#v4#content#FileProvider#getUriForFile_E@."], ["@B_java#lang#String_E@", "String: Access mode for the file. May be \"r\" for read-only access, \"rw\" for read and write access, or \"rwt\" for read and write access that truncates any existing file."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "By default, FileProvider automatically returns the @B_android#os#ParcelFileDescriptor_E@ for a file associated with a content:// @B_android#net#Uri_E@. To get the @B_android#os#ParcelFileDescriptor_E@, call @B_android#content#ContentResolver#openFileDescriptor_E@. To override this method, you must provide your own subclass of FileProvider.", "history": "", "FullName": "ParcelFileDescriptor openFile (Uri uri, String mode)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#content#ContentProvider_E@"], "ClassName": "android.support.v4.content.FileProvider", "ClassDesc": "FileProvider is a special subclass of https:##developer#android#com@B_android#content#ContentProvider_E@ that facilitates secure sharing of files associated with an app by creating a content:// https:##developer#android#com@B_android#net#Uri_E@ for a file instead of a file:/// https:##developer#android#com@B_android#net#Uri_E@. A content URI allows you to grant read and write access using temporary access permissions. When you create an https:##developer#android#com@B_android#content#Intent_E@ containing a content URI, in order to send the content URI to a client app, you can also call https:##developer#android#com@B_android#content#Intent#setFlags_E@ to add permissions. These permissions are available to the client app for as long as the stack for a receiving https:##developer#android#com@B_android#app#Activity_E@ is active. For an https:##developer#android#com@B_android#content#Intent_E@ going to a https:##developer#android#com@B_android#app#Service_E@, the permissions are available as long as the https:##developer#android#com@B_android#app#Service_E@ is running. In comparison, to control access to a file:/// https:##developer#android#com@B_android#net#Uri_E@ you have to modify the file system permissions of the underlying file. The permissions you provide become available to any app, and remain in effect until you change them. This level of access is fundamentally insecure. The increased level of file access security offered by a content URI makes FileProvider a key part of Android's security infrastructure. This overview of FileProvider includes the following topics: Since the default functionality of FileProvider includes content URI generation for files, you don't need to define a subclass in code. Instead, you can include a FileProvider in your app by specifying it entirely in XML. To specify the FileProvider component itself, add a #guide#topics#manifest#provider-element_E@ element to your app manifest. Set the android:name attribute to android.support.v4.content.FileProvider. Set the android:authorities attribute to a URI authority based on a domain you control; for example, if you control the domain mydomain.com you should use the authority com.mydomain.fileprovider. Set the android:exported attribute to false; the FileProvider does not need to be public. Set the true, to allow you to grant temporary access to files. For example: If you want to override any of the default behavior of FileProvider methods, extend the FileProvider class and use the fully-qualified class name in the android:name attribute of the <provider> element. <paths> element. For example, the following paths element tells FileProvider that you intend to request content URIs for the images/ subdirectory of your private file area. The <paths> element must contain one or more of the following child elements: These child elements all use the same attributes: You must specify a child element of <paths> for each directory that contains files for which you want content URIs. For example, these XML elements specify two directories: Put the <paths> element and its children in an XML file in your project. For example, you can add them to a new file called res/xml/file_paths.xml. To link this file to the FileProvider, add a <provider> element that defines the FileProvider. Set the <meta-data> element's \"android:name\" attribute to android.support.FILE_PROVIDER_PATHS. Set the element's \"android:resource\" attribute to @xml/file_paths (notice that you don't specify the .xml extension). For example: To share a file with another app using a content URI, your app has to generate the content URI. To generate the content URI, create a new @B_java#io#File_E@ for the file, then pass the @B_java#io#File_E@ to @B_android#support#v4#content#FileProvider#getUriForFile_E@. You can send the content URI returned by @B_android#support#v4#content#FileProvider#getUriForFile_E@ to another app in an https:##developer#android#com@B_android#content#Intent_E@. The client app that receives the content URI can open the file and access its contents by calling https:##developer#android#com@B_android#content#ContentResolver#openFileDescriptor_E@ to get a https:##developer#android#com@B_android#os#ParcelFileDescriptor_E@. For example, suppose your app is offering files to other apps with a FileProvider that has the authority com.mydomain.fileprovider. To get a content URI for the file default_image.jpg in the images/ subdirectory of your internal storage add the following code: @B_android#support#v4#content#FileProvider#getUriForFile_E@ returns the content URI content://com.mydomain.fileprovider/my_images/default_image.jpg. @B_android#support#v4#content#FileProvider#getUriForFile_E@, do one of the following: Call the method https:##developer#android#com@B_android#content#Context#grantUriPermission_E@ for the content:// https:##developer#android#com@B_android#net#Uri_E@, using the desired mode flags. This grants temporary access permission for the content URI to the specified package, according to the value of the the mode_flags parameter, which you can set to https:##developer#android#com@B_android#content#Intent#FLAG_GRANT_READ_URI_PERMISSION_E@, https:##developer#android#com@B_android#content#Intent#FLAG_GRANT_WRITE_URI_PERMISSION_E@ or both. The permission remains in effect until you revoke it by calling https:##developer#android#com@B_android#content#Context#revokeUriPermission_E@ or until the device reboots. Put the content URI in an https:##developer#android#com@B_android#content#Intent_E@ by calling https:##developer#android#com@B_android#content#Intent#setData_E@. Next, call the method https:##developer#android#com@B_android#content#Intent#setFlags_E@ with either https:##developer#android#com@B_android#content#Intent#FLAG_GRANT_READ_URI_PERMISSION_E@ or https:##developer#android#com@B_android#content#Intent#FLAG_GRANT_WRITE_URI_PERMISSION_E@ or both. Finally, send the https:##developer#android#com@B_android#content#Intent_E@ to another app. Most often, you do this by calling https:##developer#android#com@B_android#app#Activity#setResult_E@. Permissions granted in an https:##developer#android#com@B_android#content#Intent_E@ remain in effect while the stack of the receiving https:##developer#android#com@B_android#app#Activity_E@ is active. When the stack finishes, the permissions are automatically removed. Permissions granted to one https:##developer#android#com@B_android#app#Activity_E@ in a client app are automatically extended to other components of that app. There are a variety of ways to serve the content URI for a file to a client app. One common way is for the client app to start your app by calling https:##developer#android#com@B_android#app#Activity#startActivityForResult_E@, which sends an https:##developer#android#com@B_android#content#Intent_E@ to your app to start an https:##developer#android#com@B_android#app#Activity_E@ in your app. In response, your app can immediately return a content URI to the client app or present a user interface that allows the user to pick a file. In the latter case, once the user picks the file your app can return its content URI. In both cases, your app returns the content URI in an https:##developer#android#com@B_android#content#Intent_E@ sent via https:##developer#android#com@B_android#app#Activity#setResult_E@. You can also put the content URI in a https:##developer#android#com@B_android#content#ClipData_E@ object and then add the object to an https:##developer#android#com@B_android#content#Intent_E@ you send to a client app. To do this, call https:##developer#android#com@B_android#content#Intent#setClipData_E@. When you use this approach, you can add multiple https:##developer#android#com@B_android#content#ClipData_E@ objects to the https:##developer#android#com@B_android#content#Intent_E@, each with its own content URI. When you call https:##developer#android#com@B_android#content#Intent#setFlags_E@ on the https:##developer#android#com@B_android#content#Intent_E@ to set temporary access permissions, the same permissions are applied to all of the content URIs. https:##developer#android#com@B_android#content#Intent#setClipData_E@ method is only available in platform version 16 (Android 4.1) and later. If you want to maintain compatibility with previous versions, you should send one content URI at a time in the https:##developer#android#com@B_android#content#Intent_E@. Set the action to https:##developer#android#com@B_android#content#Intent#ACTION_SEND_E@ and put the URI in data by calling https:##developer#android#com@B_android#content#Intent#setData_E@. To learn more about FileProvider, see the Android training class"}