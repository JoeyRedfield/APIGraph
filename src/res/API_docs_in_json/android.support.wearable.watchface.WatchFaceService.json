{"Functions": {"onCreateEngine()": {"Returns": [["@B_android#support#wearable#watchface#WatchFaceService#Engine_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "WatchFaceService.Engine onCreateEngine ()"}, "WatchFaceService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "WatchFaceService ()"}}, "Inheritance": ["http:##developer#android#com@B_java#lang#Object_E@", "http:##developer#android#com@B_android#content#Context_E@", "http:##developer#android#com@B_android#content#ContextWrapper_E@", "http:##developer#android#com@B_android#app#Service_E@", "http:##developer#android#com@B_android#service#wallpaper#WallpaperService_E@"], "ClassName": "android.support.wearable.watchface.WatchFaceService", "ClassDesc": "A subclass of http:##developer#android#com@B_android#service#wallpaper#WallpaperService_E@ with a http:##developer#android#com@B_android#service#wallpaper#WallpaperService#Engine_E@ that exposes callbacks for the lifecycle of a watch face. If you want to create a watch face for a wearable, you should use this instead of vanilla http:##developer#android#com@B_android#service#wallpaper#WallpaperService_E@. A watch face service, similarly to a wallpaper service, must implement only one method: https:##developer#android#com@B_android#support#wearable#watchface#WatchFaceService#onCreateEngine_E@. However, it must also create a subclass of inner class https:##developer#android#com@B_android#support#wearable#watchface#WatchFaceService#Engine_E@. Most watch face engines will implement the following methods: https:##developer#android#com@B_android#support#wearable#watchface#WatchFaceService#Engine#onTimeTick_E@ to update the time and refresh the view https:##developer#android#com@B_android#support#wearable#watchface#WatchFaceService#Engine#onAmbientModeChanged_E@ to update ambient mode and refresh the view Most watch face engines will also implement https:##developer#android#com@B_android#support#wearable#watchface#WatchFaceService#Engine#onInterruptionFilterChanged_E@ to update the view depending on how much information the user has requested. For updates that occur in ambient mode a wake lock will be held so the device doesn't go to sleep until the watch face finishes drawing. Registering watch faces in your application works similarly to registering wallpapers with several additional steps. First, watch faces require the wake lock permission: Second, your watch face service declaration needs preview metadata: Finally, you need to add a special intent filter, so your watch face can be detected: For more information consult:"}