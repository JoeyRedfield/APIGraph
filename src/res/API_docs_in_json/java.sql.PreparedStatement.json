{"Functions": {"setRef(int,java.sql.Ref)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Ref_E@", "Ref: an SQL REF value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given REF(<structured-type>) value. The driver converts this to an SQL REF value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setRef (int parameterIndex, Ref x)"}, "setAsciiStream(int, java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the Java input stream that contains the ASCII parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. setAsciiStream which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setAsciiStream (int parameterIndex, InputStream x)"}, "setBinaryStream(int, java.io.InputStream, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the java input stream which contains the binary parameter value"], ["int", "int: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached.", "history": "added in API level 1", "FullName": "public abstract void setBinaryStream (int parameterIndex, InputStream x, int length)"}, "setSQLXML(int, java.sql.SQLXML)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#sql#SQLXML_E@", "SQLXML: a SQLXML object that maps an SQL XML value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatement or the java.xml.transform.Result, Writer or OutputStream has not been closed for the SQLXML object"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an SQL XML value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setSQLXML (int parameterIndex, SQLXML xmlObject)"}, "setAsciiStream(int,java.io.InputStream,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the Java input stream that contains the ASCII parameter value"], ["int", "int: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format.", "history": "Added in API level 1", "FullName": "public abstract void setAsciiStream (int parameterIndex, InputStream x, int length)"}, "setNull(int,int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["int", "int: a value from java.sql.Types"], ["@B_java#lang#String_E@", "String: the fully-qualified name of an SQL user-defined type; ignored if the parameter is not a user-defined type or REF"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type or if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to SQL NULL. This version of the method setNull should be used for user-defined types and REF type parameters. Examples of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types.", "history": "Added in API level 1", "FullName": "public abstract void setNull (int parameterIndex, int sqlType, String typeName)"}, "setFloat(int, float)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["float", "float: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java float value. The driver converts this to an SQL REAL value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setFloat (int parameterIndex, float x)"}, "setLong(int,long)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["long", "long: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java long value. The driver converts this to an SQL BIGINT value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setLong (int parameterIndex, long x)"}, "setFloat(int,float)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["float", "float: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java float value. The driver converts this to an SQL REAL value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setFloat (int parameterIndex, float x)"}, "setClob(int, java.sql.Clob)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Clob_E@", "Clob: a Clob object that maps an SQL CLOB value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Clob object. The driver converts this to an SQL CLOB value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setClob (int parameterIndex, Clob x)"}, "setBlob(int, java.sql.Blob)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Blob_E@", "Blob: a Blob object that maps an SQL BLOB value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Blob object. The driver converts this to an SQL BLOB value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setBlob (int parameterIndex, Blob x)"}, "setShort(int,short)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["short", "short: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java short value. The driver converts this to an SQL SMALLINT value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setShort (int parameterIndex, short x)"}, "setByte(int, byte)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["byte", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java byte value. The driver converts this to an SQL TINYINT value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setByte (int parameterIndex, byte x)"}, "setTimestamp(int, java.sql.Timestamp)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Timestamp_E@", "Timestamp: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setTimestamp (int parameterIndex, Timestamp x)"}, "setBinaryStream(int,java.io.InputStream,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the java input stream which contains the binary parameter value"], ["int", "int: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached.", "history": "Added in API level 1", "FullName": "public abstract void setBinaryStream (int parameterIndex, InputStream x, int length)"}, "setBinaryStream(int, java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the java input stream which contains the binary parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. setBinaryStream which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setBinaryStream (int parameterIndex, InputStream x)"}, "setCharacterStream(int, java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object that contains the Unicode data"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Reader object. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. setCharacterStream which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setCharacterStream (int parameterIndex, Reader reader)"}, "setNClob(int,java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB setNClob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setNClob (int parameterIndex, Reader reader)"}, "setAsciiStream(int,java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the Java input stream that contains the ASCII parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. setAsciiStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setAsciiStream (int parameterIndex, InputStream x)"}, "setDate(int, java.sql.Date)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Date_E@", "Date: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application. The driver converts this to an SQL DATE value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setDate (int parameterIndex, Date x)"}, "setLong(int, long)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["long", "long: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java long value. The driver converts this to an SQL BIGINT value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setLong (int parameterIndex, long x)"}, "setNull(int, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["int", "int: the SQL type code defined in java.sql.Types"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to SQL NULL.", "history": "added in API level 1", "FullName": "public abstract void setNull (int parameterIndex, int sqlType)"}, "setObject(int, java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatement or the type of the given object is ambiguous"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of the designated parameter using the given object. The second parameter must be of type Object; therefore, the java.lang equivalent objects should be used for built-in types. The JDBC specification specifies a standard mapping from Java Object types to SQL types. The given argument will be converted to the corresponding SQL type before being sent to the database. Note that this method may be used to pass datatabase- specific abstract data types, by using a driver-specific Java type. If the object is of a class implementing the interface SQLData, the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, RowId, SQLXML or Array, the driver should pass it to the database as a value of the corresponding SQL type. setNull or the setObject(int parameterIndex, Object x, int sqlType) method should be used instead of setObject(int parameterIndex, Object x).", "history": "added in API level 1", "FullName": "public abstract void setObject (int parameterIndex, Object x)"}, "setNCharacterStream(int, java.io.Reader, long)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the parameter value"], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database.", "history": "added in API level 9", "FullName": "public abstract void setNCharacterStream (int parameterIndex, Reader value, long length)"}, "setString(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java String value. The driver converts this to an SQL VARCHAR or LONGVARCHAR value (depending on the argument's size relative to the driver's limits on VARCHAR values) when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setString (int parameterIndex, String x)"}, "setClob(int, java.io.Reader, long)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatement or if the length specified is less than zero."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed.This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARCHAR or a CLOB", "history": "added in API level 9", "FullName": "public abstract void setClob (int parameterIndex, Reader reader, long length)"}, "setClob(int,java.sql.Clob)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Clob_E@", "Clob: a Clob object that maps an SQL CLOB value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Clob object. The driver converts this to an SQL CLOB value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setClob (int parameterIndex, Clob x)"}, "setBytes(int,byte[])": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["byte[]", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java array of bytes. The driver converts this to an SQL VARBINARY or LONGVARBINARY (depending on the argument's size relative to the driver's limits on VARBINARY values) when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setBytes (int parameterIndex, byte[] x)"}, "setClob(int,java.io.Reader,long)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatement or if the length specified is less than zero."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed.This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARCHAR or a CLOB", "history": "Added in API level 9", "FullName": "public abstract void setClob (int parameterIndex, Reader reader, long length)"}, "setBlob(int,java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatement or if parameterIndex does not correspond to a parameter marker in the SQL statement,"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB setBlob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setBlob (int parameterIndex, InputStream inputStream)"}, "setCharacterStream(int,java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object that contains the Unicode data"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Reader object. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. setCharacterStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setCharacterStream (int parameterIndex, Reader reader)"}, "setBlob(int, java.io.InputStream, long)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."], ["long", "long: the number of bytes in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatement; if the length specified is less than zero or if the number of bytes in the inputstream does not match the specfied length."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a InputStream object. The inputstream must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setBinaryStream (int, InputStream, int) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB", "history": "added in API level 9", "FullName": "public abstract void setBlob (int parameterIndex, InputStream inputStream, long length)"}, "setNull(int, int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["int", "int: a value from java.sql.Types"], ["@B_java#lang#String_E@", "String: the fully-qualified name of an SQL user-defined type; ignored if the parameter is not a user-defined type or REF"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type or if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to SQL NULL. This version of the method setNull should be used for user-defined types and REF type parameters. Examples of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types.", "history": "added in API level 1", "FullName": "public abstract void setNull (int parameterIndex, int sqlType, String typeName)"}, "setObject(int,java.lang.Object,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"], ["int", "int: the SQL type (as defined in java.sql.Types) to be sent to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if targetSqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Sets the value of the designated parameter with the given object. This method is like the method setObject above, except that it assumes a scale of zero.", "history": "Added in API level 1", "FullName": "public abstract void setObject (int parameterIndex, Object x, int targetSqlType)"}, "setBytes(int, byte[])": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["byte[]", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java array of bytes. The driver converts this to an SQL VARBINARY or LONGVARBINARY (depending on the argument's size relative to the driver's limits on VARBINARY values) when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setBytes (int parameterIndex, byte[] x)"}, "setBlob(int,java.sql.Blob)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Blob_E@", "Blob: a Blob object that maps an SQL BLOB value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Blob object. The driver converts this to an SQL BLOB value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setBlob (int parameterIndex, Blob x)"}, "setCharacterStream(int, java.io.Reader, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object that contains the Unicode data"], ["int", "int: the number of characters in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format.", "history": "added in API level 1", "FullName": "public abstract void setCharacterStream (int parameterIndex, Reader reader, int length)"}, "setArray(int,java.sql.Array)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Array_E@", "Array: an Array object that maps an SQL ARRAY value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Array object. The driver converts this to an SQL ARRAY value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setArray (int parameterIndex, Array x)"}, "setClob(int,java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatementor if parameterIndex does not correspond to a parameter marker in the SQL statement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARCHAR or a CLOB setClob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setClob (int parameterIndex, Reader reader)"}, "getMetaData()": {"Returns": [["@B_java#sql#ResultSetMetaData_E@", "the description of a ResultSet object's columns or null if the driver cannot return a ResultSetMetaData object"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a ResultSetMetaData object that contains information about the columns of the ResultSet object that will be returned when this PreparedStatement object is executed. Because a PreparedStatement object is precompiled, it is possible to know about the ResultSet object that it will return without having to execute it. Consequently, it is possible to invoke the method getMetaData on a PreparedStatement object rather than waiting to execute it and then invoking the ResultSet.getMetaData method on the ResultSet object that is returned.", "history": "Added in API level 1", "FullName": "public abstract ResultSetMetaData getMetaData ()"}, "setTime(int, java.sql.Time)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Time_E@", "Time: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Time value. The driver converts this to an SQL TIME value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setTime (int parameterIndex, Time x)"}, "setString(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java String value. The driver converts this to an SQL VARCHAR or LONGVARCHAR value (depending on the argument's size relative to the driver's limits on VARCHAR values) when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setString (int parameterIndex, String x)"}, "setSQLXML(int,java.sql.SQLXML)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#sql#SQLXML_E@", "SQLXML: a SQLXML object that maps an SQL XML value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatement or the java.xml.transform.Result, Writer or OutputStream has not been closed for the SQLXML object"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an SQL XML value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setSQLXML (int parameterIndex, SQLXML xmlObject)"}, "setTimestamp(int,java.sql.Timestamp,java.util.Calendar)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Timestamp_E@", "Timestamp: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the timestamp"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIMESTAMP value, which the driver then sends to the database. With a Calendar object, the driver can calculate the timestamp taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.", "history": "Added in API level 1", "FullName": "public abstract void setTimestamp (int parameterIndex, Timestamp x, Calendar cal)"}, "setTime(int, java.sql.Time, java.util.Calendar)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Time_E@", "Time: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the time"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Time value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIME value, which the driver then sends to the database. With a Calendar object, the driver can calculate the time taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.", "history": "added in API level 1", "FullName": "public abstract void setTime (int parameterIndex, Time x, Calendar cal)"}, "setDouble(int,double)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["double", "double: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java double value. The driver converts this to an SQL DOUBLE value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setDouble (int parameterIndex, double x)"}, "setNCharacterStream(int, java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database. setNCharacterStream which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setNCharacterStream (int parameterIndex, Reader value)"}, "setBinaryStream(int,java.io.InputStream,long)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the java input stream which contains the binary parameter value"], ["long", "long: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached.", "history": "Added in API level 9", "FullName": "public abstract void setBinaryStream (int parameterIndex, InputStream x, long length)"}, "setNString(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated paramter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR value (depending on the argument's size relative to the driver's limits on NVARCHAR values) when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setNString (int parameterIndex, String value)"}, "setUnicodeStream(int,java.io.InputStream,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: a java.io.InputStream object that contains the Unicode parameter value"], ["int", "int: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Use setCharacterStream Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large Unicode value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from Unicode to the database char format.The byte format of the Unicode stream must be a Java UTF-8, as defined in theJava Virtual Machine Specification.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public abstract void setUnicodeStream (int parameterIndex, InputStream x, int length)"}, "setObject(int, java.lang.Object, int, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"], ["int", "int: the SQL type (as defined in java.sql.Types) to be sent to the database. The scale argument may further qualify this type."], ["int", "int: for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types, this is the number of digits after the decimal point. For Java Object types InputStream and Reader, this is the length of the data in the stream or reader. For all other types, this value will be ignored."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatement or if the Java Object specified by x is an InputStream or Reader object and the value of the scale parameter is less than zero"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if targetSqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Sets the value of the designated parameter with the given object. The second argument must be an object type; for integral values, the java.lang equivalent objects should be used. If the second argument is an InputStream then the stream must contain the number of bytes specified by scaleOrLength. If the second argument is a Reader then the reader must contain the number of characters specified by scaleOrLength. If these conditions are not true the driver will generate a SQLException when the prepared statement is executed. The given Java object will be converted to the given targetSqlType before being sent to the database. If the object has a custom mapping (is of a class implementing the interface SQLData), the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. Note that this method may be used to pass database-specific abstract data types.", "history": "added in API level 1", "FullName": "public abstract void setObject (int parameterIndex, Object x, int targetSqlType, int scaleOrLength)"}, "setNClob(int, java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB setNClob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setNClob (int parameterIndex, Reader reader)"}, "setCharacterStream(int,java.io.Reader,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object that contains the Unicode data"], ["int", "int: the number of characters in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format.", "history": "Added in API level 1", "FullName": "public abstract void setCharacterStream (int parameterIndex, Reader reader, int length)"}, "setUnicodeStream(int, java.io.InputStream, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: a java.io.InputStream object that contains the Unicode parameter value"], ["int", "int: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Deprecated. Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large Unicode value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from Unicode to the database char format.The byte format of the Unicode stream must be a Java UTF-8, as defined in theJava Virtual Machine Specification.", "history": "added in API level 1", "FullName": "public abstract void setUnicodeStream (int parameterIndex, InputStream x, int length)"}, "clearParameters()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Clears the current parameter values immediately. In general, parameter values remain in force for repeated use of a statement. Setting a parameter value automatically clears its previous value. However, in some cases it is useful to immediately release the resources used by the current parameter values; this can be done by calling the method clearParameters.", "history": "Added in API level 1", "FullName": "public abstract void clearParameters ()"}, "setInt(int,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["int", "int: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java int value. The driver converts this to an SQL INTEGER value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setInt (int parameterIndex, int x)"}, "setURL(int,java.net.URL)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#net#URL_E@", "URL: the java.net.URL object to be set"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.net.URL value. The driver converts this to an SQL DATALINK value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setURL (int parameterIndex, URL x)"}, "setBinaryStream(int, java.io.InputStream, long)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the java input stream which contains the binary parameter value"], ["long", "long: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached.", "history": "added in API level 9", "FullName": "public abstract void setBinaryStream (int parameterIndex, InputStream x, long length)"}, "setBoolean(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["boolean", "boolean: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java boolean value. The driver converts this to an SQL BIT or BOOLEAN value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setBoolean (int parameterIndex, boolean x)"}, "execute()": {"Returns": [["boolean", "true if the first result is a ResultSet object; false if the first result is an update count or there is no result"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed PreparedStatement or an argument is supplied to this method"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": ["@B_java#sql#Statement#execute_E@", "@B_java#sql#Statement#getResultSet_E@", "@B_java#sql#Statement#getUpdateCount_E@", "@B_java#sql#Statement#getMoreResults_E@"], "Permissions": [], "Description": "Executes the SQL statement in this PreparedStatement object, which may be any kind of SQL statement. Some prepared statements return multiple results; the execute method handles these complex statements as well as the simpler form of statements handled by the methods executeQuery and executeUpdate. The execute method returns a boolean to indicate the form of the first result. You must call either the method getResultSet or getUpdateCount to retrieve the result; you must call getMoreResults to move to any subsequent result(s).", "history": "Added in API level 1", "FullName": "public abstract boolean execute ()"}, "setBoolean(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["boolean", "boolean: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java boolean value. The driver converts this to an SQL BIT or BOOLEAN value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setBoolean (int parameterIndex, boolean x)"}, "setArray(int, java.sql.Array)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Array_E@", "Array: an Array object that maps an SQL ARRAY value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Array object. The driver converts this to an SQL ARRAY value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setArray (int parameterIndex, Array x)"}, "setDate(int,java.sql.Date,java.util.Calendar)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Date_E@", "Date: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Date value, using the given Calendar object. The driver uses the Calendar object to construct an SQL DATE value, which the driver then sends to the database. With a Calendar object, the driver can calculate the date taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.", "history": "Added in API level 1", "FullName": "public abstract void setDate (int parameterIndex, Date x, Calendar cal)"}, "setDate(int,java.sql.Date)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Date_E@", "Date: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application. The driver converts this to an SQL DATE value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setDate (int parameterIndex, Date x)"}, "setNCharacterStream(int,java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database. setNCharacterStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setNCharacterStream (int parameterIndex, Reader value)"}, "setObject(int,java.lang.Object,int,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"], ["int", "int: the SQL type (as defined in java.sql.Types) to be sent to the database. The scale argument may further qualify this type."], ["int", "int: for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types, this is the number of digits after the decimal point. For Java Object types InputStream and Reader, this is the length of the data in the stream or reader. For all other types, this value will be ignored."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatement or if the Java Object specified by x is an InputStream or Reader object and the value of the scale parameter is less than zero"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if targetSqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Sets the value of the designated parameter with the given object. The second argument must be an object type; for integral values, the java.lang equivalent objects should be used. If the second argument is an InputStream then the stream must contain the number of bytes specified by scaleOrLength. If the second argument is a Reader then the reader must contain the number of characters specified by scaleOrLength. If these conditions are not true the driver will generate a SQLException when the prepared statement is executed. The given Java object will be converted to the given targetSqlType before being sent to the database. If the object has a custom mapping (is of a class implementing the interface SQLData), the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. Note that this method may be used to pass database-specific abstract data types.", "history": "Added in API level 1", "FullName": "public abstract void setObject (int parameterIndex, Object x, int targetSqlType, int scaleOrLength)"}, "setNull(int,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["int", "int: the SQL type code defined in java.sql.Types"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to SQL NULL.", "history": "Added in API level 1", "FullName": "public abstract void setNull (int parameterIndex, int sqlType)"}, "setNClob(int,java.io.Reader,long)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB", "history": "Added in API level 9", "FullName": "public abstract void setNClob (int parameterIndex, Reader reader, long length)"}, "setBlob(int,java.io.InputStream,long)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."], ["long", "long: the number of bytes in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatement; if the length specified is less than zero or if the number of bytes in the inputstream does not match the specfied length."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a InputStream object. The inputstream must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setBinaryStream (int, InputStream, int) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB", "history": "Added in API level 9", "FullName": "public abstract void setBlob (int parameterIndex, InputStream inputStream, long length)"}, "setCharacterStream(int,java.io.Reader,long)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object that contains the Unicode data"], ["long", "long: the number of characters in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format.", "history": "Added in API level 9", "FullName": "public abstract void setCharacterStream (int parameterIndex, Reader reader, long length)"}, "setRowId(int,java.sql.RowId)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#RowId_E@", "RowId: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.RowId object. The driver converts this to a SQL ROWID value when it sends it to the database", "history": "Added in API level 9", "FullName": "public abstract void setRowId (int parameterIndex, RowId x)"}, "setAsciiStream(int, java.io.InputStream, long)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the Java input stream that contains the ASCII parameter value"], ["long", "long: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format.", "history": "added in API level 9", "FullName": "public abstract void setAsciiStream (int parameterIndex, InputStream x, long length)"}, "setNClob(int,java.sql.NClob)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#sql#NClob_E@", "NClob: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a java.sql.NClob object. The driver converts this to a SQL NCLOB value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setNClob (int parameterIndex, NClob value)"}, "getParameterMetaData()": {"Returns": [["@B_java#sql#ParameterMetaData_E@", "a ParameterMetaData object that contains information about the number, types and properties for each parameter marker of this PreparedStatement object"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": ["@B_java#sql#ParameterMetaData_E@"], "Permissions": [], "Description": "Retrieves the number, types and properties of this PreparedStatement object's parameters.", "history": "Added in API level 1", "FullName": "public abstract ParameterMetaData getParameterMetaData ()"}, "addBatch()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": ["@B_java#sql#Statement#addBatch_E@"], "Permissions": [], "Description": "Adds a set of parameters to this PreparedStatement object's batch of commands.", "history": "Added in API level 1", "FullName": "public abstract void addBatch ()"}, "setShort(int, short)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["short", "short: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java short value. The driver converts this to an SQL SMALLINT value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setShort (int parameterIndex, short x)"}, "executeUpdate()": {"Returns": [["int", "either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed PreparedStatement or the SQL statement returns a ResultSet object"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Executes the SQL statement in this PreparedStatement object, which must be an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement.", "history": "Added in API level 1", "FullName": "public abstract int executeUpdate ()"}, "setNCharacterStream(int,java.io.Reader,long)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the parameter value"], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database.", "history": "Added in API level 9", "FullName": "public abstract void setNCharacterStream (int parameterIndex, Reader value, long length)"}, "setAsciiStream(int,java.io.InputStream,long)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the Java input stream that contains the ASCII parameter value"], ["long", "long: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format.", "history": "Added in API level 9", "FullName": "public abstract void setAsciiStream (int parameterIndex, InputStream x, long length)"}, "setClob(int, java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatementor if parameterIndex does not correspond to a parameter marker in the SQL statement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARCHAR or a CLOB setClob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setClob (int parameterIndex, Reader reader)"}, "setBlob(int, java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatement or if parameterIndex does not correspond to a parameter marker in the SQL statement,"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB setBlob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setBlob (int parameterIndex, InputStream inputStream)"}, "setRef(int, java.sql.Ref)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Ref_E@", "Ref: an SQL REF value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given REF(<structured-type>) value. The driver converts this to an SQL REF value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setRef (int parameterIndex, Ref x)"}, "setByte(int,byte)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["byte", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java byte value. The driver converts this to an SQL TINYINT value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setByte (int parameterIndex, byte x)"}, "setBinaryStream(int,java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the java input stream which contains the binary parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. setBinaryStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setBinaryStream (int parameterIndex, InputStream x)"}, "setCharacterStream(int, java.io.Reader, long)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object that contains the Unicode data"], ["long", "long: the number of characters in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format.", "history": "added in API level 9", "FullName": "public abstract void setCharacterStream (int parameterIndex, Reader reader, long length)"}, "setNString(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated paramter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR value (depending on the argument's size relative to the driver's limits on NVARCHAR values) when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setNString (int parameterIndex, String value)"}, "setDouble(int, double)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["double", "double: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java double value. The driver converts this to an SQL DOUBLE value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setDouble (int parameterIndex, double x)"}, "setNClob(int, java.io.Reader, long)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB", "history": "added in API level 9", "FullName": "public abstract void setNClob (int parameterIndex, Reader reader, long length)"}, "setInt(int, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["int", "int: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Java int value. The driver converts this to an SQL INTEGER value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setInt (int parameterIndex, int x)"}, "setAsciiStream(int, java.io.InputStream, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the Java input stream that contains the ASCII parameter value"], ["int", "int: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format.", "history": "added in API level 1", "FullName": "public abstract void setAsciiStream (int parameterIndex, InputStream x, int length)"}, "setTime(int,java.sql.Time,java.util.Calendar)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Time_E@", "Time: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the time"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Time value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIME value, which the driver then sends to the database. With a Calendar object, the driver can calculate the time taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.", "history": "Added in API level 1", "FullName": "public abstract void setTime (int parameterIndex, Time x, Calendar cal)"}, "executeQuery()": {"Returns": [["@B_java#sql#ResultSet_E@", "a ResultSet object that contains the data produced by the query; never null"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed PreparedStatement or the SQL statement does not return a ResultSet object"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query.", "history": "Added in API level 1", "FullName": "public abstract ResultSet executeQuery ()"}, "setBigDecimal(int, java.math.BigDecimal)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#math#BigDecimal_E@", "BigDecimal: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.math.BigDecimal value. The driver converts this to an SQL NUMERIC value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setBigDecimal (int parameterIndex, BigDecimal x)"}, "setURL(int, java.net.URL)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#net#URL_E@", "URL: the java.net.URL object to be set"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.net.URL value. The driver converts this to an SQL DATALINK value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setURL (int parameterIndex, URL x)"}, "setRowId(int, java.sql.RowId)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#RowId_E@", "RowId: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.RowId object. The driver converts this to a SQL ROWID value when it sends it to the database", "history": "added in API level 9", "FullName": "public abstract void setRowId (int parameterIndex, RowId x)"}, "setBigDecimal(int,java.math.BigDecimal)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#math#BigDecimal_E@", "BigDecimal: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.math.BigDecimal value. The driver converts this to an SQL NUMERIC value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setBigDecimal (int parameterIndex, BigDecimal x)"}, "setObject(int, java.lang.Object, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"], ["int", "int: the SQL type (as defined in java.sql.Types) to be sent to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if targetSqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Sets the value of the designated parameter with the given object. This method is like the method setObject above, except that it assumes a scale of zero.", "history": "added in API level 1", "FullName": "public abstract void setObject (int parameterIndex, Object x, int targetSqlType)"}, "setTime(int,java.sql.Time)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Time_E@", "Time: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Time value. The driver converts this to an SQL TIME value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setTime (int parameterIndex, Time x)"}, "setDate(int, java.sql.Date, java.util.Calendar)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Date_E@", "Date: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Date value, using the given Calendar object. The driver uses the Calendar object to construct an SQL DATE value, which the driver then sends to the database. With a Calendar object, the driver can calculate the date taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.", "history": "added in API level 1", "FullName": "public abstract void setDate (int parameterIndex, Date x, Calendar cal)"}, "setObject(int,java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatement or the type of the given object is ambiguous"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of the designated parameter using the given object. The second parameter must be of type Object; therefore, the java.lang equivalent objects should be used for built-in types. The JDBC specification specifies a standard mapping from Java Object types to SQL types. The given argument will be converted to the corresponding SQL type before being sent to the database. Note that this method may be used to pass datatabase- specific abstract data types, by using a driver-specific Java type. If the object is of a class implementing the interface SQLData, the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, RowId, SQLXML or Array, the driver should pass it to the database as a value of the corresponding SQL type. setNull or the setObject(int parameterIndex, Object x, int sqlType) method should be used instead of setObject(int parameterIndex, Object x).", "history": "Added in API level 1", "FullName": "public abstract void setObject (int parameterIndex, Object x)"}, "setNClob(int, java.sql.NClob)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#sql#NClob_E@", "NClob: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a java.sql.NClob object. The driver converts this to a SQL NCLOB value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setNClob (int parameterIndex, NClob value)"}}, "Inheritance": [], "ClassName": "java.sql.PreparedStatement", "ClassDesc": "An object that represents a precompiled SQL statement. A SQL statement is precompiled and stored in a PreparedStatement object. This object can then be used to efficiently execute this statement multiple times. setShort, setString, and so on) for setting IN parameter values must specify types that are compatible with the defined SQL type of the input parameter. For instance, if the IN parameter has SQL type INTEGER, then the method setInt should be used. If arbitrary parameter type conversions are required, the method setObject should be used with a target SQL type. In the following example of setting a parameter, con represents an active connection:"}