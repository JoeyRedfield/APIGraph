{"Functions": {"onAudioFocusChange(int)": {"Returns": [], "Parameters": [["int", "int: The type of focus change, as per @B_android#media#AudioManager#OnAudioFocusChangeListener#onAudioFocusChange_E@. The default implementation will deliver a @B_android#view#KeyEvent#KEYCODE_MEDIA_STOP_E@ when receiving @B_android#media#AudioManager#AUDIOFOCUS_LOSS_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report that audio focus has changed on the app. This only happens if you have indicated you have started playing with @B_android#support#v4#media#TransportMediator#startPlaying_E@, which takes audio focus for you.", "history": "", "FullName": "void onAudioFocusChange (int focusChange)"}, "onStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to completely stop playback of the media, clearing whatever state the player thinks is appropriate.", "history": "", "FullName": "void onStop ()"}, "onGetDuration()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to return the duration of the current media, in milliseconds.", "history": "", "FullName": "long onGetDuration ()"}, "onMediaButtonUp(int, android.view.KeyEvent)": {"Returns": [["boolean", "Indicate whether the key has been consumed. The default implementation always returns true. This only matters for keys being dispatched here from @B_android#support#v4#media#TransportMediator#dispatchKeyEvent_E@, and determines whether the key continues on to its default key handling (which for media keys means being delivered to the current media remote control, which should be us)."]], "Parameters": [["int", "int: The code of the media key."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The full key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report that a media button has been released. This is like @B_android#view#KeyEvent#Callback#onKeyUp_E@ but will only deliver media keys. The default implementation does nothing.", "history": "", "FullName": "boolean onMediaButtonUp (int keyCode, KeyEvent event)"}, "onSeekTo(long)": {"Returns": [], "Parameters": [["long", "long: New position to move to, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to move the current playback position.", "history": "", "FullName": "void onSeekTo (long pos)"}, "onPause()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to pause playback of the media, staying at the current playback position and other state so a later call to @B_android#support#v4#media#TransportPerformer#onStart_E@ will resume at the same place.", "history": "", "FullName": "void onPause ()"}, "onGetBufferPercentage()": {"Returns": [["int", "Return a percentage (0-100) indicating how much of the total data has been buffered. The default implementation returns 100, meaning the content is always on the local device."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to find out how much of the media has been buffered on the local device.", "history": "", "FullName": "int onGetBufferPercentage ()"}, "onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to start playback on the media, resuming from whatever current state (position etc) it is in.", "history": "", "FullName": "void onStart ()"}, "onIsPlaying()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to find out whether the player is currently playing its media.", "history": "", "FullName": "boolean onIsPlaying ()"}, "onGetTransportControlFlags()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the flags for the media transport control buttons that this transport supports. Result is a combination of the following flags: @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_PREVIOUS_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_REWIND_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_PLAY_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_PLAY_PAUSE_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_PAUSE_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_STOP_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_FAST_FORWARD_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_NEXT_E@ The default implementation returns: @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_PLAY_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_PLAY_PAUSE_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_PAUSE_E@, and @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_STOP_E@", "history": "", "FullName": "int onGetTransportControlFlags ()"}, "onMediaButtonDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "Indicate whether the key has been consumed. The default implementation always returns true. This only matters for keys being dispatched here from @B_android#support#v4#media#TransportMediator#dispatchKeyEvent_E@, and determines whether the key continues on to its default key handling (which for media keys means being delivered to the current media remote control, which should be us)."]], "Parameters": [["int", "int: The code of the media key."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The full key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report that a media button has been pressed. This is like @B_android#view#KeyEvent#Callback#onKeyDown_E@ but will only deliver media keys. The default implementation handles these keys: KEYCODE_MEDIA_PLAY: call @B_android#support#v4#media#TransportPerformer#onStart_E@ KEYCODE_MEDIA_PAUSE: call @B_android#support#v4#media#TransportPerformer#onPause_E@ KEYCODE_MEDIA_STOP: call @B_android#support#v4#media#TransportPerformer#onStop_E@ KEYCODE_MEDIA_PLAY_PAUSE and KEYCODE_HEADSETHOOK: call @B_android#support#v4#media#TransportPerformer#onPause_E@ if @B_android#support#v4#media#TransportPerformer#onIsPlaying_E@ returns true, otherwise call @B_android#support#v4#media#TransportPerformer#onStart_E@", "history": "", "FullName": "boolean onMediaButtonDown (int keyCode, KeyEvent event)"}, "onGetCurrentPosition()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to return the current playback position, in milliseconds.", "history": "", "FullName": "long onGetCurrentPosition ()"}, "TransportPerformer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "TransportPerformer ()"}}, "Inheritance": [], "ClassName": "android.support.v4.media.TransportPerformer", "ClassDesc": "Implemented by the playback side of the media system, to respond to requests to perform actions and to retrieve its current state. These requests may either come from key events dispatched directly to your UI, or events sent over a media button event receiver that this class keeps active while your window is in focus."}