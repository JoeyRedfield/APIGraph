{"Functions": {"dispatchTrackballEvent(android.view.MotionEvent)": {"Returns": [["boolean", "boolean Return true if this event was consumed."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The trackball event. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process trackball events. You can override this to intercept all trackball events before they are dispatched to the window. Be sure to call this implementation for trackball events that should be handled normally.", "history": "Added in API level 1", "FullName": "public boolean dispatchTrackballEvent (MotionEvent ev)"}, "onWindowDismissed()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a window is dismissed. This informs the callback that the window is gone, and it should finish itself.", "history": "", "FullName": "public abstract void onWindowDismissed ()"}, "findViewById(int)": {"Returns": [["T", "a view with given ID if found, or null otherwise"]], "Parameters": [["int", "int: the ID to search for"]], "Throws": [], "SeeAlso": ["@B_android#view#View#findViewById_E@", "@B_android#app#Dialog#requireViewById_E@"], "Permissions": [], "Description": "Finds the first descendant view with the given ID or null if the ID is invalid (< 0), there is no matching view in the hierarchy, or the dialog has not yet been fully created (for example, via @B_android#app#Dialog#show_E@ or @B_android#app#Dialog#create_E@).", "history": "Added in API level 1", "FullName": "public T findViewById (int id)"}, "requestWindowFeature(int)": {"Returns": [["boolean", "Returns true if the requested feature is supported and now enabled."]], "Parameters": [["int", "int: The desired feature as defined in @B_android#view#Window_E@."]], "Throws": [], "SeeAlso": ["@B_android#view#Window#requestFeature_E@"], "Permissions": [], "Description": "Enable extended window features. This is a convenience for calling @B_android#view#Window#requestFeature_E@.", "history": "Added in API level 1", "FullName": "public final boolean requestWindowFeature (int featureId)"}, "Dialog(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the context in which the dialog should run This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#R#styleable#Theme_dialogTheme_E@"], "Permissions": [], "Description": "Creates a dialog window that uses the default dialog theme. The supplied context is used to obtain the window manager and base theme used to present the dialog.", "history": "Added in API level 1", "FullName": "public Dialog (Context context)"}, "onPanelClosed(int,android.view.Menu)": {"Returns": [], "Parameters": [["int", "int: The panel that is being displayed."], ["@B_android#view#Menu_E@", "Menu: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onPanelClosed_E@"], "Permissions": [], "Description": "Called when a panel is being closed. If another logical subsequent panel is being opened (and this panel is being closed to make room for the subsequent panel), this method will NOT be called.", "history": "Added in API level 1", "FullName": "public void onPanelClosed (int featureId, Menu menu)"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If this dialog is being reinitialized after a the hosting activity was previously shut down, holds the result from the most recent call to @B_android#app#Dialog#onSaveInstanceState_E@, or null if this is the first time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Similar to @B_android#app#Activity#onCreate_E@, you should initialize your dialog in this method, including calling @B_android#app#Dialog#setContentView_E@.", "history": "Added in API level 1", "FullName": "protected void onCreate (Bundle savedInstanceState)"}, "isShowing()": {"Returns": [["boolean", "Whether the dialog is currently showing."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean isShowing ()"}, "onGenericMotionEvent(android.view.MotionEvent)": {"Returns": [["boolean", "Return true if you have consumed the event, false if you haven't. The default implementation always returns false."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The generic motion event being processed. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a generic motion event was not handled by any of the views inside of the dialog. Generic motion events describe joystick movements, mouse hovers, track pad touches, scroll wheel movements and other input events. The @B_android#view#MotionEvent#getSource_E@ of the motion event specifies the class of input that was received. Implementations of this method must examine the bits in the source before processing the event. The following code example shows how this is done. Generic motion events with source class @B_android#view#InputDevice#SOURCE_CLASS_POINTER_E@ are delivered to the view under the pointer. All other generic motion events are delivered to the focused view. See @B_android#view#View#onGenericMotionEvent_E@ for an example of how to handle this event.", "history": "Added in API level 12", "FullName": "public boolean onGenericMotionEvent (MotionEvent event)"}, "onSearchRequested()": {"Returns": [["boolean", "true if search launched, false if activity refuses (blocks)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This hook is called when the user signals the desire to start a search.", "history": "Added in API level 1", "FullName": "public boolean onSearchRequested ()"}, "dispatchTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "boolean Return true if this event was consumed."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The touch screen event. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process touch screen events. You can override this to intercept all touch screen events before they are dispatched to the window. Be sure to call this implementation for touch screen events that should be handled normally.", "history": "Added in API level 1", "FullName": "public boolean dispatchTouchEvent (MotionEvent ev)"}, "openOptionsMenu()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#openOptionsMenu_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void openOptionsMenu ()"}, "setOwnerActivity(android.app.Activity)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity: The Activity that owns this dialog. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Activity that owns this dialog. An example use: This Dialog will use the suggested volume control stream of the Activity.", "history": "Added in API level 1", "FullName": "public final void setOwnerActivity (Activity activity)"}, "onMenuOpened(int, android.view.Menu)": {"Returns": [["boolean", "Return true to allow the menu to open, or false to prevent the menu from opening."]], "Parameters": [["int", "int: The panel that the menu is in."], ["@B_android#view#Menu_E@", "Menu: The menu that is opened."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onMenuOpened_E@"], "Permissions": [], "Description": "Called when a panel's menu is opened by the user. This may also be called when the menu is changing from one type to another (for example, from the icon menu to the expanded menu).", "history": "added in API level 1", "FullName": "public boolean onMenuOpened (int featureId, Menu menu)"}, "onKeyMultiple(int,int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["int", "int: Number of pairs as returned by event.getRepeatCount()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyMultiple_E@: always returns false (doesn't handle the event).", "history": "Added in API level 1", "FullName": "public boolean onKeyMultiple (int keyCode, int repeatCount, KeyEvent event)"}, "Dialog(android.content.Context,boolean,android.content.DialogInterface.OnCancelListener)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."], ["boolean", "boolean no parameter comment"], ["@B_android#content#DialogInterface#OnCancelListener_E@", "DialogInterface.OnCancelListener: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected Dialog (Context context, boolean cancelable, DialogInterface.OnCancelListener cancelListener)"}, "onOptionsItemSelected(android.view.MenuItem)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#MenuItem_E@", "MenuItem: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onOptionsItemSelected_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean onOptionsItemSelected (MenuItem item)"}, "onActionModeStarted(android.view.ActionMode)": {"Returns": [], "Parameters": [["@B_android#view#ActionMode_E@", "ActionMode: The new mode that has just been started."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an action mode has been started. The appropriate mode callback method will have already been invoked. Note that if you override this method you should always call through to the superclass implementation by calling super.onActionModeStarted(mode). If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "public void onActionModeStarted (ActionMode mode)"}, "onRestoreInstanceState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The state of the dialog previously saved by @B_android#app#Dialog#onSaveInstanceState_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Restore the state of the dialog from a previously saved bundle. The default implementation restores the state of the dialog's view hierarchy that was saved in the default implementation of @B_android#app#Dialog#onSaveInstanceState_E@, so be sure to call through to super when overriding unless you want to do all restoring of state yourself.", "history": "Added in API level 1", "FullName": "public void onRestoreInstanceState (Bundle savedInstanceState)"}, "onWindowAttributesChanged(android.view.WindowManager.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#WindowManager#LayoutParams_E@", "WindowManager.LayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called whenever the current window attributes change.", "history": "Added in API level 1", "FullName": "public void onWindowAttributesChanged (WindowManager.LayoutParams params)"}, "onMenuItemSelected(int, android.view.MenuItem)": {"Returns": [["boolean", "boolean Return true to finish processing of selection, or false to perform the normal menu handling (calling its Runnable or sending a Message to its target Handler)."]], "Parameters": [["int", "int: The panel that the menu is in."], ["@B_android#view#MenuItem_E@", "MenuItem: The menu item that was selected."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onMenuItemSelected_E@"], "Permissions": [], "Description": "Called when a panel's menu item has been selected by the user.", "history": "added in API level 1", "FullName": "public boolean onMenuItemSelected (int featureId, MenuItem item)"}, "onOptionsMenuClosed(android.view.Menu)": {"Returns": [], "Parameters": [["@B_android#view#Menu_E@", "Menu: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onOptionsMenuClosed_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void onOptionsMenuClosed (Menu menu)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "Return true if you have consumed the event, false if you haven't. The default implementation will cancel the dialog when a touch happens outside of the window bounds."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The touch screen event being processed. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a touch screen event was not handled by any of the views under it. This is most useful to process touch events that happen outside of your window bounds, where there is no view to receive it.", "history": "Added in API level 1", "FullName": "public boolean onTouchEvent (MotionEvent event)"}, "onKeyLongPress(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event.This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyLongPress_E@: always returns false (doesn't handle the event).", "history": "added in API level 5", "FullName": "public boolean onKeyLongPress (int keyCode, KeyEvent event)"}, "setFeatureDrawableResource(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for calling @B_android#view#Window#setFeatureDrawableResource_E@.", "history": "Added in API level 1", "FullName": "public final void setFeatureDrawableResource (int featureId, int resId)"}, "setFeatureDrawableUri(int,android.net.Uri)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_android#net#Uri_E@", "Uri: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for calling @B_android#view#Window#setFeatureDrawableUri_E@.", "history": "Added in API level 1", "FullName": "public final void setFeatureDrawableUri (int featureId, Uri uri)"}, "setTitle(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The new text to display in the title. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the title text for this dialog's window.", "history": "Added in API level 1", "FullName": "public void setTitle (CharSequence title)"}, "getSearchEvent()": {"Returns": [["@B_android#view#SearchEvent_E@", "SearchEvent The SearchEvent that triggered the @B_android#app#Dialog#onSearchRequested_E@ callback. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "During the onSearchRequested() callbacks, this function will return the @B_android#view#SearchEvent_E@ that triggered the callback, if it exists.", "history": "Added in API level 23", "FullName": "public final SearchEvent getSearchEvent ()"}, "setFeatureDrawableResource(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for calling @B_android#view#Window#setFeatureDrawableResource_E@.", "history": "added in API level 1", "FullName": "public final void setFeatureDrawableResource (int featureId, int resId)"}, "show()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start the dialog and display it on screen. The window is placed in the application layer and opaque. Note that you should not override this method to do initialization when the dialog is shown, instead implement that in @B_android#app#Dialog#onStart_E@.", "history": "Added in API level 1", "FullName": "public void show ()"}, "setFeatureDrawableAlpha(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for calling @B_android#view#Window#setFeatureDrawableAlpha_E@.", "history": "Added in API level 1", "FullName": "public final void setFeatureDrawableAlpha (int featureId, int alpha)"}, "setFeatureDrawableAlpha(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for calling @B_android#view#Window#setFeatureDrawableAlpha_E@.", "history": "added in API level 1", "FullName": "public final void setFeatureDrawableAlpha (int featureId, int alpha)"}, "setCancelable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this dialog is cancelable with the @B_android#view#KeyEvent#KEYCODE_BACK_E@ key.", "history": "Added in API level 1", "FullName": "public void setCancelable (boolean flag)"}, "onCreatePanelMenu(int, android.view.Menu)": {"Returns": [["boolean", "boolean You must return true for the panel to be displayed; if you return false it will not be shown."]], "Parameters": [["int", "int: The panel being created."], ["@B_android#view#Menu_E@", "Menu: The menu inside the panel.This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onCreatePanelMenu_E@"], "Permissions": [], "Description": "Initialize the contents of the menu for panel 'featureId'. This is called if onCreatePanelView() returns null, giving you a standard menu in which you can place your items. It is only called once for the panel, the first time it is shown. You can safely hold on to", "history": "added in API level 1", "FullName": "public boolean onCreatePanelMenu (int featureId, Menu menu)"}, "onTrackballEvent(android.view.MotionEvent)": {"Returns": [["boolean", "Return true if you have consumed the event, false if you haven't. The default implementation always returns false."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The trackball event being processed. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the trackball was moved and not handled by any of the views inside of the activity. So, for example, if the trackball moves while focus is on a button, you will receive a call here because buttons do not normally do anything with trackball events. The call here happens before trackball movements are converted to DPAD key events, which then get sent back to the view hierarchy, and will be processed at the point for things like focus navigation.", "history": "Added in API level 1", "FullName": "public boolean onTrackballEvent (MotionEvent event)"}, "setVolumeControlStream(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#setVolumeControlStream_E@", "@B_android#app#Dialog#setOwnerActivity_E@"], "Permissions": [], "Description": "By default, this will use the owner Activity's suggested stream type.", "history": "Added in API level 1", "FullName": "public final void setVolumeControlStream (int streamType)"}, "onMenuOpened(int,android.view.Menu)": {"Returns": [["boolean", "Return true to allow the menu to open, or false to prevent the menu from opening."]], "Parameters": [["int", "int: The panel that the menu is in."], ["@B_android#view#Menu_E@", "Menu: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onMenuOpened_E@"], "Permissions": [], "Description": "Called when a panel's menu is opened by the user. This may also be called when the menu is changing from one type to another (for example, from the icon menu to the expanded menu).", "history": "Added in API level 1", "FullName": "public boolean onMenuOpened (int featureId, Menu menu)"}, "setContentView(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID to be inflated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the screen content from a layout resource. The resource will be inflated, adding all top-level views to the screen.", "history": "Added in API level 1", "FullName": "public void setContentView (int layoutResID)"}, "setFeatureDrawableUri(int, android.net.Uri)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_android#net#Uri_E@", "Uri no parameter comment This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for calling @B_android#view#Window#setFeatureDrawableUri_E@.", "history": "added in API level 1", "FullName": "public final void setFeatureDrawableUri (int featureId, Uri uri)"}, "openContextMenu(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#openContextMenu_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void openContextMenu (View view)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window has been detached from the window manager. See @B_android#view#View#onDetachedFromWindow_E@ for more information.", "history": "Added in API level 5", "FullName": "public void onDetachedFromWindow ()"}, "onSearchRequested(android.view.SearchEvent)": {"Returns": [["boolean", "true if search launched, false if activity refuses (blocks)"]], "Parameters": [["@B_android#view#SearchEvent_E@", "SearchEvent: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This hook is called when the user signals the desire to start a search.", "history": "Added in API level 23", "FullName": "public boolean onSearchRequested (SearchEvent searchEvent)"}, "onStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to tell you that you're stopping.", "history": "Added in API level 1", "FullName": "protected void onStop ()"}, "setCanceledOnTouchOutside(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether the dialog should be canceled when touched outside the window."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this dialog is canceled when touched outside the window's bounds. If setting to true, the dialog is set to be cancelable if not already set.", "history": "Added in API level 1", "FullName": "public void setCanceledOnTouchOutside (boolean cancel)"}, "getCurrentFocus()": {"Returns": [["@B_android#view#View_E@", "View The current View with focus or null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Dialog#getWindow_E@", "@B_android#view#Window#getCurrentFocus_E@"], "Permissions": [], "Description": "Call @B_android#view#Window#getCurrentFocus_E@ on the Window if this Activity to return the currently focused view.", "history": "Added in API level 1", "FullName": "public View getCurrentFocus ()"}, "closeOptionsMenu()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#closeOptionsMenu_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void closeOptionsMenu ()"}, "setOnDismissListener(android.content.DialogInterface.OnDismissListener)": {"Returns": [], "Parameters": [["@B_android#content#DialogInterface#OnDismissListener_E@", "DialogInterface.OnDismissListener: The @B_android#content#DialogInterface#OnDismissListener_E@ to use. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a listener to be invoked when the dialog is dismissed.", "history": "Added in API level 1", "FullName": "public void setOnDismissListener (DialogInterface.OnDismissListener listener)"}, "hide()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hide the dialog, but do not dismiss it.", "history": "Added in API level 1", "FullName": "public void hide ()"}, "onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)": {"Returns": [], "Parameters": [["@B_android#view#ContextMenu_E@", "ContextMenu: The context menu that is being built"], ["@B_android#view#View_E@", "View: The view for which the context menu is being built"], ["@B_android#view#ContextMenu#ContextMenuInfo_E@", "ContextMenu.ContextMenuInfo: Extra information about the item for which the context menu should be shown. This information will vary depending on the class of v."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onCreateContextMenu_E@"], "Permissions": [], "Description": "Called when the context menu for this view is being built. It is not safe to hold onto the menu after this method returns.", "history": "Added in API level 1", "FullName": "public void onCreateContextMenu (ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo)"}, "setFeatureDrawable(int,android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for calling @B_android#view#Window#setFeatureDrawable_E@.", "history": "Added in API level 1", "FullName": "public final void setFeatureDrawable (int featureId, Drawable drawable)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Bundle_E@", "A bundle with the state of the dialog. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Saves the state of the dialog into a bundle. The default implementation saves the state of its view hierarchy, so you'll likely want to call through to super if you override this to save additional state.", "history": "Added in API level 1", "FullName": "public Bundle onSaveInstanceState ()"}, "setContentView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The desired content to display. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the screen content to an explicit view. This view is placed directly into the screen's view hierarchy. It can itself be a complex view hierarchy.", "history": "Added in API level 1", "FullName": "public void setContentView (View view)"}, "onBackPressed()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the dialog has detected the user's press of the back key. The default implementation simply cancels the dialog (only if it is cancelable), but you can override this to do whatever you want.", "history": "Added in API level 5", "FullName": "public void onBackPressed ()"}, "onCreateOptionsMenu(android.view.Menu)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#Menu_E@", "Menu: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onCreateOptionsMenu_E@", "@B_android#app#Dialog#getOwnerActivity_E@"], "Permissions": [], "Description": "It is usually safe to proxy this call to the owner activity's @B_android#app#Activity#onCreateOptionsMenu_E@ if the client desires the same menu for this Dialog.", "history": "Added in API level 1", "FullName": "public boolean onCreateOptionsMenu (Menu menu)"}, "Dialog(android.content.Context, int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the context in which the dialog should runThis value must never be null."], ["int", "int: a style resource describing the theme to use for the window, or 0 to use the default dialog theme"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a dialog window that uses a custom dialog style. The supplied context is used to obtain the window manager and base theme used to present the dialog. The supplied theme is applied on top of the context's theme. See", "history": "added in API level 1", "FullName": "public Dialog (Context context, int themeResId)"}, "getActionBar()": {"Returns": [["@B_android#app#ActionBar_E@", "The ActionBar attached to the dialog or null if no ActionBar is present."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the @B_android#app#ActionBar_E@ attached to this dialog, if present.", "history": "Added in API level 11", "FullName": "public ActionBar getActionBar ()"}, "onMenuItemSelected(int,android.view.MenuItem)": {"Returns": [["boolean", "boolean Return true to finish processing of selection, or false to perform the normal menu handling (calling its Runnable or sending a Message to its target Handler)."]], "Parameters": [["int", "int: The panel that the menu is in."], ["@B_android#view#MenuItem_E@", "MenuItem: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onMenuItemSelected_E@"], "Permissions": [], "Description": "Called when a panel's menu item has been selected by the user.", "history": "Added in API level 1", "FullName": "public boolean onMenuItemSelected (int featureId, MenuItem item)"}, "setContentView(android.view.View,android.view.ViewGroup.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The desired content to display. This value must never be null."], ["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: Layout parameters for the view. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the screen content to an explicit view. This view is placed directly into the screen's view hierarchy. It can itself be a complex view hierarchy.", "history": "Added in API level 1", "FullName": "public void setContentView (View view, ViewGroup.LayoutParams params)"}, "onCreatePanelMenu(int,android.view.Menu)": {"Returns": [["boolean", "boolean You must return true for the panel to be displayed; if you return false it will not be shown."]], "Parameters": [["int", "int: The panel being created."], ["@B_android#view#Menu_E@", "Menu: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onCreatePanelMenu_E@"], "Permissions": [], "Description": "Initialize the contents of the menu for panel 'featureId'. This is called if onCreatePanelView() returns null, giving you a standard menu in which you can place your items. It is only called once for the panel, the first time it is shown. You can safely hold on to", "history": "Added in API level 1", "FullName": "public boolean onCreatePanelMenu (int featureId, Menu menu)"}, "onPanelClosed(int, android.view.Menu)": {"Returns": [], "Parameters": [["int", "int: The panel that is being displayed."], ["@B_android#view#Menu_E@", "Menu: If onCreatePanelView() returned null, this is the Menu being displayed in the panel."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onPanelClosed_E@"], "Permissions": [], "Description": "Called when a panel is being closed. If another logical subsequent panel is being opened (and this panel is being closed to make room for the subsequent panel), this method will NOT be called.", "history": "added in API level 1", "FullName": "public void onPanelClosed (int featureId, Menu menu)"}, "getVolumeControlStream()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#getVolumeControlStream_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public final int getVolumeControlStream ()"}, "onPrepareOptionsMenu(android.view.Menu)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#Menu_E@", "Menu: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onPrepareOptionsMenu_E@", "@B_android#app#Dialog#getOwnerActivity_E@"], "Permissions": [], "Description": "It is usually safe to proxy this call to the owner activity's @B_android#app#Activity#onPrepareOptionsMenu_E@ if the client desires the same menu for this Dialog.", "history": "Added in API level 1", "FullName": "public boolean onPrepareOptionsMenu (Menu menu)"}, "getContext()": {"Returns": [["@B_android#content#Context_E@", "Context The Context used by the Dialog. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the Context this Dialog is running in.", "history": "Added in API level 1", "FullName": "public final Context getContext ()"}, "getLayoutInflater()": {"Returns": [["@B_android#view#LayoutInflater_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public LayoutInflater getLayoutInflater ()"}, "onPreparePanel(int,android.view.View,android.view.Menu)": {"Returns": [["boolean", "boolean You must return true for the panel to be displayed; if you return false it will not be shown."]], "Parameters": [["int", "int: The panel that is being displayed."], ["@B_android#view#View_E@", "View: This value may be null."], ["@B_android#view#Menu_E@", "Menu: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onPreparePanel_E@"], "Permissions": [], "Description": "Prepare a panel to be displayed. This is called right before the panel window is shown, every time it is shown.", "history": "Added in API level 1", "FullName": "public boolean onPreparePanel (int featureId, View view, Menu menu)"}, "getWindow()": {"Returns": [["@B_android#view#Window_E@", "Window The current window, or null if the activity is not visual."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current Window for the activity. This can be used to directly access parts of the Window API that are not available through Activity/Screen.", "history": "Added in API level 1", "FullName": "public Window getWindow ()"}, "setOnCancelListener(android.content.DialogInterface.OnCancelListener)": {"Returns": [], "Parameters": [["@B_android#content#DialogInterface#OnCancelListener_E@", "DialogInterface.OnCancelListener: The @B_android#content#DialogInterface#OnCancelListener_E@ to use. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a listener to be invoked when the dialog is canceled. This will only be invoked when the dialog is canceled. Cancel events alone will not capture all ways that the dialog might be dismissed. If the creator needs to know when a dialog is dismissed in general, use @B_android#app#Dialog#setOnDismissListener_E@.", "history": "Added in API level 1", "FullName": "public void setOnCancelListener (DialogInterface.OnCancelListener listener)"}, "onContextItemSelected(android.view.MenuItem)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#MenuItem_E@", "MenuItem: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onContextItemSelected_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean onContextItemSelected (MenuItem item)"}, "dispatchKeyShortcutEvent(android.view.KeyEvent)": {"Returns": [["boolean", "True if this event was consumed."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key shortcut event. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process a key shortcut event. You can override this to intercept all key shortcut events before they are dispatched to the window. Be sure to call this implementation for key shortcut events that should be handled normally.", "history": "Added in API level 11", "FullName": "public boolean dispatchKeyShortcutEvent (KeyEvent event)"}, "onActionModeFinished(android.view.ActionMode)": {"Returns": [], "Parameters": [["@B_android#view#ActionMode_E@", "ActionMode: The mode that was just finished."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an action mode has been finished. The appropriate mode callback method will have already been invoked. Note that if you override this method you should always call through to the superclass implementation by calling super.onActionModeFinished(mode). If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "public void onActionModeFinished (ActionMode mode)"}, "dispatchGenericMotionEvent(android.view.MotionEvent)": {"Returns": [["boolean", "boolean Return true if this event was consumed."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The generic motion event. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process generic motion events. You can override this to intercept all generic motion events before they are dispatched to the window. Be sure to call this implementation for generic motion events that should be handled normally.", "history": "Added in API level 12", "FullName": "public boolean dispatchGenericMotionEvent (MotionEvent ev)"}, "addContentView(android.view.View,android.view.ViewGroup.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The desired content to display. This value must never be null."], ["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: Layout parameters for the view. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add an additional content view to the screen. Added after any existing ones in the screen -- existing views are NOT removed.", "history": "Added in API level 1", "FullName": "public void addContentView (View view, ViewGroup.LayoutParams params)"}, "onCreatePanelView(int)": {"Returns": [["@B_android#view#View_E@", "view The top-level view to place in the panel."]], "Parameters": [["int", "int: Which panel is being created."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onCreatePanelView_E@"], "Permissions": [], "Description": "Instantiate the view to display in the panel for 'featureId'. You can return null, in which case the default content (typically a menu) will be created for you.", "history": "Added in API level 1", "FullName": "public View onCreatePanelView (int featureId)"}, "onKeyMultiple(int, int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["int", "int: Number of pairs as returned by event.getRepeatCount()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event.This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyMultiple_E@: always returns false (doesn't handle the event).", "history": "added in API level 1", "FullName": "public boolean onKeyMultiple (int keyCode, int repeatCount, KeyEvent event)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event.This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Dialog#onKeyUp_E@", "@B_android#view#KeyEvent_E@"], "Permissions": [], "Description": "A key was pressed down. If the focused view didn't want this event, this method is called. Default implementation consumes @B_android#view#KeyEvent#KEYCODE_BACK_E@ and, as of @B_android#os#Build#VERSION_CODES#P_E@, @B_android#view#KeyEvent#KEYCODE_ESCAPE_E@ to later handle them in @B_android#app#Dialog#onKeyUp_E@.", "history": "added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "onWindowStartingActionMode(android.view.ActionMode.Callback)": {"Returns": [["@B_android#view#ActionMode_E@", "The ActionMode that was started, or null if the system should present it"]], "Parameters": [["@B_android#view#ActionMode#Callback_E@", "ActionMode.Callback: Callback to control the lifecycle of this action mode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an action mode is being started for this window. Gives the callback an opportunity to handle the action mode in its own unique and beautiful way. If this method returns null the system can choose a way to present the mode or choose not to start the mode at all. This is equivalent to @B_android#view#Window#Callback#onWindowStartingActionMode_E@ with type @B_android#view#ActionMode#TYPE_PRIMARY_E@.", "history": "Added in API level 11", "FullName": "public ActionMode onWindowStartingActionMode (ActionMode.Callback callback)"}, "onKeyShortcut(int, android.view.KeyEvent)": {"Returns": [["boolean", "True if the key shortcut was handled."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event.This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a key shortcut event is not handled by any of the views in the Dialog. Override this method to implement global key shortcuts for the Dialog. Key shortcuts can also be implemented by setting the @B_android#view#MenuItem#setShortcut_E@ property of menu items.", "history": "added in API level 11", "FullName": "public boolean onKeyShortcut (int keyCode, KeyEvent event)"}, "onWindowFocusChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether the window now has focus."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This hook is called whenever the window focus changes. See @B_android#view#View#onWindowFocusChanged_E@ for more information.", "history": "Added in API level 1", "FullName": "public void onWindowFocusChanged (boolean hasFocus)"}, "setOnShowListener(android.content.DialogInterface.OnShowListener)": {"Returns": [], "Parameters": [["@B_android#content#DialogInterface#OnShowListener_E@", "DialogInterface.OnShowListener: The @B_android#content#DialogInterface#OnShowListener_E@ to use. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a listener to be invoked when the dialog is shown.", "history": "Added in API level 8", "FullName": "public void setOnShowListener (DialogInterface.OnShowListener listener)"}, "setDismissMessage(android.os.Message)": {"Returns": [], "Parameters": [["@B_android#os#Message_E@", "Message: The msg to send when the dialog is dismissed. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a message to be sent when the dialog is dismissed.", "history": "Added in API level 1", "FullName": "public void setDismissMessage (Message msg)"}, "registerForContextMenu(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#registerForContextMenu_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void registerForContextMenu (View view)"}, "dismiss()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dismiss this dialog, removing it from the screen. This method can be invoked safely from any thread. Note that you should not override this method to do cleanup when the dialog is dismissed, instead implement that in @B_android#app#Dialog#onStop_E@.", "history": "Added in API level 1", "FullName": "public void dismiss ()"}, "dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)": {"Returns": [["boolean", "boolean Return true if event population was completed."]], "Parameters": [["@B_android#view#accessibility#AccessibilityEvent_E@", "AccessibilityEvent: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process population of @B_android#view#accessibility#AccessibilityEvent_E@s.", "history": "Added in API level 4", "FullName": "public boolean dispatchPopulateAccessibilityEvent (AccessibilityEvent event)"}, "onContextMenuClosed(android.view.Menu)": {"Returns": [], "Parameters": [["@B_android#view#Menu_E@", "Menu: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onContextMenuClosed_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void onContextMenuClosed (Menu menu)"}, "onContentChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This hook is called whenever the content view of the screen changes (due to a call to @B_android#view#Window#setContentView_E@ or @B_android#view#Window#addContentView_E@).", "history": "Added in API level 1", "FullName": "public void onContentChanged ()"}, "dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "boolean Return true if this event was consumed."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key event. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process key events. You can override this to intercept all key events before they are dispatched to the window. Be sure to call this implementation for key events that should be handled normally.", "history": "Added in API level 1", "FullName": "public boolean dispatchKeyEvent (KeyEvent event)"}, "cancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancel the dialog. This is essentially the same as calling @B_android#app#Dialog#dismiss_E@, but it will also call your @B_android#content#DialogInterface#OnCancelListener_E@ (if registered).", "history": "Added in API level 1", "FullName": "public void cancel ()"}, "onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the dialog is starting.", "history": "Added in API level 1", "FullName": "protected void onStart ()"}, "onWindowStartingActionMode(android.view.ActionMode.Callback,int)": {"Returns": [["@B_android#view#ActionMode_E@", "The ActionMode that was started, or null if the system should present it"]], "Parameters": [["@B_android#view#ActionMode#Callback_E@", "ActionMode.Callback: Callback to control the lifecycle of this action mode"], ["int", "int: One of @B_android#view#ActionMode#TYPE_PRIMARY_E@ or @B_android#view#ActionMode#TYPE_FLOATING_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an action mode is being started for this window. Gives the callback an opportunity to handle the action mode in its own unique and beautiful way. If this method returns null the system can choose a way to present the mode or choose not to start the mode at all.", "history": "Added in API level 23", "FullName": "public ActionMode onWindowStartingActionMode (ActionMode.Callback callback, int type)"}, "setTitle(int)": {"Returns": [], "Parameters": [["int", "int: the title's text resource identifier"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the title text for this dialog's window. The text is retrieved from the resources with the supplied identifier.", "history": "Added in API level 1", "FullName": "public void setTitle (int titleId)"}, "setCancelMessage(android.os.Message)": {"Returns": [], "Parameters": [["@B_android#os#Message_E@", "Message: The msg to send when the dialog is canceled. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Dialog#setOnCancelListener_E@"], "Permissions": [], "Description": "Set a message to be sent when the dialog is canceled.", "history": "Added in API level 1", "FullName": "public void setCancelMessage (Message msg)"}, "Dialog(android.content.Context,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the context in which the dialog should run This value must never be null."], ["int", "int: a style resource describing the theme to use for the window, or 0 to use the default dialog theme"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a dialog window that uses a custom dialog style. The supplied context is used to obtain the window manager and base theme used to present the dialog. The supplied theme is applied on top of the context's theme. See", "history": "Added in API level 1", "FullName": "public Dialog (Context context, int themeResId)"}, "setOnKeyListener(android.content.DialogInterface.OnKeyListener)": {"Returns": [], "Parameters": [["@B_android#content#DialogInterface#OnKeyListener_E@", "DialogInterface.OnKeyListener: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the callback that will be called if a key is dispatched to the dialog.", "history": "Added in API level 1", "FullName": "public void setOnKeyListener (DialogInterface.OnKeyListener onKeyListener)"}, "create()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Forces immediate creation of the dialog. Note that you should not override this method to perform dialog creation. Rather, override @B_android#app#Dialog#onCreate_E@.", "history": "Added in API level 21", "FullName": "public void create ()"}, "onKeyUp(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event.This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Dialog#onKeyDown_E@", "@B_android#view#KeyEvent_E@"], "Permissions": [], "Description": "A key was released. Default implementation consumes @B_android#view#KeyEvent#KEYCODE_BACK_E@ and, as of @B_android#os#Build#VERSION_CODES#P_E@, @B_android#view#KeyEvent#KEYCODE_ESCAPE_E@ to close the dialog.", "history": "added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "onKeyLongPress(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyLongPress_E@: always returns false (doesn't handle the event).", "history": "Added in API level 5", "FullName": "public boolean onKeyLongPress (int keyCode, KeyEvent event)"}, "unregisterForContextMenu(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#unregisterForContextMenu_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void unregisterForContextMenu (View view)"}, "invalidateOptionsMenu()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#invalidateOptionsMenu_E@"], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public void invalidateOptionsMenu ()"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Dialog#onKeyUp_E@", "@B_android#view#KeyEvent_E@"], "Permissions": [], "Description": "A key was pressed down. If the focused view didn't want this event, this method is called. Default implementation consumes @B_android#view#KeyEvent#KEYCODE_BACK_E@ and, as of @B_android#os#Build#VERSION_CODES#P_E@, @B_android#view#KeyEvent#KEYCODE_ESCAPE_E@ to later handle them in @B_android#app#Dialog#onKeyUp_E@.", "history": "Added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window has been attached to the window manager. See @B_android#view#View#onAttachedToWindow_E@ for more information.", "history": "Added in API level 5", "FullName": "public void onAttachedToWindow ()"}, "onKeyShortcut(int,android.view.KeyEvent)": {"Returns": [["boolean", "True if the key shortcut was handled."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a key shortcut event is not handled by any of the views in the Dialog. Override this method to implement global key shortcuts for the Dialog. Key shortcuts can also be implemented by setting the @B_android#view#MenuItem#setShortcut_E@ property of menu items.", "history": "Added in API level 11", "FullName": "public boolean onKeyShortcut (int keyCode, KeyEvent event)"}, "requireViewById(int)": {"Returns": [["T", "a view with given ID This value will never be null."]], "Parameters": [["int", "int: the ID to search for"]], "Throws": [], "SeeAlso": ["@B_android#view#View#requireViewById_E@", "@B_android#app#Dialog#findViewById_E@"], "Permissions": [], "Description": "Finds the first descendant view with the given ID or throws an IllegalArgumentException if the ID is invalid (< 0), there is no matching view in the hierarchy, or the dialog has not yet been fully created (for example, via @B_android#app#Dialog#show_E@ or @B_android#app#Dialog#create_E@).", "history": "Added in API level 28", "FullName": "public final T requireViewById (int id)"}, "onKeyUp(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Dialog#onKeyDown_E@", "@B_android#view#KeyEvent_E@"], "Permissions": [], "Description": "A key was released. Default implementation consumes @B_android#view#KeyEvent#KEYCODE_BACK_E@ and, as of @B_android#os#Build#VERSION_CODES#P_E@, @B_android#view#KeyEvent#KEYCODE_ESCAPE_E@ to close the dialog.", "history": "Added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "takeKeyEvents(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the dialog should receive key events, false otherwise"]], "Throws": [], "SeeAlso": ["@B_android#view#Window#takeKeyEvents_E@"], "Permissions": [], "Description": "Request that key events come to this dialog. Use this if your dialog has no views with focus, but the dialog still wants a chance to process key events.", "history": "Added in API level 1", "FullName": "public void takeKeyEvents (boolean get)"}, "getOwnerActivity()": {"Returns": [["@B_android#app#Activity_E@", "The Activity that owns this Dialog."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Activity that owns this Dialog. For example, if @B_android#app#Activity#showDialog_E@ is used to show this Dialog, that Activity will be the owner (by default). Depending on how this dialog was created, this may return null.", "history": "Added in API level 1", "FullName": "public final Activity getOwnerActivity ()"}}, "Inheritance": [], "ClassName": "android.app.Dialog", "ClassDesc": "Base class for Dialogs. Note: Activities provide a facility to manage the creation, saving and restoring of dialogs. See @B_android#app#Activity#onCreateDialog_E@, @B_android#app#Activity#onPrepareDialog_E@, @B_android#app#Activity#showDialog_E@, and @B_android#app#Activity#dismissDialog_E@. If these methods are used, @B_android#app#Dialog#getOwnerActivity_E@ will return the Activity that managed this dialog. Often you will want to have a Dialog display on top of the current input method, because there is no reason for it to accept text. You can do this by setting the @B_android#view#WindowManager#LayoutParams#FLAG_ALT_FOCUSABLE_IM_E@ window flag (assuming your Dialog takes input focus, as it the default) with the following code:"}