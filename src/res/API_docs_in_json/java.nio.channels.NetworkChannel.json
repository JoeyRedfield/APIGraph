{"Functions": {"setOption(java.net.SocketOption<T>,T)": {"Returns": [["@B_java#nio#channels#NetworkChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketOption_E@", "SocketOption: The socket option"], ["T", "T: The value of the socket option. A value of null may be a valid value for some socket options."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If the socket option is not supported by this channel"], ["@B_java#lang#IllegalArgumentException_E@", "If the value is not a valid value for this socket option"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": ["@B_java#net#StandardSocketOptions_E@"], "Permissions": [], "Description": "Sets the value of a socket option.", "history": "Added in API level 24", "FullName": "public abstract NetworkChannel setOption (SocketOption<T> name, T value)"}, "bind(java.net.SocketAddress)": {"Returns": [["@B_java#nio#channels#NetworkChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The address to bind the socket, or null to bind the socket to an automatically assigned socket address"]], "Throws": [["@B_java#nio#channels#AlreadyBoundException_E@", "If the socket is already bound"], ["@B_java#nio#channels#UnsupportedAddressTypeException_E@", "If the type of the given address is not supported"], ["@B_java#nio#channels#ClosedChannelException_E@", "If the channel is closed"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"], ["@B_java#lang#SecurityException_E@", "If a security manager is installed and it denies an unspecified permission. An implementation of this interface should specify any required permissions."]], "SeeAlso": ["@B_java#nio#channels#NetworkChannel#getLocalAddress_E@"], "Permissions": [], "Description": "Binds the channel's socket to a local address. This method is used to establish an association between the socket and a local address. Once an association is established then the socket remains bound until the channel is closed. If the local parameter has the value null then the socket will be bound to an address that is assigned automatically.", "history": "Added in API level 24", "FullName": "public abstract NetworkChannel bind (SocketAddress local)"}, "getOption(java.net.SocketOption<T>)": {"Returns": [["T", "The value of the socket option. A value of null may be a valid value for some socket options."]], "Parameters": [["@B_java#net#SocketOption_E@", "SocketOption: The socket option"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If the socket option is not supported by this channel"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": ["@B_java#net#StandardSocketOptions_E@"], "Permissions": [], "Description": "Returns the value of a socket option.", "history": "Added in API level 24", "FullName": "public abstract T getOption (SocketOption<T> name)"}, "setOption(java.net.SocketOption<T>, T)": {"Returns": [["@B_java#nio#channels#NetworkChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketOption_E@", "SocketOption: The socket option"], ["T", "T: The value of the socket option. A value of null may be a valid value for some socket options."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If the socket option is not supported by this channel"], ["@B_java#lang#IllegalArgumentException_E@", "If the value is not a valid value for this socket option"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": ["@B_java#net#StandardSocketOptions_E@"], "Permissions": [], "Description": "Sets the value of a socket option.", "history": "added in API level 24", "FullName": "public abstract NetworkChannel setOption (SocketOption<T> name, T value)"}, "getLocalAddress()": {"Returns": [["@B_java#net#SocketAddress_E@", "The socket address that the socket is bound to, or null if the channel's socket is not bound"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If the channel is closed"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the socket address that this channel's socket is bound to. Where the channel is @B_java#nio#channels#NetworkChannel#bind_E@ to an Internet Protocol socket address then the return value from this method is of type @B_java#net#InetSocketAddress_E@.", "history": "Added in API level 24", "FullName": "public abstract SocketAddress getLocalAddress ()"}, "supportedOptions()": {"Returns": [["@B_java#util#Set_E@", "A set of the socket options supported by this channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of the socket options supported by this channel. This method will continue to return the set of options even after the channel has been closed.", "history": "Added in API level 24", "FullName": "public abstract Set<SocketOption<?>> supportedOptions ()"}}, "Inheritance": [], "ClassName": "java.nio.channels.NetworkChannel", "ClassDesc": "A channel to a network socket. A channel that implements this interface is a channel to a network socket. The @B_java#nio#channels#NetworkChannel#bind_E@ method is used to bind the socket to a local @B_java#net#SocketAddress_E@, the @B_java#nio#channels#NetworkChannel#getLocalAddress_E@ method returns the address that the socket is bound to, and the @B_java#nio#channels#NetworkChannel#setOption_E@ and @B_java#nio#channels#NetworkChannel#getOption_E@ methods are used to set and query socket options. An implementation of this interface should specify the socket options that it supports. The @B_java#nio#channels#NetworkChannel#bind_E@ and @B_java#nio#channels#NetworkChannel#setOption_E@ methods that do not otherwise have a value to return are specified to return the network channel upon which they are invoked. This allows method invocations to be chained. Implementations of this interface should specialize the return type so that method invocations on the implementation class can be chained."}