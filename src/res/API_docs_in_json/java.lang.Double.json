{"Functions": {"shortValue()": {"Returns": [["short", "the double value represented by this object converted to type short"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Double as a short after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public short shortValue ()"}, "intValue()": {"Returns": [["int", "the double value represented by this object converted to type int"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Double as an int after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public int intValue ()"}, "isInfinite()": {"Returns": [["boolean", "true if the value represented by this object is positive infinity or negative infinity; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this Double value is infinitely large in magnitude, false otherwise.", "history": "Added in API level 1", "FullName": "public boolean isInfinite ()"}, "isNaN(double)": {"Returns": [["boolean", "true if the value of the argument is NaN; false otherwise."]], "Parameters": [["double", "double: the value to be tested."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise.", "history": "Added in API level 1", "FullName": "public static boolean isNaN (double v)"}, "parseDouble(java.lang.String)": {"Returns": [["double", "the double value represented by the string argument."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the string is null"], ["@B_java#lang#NumberFormatException_E@", "if the string does not contain a parsable double."]], "SeeAlso": ["@B_java#lang#Double#valueOf_E@"], "Permissions": [], "Description": "Returns a new double initialized to the value represented by the specified String, as performed by the valueOf method of class Double.", "history": "Added in API level 1", "FullName": "public static double parseDouble (String s)"}, "byteValue()": {"Returns": [["byte", "the double value represented by this object converted to type byte"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Double as a byte after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public byte byteValue ()"}, "Double(double)": {"Returns": [], "Parameters": [["double", "double: the value to be represented by the Double."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a newly allocated Double object that represents the primitive double argument.", "history": "Added in API level 1", "FullName": "public Double (double value)"}, "compareTo(java.lang.Double)": {"Returns": [["int", "the value 0 if anotherDouble is numerically equal to this Double; a value less than 0 if this Double is numerically less than anotherDouble; and a value greater than 0 if this Double is numerically greater than anotherDouble."]], "Parameters": [["@B_java#lang#Double_E@", "Double: the Double to be compared."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two Double objects numerically. There are two ways in which comparisons performed by this method differ from those performed by the Java language numerical comparison operators (<, <=, ==, >=, >) when applied to primitive double values: Double.NaN is considered by this method to be equal to itself and greater than all other double values (including Double.POSITIVE_INFINITY). 0.0d is considered by this method to be greater than -0.0d. This ensures that the Double objects imposed by this method is", "history": "Added in API level 1", "FullName": "public int compareTo (Double anotherDouble)"}, "valueOf(java.lang.String)": {"Returns": [["@B_java#lang#Double_E@", "a Double object holding the value represented by the String argument."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the string does not contain a parsable number."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Double object holding the double value represented by the argument string s. If s is null, then a NullPointerException is thrown. Leading and trailing whitespace characters in s are ignored. Whitespace is removed as if by the @B_java#lang#String#trim_E@ method; that is, both ASCII space and control characters are removed. The rest of s should constitute a s does not have the form of a NumberFormatException is thrown. Otherwise, s is regarded as representing an exact decimal value in the usual \"computerized scientific notation\" or as an exact hexadecimal value; this exact numerical value is then conceptually converted to an \"infinitely precise\" binary value that is then rounded to type double by the usual round-to-nearest rule of IEEE 754 floating-point arithmetic, which includes preserving the sign of a zero value. Note that the round-to-nearest rule also implies overflow and underflow behaviour; if the exact value of s is large enough in magnitude (greater than or equal to (@B_java#lang#Double#MAX_VALUE_E@ + @B_java#lang#Math#ulp_E@/2), rounding to double will result in an infinity and if the exact value of s is small enough in magnitude (less than or equal to @B_java#lang#Double#MIN_VALUE_E@/2), rounding to float will result in a zero. Finally, after rounding a Double object representing this double value is returned. To interpret localized string representations of a floating-point value, use subclasses of @B_java#text#NumberFormat_E@. Note that trailing format specifiers, specifiers that determine the type of a floating-point literal (1.0f is a float value; 1.0d is a double value), do not influence the results of this method. In other words, the numerical value of the input string is converted directly to the target floating-point type. The two-step sequence of conversions, string to float followed by float to double, is not equivalent to converting a string directly to double. For example, the float literal 0.1f is equal to the double value 0.10000000149011612; the float literal 0.1f represents a different numerical value than the double literal 0.1. (The numerical value 0.1 cannot be exactly represented in a binary floating-point number.) To avoid calling this method on an invalid string and having a NumberFormatException be thrown, the regular expression below can be used to screen the input string:", "history": "Added in API level 1", "FullName": "public static Double valueOf (String s)"}, "doubleValue()": {"Returns": [["double", "the double value represented by this object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the double value of this Double object.", "history": "Added in API level 1", "FullName": "public double doubleValue ()"}, "doubleToRawLongBits(double)": {"Returns": [["long", "the bits that represent the floating-point number."]], "Parameters": [["double", "double: a double precision floating-point number."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"double format\" bit layout, preserving Not-a-Number (NaN) values. Bit 63 (the bit that is selected by the mask 0x8000000000000000L) represents the sign of the floating-point number. Bits 62-52 (the bits that are selected by the mask 0x7ff0000000000000L) represent the exponent. Bits 51-0 (the bits that are selected by the mask 0x000fffffffffffffL) represent the significand (sometimes called the mantissa) of the floating-point number. If the argument is positive infinity, the result is 0x7ff0000000000000L. If the argument is negative infinity, the result is 0xfff0000000000000L. If the argument is NaN, the result is the long integer representing the actual NaN value. Unlike the doubleToLongBits method, doubleToRawLongBits does not collapse all the bit patterns encoding a NaN to a single \"canonical\" NaN value. In all cases, the result is a long integer that, when given to the @B_java#lang#Double#longBitsToDouble_E@ method, will produce a floating-point value the same as the argument to doubleToRawLongBits.", "history": "Added in API level 1", "FullName": "public static long doubleToRawLongBits (double value)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are the same; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare with."]], "Throws": [], "SeeAlso": ["@B_java#lang#Double#doubleToLongBits_E@"], "Permissions": [], "Description": "Compares this object against the specified object. The result is true if and only if the argument is not null and is a Double object that represents a double that has the same value as the double represented by this object. For this purpose, two double values are considered to be the same if and only if the method @B_java#lang#Double#doubleToLongBits_E@ returns the identical long value when applied to each. Note that in most cases, for two instances of class Double, d1 and d2, the value of d1.equals(d2) is true if and only if also has the value true. However, there are two exceptions: If d1 and d2 both represent Double.NaN, then the equals method returns true, even though Double.NaN==Double.NaN has the value false. If d1 represents +0.0 while d2 represents -0.0, or vice versa, the equal test has the value false, even though +0.0==-0.0 has the value true. This definition allows hash tables to operate properly.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "compare(double, double)": {"Returns": [["int", "the value 0 if d1 is numerically equal to d2; a value less than 0 if d1 is numerically less than d2; and a value greater than 0 if d1 is numerically greater than d2."]], "Parameters": [["double", "double: the first double to compare"], ["double", "double: the second double to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the two specified double values. The sign of the integer value returned is the same as that of the integer that would be returned by the call:", "history": "added in API level 1", "FullName": "public static int compare (double d1, double d2)"}, "isNaN()": {"Returns": [["boolean", "true if the value represented by this object is NaN; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this Double value is a Not-a-Number (NaN), false otherwise.", "history": "Added in API level 1", "FullName": "public boolean isNaN ()"}, "longValue()": {"Returns": [["long", "the double value represented by this object converted to type long"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Double as a long after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public long longValue ()"}, "isFinite(double)": {"Returns": [["boolean", "true if the argument is a finite floating-point value, false otherwise."]], "Parameters": [["double", "double: the double value to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments).", "history": "Added in API level 24", "FullName": "public static boolean isFinite (double d)"}, "doubleToLongBits(double)": {"Returns": [["long", "the bits that represent the floating-point number."]], "Parameters": [["double", "double: a double precision floating-point number."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"double format\" bit layout. Bit 63 (the bit that is selected by the mask 0x8000000000000000L) represents the sign of the floating-point number. Bits 62-52 (the bits that are selected by the mask 0x7ff0000000000000L) represent the exponent. Bits 51-0 (the bits that are selected by the mask 0x000fffffffffffffL) represent the significand (sometimes called the mantissa) of the floating-point number. If the argument is positive infinity, the result is 0x7ff0000000000000L. If the argument is negative infinity, the result is 0xfff0000000000000L. If the argument is NaN, the result is 0x7ff8000000000000L. In all cases, the result is a long integer that, when given to the @B_java#lang#Double#longBitsToDouble_E@ method, will produce a floating-point value the same as the argument to doubleToLongBits (except all NaN values are collapsed to a single \"canonical\" NaN value).", "history": "Added in API level 1", "FullName": "public static long doubleToLongBits (double value)"}, "toHexString(double)": {"Returns": [["@B_java#lang#String_E@", "a hex string representation of the argument."]], "Parameters": [["double", "double: the double to be converted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hexadecimal string representation of the double argument. All characters mentioned below are ASCII characters. If the argument is NaN, the result is the string \"NaN\". Otherwise, the result is a string that represents the sign and magnitude of the argument. If the sign is negative, the first character of the result is '-' ('\\u002D'); if the sign is positive, no sign character appears in the result. As for the magnitude If \"Infinity\"; thus, positive infinity produces the result \"Infinity\" and negative infinity produces the result \"-Infinity\". If \"0x0.0p0\"; thus, negative zero produces the result \"-0x0.0p0\" and positive zero produces the result \"0x0.0p0\". If double value with a normalized representation, substrings are used to represent the significand and exponent fields. The significand is represented by the characters \"0x1.\" followed by a lowercase hexadecimal representation of the rest of the significand as a fraction. Trailing zeros in the hexadecimal representation are removed unless all the digits are zero, in which case a single zero is used. Next, the exponent is represented by \"p\" followed by a decimal string of the unbiased exponent as if produced by a call to @B_java#lang#Integer#toString_E@ on the exponent value. If double value with a subnormal representation, the significand is represented by the characters \"0x0.\" followed by a hexadecimal representation of the rest of the significand as a fraction. Trailing zeros in the hexadecimal representation are removed. Next, the exponent is represented by \"p-1022\". Note that there must be at least one nonzero digit in a subnormal significand.", "history": "Added in API level 1", "FullName": "public static String toHexString (double d)"}, "min(double, double)": {"Returns": [["double", "the smaller of a and b."]], "Parameters": [["double", "double: the first operand"], ["double", "double: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the smaller of two double values as if by calling @B_java#lang#Math#min_E@.", "history": "added in API level 24", "FullName": "public static double min (double a, double b)"}, "isInfinite(double)": {"Returns": [["boolean", "true if the value of the argument is positive infinity or negative infinity; false otherwise."]], "Parameters": [["double", "double: the value to be tested."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified number is infinitely large in magnitude, false otherwise.", "history": "Added in API level 1", "FullName": "public static boolean isInfinite (double v)"}, "max(double,double)": {"Returns": [["double", "the greater of a and b"]], "Parameters": [["double", "double: the first operand"], ["double", "double: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the greater of two double values as if by calling @B_java#lang#Math#max_E@.", "history": "Added in API level 24", "FullName": "public static double max (double a, double b)"}, "max(double, double)": {"Returns": [["double", "the greater of a and b"]], "Parameters": [["double", "double: the first operand"], ["double", "double: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the greater of two double values as if by calling @B_java#lang#Math#max_E@.", "history": "added in API level 24", "FullName": "public static double max (double a, double b)"}, "floatValue()": {"Returns": [["float", "the double value represented by this object converted to type float"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Double as a float after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public float floatValue ()"}, "Double(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a string to be converted to a Double."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the string does not contain a parsable number."]], "SeeAlso": ["@B_java#lang#Double#valueOf_E@"], "Permissions": [], "Description": "Constructs a newly allocated Double object that represents the floating-point value of type double represented by the string. The string is converted to a double value as if by the valueOf method.", "history": "Added in API level 1", "FullName": "public Double (String s)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a String representation of this object."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Double#toString_E@"], "Permissions": [], "Description": "Returns a string representation of this Double object. The primitive double value represented by this object is converted to a string exactly as if by the method toString of one argument.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "compare(double,double)": {"Returns": [["int", "the value 0 if d1 is numerically equal to d2; a value less than 0 if d1 is numerically less than d2; and a value greater than 0 if d1 is numerically greater than d2."]], "Parameters": [["double", "double: the first double to compare"], ["double", "double: the second double to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the two specified double values. The sign of the integer value returned is the same as that of the integer that would be returned by the call:", "history": "Added in API level 1", "FullName": "public static int compare (double d1, double d2)"}, "toString(double)": {"Returns": [["@B_java#lang#String_E@", "a string representation of the argument."]], "Parameters": [["double", "double: the double to be converted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the double argument. All characters mentioned below are ASCII characters. If the argument is NaN, the result is the string \"NaN\". Otherwise, the result is a string that represents the sign and magnitude (absolute value) of the argument. If the sign is negative, the first character of the result is '-' ('\\u002D'); if the sign is positive, no sign character appears in the result. As for the magnitude If \"Infinity\"; thus, positive infinity produces the result \"Infinity\" and negative infinity produces the result \"-Infinity\". If \"0.0\"; thus, negative zero produces the result \"-0.0\" and positive zero produces the result \"0.0\". If .' ('\\u002E'), followed by one or more decimal digits representing the fractional part of If .' ('\\u002E'), followed by decimal digits representing the fractional part of E' ('\\u0045'), followed by a representation of @B_java#lang#Integer#toString_E@. How many digits must be printed for the fractional part of double. That is, suppose that double value nearest to double values are equally close to 0. To create localized string representations of a floating-point value, use subclasses of @B_java#text#NumberFormat_E@.", "history": "Added in API level 1", "FullName": "public static String toString (double d)"}, "sum(double,double)": {"Returns": [["double", "the sum of a and b"]], "Parameters": [["double", "double: the first operand"], ["double", "double: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Adds two double values together as per the + operator.", "history": "Added in API level 24", "FullName": "public static double sum (double a, double b)"}, "min(double,double)": {"Returns": [["double", "the smaller of a and b."]], "Parameters": [["double", "double: the first operand"], ["double", "double: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the smaller of two double values as if by calling @B_java#lang#Math#min_E@.", "history": "Added in API level 24", "FullName": "public static double min (double a, double b)"}, "sum(double, double)": {"Returns": [["double", "the sum of a and b"]], "Parameters": [["double", "double: the first operand"], ["double", "double: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Adds two double values together as per the + operator.", "history": "added in API level 24", "FullName": "public static double sum (double a, double b)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for this Double object. The result is the exclusive OR of the two halves of the long integer bit representation, exactly as produced by the method @B_java#lang#Double#doubleToLongBits_E@, of the primitive double value represented by this Double object. That is, the hash code is the value of the expression: v is defined by:", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "hashCode(double)": {"Returns": [["int", "a hash code value for a double value."]], "Parameters": [["double", "double: the value to hash"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for a double value; compatible with Double.hashCode().", "history": "Added in API level 24", "FullName": "public static int hashCode (double value)"}, "longBitsToDouble(long)": {"Returns": [["double", "the double floating-point value with the same bit pattern."]], "Parameters": [["long", "long: any long integer."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the double value corresponding to a given bit representation. The argument is considered to be a representation of a floating-point value according to the IEEE 754 floating-point \"double format\" bit layout. If the argument is 0x7ff0000000000000L, the result is positive infinity. If the argument is 0xfff0000000000000L, the result is negative infinity. If the argument is any value in the range 0x7ff0000000000001L through 0x7fffffffffffffffL or in the range 0xfff0000000000001L through 0xffffffffffffffffL, the result is a NaN. No IEEE 754 floating-point operation provided by Java can distinguish between two NaN values of the same type with different bit patterns. Distinct values of NaN are only distinguishable by use of the Double.doubleToRawLongBits method. In all other cases, let Note that this method may not be able to return a double NaN with exactly same bit pattern as the long argument. IEEE 754 distinguishes between two kinds of NaNs, quiet NaNs and longBitsToDouble may not be able to return a double with a signaling NaN bit pattern. Consequently, for some long values, doubleToRawLongBits(longBitsToDouble(start)) may start. Moreover, which particular bit patterns represent signaling NaNs is platform dependent; although all NaN bit patterns, quiet or signaling, must be in the NaN range identified above.", "history": "Added in API level 1", "FullName": "public static double longBitsToDouble (long bits)"}, "valueOf(double)": {"Returns": [["@B_java#lang#Double_E@", "a Double instance representing d."]], "Parameters": [["double", "double: a double value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Double instance representing the specified double value. If a new Double instance is not required, this method should generally be used in preference to the constructor @B_java#lang#Double#Double_E@, as this method is likely to yield significantly better space and time performance by caching frequently requested values.", "history": "Added in API level 1", "FullName": "public static Double valueOf (double d)"}}, "Inheritance": ["@B_java#lang#Number_E@"], "ClassName": "java.lang.Double", "ClassDesc": "The Double class wraps a value of the primitive type double in an object. An object of type Double contains a single field whose type is double. In addition, this class provides several methods for converting a double to a String and a String to a double, as well as other constants and methods useful when dealing with a double."}