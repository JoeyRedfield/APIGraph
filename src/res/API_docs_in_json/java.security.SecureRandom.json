{"Functions": {"SecureRandom()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a secure random number generator (RNG) implementing the default random number algorithm. This constructor traverses the list of registered security Providers, starting with the most preferred Provider. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the first Provider that supports a SecureRandom (RNG) algorithm is returned. If none of the Providers support a RNG algorithm, then an implementation-specific default is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method. See the SecureRandom section in the The returned SecureRandom object has not been seeded. To seed the returned object, call the setSeed method. If setSeed is not called, the first call to nextBytes will force the SecureRandom object to seed itself. This self-seeding will not occur if setSeed was previously called.", "history": "Added in API level 1", "FullName": "public SecureRandom ()"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the name of the algorithm or unknown if the algorithm name cannot be determined."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the algorithm implemented by this SecureRandom object.", "history": "Added in API level 1", "FullName": "public String getAlgorithm ()"}, "setSeed(long)": {"Returns": [], "Parameters": [["long", "long: the seed."]], "Throws": [], "SeeAlso": ["@B_java#security#SecureRandom#getSeed_E@"], "Permissions": [], "Description": "Reseeds this random object, using the eight bytes contained in the given long seed. The given seed supplements, rather than replaces, the existing seed. Thus, repeated calls are guaranteed never to reduce randomness. This method is defined for compatibility with java.util.Random.", "history": "Added in API level 1", "FullName": "public void setSeed (long seed)"}, "generateSeed(int)": {"Returns": [["byte[]", "the seed bytes."]], "Parameters": [["int", "int: the number of seed bytes to generate."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself. This call may be used to seed other random number generators.", "history": "Added in API level 1", "FullName": "public byte[] generateSeed (int numBytes)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this SecureRandom object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this SecureRandom object.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_java#security#SecureRandom_E@", "the new SecureRandom object."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the RNG algorithm. See the SecureRandom section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard RNG algorithm names."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a SecureRandomSpi implementation for the specified algorithm is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list. The returned SecureRandom object has not been seeded. To seed the returned object, call the setSeed method. If setSeed is not called, the first call to nextBytes will force the SecureRandom object to seed itself. This self-seeding will not occur if setSeed was previously called.", "history": "Added in API level 1", "FullName": "public static SecureRandom getInstance (String algorithm, Provider provider)"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_java#security#SecureRandom_E@", "the new SecureRandom object."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the RNG algorithm. See the SecureRandom section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard RNG algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a SecureRandomSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method. The returned SecureRandom object has not been seeded. To seed the returned object, call the setSeed method. If setSeed is not called, the first call to nextBytes will force the SecureRandom object to seed itself. This self-seeding will not occur if setSeed was previously called.", "history": "added in API level 1", "FullName": "public static SecureRandom getInstance (String algorithm, String provider)"}, "setSeed(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the seed."]], "Throws": [], "SeeAlso": ["@B_java#security#SecureRandom#getSeed_E@"], "Permissions": [], "Description": "Reseeds this random object. The given seed supplements, rather than replaces, the existing seed. Thus, repeated calls are guaranteed never to reduce randomness.", "history": "Added in API level 1", "FullName": "public void setSeed (byte[] seed)"}, "getInstance(java.lang.String)": {"Returns": [["@B_java#security#SecureRandom_E@", "the new SecureRandom object."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the RNG algorithm. See the SecureRandom section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard RNG algorithm names."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if no Provider supports a SecureRandomSpi implementation for the specified algorithm."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method. The returned SecureRandom object has not been seeded. To seed the returned object, call the setSeed method. If setSeed is not called, the first call to nextBytes will force the SecureRandom object to seed itself. This self-seeding will not occur if setSeed was previously called.", "history": "Added in API level 1", "FullName": "public static SecureRandom getInstance (String algorithm)"}, "next(int)": {"Returns": [["int", "an int containing the user-specified number of pseudo-random bits (right justified, with leading zeros)."]], "Parameters": [["int", "int: number of pseudo-random bits to be generated, where 0 <= numBits <= 32."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates an integer containing the user-specified number of pseudo-random bits (right justified, with leading zeros). This method overrides a java.util.Random method, and serves to provide a source of random bits to all of the methods inherited from that class (for example, nextInt, nextLong, and nextFloat).", "history": "Added in API level 1", "FullName": "protected final int next (int numBits)"}, "getInstanceStrong()": {"Returns": [["@B_java#security#SecureRandom_E@", "a strong SecureRandom implementation"]], "Parameters": [], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if no algorithm is available"]], "SeeAlso": ["@B_java#security#Security#getProperty_E@"], "Permissions": [], "Description": "Returns a SecureRandom object. In Android this is equivalent to get a SHA1PRNG from AndroidOpenSSL. Some situations require strong random values, such as when creating high-value/long-lived secrets like RSA public/private keys. To help guide applications in selecting a suitable strong SecureRandom implementation, Java distributions include a list of known strong SecureRandom implementations in the securerandom.strongAlgorithms Security property. Every implementation of the Java platform is required to support at least one strong SecureRandom implementation.", "history": "Added in API level 26", "FullName": "public static SecureRandom getInstanceStrong ()"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_java#security#SecureRandom_E@", "the new SecureRandom object."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the RNG algorithm. See the SecureRandom section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard RNG algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a SecureRandomSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method. The returned SecureRandom object has not been seeded. To seed the returned object, call the setSeed method. If setSeed is not called, the first call to nextBytes will force the SecureRandom object to seed itself. This self-seeding will not occur if setSeed was previously called.", "history": "Added in API level 1", "FullName": "public static SecureRandom getInstance (String algorithm, String provider)"}, "nextBytes(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the array to be filled in with random bytes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates a user-specified number of random bytes. If a call to setSeed had not occurred previously, the first call to this method forces this SecureRandom object to seed itself. This self-seeding will not occur if setSeed was previously called.", "history": "Added in API level 1", "FullName": "public void nextBytes (byte[] bytes)"}, "getSeed(int)": {"Returns": [["byte[]", "the seed bytes."]], "Parameters": [["int", "int: the number of seed bytes to generate."]], "Throws": [], "SeeAlso": ["@B_java#security#SecureRandom#setSeed_E@"], "Permissions": [], "Description": "Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself. This call may be used to seed other random number generators. This method is only included for backwards compatibility. The caller is encouraged to use one of the alternative getInstance methods to obtain a SecureRandom object, and then call the generateSeed method to obtain seed bytes from that object.", "history": "Added in API level 1", "FullName": "public static byte[] getSeed (int numBytes)"}, "SecureRandom(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the seed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a secure random number generator (RNG) implementing the default random number algorithm. The SecureRandom instance is seeded with the specified seed bytes. This constructor traverses the list of registered security Providers, starting with the most preferred Provider. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the first Provider that supports a SecureRandom (RNG) algorithm is returned. If none of the Providers support a RNG algorithm, then an implementation-specific default is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method. See the SecureRandom section in the", "history": "Added in API level 1", "FullName": "public SecureRandom (byte[] seed)"}, "SecureRandom(java.security.SecureRandomSpi,java.security.Provider)": {"Returns": [], "Parameters": [["@B_java#security#SecureRandomSpi_E@", "SecureRandomSpi: the SecureRandom implementation."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a SecureRandom object.", "history": "Added in API level 1", "FullName": "protected SecureRandom (SecureRandomSpi secureRandomSpi, Provider provider)"}}, "Inheritance": ["@B_java#util#Random_E@"], "ClassName": "java.security.SecureRandom", "ClassDesc": "This class provides a cryptographically strong random number generator (RNG). A cryptographically strong random number minimally complies with the statistical random number generator tests specified in A caller obtains a SecureRandom instance via the no-argument constructor or one of the getInstance methods: Many SecureRandom implementations are in the form of a pseudo-random number generator (PRNG), which means they use a deterministic algorithm to produce a pseudo-random sequence from a true random seed. Other implementations may produce true random numbers, and yet others may use a combination of both techniques. Typical callers of SecureRandom invoke the following methods to retrieve random bytes: Callers may also invoke the generateSeed method to generate a given number of seed bytes (to seed other random number generators, for example): generateSeed and nextBytes methods may block as entropy is being gathered, for example, if they need to read from /dev/random on various Unix-like operating systems. The SHA1PRNG algorithm from the Crypto provider has been deprecated as it was insecure, and also incorrectly used by some apps as a key derivation function. See"}