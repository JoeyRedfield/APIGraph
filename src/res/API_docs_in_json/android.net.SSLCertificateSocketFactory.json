{"Functions": {"getNpnSelectedProtocol(java.net.Socket)": {"Returns": [["byte[]", "no returns description in source"]], "Parameters": [["@B_java#net#Socket_E@", "Socket: a socket created by this factory."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the socket was not created by this factory."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the", "history": "Added in API level 16 Deprecated in API level 29", "FullName": "public byte[] getNpnSelectedProtocol (Socket socket)"}, "getInsecure(int, android.net.SSLSessionCache)": {"Returns": [["@B_javax#net#ssl#SSLSocketFactory_E@", "an insecure SSLSocketFactory with the specified parameters"]], "Parameters": [["int", "int: to use for SSL connection handshake, or 0 for none. The socket timeout is reset to 0 after the handshake."], ["@B_android#net#SSLSessionCache_E@", "SSLSessionCache: The @B_android#net#SSLSessionCache_E@ to use, or null for no cache."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new instance of a socket factory with all SSL security checks disabled, using an optional handshake timeout and SSL session cache.", "history": "added in API level 8", "FullName": "public static SSLSocketFactory getInsecure (int handshakeTimeoutMillis, SSLSessionCache cache)"}, "createSocket(java.net.Socket,java.lang.String,int,boolean)": {"Returns": [["@B_java#net#Socket_E@", "a socket connected to the specified host and port"]], "Parameters": [["@B_java#net#Socket_E@", "Socket: the existing socket"], ["@B_java#lang#String_E@", "String: the server host"], ["int", "int: the server port"], ["boolean", "boolean: close the underlying socket when this socket is closed"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a socket layered over an existing socket connected to the named host, at the given port. This constructor can be used when tunneling SSL through a proxy or when negotiating the use of SSL over an existing socket. The host and port refer to the logical peer destination. This socket is configured using the socket options established for this factory. By default, this method returns a @B_javax#net#ssl#HostnameVerifier_E@ obtained from HttpsURLConnection.getDefaultHostnameVerifier(); if this instance was created with @B_android#net#SSLCertificateSocketFactory#getInsecure_E@, it returns a socket that is", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public Socket createSocket (Socket k, String host, int port, boolean close)"}, "getInsecure(int,android.net.SSLSessionCache)": {"Returns": [["@B_javax#net#ssl#SSLSocketFactory_E@", "an insecure SSLSocketFactory with the specified parameters"]], "Parameters": [["int", "int: to use for SSL connection handshake, or 0 for none. The socket timeout is reset to 0 after the handshake."], ["@B_android#net#SSLSessionCache_E@", "SSLSessionCache: The @B_android#net#SSLSessionCache_E@ to use, or null for no cache."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new instance of a socket factory with all SSL security checks disabled, using an optional handshake timeout and SSL session cache.", "history": "Added in API level 8 Deprecated in API level 29", "FullName": "public static SSLSocketFactory getInsecure (int handshakeTimeoutMillis, SSLSessionCache cache)"}, "getSupportedCipherSuites()": {"Returns": [["@B_java#lang#String_E@", "an array of cipher suite names"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the names of the cipher suites which could be enabled for use on an SSL connection. Normally, only a subset of these will actually be enabled by default, since this list may include cipher suites which do not meet quality of service requirements for those defaults. Such cipher suites are useful in specialized applications. Applications should not blindly enable all supported cipher suites. The supported cipher suites can include signaling cipher suite values that can cause connection problems if enabled inappropriately. The proper way to use this method is to either check if a specific cipher suite is supported via Arrays.asList(getSupportedCipherSuites()).contains(...) or to filter a desired list of cipher suites to only the supported ones via desiredSuiteSet.retainAll(Arrays.asList(getSupportedCipherSuites())).", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public String[] getSupportedCipherSuites ()"}, "getDefault(int, android.net.SSLSessionCache)": {"Returns": [["@B_javax#net#ssl#SSLSocketFactory_E@", "a new SSLSocketFactory with the specified parameters"]], "Parameters": [["int", "int: to use for SSL connection handshake, or 0 for none. The socket timeout is reset to 0 after the handshake."], ["@B_android#net#SSLSessionCache_E@", "SSLSessionCache: The @B_android#net#SSLSessionCache_E@ to use, or null for no cache."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new socket factory instance with an optional handshake timeout and SSL session cache.", "history": "added in API level 8", "FullName": "public static SSLSocketFactory getDefault (int handshakeTimeoutMillis, SSLSessionCache cache)"}, "SSLCertificateSocketFactory(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#net#SSLCertificateSocketFactory#getDefault_E@ instead.", "history": "Added in API level 1", "FullName": "public SSLCertificateSocketFactory (int handshakeTimeoutMillis)"}, "createSocket(java.lang.String, int)": {"Returns": [["@B_java#net#Socket_E@", "the Socket"]], "Parameters": [["@B_java#lang#String_E@", "String: the server host name with which to connect, or null for the loopback address."], ["int", "int: the server port"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates a socket and connects it to the specified remote host at the specified remote port. This socket is configured using the socket options established for this factory. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException. This method verifies the peer's certificate hostname after connecting (unless created with @B_android#net#SSLCertificateSocketFactory#getInsecure_E@).", "history": "added in API level 1", "FullName": "public Socket createSocket (String host, int port)"}, "createSocket(java.lang.String,int)": {"Returns": [["@B_java#net#Socket_E@", "the Socket"]], "Parameters": [["@B_java#lang#String_E@", "String: the server host name with which to connect, or null for the loopback address."], ["int", "int: the server port"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates a socket and connects it to the specified remote host at the specified remote port. This socket is configured using the socket options established for this factory. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException. By default, this method returns a @B_javax#net#ssl#HostnameVerifier_E@ obtained from HttpsURLConnection.getDefaultHostnameVerifier(); if this instance was created with @B_android#net#SSLCertificateSocketFactory#getInsecure_E@, it returns a socket that is", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public Socket createSocket (String host, int port)"}, "createSocket(java.net.InetAddress, int)": {"Returns": [["@B_java#net#Socket_E@", "the Socket"]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the server host"], ["int", "int: the server port"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates a socket and connects it to the specified port number at the specified address. This socket is configured using the socket options established for this factory. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.", "history": "added in API level 1", "FullName": "public Socket createSocket (InetAddress addr, int port)"}, "createSocket(java.lang.String,int,java.net.InetAddress,int)": {"Returns": [["@B_java#net#Socket_E@", "the Socket"]], "Parameters": [["@B_java#lang#String_E@", "String: the server host name with which to connect, or null for the loopback address."], ["int", "int: the server port"], ["@B_java#net#InetAddress_E@", "InetAddress: the local address the socket is bound to"], ["int", "int: the local port the socket is bound to"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates a socket and connects it to the specified remote host on the specified remote port. The socket will also be bound to the local address and port supplied. This socket is configured using the socket options established for this factory. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException. By default, this method returns a @B_javax#net#ssl#HostnameVerifier_E@ obtained from HttpsURLConnection.getDefaultHostnameVerifier(); if this instance was created with @B_android#net#SSLCertificateSocketFactory#getInsecure_E@, it returns a socket that is", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public Socket createSocket (String host, int port, InetAddress localAddr, int localPort)"}, "setHostname(java.net.Socket,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#net#Socket_E@", "Socket: a socket created by this factory."], ["@B_java#lang#String_E@", "String: the desired SNI hostname, null to disable."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the socket was not created by this factory."]], "SeeAlso": [], "Permissions": [], "Description": "Turns on", "history": "Added in API level 17 Deprecated in API level 29", "FullName": "public void setHostname (Socket socket, String hostName)"}, "setKeyManagers(javax.net.ssl.KeyManager[])": {"Returns": [], "Parameters": [["@B_javax#net#ssl#KeyManager_E@", "KeyManager no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_javax#net#ssl#KeyManager_E@s to be used for connections made by this factory.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public void setKeyManagers (KeyManager[] keyManagers)"}, "getDefault(int,android.net.SSLSessionCache)": {"Returns": [["@B_javax#net#ssl#SSLSocketFactory_E@", "a new SSLSocketFactory with the specified parameters"]], "Parameters": [["int", "int: to use for SSL connection handshake, or 0 for none. The socket timeout is reset to 0 after the handshake."], ["@B_android#net#SSLSessionCache_E@", "SSLSessionCache: The @B_android#net#SSLSessionCache_E@ to use, or null for no cache."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new socket factory instance with an optional handshake timeout and SSL session cache.", "history": "Added in API level 8 Deprecated in API level 29", "FullName": "public static SSLSocketFactory getDefault (int handshakeTimeoutMillis, SSLSessionCache cache)"}, "createSocket(java.net.InetAddress,int)": {"Returns": [["@B_java#net#Socket_E@", "the Socket"]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the server host"], ["int", "int: the server port"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates a socket and connects it to the specified port number at the specified address. This socket is configured using the socket options established for this factory. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException. This method returns a socket that is", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public Socket createSocket (InetAddress addr, int port)"}, "setTrustManagers(javax.net.ssl.TrustManager[])": {"Returns": [], "Parameters": [["@B_javax#net#ssl#TrustManager_E@", "TrustManager no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_javax#net#ssl#TrustManager_E@s to be used for connections made by this factory.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public void setTrustManagers (TrustManager[] trustManager)"}, "getDefaultCipherSuites()": {"Returns": [["@B_java#lang#String_E@", "array of the cipher suites enabled by default"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of cipher suites which are enabled by default. Unless a different list is enabled, handshaking on an SSL connection will use one of these cipher suites. The minimum quality of service for these defaults requires confidentiality protection and server authentication (that is, no anonymous cipher suites).", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public String[] getDefaultCipherSuites ()"}, "createSocket(java.net.InetAddress,int,java.net.InetAddress,int)": {"Returns": [["@B_java#net#Socket_E@", "the Socket"]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the server network address"], ["int", "int: the server port"], ["@B_java#net#InetAddress_E@", "InetAddress: the client network address"], ["int", "int: the client port"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates a socket and connect it to the specified remote address on the specified remote port. The socket will also be bound to the local address and port suplied. The socket is configured using the socket options established for this factory. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException. This method returns a socket that is", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public Socket createSocket (InetAddress addr, int port, InetAddress localAddr, int localPort)"}, "getDefault(int)": {"Returns": [["@B_javax#net#SocketFactory_E@", "a new SSLSocketFactory with the specified parameters"]], "Parameters": [["int", "int: to use for SSL connection handshake, or 0 for none. The socket timeout is reset to 0 after the handshake."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new socket factory instance with an optional handshake timeout.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public static SocketFactory getDefault (int handshakeTimeoutMillis)"}, "createSocket()": {"Returns": [["@B_java#net#Socket_E@", "the unconnected socket"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new socket which is @B_java#net#Socket#connect_E@ to connect the socket.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public Socket createSocket ()"}, "setNpnProtocols(byte[][])": {"Returns": [], "Parameters": [["byte[][]", "byte: a non-empty list of protocol byte arrays. All arrays must be non-empty and of length less than 256."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the For servers this is the sequence of protocols to advertise as supported, in order of preference. This list is sent unencrypted to all clients that support NPN. For clients this is a list of supported protocols to match against the server's list. If there is no protocol supported by both client and server then the first protocol in the client's list will be selected. The order of the client's protocols is otherwise insignificant.", "history": "Added in API level 16 Deprecated in API level 29", "FullName": "public void setNpnProtocols (byte[][] npnProtocols)"}, "setUseSessionTickets(java.net.Socket, boolean)": {"Returns": [], "Parameters": [["@B_java#net#Socket_E@", "Socket: a socket created by this factory"], ["boolean", "boolean: true to enable session ticket support on this socket."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the socket was not created by this factory."]], "SeeAlso": [], "Permissions": [], "Description": "Enables", "history": "added in API level 17", "FullName": "public void setUseSessionTickets (Socket socket, boolean useSessionTickets)"}, "setUseSessionTickets(java.net.Socket,boolean)": {"Returns": [], "Parameters": [["@B_java#net#Socket_E@", "Socket: a socket created by this factory"], ["boolean", "boolean: true to enable session ticket support on this socket."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the socket was not created by this factory."]], "SeeAlso": [], "Permissions": [], "Description": "Enables", "history": "Added in API level 17 Deprecated in API level 29", "FullName": "public void setUseSessionTickets (Socket socket, boolean useSessionTickets)"}, "setHostname(java.net.Socket, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#net#Socket_E@", "Socket: a socket created by this factory."], ["@B_java#lang#String_E@", "String: the desired SNI hostname, null to disable."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the socket was not created by this factory."]], "SeeAlso": [], "Permissions": [], "Description": "Turns on", "history": "added in API level 17", "FullName": "public void setHostname (Socket socket, String hostName)"}}, "Inheritance": ["@B_javax#net#SocketFactory_E@", "@B_javax#net#ssl#SSLSocketFactory_E@"], "ClassName": "android.net.SSLCertificateSocketFactory", "ClassDesc": "This class has less error-prone replacements using standard APIs. To create an SSLSocket, obtain an @B_javax#net#ssl#SSLSocketFactory_E@ from @B_javax#net#ssl#SSLSocketFactory#getDefault_E@ or @B_javax#net#ssl#SSLContext#getSocketFactory_E@. To verify hostnames, pass \"HTTPS\" to @B_javax#net#ssl#SSLParameters#setEndpointIdentificationAlgorithm_E@. To enable ALPN, use @B_javax#net#ssl#SSLParameters#setApplicationProtocols_E@. To enable SNI, use @B_javax#net#ssl#SSLParameters#setServerNames_E@. SSLSocketFactory implementation with several extra features: Timeout specification for SSL handshake operations Hostname verification in most cases (see WARNINGs below) Optional SSL session caching with @B_android#net#SSLSessionCache_E@ Optionally bypass all SSL certificate checks The handshake timeout does not apply to actual TCP socket connection. If you want a connection timeout as well, use @B_android#net#SSLCertificateSocketFactory#createSocket_E@ and @B_java#net#Socket#connect_E@, after which you must verify the identity of the server you are connected to. @B_java#net#InetAddress_E@ or which return an unconnected socket, you MUST verify the server's identity yourself to ensure a secure connection. Refer to The recommended way to verify the server's identity is to use @B_javax#net#ssl#HttpsURLConnection#getDefaultHostnameVerifier_E@ to get a @B_javax#net#ssl#HostnameVerifier_E@ to verify the certificate hostname. On development devices, \"setprop socket.relaxsslcheck yes\" bypasses all SSL certificate and hostname checks for testing purposes. This setting requires root access."}