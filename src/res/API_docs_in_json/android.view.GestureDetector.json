{"Functions": {"GestureDetector(android.content.Context,android.view.GestureDetector.OnGestureListener,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the application's context"], ["@B_android#view#GestureDetector#OnGestureListener_E@", "GestureDetector.OnGestureListener: the listener invoked for all the callbacks, this must not be null."], ["@B_android#os#Handler_E@", "Handler: the handler to use for running deferred listener events."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if listener is null."]], "SeeAlso": ["@B_android#os#Handler#Handler_E@"], "Permissions": [], "Description": "Creates a GestureDetector with the supplied listener that runs deferred events on the thread associated with the supplied @B_android#os#Handler_E@.", "history": "Added in API level 3", "FullName": "public GestureDetector (Context context, GestureDetector.OnGestureListener listener, Handler handler)"}, "GestureDetector(android.view.GestureDetector.OnGestureListener)": {"Returns": [], "Parameters": [["@B_android#view#GestureDetector#OnGestureListener_E@", "GestureDetector.OnGestureListener: the listener invoked for all the callbacks, this must not be null."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if listener is null."]], "SeeAlso": ["@B_android#os#Handler#Handler_E@"], "Permissions": [], "Description": "Use @B_android#view#GestureDetector#GestureDetector_E@ instead. Creates a GestureDetector with the supplied listener. You may only use this constructor from a UI thread (this is the usual situation).", "history": "Added in API level 1", "FullName": "public GestureDetector (GestureDetector.OnGestureListener listener)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "true if the @B_android#view#GestureDetector#OnGestureListener_E@ consumed the event, else false."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The current motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Analyzes the given motion event and if applicable triggers the appropriate callbacks on the @B_android#view#GestureDetector#OnGestureListener_E@ supplied.", "history": "Added in API level 1", "FullName": "public boolean onTouchEvent (MotionEvent ev)"}, "GestureDetector(android.content.Context,android.view.GestureDetector.OnGestureListener)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the application's context"], ["@B_android#view#GestureDetector#OnGestureListener_E@", "GestureDetector.OnGestureListener: the listener invoked for all the callbacks, this must not be null."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if listener is null."]], "SeeAlso": ["@B_android#os#Handler#Handler_E@"], "Permissions": [], "Description": "Creates a GestureDetector with the supplied listener. You may only use this constructor from a @B_android#os#Looper_E@ thread.", "history": "Added in API level 3", "FullName": "public GestureDetector (Context context, GestureDetector.OnGestureListener listener)"}, "onGenericMotionEvent(android.view.MotionEvent)": {"Returns": [["boolean", "true if the @B_android#view#GestureDetector#OnGestureListener_E@ consumed the event, else false."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The current motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Analyzes the given generic motion event and if applicable triggers the appropriate callbacks on the @B_android#view#GestureDetector#OnGestureListener_E@ supplied.", "history": "Added in API level 23", "FullName": "public boolean onGenericMotionEvent (MotionEvent ev)"}, "setContextClickListener(android.view.GestureDetector.OnContextClickListener)": {"Returns": [], "Parameters": [["@B_android#view#GestureDetector#OnContextClickListener_E@", "GestureDetector.OnContextClickListener: the listener invoked for all the callbacks, or null to stop listening for context clicks."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener which will be called for context clicks.", "history": "Added in API level 23", "FullName": "public void setContextClickListener (GestureDetector.OnContextClickListener onContextClickListener)"}, "setIsLongpressEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether longpress should be enabled."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether longpress is enabled, if this is enabled when a user presses and holds down you get a longpress event and nothing further. If it's disabled the user can press and hold down and then later moved their finger and you will get scroll events. By default longpress is enabled.", "history": "Added in API level 1", "FullName": "public void setIsLongpressEnabled (boolean isLongpressEnabled)"}, "isLongpressEnabled()": {"Returns": [["boolean", "true if longpress is enabled, else false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean isLongpressEnabled ()"}, "GestureDetector(android.content.Context,android.view.GestureDetector.OnGestureListener,android.os.Handler,boolean)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the application's context"], ["@B_android#view#GestureDetector#OnGestureListener_E@", "GestureDetector.OnGestureListener: the listener invoked for all the callbacks, this must not be null."], ["@B_android#os#Handler_E@", "Handler: the handler to use for running deferred listener events."], ["boolean", "boolean: currently not used."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if listener is null."]], "SeeAlso": ["@B_android#os#Handler#Handler_E@"], "Permissions": [], "Description": "Creates a GestureDetector with the supplied listener that runs deferred events on the thread associated with the supplied @B_android#os#Handler_E@.", "history": "Added in API level 8", "FullName": "public GestureDetector (Context context, GestureDetector.OnGestureListener listener, Handler handler, boolean unused)"}, "GestureDetector(android.view.GestureDetector.OnGestureListener,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#view#GestureDetector#OnGestureListener_E@", "GestureDetector.OnGestureListener: the listener invoked for all the callbacks, this must not be null."], ["@B_android#os#Handler_E@", "Handler: the handler to use"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if either listener or handler is null."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#GestureDetector#GestureDetector_E@ instead. Creates a GestureDetector with the supplied listener. This variant of the constructor should be used from a non-UI thread (as it allows specifying the Handler).", "history": "Added in API level 1", "FullName": "public GestureDetector (GestureDetector.OnGestureListener listener, Handler handler)"}, "setOnDoubleTapListener(android.view.GestureDetector.OnDoubleTapListener)": {"Returns": [], "Parameters": [["@B_android#view#GestureDetector#OnDoubleTapListener_E@", "GestureDetector.OnDoubleTapListener: the listener invoked for all the callbacks, or null to stop listening for double-tap gestures."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener which will be called for double-tap and related gestures.", "history": "Added in API level 3", "FullName": "public void setOnDoubleTapListener (GestureDetector.OnDoubleTapListener onDoubleTapListener)"}}, "Inheritance": [], "ClassName": "android.view.GestureDetector", "ClassDesc": "Detects various gestures and events using the supplied @B_android#view#MotionEvent_E@s. The @B_android#view#GestureDetector#OnGestureListener_E@ callback will notify users when a particular motion event has occurred. This class should only be used with @B_android#view#MotionEvent_E@s reported via touch (don't use for trackball events). To use this class: Create an instance of the GestureDetector for your @B_android#view#View_E@ In the @B_android#view#View#onTouchEvent_E@ method ensure you call @B_android#view#GestureDetector#onTouchEvent_E@. The methods defined in your callback will be executed when the events occur. If listening for @B_android#view#GestureDetector#OnContextClickListener#onContextClick_E@ you must call @B_android#view#GestureDetector#onGenericMotionEvent_E@ in @B_android#view#View#onGenericMotionEvent_E@."}