{"Functions": {"makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall.Listener,int)": {"Returns": [["@B_android#net#sip#SipAudioCall_E@", "a @B_android#net#sip#SipAudioCall_E@ object"]], "Parameters": [["@B_android#net#sip#SipProfile_E@", "SipProfile: the SIP profile to make the call from"], ["@B_android#net#sip#SipProfile_E@", "SipProfile: the SIP profile to make the call to"], ["@B_android#net#sip#SipAudioCall#Listener_E@", "SipAudioCall.Listener: to listen to the call events from @B_android#net#sip#SipAudioCall_E@; can be null"], ["int", "int: the timeout value in seconds. Default value (defined by SIP protocol) is used if timeout is zero or negative."]], "Throws": [["@B_android#net#sip#SipException_E@", "if calling the SIP service results in an error or VOIP API is not supported by the device"]], "SeeAlso": ["@B_android#net#sip#SipAudioCall#Listener#onError_E@", "@B_android#net#sip#SipManager#isVoipSupported_E@"], "Permissions": [], "Description": "Creates a @B_android#net#sip#SipAudioCall_E@ to make a call. The attempt will be timed out if the call is not established within timeout seconds and @B_android#net#sip#SipAudioCall#Listener#onError_E@ will be called.", "history": "Added in API level 9", "FullName": "public SipAudioCall makeAudioCall (SipProfile localProfile, SipProfile peerProfile, SipAudioCall.Listener listener, int timeout)"}, "createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession.Listener)": {"Returns": [["@B_android#net#sip#SipSession_E@", "no returns description in source"]], "Parameters": [["@B_android#net#sip#SipProfile_E@", "SipProfile: the SIP profile the session is associated with"], ["@B_android#net#sip#SipSession#Listener_E@", "SipSession.Listener: to listen to SIP session events"]], "Throws": [["@B_android#net#sip#SipException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#net#sip#SipSession_E@ with the specified profile. Use other methods, if applicable, instead of interacting with @B_android#net#sip#SipSession_E@ directly.", "history": "Added in API level 9", "FullName": "public SipSession createSipSession (SipProfile localProfile, SipSession.Listener listener)"}, "isSipWifiOnly(android.content.Context)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if SIP is only available on WIFI.", "history": "Added in API level 9", "FullName": "public static boolean isSipWifiOnly (Context context)"}, "open(android.net.sip.SipProfile)": {"Returns": [], "Parameters": [["@B_android#net#sip#SipProfile_E@", "SipProfile: the SIP profile to make calls from"]], "Throws": [["@B_android#net#sip#SipException_E@", "if the profile contains incorrect settings or calling the SIP service results in an error"]], "SeeAlso": [], "Permissions": [], "Description": "Opens the profile for making generic SIP calls. The caller may make subsequent calls through @B_android#net#sip#SipManager#makeAudioCall_E@. If one also wants to receive calls on the profile, use @B_android#net#sip#SipManager#open_E@ instead.", "history": "Added in API level 9", "FullName": "public void open (SipProfile localProfile)"}, "setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the URI of the profile"], ["@B_android#net#sip#SipRegistrationListener_E@", "SipRegistrationListener: to listen to registration events; can be null"]], "Throws": [["@B_android#net#sip#SipException_E@", "if calling the SIP service results in an error"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener to listen to registration events. No effect if the profile has not been opened to receive calls (see @B_android#net#sip#SipManager#open_E@).", "history": "Added in API level 9", "FullName": "public void setRegistrationListener (String localProfileUri, SipRegistrationListener listener)"}, "close(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the URI of the profile to close"]], "Throws": [["@B_android#net#sip#SipException_E@", "if calling the SIP service results in an error"]], "SeeAlso": [], "Permissions": [], "Description": "Closes the specified profile to not make/receive calls. All the resources that were allocated to the profile are also released.", "history": "Added in API level 9", "FullName": "public void close (String localProfileUri)"}, "getSessionFor(android.content.Intent)": {"Returns": [["@B_android#net#sip#SipSession_E@", "the session object that handles the incoming call"]], "Parameters": [["@B_android#content#Intent_E@", "Intent: the incoming call broadcast intent"]], "Throws": [["@B_android#net#sip#SipException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#net#sip#SipSession_E@ that handles the incoming call. For audio calls, consider to use @B_android#net#sip#SipAudioCall_E@ to handle the incoming call. See @B_android#net#sip#SipManager#takeAudioCall_E@. Note that the method may be called only once for the same intent. For subsequent calls on the same intent, the method returns null.", "history": "Added in API level 9", "FullName": "public SipSession getSessionFor (Intent incomingCallIntent)"}, "open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)": {"Returns": [], "Parameters": [["@B_android#net#sip#SipProfile_E@", "SipProfile: the SIP profile to receive incoming calls for"], ["@B_android#app#PendingIntent_E@", "PendingIntent: When an incoming call is received, the SIP service will call @B_android#app#PendingIntent#send_E@ to send back the intent to the caller with @B_android#net#sip#SipManager#INCOMING_CALL_RESULT_CODE_E@ as the result code and the intent to fill in the call ID and session description information. It cannot be null."], ["@B_android#net#sip#SipRegistrationListener_E@", "SipRegistrationListener: to listen to registration events; can be null"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if incomingCallPendingIntent is null"], ["@B_android#net#sip#SipException_E@", "if the profile contains incorrect settings or calling the SIP service results in an error"]], "SeeAlso": ["@B_android#net#sip#SipManager#getCallId_E@", "@B_android#net#sip#SipManager#getOfferSessionDescription_E@", "@B_android#net#sip#SipManager#takeAudioCall_E@", "@B_android#net#sip#SipManager#isIncomingCallIntent_E@"], "Permissions": [], "Description": "Opens the profile for making calls and/or receiving generic SIP calls. The caller may make subsequent calls through @B_android#net#sip#SipManager#makeAudioCall_E@. If the auto-registration option is enabled in the profile, the SIP service will register the profile to the corresponding SIP provider periodically in order to receive calls from the provider. When the SIP service receives a new call, it will send out an intent with the provided action string. The intent contains a call ID extra and an offer session description string extra. Use @B_android#net#sip#SipManager#getCallId_E@ and @B_android#net#sip#SipManager#getOfferSessionDescription_E@ to retrieve those extras.", "history": "Added in API level 9", "FullName": "public void open (SipProfile localProfile, PendingIntent incomingCallPendingIntent, SipRegistrationListener listener)"}, "isApiSupported(android.content.Context)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the SIP API is supported by the system.", "history": "Added in API level 9", "FullName": "public static boolean isApiSupported (Context context)"}, "newInstance(android.content.Context)": {"Returns": [["@B_android#net#sip#SipManager_E@", "the manager instance or null if SIP API is not supported"]], "Parameters": [["@B_android#content#Context_E@", "Context: application context for creating the manager object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a manager instance. Returns null if SIP API is not supported.", "history": "Added in API level 9", "FullName": "public static SipManager newInstance (Context context)"}, "isOpened(java.lang.String)": {"Returns": [["boolean", "true if the profile is enabled to receive calls"]], "Parameters": [["@B_java#lang#String_E@", "String: the URI of the profile in question"]], "Throws": [["@B_android#net#sip#SipException_E@", "if calling the SIP service results in an error"]], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified profile is opened in the SIP service for making and/or receiving calls.", "history": "Added in API level 9", "FullName": "public boolean isOpened (String localProfileUri)"}, "isIncomingCallIntent(android.content.Intent)": {"Returns": [["boolean", "true if the intent is an incoming call broadcast intent"]], "Parameters": [["@B_android#content#Intent_E@", "Intent: the intent in question"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the intent is an incoming call broadcast intent.", "history": "Added in API level 9", "FullName": "public static boolean isIncomingCallIntent (Intent intent)"}, "unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)": {"Returns": [], "Parameters": [["@B_android#net#sip#SipProfile_E@", "SipProfile: the SIP profile to register with"], ["@B_android#net#sip#SipRegistrationListener_E@", "SipRegistrationListener: to listen to the registration events"]], "Throws": [["@B_android#net#sip#SipException_E@", "if calling the SIP service results in an error"]], "SeeAlso": [], "Permissions": [], "Description": "Manually unregisters the profile from the corresponding SIP provider for stop receiving further calls. This may interference with the auto registration process in the SIP service if the auto-registration option in the profile is enabled.", "history": "Added in API level 9", "FullName": "public void unregister (SipProfile localProfile, SipRegistrationListener listener)"}, "isRegistered(java.lang.String)": {"Returns": [["boolean", "true if the profile is registered to the SIP provider; false if the profile has not been opened in the SIP service or the SIP service has not yet successfully registered the profile to the SIP provider"]], "Parameters": [["@B_java#lang#String_E@", "String: the URI of the profile in question"]], "Throws": [["@B_android#net#sip#SipException_E@", "if calling the SIP service results in an error"]], "SeeAlso": [], "Permissions": [], "Description": "Checks if the SIP service has successfully registered the profile to the SIP provider (specified in the profile) for receiving calls. Returning true from this method also implies the profile is opened (@B_android#net#sip#SipManager#isOpened_E@).", "history": "Added in API level 9", "FullName": "public boolean isRegistered (String localProfileUri)"}, "getOfferSessionDescription(android.content.Intent)": {"Returns": [["@B_java#lang#String_E@", "the offer session description or null if the intent does not have it"]], "Parameters": [["@B_android#content#Intent_E@", "Intent: the incoming call broadcast intent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the offer session description from the specified incoming call broadcast intent.", "history": "Added in API level 9", "FullName": "public static String getOfferSessionDescription (Intent incomingCallIntent)"}, "getCallId(android.content.Intent)": {"Returns": [["@B_java#lang#String_E@", "the call ID or null if the intent does not contain it"]], "Parameters": [["@B_android#content#Intent_E@", "Intent: the incoming call broadcast intent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the call ID from the specified incoming call broadcast intent.", "history": "Added in API level 9", "FullName": "public static String getCallId (Intent incomingCallIntent)"}, "takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall.Listener)": {"Returns": [["@B_android#net#sip#SipAudioCall_E@", "a @B_android#net#sip#SipAudioCall_E@ object"]], "Parameters": [["@B_android#content#Intent_E@", "Intent: the incoming call broadcast intent"], ["@B_android#net#sip#SipAudioCall#Listener_E@", "SipAudioCall.Listener: to listen to the call events from @B_android#net#sip#SipAudioCall_E@; can be null"]], "Throws": [["@B_android#net#sip#SipException_E@", "if calling the SIP service results in an error"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#net#sip#SipAudioCall_E@ to take an incoming call. Before the call is returned, the listener will receive a @B_android#net#sip#SipAudioCall#Listener#onRinging_E@ callback.", "history": "Added in API level 9", "FullName": "public SipAudioCall takeAudioCall (Intent incomingCallIntent, SipAudioCall.Listener listener)"}, "isVoipSupported(android.content.Context)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the system supports SIP-based VOIP API.", "history": "Added in API level 9", "FullName": "public static boolean isVoipSupported (Context context)"}, "register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)": {"Returns": [], "Parameters": [["@B_android#net#sip#SipProfile_E@", "SipProfile: the SIP profile to register with"], ["int", "int: registration expiration time (in seconds)"], ["@B_android#net#sip#SipRegistrationListener_E@", "SipRegistrationListener: to listen to the registration events"]], "Throws": [["@B_android#net#sip#SipException_E@", "if calling the SIP service results in an error"]], "SeeAlso": [], "Permissions": [], "Description": "Manually registers the profile to the corresponding SIP provider for receiving calls. @B_android#net#sip#SipManager#open_E@ is still needed to be called at least once in order for the SIP service to notify the caller with the @B_android#app#PendingIntent_E@ when an incoming call is received.", "history": "Added in API level 9", "FullName": "public void register (SipProfile localProfile, int expiryTime, SipRegistrationListener listener)"}, "makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall.Listener,int)": {"Returns": [["@B_android#net#sip#SipAudioCall_E@", "a @B_android#net#sip#SipAudioCall_E@ object"]], "Parameters": [["@B_java#lang#String_E@", "String: URI of the SIP profile to make the call from"], ["@B_java#lang#String_E@", "String: URI of the SIP profile to make the call to"], ["@B_android#net#sip#SipAudioCall#Listener_E@", "SipAudioCall.Listener: to listen to the call events from @B_android#net#sip#SipAudioCall_E@; can be null"], ["int", "int: the timeout value in seconds. Default value (defined by SIP protocol) is used if timeout is zero or negative."]], "Throws": [["@B_android#net#sip#SipException_E@", "if calling the SIP service results in an error or VOIP API is not supported by the device"]], "SeeAlso": ["@B_android#net#sip#SipAudioCall#Listener#onError_E@", "@B_android#net#sip#SipManager#isVoipSupported_E@"], "Permissions": [], "Description": "Creates a @B_android#net#sip#SipAudioCall_E@ to make an audio call. The attempt will be timed out if the call is not established within timeout seconds and @B_android#net#sip#SipAudioCall#Listener#onError_E@ will be called.", "history": "Added in API level 9", "FullName": "public SipAudioCall makeAudioCall (String localProfileUri, String peerProfileUri, SipAudioCall.Listener listener, int timeout)"}}, "Inheritance": [], "ClassName": "android.net.sip.SipManager", "ClassDesc": "Provides APIs for SIP tasks, such as initiating SIP connections, and provides access to related SIP services. This class is the starting point for any SIP actions. You can acquire an instance of it with @B_android#net#sip#SipManager#newInstance_E@. The APIs in this class allows you to: Create a @B_android#net#sip#SipSession_E@ to get ready for making calls or listen for incoming calls. See @B_android#net#sip#SipManager#createSipSession_E@ and @B_android#net#sip#SipManager#getSessionFor_E@. Initiate and receive generic SIP calls or audio-only SIP calls. Generic SIP calls may be video, audio, or other, and are initiated with @B_android#net#sip#SipManager#open_E@. Audio-only SIP calls should be handled with a @B_android#net#sip#SipAudioCall_E@, which you can acquire with @B_android#net#sip#SipManager#makeAudioCall_E@ and @B_android#net#sip#SipManager#takeAudioCall_E@. Register and unregister with a SIP service provider, with @B_android#net#sip#SipManager#register_E@ and @B_android#net#sip#SipManager#unregister_E@. Verify session connectivity, with @B_android#net#sip#SipManager#isOpened_E@ and @B_android#net#sip#SipManager#isRegistered_E@. @B_android#net#sip#SipManager#isVoipSupported_E@ to verify that the device supports VOIP calling and @B_android#net#sip#SipManager#isApiSupported_E@ to verify that the device supports the SIP APIs. Your application must also request the @B_android#Manifest#permission#INTERNET_E@ and @B_android#Manifest#permission#USE_SIP_E@ permissions."}