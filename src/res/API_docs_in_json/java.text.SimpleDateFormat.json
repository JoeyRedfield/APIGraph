{"Functions": {"getDateFormatSymbols()": {"Returns": [["@B_java#text#DateFormatSymbols_E@", "the date and time format symbols of this date format"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#SimpleDateFormat#setDateFormatSymbols_E@"], "Permissions": [], "Description": "Gets a copy of the date and time format symbols of this date format.", "history": "Added in API level 1", "FullName": "public DateFormatSymbols getDateFormatSymbols ()"}, "SimpleDateFormat(java.lang.String,java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the pattern describing the date and time format"], ["@B_java#util#Locale_E@", "Locale: the locale whose date format symbols should be used"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given pattern or locale is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the given pattern is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a SimpleDateFormat using the given pattern and the default date format symbols for the given locale. @B_java#text#DateFormat_E@ class.", "history": "Added in API level 1", "FullName": "public SimpleDateFormat (String pattern, Locale locale)"}, "parse(java.lang.String,java.text.ParsePosition)": {"Returns": [["@B_java#util#Date_E@", "A Date parsed from the string. In case of error, returns null."]], "Parameters": [["@B_java#lang#String_E@", "String: A String, part of which should be parsed."], ["@B_java#text#ParsePosition_E@", "ParsePosition: A ParsePosition object with index and error index information as described above."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if text or pos is null."]], "SeeAlso": [], "Permissions": [], "Description": "Parses text from a string to produce a Date. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed date is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. This parsing operation uses the @B_java#text#DateFormat#calendar_E@ to produce a Date. All of the calendar's date-time fields are calendar's default values of the date-time fields are used for any missing date-time information. For example, the year value of the parsed Date is 1970 with @B_java#util#GregorianCalendar_E@ if no year value is given from the parsing operation. The TimeZone value may be overwritten, depending on the given pattern and the time zone value in text. Any TimeZone value that has previously been set by a call to @B_java#text#DateFormat#setTimeZone_E@ may need to be restored for further operations.", "history": "Added in API level 1", "FullName": "public Date parse (String text, ParsePosition pos)"}, "parse(java.lang.String, java.text.ParsePosition)": {"Returns": [["@B_java#util#Date_E@", "A Date parsed from the string. In case of error, returns null."]], "Parameters": [["@B_java#lang#String_E@", "String: A String, part of which should be parsed."], ["@B_java#text#ParsePosition_E@", "ParsePosition: A ParsePosition object with index and error index information as described above."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if text or pos is null."]], "SeeAlso": [], "Permissions": [], "Description": "Parses text from a string to produce a Date. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed date is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. This parsing operation uses the @B_java#text#DateFormat#calendar_E@ to produce a Date. All of the calendar's date-time fields are calendar's default values of the date-time fields are used for any missing date-time information. For example, the year value of the parsed Date is 1970 with @B_java#util#GregorianCalendar_E@ if no year value is given from the parsing operation. The TimeZone value may be overwritten, depending on the given pattern and the time zone value in text. Any TimeZone value that has previously been set by a call to @B_java#text#DateFormat#setTimeZone_E@ may need to be restored for further operations.", "history": "added in API level 1", "FullName": "public Date parse (String text, ParsePosition pos)"}, "setDateFormatSymbols(java.text.DateFormatSymbols)": {"Returns": [], "Parameters": [["@B_java#text#DateFormatSymbols_E@", "DateFormatSymbols: the new date and time format symbols"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given newFormatSymbols is null"]], "SeeAlso": ["@B_java#text#SimpleDateFormat#getDateFormatSymbols_E@"], "Permissions": [], "Description": "Sets the date and time format symbols of this date format.", "history": "Added in API level 1", "FullName": "public void setDateFormatSymbols (DateFormatSymbols newFormatSymbols)"}, "toLocalizedPattern()": {"Returns": [["@B_java#lang#String_E@", "a localized pattern string describing this date format."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a localized pattern string describing this date format.", "history": "Added in API level 1", "FullName": "public String toLocalizedPattern ()"}, "format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "the formatted date-time string."]], "Parameters": [["@B_java#util#Date_E@", "Date: the date-time value to be formatted into a date-time string."], ["@B_java#lang#StringBuffer_E@", "StringBuffer: where the new date-time text is to be appended."], ["@B_java#text#FieldPosition_E@", "FieldPosition: the formatting position. On input: an alignment field, if desired. On output: the offsets of the alignment field."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given date is null."]], "SeeAlso": [], "Permissions": [], "Description": "Formats the given Date into a date/time string and appends the result to the given StringBuffer.", "history": "Added in API level 1", "FullName": "public StringBuffer format (Date date, StringBuffer toAppendTo, FieldPosition pos)"}, "SimpleDateFormat()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a SimpleDateFormat using the default pattern and date format symbols for the default @B_java#util#Locale#Category#FORMAT_E@ locale. @B_java#text#DateFormat_E@ class.", "history": "Added in API level 1", "FullName": "public SimpleDateFormat ()"}, "set2DigitYearStart(java.util.Date)": {"Returns": [], "Parameters": [["@B_java#util#Date_E@", "Date: During parsing, two digit years will be placed in the range startDate to startDate + 100 years."]], "Throws": [], "SeeAlso": ["@B_java#text#SimpleDateFormat#get2DigitYearStart_E@"], "Permissions": [], "Description": "Sets the 100-year period 2-digit years will be interpreted as being in to begin on the date the user specifies.", "history": "Added in API level 1", "FullName": "public void set2DigitYearStart (Date startDate)"}, "formatToCharacterIterator(java.lang.Object)": {"Returns": [["@B_java#text#AttributedCharacterIterator_E@", "AttributedCharacterIterator describing the formatted value."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to format"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if obj is null."], ["@B_java#lang#IllegalArgumentException_E@", "if the Format cannot format the given object, or if the Format's pattern string is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Formats an Object producing an AttributedCharacterIterator. You can use the returned AttributedCharacterIterator to build the resulting String, as well as to determine information about the resulting String. Each attribute key of the AttributedCharacterIterator will be of type DateFormat.Field, with the corresponding attribute value being the same as the attribute key.", "history": "Added in API level 1", "FullName": "public AttributedCharacterIterator formatToCharacterIterator (Object obj)"}, "get2DigitYearStart()": {"Returns": [["@B_java#util#Date_E@", "the start of the 100-year period into which two digit years are parsed"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#SimpleDateFormat#set2DigitYearStart_E@"], "Permissions": [], "Description": "Returns the beginning date of the 100-year period 2-digit years are interpreted as being within.", "history": "Added in API level 1", "FullName": "public Date get2DigitYearStart ()"}, "SimpleDateFormat(java.lang.String,java.text.DateFormatSymbols)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the pattern describing the date and time format"], ["@B_java#text#DateFormatSymbols_E@", "DateFormatSymbols: the date format symbols to be used for formatting"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given pattern or formatSymbols is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the given pattern is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a SimpleDateFormat using the given pattern and date format symbols.", "history": "Added in API level 1", "FullName": "public SimpleDateFormat (String pattern, DateFormatSymbols formatSymbols)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the given object is equal to this SimpleDateFormat"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the given object with this SimpleDateFormat for equality.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "toPattern()": {"Returns": [["@B_java#lang#String_E@", "a pattern string describing this date format."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a pattern string describing this date format.", "history": "Added in API level 1", "FullName": "public String toPattern ()"}, "SimpleDateFormat(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the pattern describing the date and time format"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given pattern is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the given pattern is invalid"]], "SeeAlso": ["@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Constructs a SimpleDateFormat using the given pattern and the default date format symbols for the default @B_java#util#Locale#Category#FORMAT_E@ locale. @B_java#text#DateFormat_E@ class. This is equivalent to calling @B_java#text#SimpleDateFormat#SimpleDateFormat_E@.", "history": "Added in API level 1", "FullName": "public SimpleDateFormat (String pattern)"}, "applyLocalizedPattern(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a String to be mapped to the new date and time format pattern for this format"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given pattern is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the given pattern is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Applies the given localized pattern string to this date format.", "history": "Added in API level 1", "FullName": "public void applyLocalizedPattern (String pattern)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this SimpleDateFormat"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a copy of this SimpleDateFormat. This also clones the format's date format symbols.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "applyPattern(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new date and time pattern for this date format"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given pattern is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the given pattern is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Applies the given pattern string to this date format.", "history": "Added in API level 1", "FullName": "public void applyPattern (String pattern)"}, "hashCode()": {"Returns": [["int", "the hash code value for this SimpleDateFormat object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hash code value for this SimpleDateFormat object.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": ["@B_java#text#Format_E@", "@B_java#text#DateFormat_E@"], "ClassName": "java.text.SimpleDateFormat", "ClassDesc": "SimpleDateFormat is a concrete class for formatting and parsing dates in a locale-sensitive manner. It allows for formatting (date \u2192 text), parsing (text \u2192 date), and normalization. SimpleDateFormat allows you to start by choosing any user-defined patterns for date-time formatting. However, you are encouraged to create a date-time formatter with either getTimeInstance, getDateInstance, or getDateTimeInstance in DateFormat. Each of these class methods can return a date/time formatter initialized with a default format pattern. You may modify the format pattern using the applyPattern methods as desired. For more information on using these methods, see @B_java#text#DateFormat_E@. Date and time formats are specified by date and time pattern strings. Within date and time pattern strings, unquoted letters from 'A' to 'Z' and from 'a' to 'z' are interpreted as pattern letters representing the components of a date or time string. Text can be quoted using single quotes (') to avoid interpretation. \"''\" represents a single quote. All other characters are not interpreted; they're simply copied into the output string during formatting or matched against the input string during parsing. The following pattern letters are defined (all other characters from 'A' to 'Z' and from 'a' to 'z' are reserved): @B_java#text#DateFormat#getCalendar_E@ is the Gregorian calendar, the following rules are applied. For formatting, if the number of pattern letters is 2, the year is truncated to 2 digits; otherwise it is interpreted as a For parsing, if the number of pattern letters is more than 2, the year is interpreted literally, regardless of the number of digits. So using the pattern \"MM/dd/yyyy\", \"01/11/12\" parses to Jan 11, 12 A.D. For parsing with the abbreviated year pattern (\"y\" or \"yy\"), SimpleDateFormat must interpret the abbreviated year relative to some century. It does this by adjusting dates to be within 80 years before and 20 years after the time the SimpleDateFormat instance is created. For example, using a pattern of \"MM/dd/yy\" and a SimpleDateFormat instance created on Jan 1, 1997, the string \"01/11/12\" would be interpreted as Jan 11, 2012 while the string \"05/04/64\" would be interpreted as May 4, 1964. During parsing, only strings consisting of exactly two digits, as defined by @B_java#lang#Character#isDigit_E@, will be parsed into the default century. Any other numeric string, such as a one digit string, a three or more digit string, or a two digit string that isn't all digits (for example, \"-1\"), is interpreted literally. So \"01/02/3\" or \"01/02/003\" are parsed, using the same pattern, as Jan 2, 3 AD. Likewise, \"01/02/-3\" is parsed as Jan 2, 4 BC. Otherwise, calendar system specific forms are applied. For both formatting and parsing, if the number of pattern letters is 4 or more, a calendar specific If week year 'Y' is specified and the 'y') is used instead. The support of week years can be tested with a call to @B_java#text#DateFormat#getCalendar_E@.@B_java#util#Calendar#isWeekDateSupported_E@. Letter M produces context-sensitive month names, such as the embedded form of names. If a DateFormatSymbols has been set explicitly with constructor @B_java#text#SimpleDateFormat#SimpleDateFormat_E@ or method @B_java#text#SimpleDateFormat#setDateFormatSymbols_E@, the month names given by the DateFormatSymbols are used. Letter L produces the standalone form of month names. For parsing, For parsing, For formatting, if the offset value from GMT is 0, \"Z\" is produced. If the number of pattern letters is 1, any fraction of an hour is ignored. For example, if the pattern is \"X\" and the time zone is \"GMT+05:30\", \"+05\" is produced. For parsing, the letter \"Z\" is parsed as the UTC time zone designator (therefore \"09:30Z\" is parsed as \"09:30 UTC\". not accepted. If the number of \"X\" pattern letters is 4 or more (e.g. XXXX), @B_java#lang#IllegalArgumentException_E@ is thrown when constructing a SimpleDateFormat or SimpleDateFormat also supports localized date and time pattern strings. In these strings, the pattern letters described above may be replaced with other, locale dependent, pattern letters. SimpleDateFormat does not deal with the localization of text other than the pattern letters; that's up to the client of the class. Date formats are not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally."}