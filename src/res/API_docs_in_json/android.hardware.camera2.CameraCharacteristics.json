{"Functions": {"getAvailableCaptureRequestKeys()": {"Returns": [["@B_java#util#List_E@", "List of keys supported by this CameraDevice for CaptureRequests. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of keys supported by this @B_android#hardware#camera2#CameraDevice_E@ for querying with a @B_android#hardware#camera2#CaptureRequest_E@. The list returned is not modifiable, so any attempts to modify it will throw a UnsupportedOperationException. Each key is only listed once in the list. The order of the keys is undefined. Note that there is no getAvailableCameraCharacteristicsKeys() -- use @B_android#hardware#camera2#CameraCharacteristics#getKeys_E@ instead.", "history": "Added in API level 21", "FullName": "public List<Key<?>> getAvailableCaptureRequestKeys ()"}, "getPhysicalCameraIds()": {"Returns": [["@B_java#util#Set_E@", "Set of physical camera ids for this logical camera device. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of physical camera ids that this logical @B_android#hardware#camera2#CameraDevice_E@ is made up of. A camera device is a logical camera if it has REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA capability. If the camera device doesn't have the capability, the return value will be an empty set. Prior to API level 29, all returned IDs are guaranteed to be returned by @B_android#hardware#camera2#CameraManager#getCameraIdList_E@, and can be opened directly by @B_android#hardware#camera2#CameraManager#openCamera_E@. Starting from API level 29, for each of the returned ID, if it's also returned by @B_android#hardware#camera2#CameraManager#getCameraIdList_E@, it can be used as a standalone camera by @B_android#hardware#camera2#CameraManager#openCamera_E@. Otherwise, the camera ID can only be used as part of the current logical camera. The set returned is not modifiable, so any attempts to modify it will throw a UnsupportedOperationException.", "history": "Added in API level 28", "FullName": "public Set<String> getPhysicalCameraIds ()"}, "getAvailableSessionKeys()": {"Returns": [["@B_java#util#List_E@", "List of keys that can be passed during capture session initialization. In case the camera device doesn't support such keys the list can be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a subset of @B_android#hardware#camera2#CameraCharacteristics#getAvailableCaptureRequestKeys_E@ keys that the camera device can pass as part of the capture session initialization. This list includes keys that are difficult to apply per-frame and can result in unexpected delays when modified during the capture session lifetime. Typical examples include parameters that require a time-consuming hardware re-configuration or internal camera pipeline change. For performance reasons we suggest clients to pass their initial values as part of @B_android#hardware#camera2#params#SessionConfiguration#setSessionParameters_E@. Once the camera capture session is enabled it is also recommended to avoid changing them from their initial values set in @B_android#hardware#camera2#params#SessionConfiguration#setSessionParameters_E@. Control over session parameters can still be exerted in capture requests but clients should be aware and expect delays during their application. An example usage scenario could look like this: The camera client starts by querying the session parameter key list via @B_android#hardware#camera2#CameraCharacteristics#getAvailableSessionKeys_E@. Before triggering the capture session create sequence, a capture request must be built via @B_android#hardware#camera2#CameraDevice#createCaptureRequest_E@ using an appropriate template matching the particular use case. The client should go over the list of session parameters and check whether some of the keys listed matches with the parameters that they intend to modify as part of the first capture request. If there is no such match, the capture request can be passed unmodified to @B_android#hardware#camera2#params#SessionConfiguration#setSessionParameters_E@. If matches do exist, the client should update the respective values and pass the request to @B_android#hardware#camera2#params#SessionConfiguration#setSessionParameters_E@. After the capture session initialization completes the session parameter key list can continue to serve as reference when posting or updating further requests. As mentioned above further changes to session parameters should ideally be avoided, if updates are necessary however clients could expect a delay/glitch during the parameter switch. The list returned is not modifiable, so any attempts to modify it will throw a UnsupportedOperationException. Each key is only listed once in the list. The order of the keys is undefined.", "history": "Added in API level 28", "FullName": "public List<Key<?>> getAvailableSessionKeys ()"}, "getAvailableCaptureResultKeys()": {"Returns": [["@B_java#util#List_E@", "List of keys supported by this CameraDevice for CaptureResults. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of keys supported by this @B_android#hardware#camera2#CameraDevice_E@ for querying with a @B_android#hardware#camera2#CaptureResult_E@. The list returned is not modifiable, so any attempts to modify it will throw a UnsupportedOperationException. Each key is only listed once in the list. The order of the keys is undefined. Note that there is no getAvailableCameraCharacteristicsKeys() -- use @B_android#hardware#camera2#CameraCharacteristics#getKeys_E@ instead.", "history": "Added in API level 21", "FullName": "public List<Key<?>> getAvailableCaptureResultKeys ()"}, "getAvailablePhysicalCameraRequestKeys()": {"Returns": [["@B_java#util#List_E@", "List of keys that can be overridden in individual physical device requests. In case the camera device doesn't support such keys the list can be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a subset of @B_android#hardware#camera2#CameraCharacteristics#getAvailableCaptureRequestKeys_E@ keys that can be overridden for physical devices backing a logical multi-camera. This is a subset of android.request.availableRequestKeys which contains a list of keys that can be overridden using @B_android#hardware#camera2#CaptureRequest#Builder#setPhysicalCameraKey_E@. The respective value of such request key can be obtained by calling @B_android#hardware#camera2#CaptureRequest#Builder#getPhysicalCameraKey_E@. Capture requests that contain individual physical device requests must be built via @B_android#hardware#camera2#CameraDevice#createCaptureRequest_E@. Such extended capture requests can be passed only to @B_android#hardware#camera2#CameraCaptureSession#capture_E@ or @B_android#hardware#camera2#CameraCaptureSession#captureBurst_E@ and not to @B_android#hardware#camera2#CameraCaptureSession#setRepeatingRequest_E@ or @B_android#hardware#camera2#CameraCaptureSession#setRepeatingBurst_E@. The list returned is not modifiable, so any attempts to modify it will throw a UnsupportedOperationException. Each key is only listed once in the list. The order of the keys is undefined.", "history": "Added in API level 28", "FullName": "public List<Key<?>> getAvailablePhysicalCameraRequestKeys ()"}, "get(android.hardware.camera2.CameraCharacteristics.Key<T>)": {"Returns": [["T", "The value of that key, or null if the field is not set."]], "Parameters": [["@B_android#hardware#camera2#CameraCharacteristics#Key_E@", "Key: The characteristics field to read."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the key was not valid"]], "SeeAlso": [], "Permissions": [], "Description": "Get a camera characteristics field value. The field definitions can be found in @B_android#hardware#camera2#CameraCharacteristics_E@. Querying the value for the same key more than once will return a value which is equal to the previous queried value.", "history": "Added in API level 21", "FullName": "public T get (Key<T> key)"}, "getRecommendedStreamConfigurationMap(int)": {"Returns": [["@B_android#hardware#camera2#params#RecommendedStreamConfigurationMap_E@", "Valid @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap_E@ or null in case the camera device doesn't have any recommendation for this use case or the recommended configurations are invalid."]], "Parameters": [["int", "int: Use case id. Value is @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap#USECASE_PREVIEW_E@, @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap#USECASE_RECORD_E@, @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap#USECASE_VIDEO_SNAPSHOT_E@, @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap#USECASE_SNAPSHOT_E@, @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap#USECASE_ZSL_E@, @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap#USECASE_RAW_E@, or @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap#USECASE_LOW_LATENCY_SNAPSHOT_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "In case the use case argument is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve camera device recommended stream configuration map @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap_E@ for a given use case. The stream configurations advertised here are efficient in terms of power and performance for common use cases like preview, video, snapshot, etc. The recommended maps are usually only small subsets of the exhaustive list provided in @B_android#hardware#camera2#CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP_E@ and suggested for a particular use case by the camera device implementation. For further information about the expected configurations in various scenarios please refer to: @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap#USECASE_PREVIEW_E@ @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap#USECASE_RECORD_E@ @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap#USECASE_VIDEO_SNAPSHOT_E@ @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap#USECASE_SNAPSHOT_E@ @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap#USECASE_RAW_E@ @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap#USECASE_ZSL_E@ @B_android#hardware#camera2#params#RecommendedStreamConfigurationMap#USECASE_LOW_LATENCY_SNAPSHOT_E@ For example on how this can be used by camera clients to find out the maximum recommended preview and snapshot resolution, consider the following pseudo-code: Similar logic can be used for other use cases as well. Support for recommended stream configurations is optional. In case there a no suggested configurations for the particular use case, please refer to @B_android#hardware#camera2#CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP_E@ for the exhaustive available list.", "history": "Added in API level 29", "FullName": "public RecommendedStreamConfigurationMap getRecommendedStreamConfigurationMap (int usecase)"}, "getKeys()": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of the keys contained in this map. The list returned is not modifiable, so any attempts to modify it will throw a UnsupportedOperationException. All values retrieved by a key from this list with #get are guaranteed to be non-null. Each key is only listed once in the list. The order of the keys is undefined.", "history": "Added in API level 21", "FullName": "public List<Key<?>> getKeys ()"}, "getKeysNeedingPermission()": {"Returns": [["@B_java#util#List_E@", "List of camera characteristic keys that require the @B_android#Manifest#permission#CAMERA_E@ permission. The list can be empty in case there are no currently present keys that need additional permission."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CAMERA_E@"], "Description": "Returns a subset of the list returned by @B_android#hardware#camera2#CameraCharacteristics#getKeys_E@ with all keys that require camera clients to obtain the @B_android#Manifest#permission#CAMERA_E@ permission. If an application calls @B_android#hardware#camera2#CameraManager#getCameraCharacteristics_E@ without holding the @B_android#Manifest#permission#CAMERA_E@ permission, all keys in this list will not be available, and calling @B_android#hardware#camera2#CameraCharacteristics#get_E@ will return null for those keys. If the application obtains the @B_android#Manifest#permission#CAMERA_E@ permission, then the CameraCharacteristics from a call to a subsequent @B_android#hardware#camera2#CameraManager#getCameraCharacteristics_E@ will have the keys available. The list returned is not modifiable, so any attempts to modify it will throw a UnsupportedOperationException. Each key is only listed once in the list. The order of the keys is undefined.", "history": "Added in API level 29", "FullName": "public List<Key<?>> getKeysNeedingPermission ()"}}, "Inheritance": ["@B_android#hardware#camera2#CameraMetadata_E@"], "ClassName": "android.hardware.camera2.CameraCharacteristics", "ClassDesc": "The properties describing a @B_android#hardware#camera2#CameraDevice_E@. These properties are fixed for a given CameraDevice, and can be queried through the @B_android#hardware#camera2#CameraManager_E@ interface with @B_android#hardware#camera2#CameraManager#getCameraCharacteristics_E@. @B_android#hardware#camera2#CameraCharacteristics_E@ objects are immutable."}