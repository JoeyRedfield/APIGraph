{"Functions": {"bindAppWidgetIdIfAllowed(int,android.content.ComponentName,android.os.Bundle)": {"Returns": [["boolean", "true if this component has permission to bind the AppWidget"]], "Parameters": [["int", "int: The AppWidget id under which to bind the provider."], ["@B_android#content#ComponentName_E@", "ComponentName: The @B_android#content#BroadcastReceiver_E@ that will be the AppWidget provider for this AppWidget."], ["@B_android#os#Bundle_E@", "Bundle: Bundle containing options for the AppWidget. See also @B_android#appwidget#AppWidgetManager#updateAppWidgetOptions_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the component for a given appWidgetId. You need the BIND_APPWIDGET permission or the user must have enabled binding widgets always for your component. Should be used by apps that host widgets; if this method returns false, call @B_android#appwidget#AppWidgetManager#ACTION_APPWIDGET_BIND_E@ to request permission to bind", "history": "Added in API level 17", "FullName": "public boolean bindAppWidgetIdIfAllowed (int appWidgetId, ComponentName provider, Bundle options)"}, "getInstance(android.content.Context)": {"Returns": [["@B_android#appwidget#AppWidgetManager_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the AppWidgetManager instance to use for the supplied @B_android#content#Context_E@ object.", "history": "Added in API level 3", "FullName": "public static AppWidgetManager getInstance (Context context)"}, "updateAppWidget(android.content.ComponentName,android.widget.RemoteViews)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The @B_android#content#ComponentName_E@ for the @B_android#content#BroadcastReceiver_E@ provider for your AppWidget."], ["@B_android#widget#RemoteViews_E@", "RemoteViews: The RemoteViews object to show."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the RemoteViews to use for all AppWidget instances for the supplied AppWidget provider. It is okay to call this method both inside an @B_android#appwidget#AppWidgetManager#ACTION_APPWIDGET_UPDATE_E@ broadcast, and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider.", "history": "Added in API level 3", "FullName": "public void updateAppWidget (ComponentName provider, RemoteViews views)"}, "notifyAppWidgetViewDataChanged(int[],int)": {"Returns": [], "Parameters": [["int[]", "int: The AppWidget instances to notify of view data changes."], ["int", "int: The collection view id."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies the specified collection view in all the specified AppWidget instances to invalidate their data.", "history": "Added in API level 11", "FullName": "public void notifyAppWidgetViewDataChanged (int[] appWidgetIds, int viewId)"}, "updateAppWidget(int[],android.widget.RemoteViews)": {"Returns": [], "Parameters": [["int[]", "int: The AppWidget instances for which to set the RemoteViews."], ["@B_android#widget#RemoteViews_E@", "RemoteViews: The RemoteViews object to show."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the RemoteViews to use for the specified appWidgetIds. Note that the RemoteViews parameter will be cached by the AppWidgetService, and hence should contain a complete representation of the widget. For performing partial widget updates, see @B_android#appwidget#AppWidgetManager#partiallyUpdateAppWidget_E@. It is okay to call this method both inside an @B_android#appwidget#AppWidgetManager#ACTION_APPWIDGET_UPDATE_E@ broadcast, and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider. The total Bitmap memory used by the RemoteViews object cannot exceed that required to fill the screen 1.5 times, ie. (screen width x screen height x 4 x 1.5) bytes.", "history": "Added in API level 3", "FullName": "public void updateAppWidget (int[] appWidgetIds, RemoteViews views)"}, "updateAppWidgetOptions(int,android.os.Bundle)": {"Returns": [], "Parameters": [["int", "int: The AppWidget instances for which to set the RemoteViews."], ["@B_android#os#Bundle_E@", "Bundle: The options to associate with this widget"]], "Throws": [], "SeeAlso": ["@B_android#appwidget#AppWidgetManager#getAppWidgetOptions_E@"], "Permissions": [], "Description": "Update the extras for a given widget instance. The extras can be used to embed additional information about this widget to be accessed by the associated widget's AppWidgetProvider.", "history": "Added in API level 16", "FullName": "public void updateAppWidgetOptions (int appWidgetId, Bundle options)"}, "bindAppWidgetIdIfAllowed(int,android.os.UserHandle,android.content.ComponentName,android.os.Bundle)": {"Returns": [["boolean", "true if this component has permission to bind the AppWidget"]], "Parameters": [["int", "int: The AppWidget id under which to bind the provider."], ["@B_android#os#UserHandle_E@", "UserHandle: The user id in which the provider resides."], ["@B_android#content#ComponentName_E@", "ComponentName: The component name of the provider."], ["@B_android#os#Bundle_E@", "Bundle: An optional Bundle containing options for the AppWidget."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BIND_APPWIDGET_E@"], "Description": "Set the provider for a given appWidgetId if the caller has a permission. @B_android#Manifest#permission#BIND_APPWIDGET_E@ permission or the user must have enabled binding widgets always for your component. Should be used by apps that host widgets. If this method returns false, call @B_android#appwidget#AppWidgetManager#ACTION_APPWIDGET_BIND_E@ to request permission to bind.", "history": "Added in API level 21", "FullName": "public boolean bindAppWidgetIdIfAllowed (int appWidgetId, UserHandle user, ComponentName provider, Bundle options)"}, "updateAppWidget(int[], android.widget.RemoteViews)": {"Returns": [], "Parameters": [["int[]", "int: The AppWidget instances for which to set the RemoteViews."], ["@B_android#widget#RemoteViews_E@", "RemoteViews: The RemoteViews object to show."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the RemoteViews to use for the specified appWidgetIds. Note that the RemoteViews parameter will be cached by the AppWidgetService, and hence should contain a complete representation of the widget. For performing partial widget updates, see @B_android#appwidget#AppWidgetManager#partiallyUpdateAppWidget_E@. It is okay to call this method both inside an @B_android#appwidget#AppWidgetManager#ACTION_APPWIDGET_UPDATE_E@ broadcast, and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider. The total Bitmap memory used by the RemoteViews object cannot exceed that required to fill the screen 1.5 times, ie. (screen width x screen height x 4 x 1.5) bytes.", "history": "added in API level 3", "FullName": "public void updateAppWidget (int[] appWidgetIds, RemoteViews views)"}, "updateAppWidgetOptions(int, android.os.Bundle)": {"Returns": [], "Parameters": [["int", "int: The AppWidget instances for which to set the RemoteViews."], ["@B_android#os#Bundle_E@", "Bundle: The options to associate with this widget"]], "Throws": [], "SeeAlso": ["@B_android#appwidget#AppWidgetManager#getAppWidgetOptions_E@"], "Permissions": [], "Description": "Update the extras for a given widget instance. The extras can be used to embed additional information about this widget to be accessed by the associated widget's AppWidgetProvider.", "history": "added in API level 16", "FullName": "public void updateAppWidgetOptions (int appWidgetId, Bundle options)"}, "updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: @B_android#content#ComponentName_E@ for the @B_android#content#BroadcastReceiver_E@ provider for your AppWidget."], ["@B_java#lang#String_E@", "String: key for the meta-data tag pointing to the new provider info. Use null to reset any previously set info. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the info for the supplied AppWidget provider. Apps can use this to change the default behavior of the widget based on the state of the app (for e.g., if the user is logged in or not). Calling this API completely replaces the previous definition. The manifest entry of the provider should contain an additional meta-data tag similar to @B_android#appwidget#AppWidgetManager#META_DATA_APPWIDGET_PROVIDER_E@ which should point to any alternative definitions for the provider. This is persisted across device reboots and app updates. If this meta-data key is not present in the manifest entry, the info reverts to default.", "history": "Added in API level 28", "FullName": "public void updateAppWidgetProviderInfo (ComponentName provider, String metaDataKey)"}, "isRequestPinAppWidgetSupported()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return TRUE if the default launcher supports @B_android#appwidget#AppWidgetManager#requestPinAppWidget_E@", "history": "Added in API level 26", "FullName": "public boolean isRequestPinAppWidgetSupported ()"}, "getAppWidgetOptions(int)": {"Returns": [["@B_android#os#Bundle_E@", "The options associated with the given widget instance."]], "Parameters": [["int", "int: The AppWidget instances for which to set the RemoteViews."]], "Throws": [], "SeeAlso": ["@B_android#appwidget#AppWidgetManager#updateAppWidgetOptions_E@"], "Permissions": [], "Description": "Get the extras associated with a given widget instance. The extras can be used to embed additional information about this widget to be accessed by the associated widget's AppWidgetProvider.", "history": "Added in API level 16", "FullName": "public Bundle getAppWidgetOptions (int appWidgetId)"}, "notifyAppWidgetViewDataChanged(int[], int)": {"Returns": [], "Parameters": [["int[]", "int: The AppWidget instances to notify of view data changes."], ["int", "int: The collection view id."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies the specified collection view in all the specified AppWidget instances to invalidate their data.", "history": "added in API level 11", "FullName": "public void notifyAppWidgetViewDataChanged (int[] appWidgetIds, int viewId)"}, "partiallyUpdateAppWidget(int[],android.widget.RemoteViews)": {"Returns": [], "Parameters": [["int[]", "int: The AppWidget instances for which to set the RemoteViews."], ["@B_android#widget#RemoteViews_E@", "RemoteViews: The RemoteViews object containing the incremental update / command."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform an incremental update or command on the widget(s) specified by appWidgetIds. This update differs from @B_android#appwidget#AppWidgetManager#updateAppWidget_E@ in that the RemoteViews object which is passed is understood to be an incomplete representation of the widget, and hence does not replace the cached representation of the widget. As of API level 17, the new properties set within the views objects will be appended to the cached representation of the widget, and hence will persist. Use with @B_android#widget#RemoteViews#showNext_E@, @B_android#widget#RemoteViews#showPrevious_E@, @B_android#widget#RemoteViews#setScrollPosition_E@ and similar commands. It is okay to call this method both inside an @B_android#appwidget#AppWidgetManager#ACTION_APPWIDGET_UPDATE_E@ broadcast, and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider. This method will be ignored if a widget has not received a full update via @B_android#appwidget#AppWidgetManager#updateAppWidget_E@.", "history": "Added in API level 11", "FullName": "public void partiallyUpdateAppWidget (int[] appWidgetIds, RemoteViews views)"}, "updateAppWidget(int,android.widget.RemoteViews)": {"Returns": [], "Parameters": [["int", "int: The AppWidget instance for which to set the RemoteViews."], ["@B_android#widget#RemoteViews_E@", "RemoteViews: The RemoteViews object to show."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the RemoteViews to use for the specified appWidgetId. Note that the RemoteViews parameter will be cached by the AppWidgetService, and hence should contain a complete representation of the widget. For performing partial widget updates, see @B_android#appwidget#AppWidgetManager#partiallyUpdateAppWidget_E@. It is okay to call this method both inside an @B_android#appwidget#AppWidgetManager#ACTION_APPWIDGET_UPDATE_E@ broadcast, and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider. The total Bitmap memory used by the RemoteViews object cannot exceed that required to fill the screen 1.5 times, ie. (screen width x screen height x 4 x 1.5) bytes.", "history": "Added in API level 3", "FullName": "public void updateAppWidget (int appWidgetId, RemoteViews views)"}, "getAppWidgetInfo(int)": {"Returns": [["@B_android#appwidget#AppWidgetProviderInfo_E@", "A appWidgetId. If the appWidgetId has not been bound to a provider yet, or you don't have access to that appWidgetId, null is returned."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the available info about the AppWidget.", "history": "Added in API level 3", "FullName": "public AppWidgetProviderInfo getAppWidgetInfo (int appWidgetId)"}, "bindAppWidgetIdIfAllowed(int,android.content.ComponentName)": {"Returns": [["boolean", "true if this component has permission to bind the AppWidget"]], "Parameters": [["int", "int: The AppWidget id under which to bind the provider."], ["@B_android#content#ComponentName_E@", "ComponentName: The @B_android#content#BroadcastReceiver_E@ that will be the AppWidget provider for this AppWidget."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the component for a given appWidgetId. You need the BIND_APPWIDGET permission or the user must have enabled binding widgets always for your component. Should be used by apps that host widgets; if this method returns false, call @B_android#appwidget#AppWidgetManager#ACTION_APPWIDGET_BIND_E@ to request permission to bind", "history": "Added in API level 16", "FullName": "public boolean bindAppWidgetIdIfAllowed (int appWidgetId, ComponentName provider)"}, "notifyAppWidgetViewDataChanged(int,int)": {"Returns": [], "Parameters": [["int", "int: The AppWidget instance to notify of view data changes."], ["int", "int: The collection view id."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies the specified collection view in the specified AppWidget instance to invalidate its data.", "history": "Added in API level 11", "FullName": "public void notifyAppWidgetViewDataChanged (int appWidgetId, int viewId)"}, "getInstalledProvidersForProfile(android.os.UserHandle)": {"Returns": [["@B_java#util#List_E@", "The installed providers, or an empty list if none are found for the given user."]], "Parameters": [["@B_android#os#UserHandle_E@", "UserHandle: The profile for which to get providers. Passing null is equivalent to querying for only the calling user. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#os#Process#myUserHandle_E@", "@B_android#os#UserManager#getUserProfiles_E@"], "Permissions": [], "Description": "Gets the AppWidget providers for the given user profile. User profile can only be the current user or a profile of the current user. For example, the current user may have a corporate profile. In this case the parent user profile has a child profile, the corporate one.", "history": "Added in API level 21", "FullName": "public List<AppWidgetProviderInfo> getInstalledProvidersForProfile (UserHandle profile)"}, "updateAppWidget(int, android.widget.RemoteViews)": {"Returns": [], "Parameters": [["int", "int: The AppWidget instance for which to set the RemoteViews."], ["@B_android#widget#RemoteViews_E@", "RemoteViews: The RemoteViews object to show."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the RemoteViews to use for the specified appWidgetId. Note that the RemoteViews parameter will be cached by the AppWidgetService, and hence should contain a complete representation of the widget. For performing partial widget updates, see @B_android#appwidget#AppWidgetManager#partiallyUpdateAppWidget_E@. It is okay to call this method both inside an @B_android#appwidget#AppWidgetManager#ACTION_APPWIDGET_UPDATE_E@ broadcast, and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider. The total Bitmap memory used by the RemoteViews object cannot exceed that required to fill the screen 1.5 times, ie. (screen width x screen height x 4 x 1.5) bytes.", "history": "added in API level 3", "FullName": "public void updateAppWidget (int appWidgetId, RemoteViews views)"}, "partiallyUpdateAppWidget(int,android.widget.RemoteViews)": {"Returns": [], "Parameters": [["int", "int: The AppWidget instance for which to set the RemoteViews."], ["@B_android#widget#RemoteViews_E@", "RemoteViews: The RemoteViews object containing the incremental update / command."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform an incremental update or command on the widget specified by appWidgetId. This update differs from @B_android#appwidget#AppWidgetManager#updateAppWidget_E@ in that the RemoteViews object which is passed is understood to be an incomplete representation of the widget, and hence is not cached by the AppWidgetService. Note that because these updates are not cached, any state that they modify that is not restored by restoreInstanceState will not persist in the case that the widgets are restored using the cached version in AppWidgetService. Use with @B_android#widget#RemoteViews#showNext_E@, @B_android#widget#RemoteViews#showPrevious_E@, @B_android#widget#RemoteViews#setScrollPosition_E@ and similar commands. It is okay to call this method both inside an @B_android#appwidget#AppWidgetManager#ACTION_APPWIDGET_UPDATE_E@ broadcast, and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider. This method will be ignored if a widget has not received a full update via @B_android#appwidget#AppWidgetManager#updateAppWidget_E@.", "history": "Added in API level 11", "FullName": "public void partiallyUpdateAppWidget (int appWidgetId, RemoteViews views)"}, "requestPinAppWidget(android.content.ComponentName,android.os.Bundle,android.app.PendingIntent)": {"Returns": [["boolean", "TRUE if the launcher supports this feature. Note the API will return without waiting for the user to respond, so getting TRUE from this API does *not* mean the shortcut is pinned. FALSE if the launcher doesn't support this feature."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The @B_android#content#ComponentName_E@ for the @B_android#content#BroadcastReceiver_E@ provider for your AppWidget. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: In not null, this is passed to the launcher app. For eg @B_android#appwidget#AppWidgetManager#EXTRA_APPWIDGET_PREVIEW_E@ can be used for a custom preview. This value may be null."], ["@B_android#app#PendingIntent_E@", "PendingIntent: If not null, this intent will be sent when the widget is created. This value may be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "The caller doesn't have a foreground activity or a foreground service or when the user is locked."]], "SeeAlso": ["@B_android#content#pm#ShortcutManager#isRequestPinShortcutSupported_E@", "@B_android#content#pm#ShortcutManager#requestPinShortcut_E@", "@B_android#appwidget#AppWidgetManager#isRequestPinAppWidgetSupported_E@"], "Permissions": [], "Description": "Request to pin an app widget on the current launcher. It's up to the launcher to accept this request (optionally showing a user confirmation). If the request is accepted, the caller will get a confirmation with extra @B_android#appwidget#AppWidgetManager#EXTRA_APPWIDGET_ID_E@. When a request is denied by the user, the caller app will not get any response. Only apps with a foreground activity or a foreground service can call it. Otherwise it'll throw @B_java#lang#IllegalStateException_E@. It's up to the launcher how to handle previous pending requests when the same package calls this API multiple times in a row. It may ignore the previous requests, for example. Launcher will not show the configuration activity associated with the provider in this case. The app could either show the configuration activity as a response to the callback, or show if before calling the API (various configurations can be encapsulated in successCallback to avoid persisting them before the widgetId is known).", "history": "Added in API level 26", "FullName": "public boolean requestPinAppWidget (ComponentName provider, Bundle extras, PendingIntent successCallback)"}, "getInstalledProviders()": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a list of the AppWidget providers that are currently installed.", "history": "Added in API level 3", "FullName": "public List<AppWidgetProviderInfo> getInstalledProviders ()"}, "getAppWidgetIds(android.content.ComponentName)": {"Returns": [["int[]", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The @B_android#content#BroadcastReceiver_E@ that is the AppWidget provider to find appWidgetIds for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the list of appWidgetIds that have been bound to the given AppWidget provider.", "history": "Added in API level 3", "FullName": "public int[] getAppWidgetIds (ComponentName provider)"}, "notifyAppWidgetViewDataChanged(int, int)": {"Returns": [], "Parameters": [["int", "int: The AppWidget instance to notify of view data changes."], ["int", "int: The collection view id."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies the specified collection view in the specified AppWidget instance to invalidate its data.", "history": "added in API level 11", "FullName": "public void notifyAppWidgetViewDataChanged (int appWidgetId, int viewId)"}, "getInstalledProvidersForPackage(java.lang.String,android.os.UserHandle)": {"Returns": [["@B_java#util#List_E@", "The installed providers, or an empty list if none are found for the given package and user."]], "Parameters": [["@B_java#lang#String_E@", "String: The package for which to get providers. If null, this method is equivalent to @B_android#appwidget#AppWidgetManager#getInstalledProvidersForProfile_E@. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The profile for which to get providers. Passing null is equivalent to querying for only the calling user. This value may be null."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the provided package name is null"]], "SeeAlso": ["@B_android#os#Process#myUserHandle_E@", "@B_android#os#UserManager#getUserProfiles_E@"], "Permissions": [], "Description": "Gets the AppWidget providers for the given package and user profile. User profile can only be the current user or a profile of the current user. For example, the current user may have a corporate profile. In this case the parent user profile has a child profile, the corporate one.", "history": "Added in API level 26", "FullName": "public List<AppWidgetProviderInfo> getInstalledProvidersForPackage (String packageName, UserHandle profile)"}}, "Inheritance": [], "ClassName": "android.appwidget.AppWidgetManager", "ClassDesc": "Updates AppWidget state; gets information about installed AppWidget providers and other AppWidget related state. Requires the @B_android#content#pm#PackageManager#FEATURE_APP_WIDGETS_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@."}