{"Functions": {"getStatus()": {"Returns": [["int", "The status of ranging measurement: @B_android#net#wifi#rtt#RangingResult#STATUS_SUCCESS_E@ in case of success, and @B_android#net#wifi#rtt#RangingResult#STATUS_FAIL_E@ in case of failure. Value is @B_android#net#wifi#rtt#RangingResult#STATUS_SUCCESS_E@, @B_android#net#wifi#rtt#RangingResult#STATUS_FAIL_E@, or @B_android#net#wifi#rtt#RangingResult#STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MC_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public int getStatus ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 28", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getNumAttemptedMeasurements()": {"Returns": [["int", "The number of attempted measurements used in the RTT exchange resulting in this set of results. The number of successful measurements is returned by @B_android#net#wifi#rtt#RangingResult#getNumSuccessfulMeasurements_E@ which at most, if there are no errors, will be 1 less that the number of attempted measurements. Only valid if getStatus() returns STATUS_SUCCESS, otherwise will throw an exception."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public int getNumAttemptedMeasurements ()"}, "getNumSuccessfulMeasurements()": {"Returns": [["int", "The number of successful measurements used to calculate the distance and standard deviation. If the number of successful measurements if 1 then then standard deviation, returned by @B_android#net#wifi#rtt#RangingResult#getDistanceStdDevMm_E@, is not valid (a 0 is returned for the standard deviation). The total number of measurement attempts is returned by getNumAttemptedMeasurements(). The number of successful measurements will be at most 1 less then the number of attempted measurements. Only valid if getStatus() returns STATUS_SUCCESS, otherwise will throw an exception."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public int getNumSuccessfulMeasurements ()"}, "getDistanceStdDevMm()": {"Returns": [["int", "The standard deviation of the measured distance (in mm) to the device specified by @B_android#net#wifi#rtt#RangingResult#getMacAddress_E@ or @B_android#net#wifi#rtt#RangingResult#getPeerHandle_E@. The standard deviation is calculated over the measurements executed in a single RTT burst. The number of measurements is returned by @B_android#net#wifi#rtt#RangingResult#getNumSuccessfulMeasurements_E@ - 0 successful measurements indicate that the standard deviation is not valid (a valid standard deviation requires at least 2 data points). Only valid if getStatus() returns STATUS_SUCCESS, otherwise will throw an exception."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public int getDistanceStdDevMm ()"}, "getRssi()": {"Returns": [["int", "The average RSSI, in units of dBm, observed during the RTT measurement. Only valid if getStatus() returns STATUS_SUCCESS, otherwise will throw an exception."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public int getRssi ()"}, "getMacAddress()": {"Returns": [["@B_android#net#MacAddress_E@", "The MAC address of the device whose range measurement was requested. Will correspond to the MAC address of the device in the @B_android#net#wifi#rtt#RangingRequest_E@. Will return a null for results corresponding to requests issued using a PeerHandle, i.e. using the RangingRequest.Builder#addWifiAwarePeer(PeerHandle) API."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public MacAddress getMacAddress ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 28", "FullName": "public int describeContents ()"}, "getRangingTimestampMillis()": {"Returns": [["long", "The timestamp at which the ranging operation was performed. The timestamp is in milliseconds since boot, including time spent in sleep, corresponding to values provided by @B_android#os#SystemClock#elapsedRealtime_E@. Only valid if getStatus() returns STATUS_SUCCESS, otherwise will throw an exception."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public long getRangingTimestampMillis ()"}, "getPeerHandle()": {"Returns": [["@B_android#net#wifi#aware#PeerHandle_E@", "The PeerHandle of the device whose reange measurement was requested. Will correspond to the PeerHandle of the devices requested using @B_android#net#wifi#rtt#RangingRequest#Builder#addWifiAwarePeer_E@. Will return a null for results corresponding to requests issued using a MAC address."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public PeerHandle getPeerHandle ()"}, "getDistanceMm()": {"Returns": [["int", "The distance (in mm) to the device specified by @B_android#net#wifi#rtt#RangingResult#getMacAddress_E@ or @B_android#net#wifi#rtt#RangingResult#getPeerHandle_E@. Note: the measured distance may be negative for very close devices. Only valid if getStatus() returns STATUS_SUCCESS, otherwise will throw an exception."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public int getDistanceMm ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 28", "FullName": "public boolean equals (Object o)"}, "getUnverifiedResponderLocation()": {"Returns": [["@B_android#net#wifi#rtt#ResponderLocation_E@", "The unverified responder location represented as @B_android#net#wifi#rtt#ResponderLocation_E@ which captures location information the responder is programmed to broadcast. The responder location is referred to as unverified, because we are relying on the device/site administrator to correctly configure its location data. Will return a null when the location information cannot be parsed. Only valid if getStatus() returns STATUS_SUCCESS, otherwise will throw an exception."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public ResponderLocation getUnverifiedResponderLocation ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 28", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 28", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.net.wifi.rtt.RangingResult", "ClassDesc": "Ranging result for a request started by @B_android#net#wifi#rtt#WifiRttManager#startRanging_E@. Results are returned in @B_android#net#wifi#rtt#RangingResultCallback#onRangingResults_E@. A ranging result is the distance measurement result for a single device specified in the @B_android#net#wifi#rtt#RangingRequest_E@."}