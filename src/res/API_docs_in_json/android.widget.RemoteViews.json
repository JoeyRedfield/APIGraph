{"Functions": {"getLayoutId()": {"Returns": [["int", "the layout id."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the layout id of the root layout associated with this RemoteViews. In the case that the RemoteViews has both a landscape and portrait root, this will return the layout id associated with the portrait layout.", "history": "Added in API level 1", "FullName": "public int getLayoutId ()"}, "setEmptyView(int, int)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to set the empty view"], ["int", "int: The view id of the empty view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#AdapterView#setEmptyView_E@", "history": "added in API level 11", "FullName": "public void setEmptyView (int viewId, int emptyViewId)"}, "apply(android.content.Context,android.view.ViewGroup)": {"Returns": [["@B_android#view#View_E@", "The inflated view hierarchy"]], "Parameters": [["@B_android#content#Context_E@", "Context: Default context to use"], ["@B_android#view#ViewGroup_E@", "ViewGroup: Parent that the resulting view hierarchy will be attached to. This method does not attach the hierarchy. The caller should do so when appropriate."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflates the view hierarchy represented by this object and applies all of the actions.", "history": "Added in API level 1", "FullName": "public View apply (Context context, ViewGroup parent)"}, "setAccessibilityTraversalBefore(int, int)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose before view in accessibility traversal to set."], ["int", "int: The id of the next in the accessibility traversal."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#view#View#setAccessibilityTraversalBefore_E@.", "history": "added in API level 22", "FullName": "public void setAccessibilityTraversalBefore (int viewId, int nextId)"}, "setImageViewResource(int,int)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose drawable should change"], ["int", "int: The new resource id for the drawable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#ImageView#setImageResource_E@", "history": "Added in API level 1", "FullName": "public void setImageViewResource (int viewId, int srcId)"}, "setBoolean(int, java.lang.String, boolean)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["boolean", "boolean: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one boolean on a view in the layout for this RemoteViews.", "history": "added in API level 3", "FullName": "public void setBoolean (int viewId, String methodName, boolean value)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "setByte(int, java.lang.String, byte)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["byte", "byte: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one byte on a view in the layout for this RemoteViews.", "history": "added in API level 3", "FullName": "public void setByte (int viewId, String methodName, byte value)"}, "showPrevious(int)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call @B_android#widget#AdapterViewAnimator#showPrevious_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#AdapterViewAnimator#showPrevious_E@", "history": "Added in API level 11", "FullName": "public void showPrevious (int viewId)"}, "addView(int,android.widget.RemoteViews)": {"Returns": [], "Parameters": [["int", "int: The id of the parent @B_android#view#ViewGroup_E@ to add child into."], ["@B_android#widget#RemoteViews_E@", "RemoteViews: @B_android#widget#RemoteViews_E@ that describes the child."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#view#ViewGroup#addView_E@ after inflating the given @B_android#widget#RemoteViews_E@. This allows users to build \"nested\" @B_android#widget#RemoteViews_E@. In cases where consumers of @B_android#widget#RemoteViews_E@ may recycle layouts, use @B_android#widget#RemoteViews#removeAllViews_E@ to clear any existing children.", "history": "Added in API level 7", "FullName": "public void addView (int viewId, RemoteViews nestedView)"}, "setProgressBar(int,int,int,boolean)": {"Returns": [], "Parameters": [["int", "int: The id of the @B_android#widget#ProgressBar_E@ to change"], ["int", "int: The 100% value for the progress bar"], ["int", "int: The current value of the progress bar."], ["boolean", "boolean: True if the progress bar is indeterminate, false if not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#ProgressBar#setMax_E@, @B_android#widget#ProgressBar#setProgress_E@, and @B_android#widget#ProgressBar#setIndeterminate_E@ If indeterminate is true, then the values for max and progress are ignored.", "history": "Added in API level 1", "FullName": "public void setProgressBar (int viewId, int max, int progress, boolean indeterminate)"}, "setLabelFor(int,int)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose property to set."], ["int", "int: The id of a view for which this view serves as a label."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#view#View#setLabelFor_E@.", "history": "Added in API level 17", "FullName": "public void setLabelFor (int viewId, int labeledId)"}, "setBundle(int,java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["@B_android#os#Bundle_E@", "Bundle: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one Bundle on a view in the layout for this RemoteViews.", "history": "Added in API level 8", "FullName": "public void setBundle (int viewId, String methodName, Bundle value)"}, "setIcon(int,java.lang.String,android.graphics.drawable.Icon)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["@B_android#graphics#drawable#Icon_E@", "Icon: The @B_android#graphics#drawable#Icon_E@ to pass the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one Icon on a view in the layout for this RemoteViews.", "history": "Added in API level 23", "FullName": "public void setIcon (int viewId, String methodName, Icon value)"}, "setDouble(int, java.lang.String, double)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["double", "double: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one double on a view in the layout for this RemoteViews.", "history": "added in API level 3", "FullName": "public void setDouble (int viewId, String methodName, double value)"}, "setUri(int, java.lang.String, android.net.Uri)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["@B_android#net#Uri_E@", "Uri: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one Uri on a view in the layout for this RemoteViews.", "history": "added in API level 3", "FullName": "public void setUri (int viewId, String methodName, Uri value)"}, "setEmptyView(int,int)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to set the empty view"], ["int", "int: The view id of the empty view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#AdapterView#setEmptyView_E@", "history": "Added in API level 11", "FullName": "public void setEmptyView (int viewId, int emptyViewId)"}, "setViewPadding(int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: The id of the view to change"], ["int", "int: the left padding in pixels"], ["int", "int: the top padding in pixels"], ["int", "int: the right padding in pixels"], ["int", "int: the bottom padding in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#view#View#setPadding_E@.", "history": "added in API level 16", "FullName": "public void setViewPadding (int viewId, int left, int top, int right, int bottom)"}, "setRemoteAdapter(int,android.content.Intent)": {"Returns": [], "Parameters": [["int", "int: The id of the @B_android#widget#AdapterView_E@"], ["@B_android#content#Intent_E@", "Intent: The intent of the service which will be providing data to the RemoteViewsAdapter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#AbsListView#setRemoteViewsAdapter_E@. Can only be used for App Widgets.", "history": "Added in API level 14", "FullName": "public void setRemoteAdapter (int viewId, Intent intent)"}, "setBoolean(int,java.lang.String,boolean)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["boolean", "boolean: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one boolean on a view in the layout for this RemoteViews.", "history": "Added in API level 3", "FullName": "public void setBoolean (int viewId, String methodName, boolean value)"}, "RemoteViews(android.widget.RemoteViews,android.widget.RemoteViews)": {"Returns": [], "Parameters": [["@B_android#widget#RemoteViews_E@", "RemoteViews: The RemoteViews to inflate in landscape configuration"], ["@B_android#widget#RemoteViews_E@", "RemoteViews: The RemoteViews to inflate in portrait configuration"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new RemoteViews object that will inflate as the specified landspace or portrait RemoteViews, depending on the current configuration.", "history": "Added in API level 16", "FullName": "public RemoteViews (RemoteViews landscape, RemoteViews portrait)"}, "setImageViewUri(int,android.net.Uri)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose drawable should change"], ["@B_android#net#Uri_E@", "Uri: The Uri for the image"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#ImageView#setImageURI_E@", "history": "Added in API level 1", "FullName": "public void setImageViewUri (int viewId, Uri uri)"}, "setImageViewBitmap(int,android.graphics.Bitmap)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose bitmap should change"], ["@B_android#graphics#Bitmap_E@", "Bitmap: The new Bitmap for the drawable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#ImageView#setImageBitmap_E@", "history": "Added in API level 3", "FullName": "public void setImageViewBitmap (int viewId, Bitmap bitmap)"}, "RemoteViews(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Name of the package that contains the layout resource"], ["int", "int: The id of the layout resource"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new RemoteViews object that will display the views contained in the specified layout file.", "history": "added in API level 1", "FullName": "public RemoteViews (String packageName, int layoutId)"}, "setRelativeScrollPosition(int, int)": {"Returns": [], "Parameters": [["int", "int: The id of the view to change"], ["int", "int: Scroll by this adapter position offset"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#ListView#smoothScrollByOffset_E@.", "history": "added in API level 11", "FullName": "public void setRelativeScrollPosition (int viewId, int offset)"}, "setOnClickResponse(int,android.widget.RemoteViews.RemoteResponse)": {"Returns": [], "Parameters": [["int", "int: The id of the view that will trigger the @B_android#widget#RemoteViews#RemoteResponse_E@ when clicked"], ["@B_android#widget#RemoteViews#RemoteResponse_E@", "RemoteViews.RemoteResponse: The @B_android#widget#RemoteViews#RemoteResponse_E@ to send when user clicks This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent of calling @B_android#view#View#setOnClickListener_E@ to launch the provided @B_android#widget#RemoteViews#RemoteResponse_E@.", "history": "Added in API level 29", "FullName": "public void setOnClickResponse (int viewId, RemoteViews.RemoteResponse response)"}, "setTextViewCompoundDrawables(int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose text should change"], ["int", "int: The id of a drawable to place to the left of the text, or 0"], ["int", "int: The id of a drawable to place above the text, or 0"], ["int", "int: The id of a drawable to place to the right of the text, or 0"], ["int", "int: The id of a drawable to place below the text, or 0"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#TextView#setCompoundDrawablesWithIntrinsicBounds_E@.", "history": "Added in API level 16", "FullName": "public void setTextViewCompoundDrawables (int viewId, int left, int top, int right, int bottom)"}, "setChronometerCountDown(int, boolean)": {"Returns": [], "Parameters": [["int", "int: The id of the @B_android#widget#Chronometer_E@ to change"], ["boolean", "boolean: True if you want the chronometer to count down to base instead of counting up."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#Chronometer#setCountDown_E@ on the chronometer with the given viewId.", "history": "added in API level 24", "FullName": "public void setChronometerCountDown (int viewId, boolean isCountDown)"}, "setViewVisibility(int, int)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose visibility should change"], ["int", "int: The new visibility for the view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#view#View#setVisibility_E@", "history": "added in API level 1", "FullName": "public void setViewVisibility (int viewId, int visibility)"}, "setProgressBar(int, int, int, boolean)": {"Returns": [], "Parameters": [["int", "int: The id of the @B_android#widget#ProgressBar_E@ to change"], ["int", "int: The 100% value for the progress bar"], ["int", "int: The current value of the progress bar."], ["boolean", "boolean: True if the progress bar is indeterminate, false if not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#ProgressBar#setMax_E@, @B_android#widget#ProgressBar#setProgress_E@, and @B_android#widget#ProgressBar#setIndeterminate_E@ If indeterminate is true, then the values for max and progress are ignored.", "history": "added in API level 1", "FullName": "public void setProgressBar (int viewId, int max, int progress, boolean indeterminate)"}, "setChar(int, java.lang.String, char)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["char", "char: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one char on a view in the layout for this RemoteViews.", "history": "added in API level 3", "FullName": "public void setChar (int viewId, String methodName, char value)"}, "setCharSequence(int,java.lang.String,java.lang.CharSequence)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["@B_java#lang#CharSequence_E@", "CharSequence: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one CharSequence on a view in the layout for this RemoteViews.", "history": "Added in API level 3", "FullName": "public void setCharSequence (int viewId, String methodName, CharSequence value)"}, "setChronometerCountDown(int,boolean)": {"Returns": [], "Parameters": [["int", "int: The id of the @B_android#widget#Chronometer_E@ to change"], ["boolean", "boolean: True if you want the chronometer to count down to base instead of counting up."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#Chronometer#setCountDown_E@ on the chronometer with the given viewId.", "history": "Added in API level 24", "FullName": "public void setChronometerCountDown (int viewId, boolean isCountDown)"}, "setTextViewCompoundDrawablesRelative(int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose text should change"], ["int", "int: The id of a drawable to place before the text (relative to the layout direction), or 0"], ["int", "int: The id of a drawable to place above the text, or 0"], ["int", "int: The id of a drawable to place after the text, or 0"], ["int", "int: The id of a drawable to place below the text, or 0"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#TextView#setCompoundDrawablesRelativeWithIntrinsicBounds_E@.", "history": "Added in API level 16", "FullName": "public void setTextViewCompoundDrawablesRelative (int viewId, int start, int top, int end, int bottom)"}, "setDisplayedChild(int, int)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call @B_android#widget#AdapterViewAnimator#setDisplayedChild_E@"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#AdapterViewAnimator#setDisplayedChild_E@", "history": "added in API level 12", "FullName": "public void setDisplayedChild (int viewId, int childIndex)"}, "setContentDescription(int, java.lang.CharSequence)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose content description should change."], ["@B_java#lang#CharSequence_E@", "CharSequence: The new content description for the view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling View.setContentDescription(CharSequence).", "history": "added in API level 15", "FullName": "public void setContentDescription (int viewId, CharSequence contentDescription)"}, "setUri(int,java.lang.String,android.net.Uri)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["@B_android#net#Uri_E@", "Uri: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one Uri on a view in the layout for this RemoteViews.", "history": "Added in API level 3", "FullName": "public void setUri (int viewId, String methodName, Uri value)"}, "setIntent(int,java.lang.String,android.content.Intent)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["@B_android#content#Intent_E@", "Intent: The @B_android#content#Intent_E@ to pass the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one Intent on a view in the layout for this RemoteViews.", "history": "Added in API level 11", "FullName": "public void setIntent (int viewId, String methodName, Intent value)"}, "setRemoteAdapter(int, int, android.content.Intent)": {"Returns": [], "Parameters": [["int", "int: The id of the app widget which contains the specified view. (This parameter is ignored in this deprecated method)"], ["int", "int: The id of the @B_android#widget#AdapterView_E@"], ["@B_android#content#Intent_E@", "Intent: The intent of the service which will be providing data to the RemoteViewsAdapter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method has been deprecated. See @B_android#widget#RemoteViews#setRemoteAdapter_E@ Equivalent to calling @B_android#widget#AbsListView#setRemoteViewsAdapter_E@.", "history": "added in API level 11", "FullName": "public void setRemoteAdapter (int appWidgetId, int viewId, Intent intent)"}, "setTextColor(int,int)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose text color should change"], ["int", "int: Sets the text color for all the states (normal, selected, focused) to be this color."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#TextView#setTextColor_E@.", "history": "Added in API level 3", "FullName": "public void setTextColor (int viewId, int color)"}, "setOnClickPendingIntent(int,android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: The id of the view that will trigger the @B_android#app#PendingIntent_E@ when clicked"], ["@B_android#app#PendingIntent_E@", "PendingIntent: The @B_android#app#PendingIntent_E@ to send when user clicks"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#view#View#setOnClickListener_E@ to launch the provided @B_android#app#PendingIntent_E@. The source bounds (@B_android#content#Intent#getSourceBounds_E@) of the intent will be set to the bounds of the clicked view in screen space. Note that any activity options associated with the mPendingIntent may get overridden before starting the intent. When setting the on-click action of items within collections (eg. @B_android#widget#ListView_E@, @B_android#widget#StackView_E@ etc.), this method will not work. Instead, use @B_android#widget#RemoteViews#setPendingIntentTemplate_E@ in conjunction with @B_android#widget#RemoteViews#setOnClickFillInIntent_E@.", "history": "Added in API level 3", "FullName": "public void setOnClickPendingIntent (int viewId, PendingIntent pendingIntent)"}, "setFloat(int, java.lang.String, float)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["float", "float: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one float on a view in the layout for this RemoteViews.", "history": "added in API level 3", "FullName": "public void setFloat (int viewId, String methodName, float value)"}, "setLightBackgroundLayoutId(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides an alternate layout ID, which can be used to inflate this view. This layout will be used by the host when the widgets displayed on a light-background where foreground elements and text can safely draw using a dark color without any additional background protection.", "history": "Added in API level 29", "FullName": "public void setLightBackgroundLayoutId (int layoutId)"}, "setScrollPosition(int, int)": {"Returns": [], "Parameters": [["int", "int: The id of the view to change"], ["int", "int: Scroll to this adapter position"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#ListView#smoothScrollToPosition_E@.", "history": "added in API level 11", "FullName": "public void setScrollPosition (int viewId, int position)"}, "setString(int,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["@B_java#lang#String_E@", "String: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one String on a view in the layout for this RemoteViews.", "history": "Added in API level 3", "FullName": "public void setString (int viewId, String methodName, String value)"}, "setViewVisibility(int,int)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose visibility should change"], ["int", "int: The new visibility for the view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#view#View#setVisibility_E@", "history": "Added in API level 1", "FullName": "public void setViewVisibility (int viewId, int visibility)"}, "setChar(int,java.lang.String,char)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["char", "char: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one char on a view in the layout for this RemoteViews.", "history": "Added in API level 3", "FullName": "public void setChar (int viewId, String methodName, char value)"}, "showNext(int)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call @B_android#widget#AdapterViewAnimator#showNext_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#AdapterViewAnimator#showNext_E@", "history": "Added in API level 11", "FullName": "public void showNext (int viewId)"}, "setShort(int,java.lang.String,short)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["short", "short: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one short on a view in the layout for this RemoteViews.", "history": "Added in API level 3", "FullName": "public void setShort (int viewId, String methodName, short value)"}, "setTextViewTextSize(int,int,float)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose text size should change"], ["int", "int: The units of size (e.g. COMPLEX_UNIT_SP)"], ["float", "float: The size of the text"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#TextView#setTextSize_E@", "history": "Added in API level 16", "FullName": "public void setTextViewTextSize (int viewId, int units, float size)"}, "setBitmap(int,java.lang.String,android.graphics.Bitmap)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["@B_android#graphics#Bitmap_E@", "Bitmap: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one Bitmap on a view in the layout for this RemoteViews.", "history": "Added in API level 3", "FullName": "public void setBitmap (int viewId, String methodName, Bitmap value)"}, "setRemoteAdapter(int,int,android.content.Intent)": {"Returns": [], "Parameters": [["int", "int: The id of the app widget which contains the specified view. (This parameter is ignored in this deprecated method)"], ["int", "int: The id of the @B_android#widget#AdapterView_E@"], ["@B_android#content#Intent_E@", "Intent: The intent of the service which will be providing data to the RemoteViewsAdapter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method has been deprecated. See @B_android#widget#RemoteViews#setRemoteAdapter_E@ Equivalent to calling @B_android#widget#AbsListView#setRemoteViewsAdapter_E@.", "history": "Added in API level 11 Deprecated in API level 15", "FullName": "public void setRemoteAdapter (int appWidgetId, int viewId, Intent intent)"}, "setFloat(int,java.lang.String,float)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["float", "float: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one float on a view in the layout for this RemoteViews.", "history": "Added in API level 3", "FullName": "public void setFloat (int viewId, String methodName, float value)"}, "setShort(int, java.lang.String, short)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["short", "short: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one short on a view in the layout for this RemoteViews.", "history": "added in API level 3", "FullName": "public void setShort (int viewId, String methodName, short value)"}, "setTextViewText(int,java.lang.CharSequence)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose text should change"], ["@B_java#lang#CharSequence_E@", "CharSequence: The new text for the view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#TextView#setText_E@", "history": "Added in API level 1", "FullName": "public void setTextViewText (int viewId, CharSequence text)"}, "removeAllViews(int)": {"Returns": [], "Parameters": [["int", "int: The id of the parent @B_android#view#ViewGroup_E@ to remove all children from."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#view#ViewGroup#removeAllViews_E@.", "history": "Added in API level 7", "FullName": "public void removeAllViews (int viewId)"}, "setPendingIntentTemplate(int,android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: The id of the collection who's children will use this PendingIntent template when clicked"], ["@B_android#app#PendingIntent_E@", "PendingIntent: The @B_android#app#PendingIntent_E@ to be combined with extras specified by a child of viewId and executed when that child is clicked"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When using collections (eg. @B_android#widget#ListView_E@, @B_android#widget#StackView_E@ etc.) in widgets, it is very costly to set PendingIntents on the individual items, and is hence not permitted. Instead this method should be used to set a single PendingIntent template on the collection, and individual items can differentiate their on-click behavior using @B_android#widget#RemoteViews#setOnClickFillInIntent_E@.", "history": "Added in API level 11", "FullName": "public void setPendingIntentTemplate (int viewId, PendingIntent pendingIntentTemplate)"}, "getPackage()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public String getPackage ()"}, "setInt(int,java.lang.String,int)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["int", "int: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one int on a view in the layout for this RemoteViews.", "history": "Added in API level 3", "FullName": "public void setInt (int viewId, String methodName, int value)"}, "setByte(int,java.lang.String,byte)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["byte", "byte: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one byte on a view in the layout for this RemoteViews.", "history": "Added in API level 3", "FullName": "public void setByte (int viewId, String methodName, byte value)"}, "setLong(int,java.lang.String,long)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["long", "long: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one long on a view in the layout for this RemoteViews.", "history": "Added in API level 3", "FullName": "public void setLong (int viewId, String methodName, long value)"}, "setTextColor(int, int)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose text color should change"], ["int", "int: Sets the text color for all the states (normal, selected, focused) to be this color."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#TextView#setTextColor_E@.", "history": "added in API level 3", "FullName": "public void setTextColor (int viewId, int color)"}, "setChronometer(int,long,java.lang.String,boolean)": {"Returns": [], "Parameters": [["int", "int: The id of the @B_android#widget#Chronometer_E@ to change"], ["long", "long: The time at which the timer would have read 0:00. This time should be based off of @B_android#os#SystemClock#elapsedRealtime_E@."], ["@B_java#lang#String_E@", "String: The Chronometer format string, or null to simply display the timer value."], ["boolean", "boolean: True if you want the clock to be started, false if not."]], "Throws": [], "SeeAlso": ["@B_android#widget#RemoteViews#setChronometerCountDown_E@"], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#Chronometer#setBase_E@, @B_android#widget#Chronometer#setFormat_E@, and @B_android#widget#Chronometer#start_E@ or @B_android#widget#Chronometer#stop_E@.", "history": "Added in API level 1", "FullName": "public void setChronometer (int viewId, long base, String format, boolean started)"}, "setContentDescription(int,java.lang.CharSequence)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose content description should change."], ["@B_java#lang#CharSequence_E@", "CharSequence: The new content description for the view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling View.setContentDescription(CharSequence).", "history": "Added in API level 15", "FullName": "public void setContentDescription (int viewId, CharSequence contentDescription)"}, "RemoteViews(android.os.Parcel)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reads a RemoteViews object from a parcel.", "history": "Added in API level 1", "FullName": "public RemoteViews (Parcel parcel)"}, "setLong(int, java.lang.String, long)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["long", "long: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one long on a view in the layout for this RemoteViews.", "history": "added in API level 3", "FullName": "public void setLong (int viewId, String methodName, long value)"}, "setLabelFor(int, int)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose property to set."], ["int", "int: The id of a view for which this view serves as a label."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#view#View#setLabelFor_E@.", "history": "added in API level 17", "FullName": "public void setLabelFor (int viewId, int labeledId)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "setTextViewText(int, java.lang.CharSequence)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose text should change"], ["@B_java#lang#CharSequence_E@", "CharSequence: The new text for the view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#TextView#setText_E@", "history": "added in API level 1", "FullName": "public void setTextViewText (int viewId, CharSequence text)"}, "RemoteViews(android.widget.RemoteViews)": {"Returns": [], "Parameters": [["@B_android#widget#RemoteViews_E@", "RemoteViews no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a copy of another RemoteViews.", "history": "Added in API level 28", "FullName": "public RemoteViews (RemoteViews src)"}, "setTextViewTextSize(int, int, float)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose text size should change"], ["int", "int: The units of size (e.g. COMPLEX_UNIT_SP)"], ["float", "float: The size of the text"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#TextView#setTextSize_E@", "history": "added in API level 16", "FullName": "public void setTextViewTextSize (int viewId, int units, float size)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 1", "FullName": "public int describeContents ()"}, "setString(int, java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["@B_java#lang#String_E@", "String: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one String on a view in the layout for this RemoteViews.", "history": "added in API level 3", "FullName": "public void setString (int viewId, String methodName, String value)"}, "setDisplayedChild(int,int)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call @B_android#widget#AdapterViewAnimator#setDisplayedChild_E@"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#AdapterViewAnimator#setDisplayedChild_E@", "history": "Added in API level 12", "FullName": "public void setDisplayedChild (int viewId, int childIndex)"}, "setImageViewBitmap(int, android.graphics.Bitmap)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose bitmap should change"], ["@B_android#graphics#Bitmap_E@", "Bitmap: The new Bitmap for the drawable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#ImageView#setImageBitmap_E@", "history": "added in API level 3", "FullName": "public void setImageViewBitmap (int viewId, Bitmap bitmap)"}, "setViewPadding(int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: The id of the view to change"], ["int", "int: the left padding in pixels"], ["int", "int: the top padding in pixels"], ["int", "int: the right padding in pixels"], ["int", "int: the bottom padding in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#view#View#setPadding_E@.", "history": "Added in API level 16", "FullName": "public void setViewPadding (int viewId, int left, int top, int right, int bottom)"}, "setRemoteAdapter(int, android.content.Intent)": {"Returns": [], "Parameters": [["int", "int: The id of the @B_android#widget#AdapterView_E@"], ["@B_android#content#Intent_E@", "Intent: The intent of the service which will be providing data to the RemoteViewsAdapter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#AbsListView#setRemoteViewsAdapter_E@. Can only be used for App Widgets.", "history": "added in API level 14", "FullName": "public void setRemoteAdapter (int viewId, Intent intent)"}, "addView(int, android.widget.RemoteViews)": {"Returns": [], "Parameters": [["int", "int: The id of the parent @B_android#view#ViewGroup_E@ to add child into."], ["@B_android#widget#RemoteViews_E@", "RemoteViews: @B_android#widget#RemoteViews_E@ that describes the child."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#view#ViewGroup#addView_E@ after inflating the given @B_android#widget#RemoteViews_E@. This allows users to build \"nested\" @B_android#widget#RemoteViews_E@. In cases where consumers of @B_android#widget#RemoteViews_E@ may recycle layouts, use @B_android#widget#RemoteViews#removeAllViews_E@ to clear any existing children.", "history": "added in API level 7", "FullName": "public void addView (int viewId, RemoteViews nestedView)"}, "clone()": {"Returns": [["@B_android#widget#RemoteViews_E@", "a clone of this instance."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this is not the root of a RemoteView hierarchy"]], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#widget#RemoteViews#RemoteViews_E@ instead. Returns a deep copy of the RemoteViews object. The RemoteView may not be attached to another RemoteView -- it must be the root of a hierarchy.", "history": "Added in API level 1 Deprecated in API level 28", "FullName": "public RemoteViews clone ()"}, "RemoteViews(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Name of the package that contains the layout resource"], ["int", "int: The id of the layout resource"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new RemoteViews object that will display the views contained in the specified layout file.", "history": "Added in API level 1", "FullName": "public RemoteViews (String packageName, int layoutId)"}, "setScrollPosition(int,int)": {"Returns": [], "Parameters": [["int", "int: The id of the view to change"], ["int", "int: Scroll to this adapter position"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#ListView#smoothScrollToPosition_E@.", "history": "Added in API level 11", "FullName": "public void setScrollPosition (int viewId, int position)"}, "setInt(int, java.lang.String, int)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["int", "int: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one int on a view in the layout for this RemoteViews.", "history": "added in API level 3", "FullName": "public void setInt (int viewId, String methodName, int value)"}, "setDouble(int,java.lang.String,double)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to call the method."], ["@B_java#lang#String_E@", "String: The name of the method to call."], ["double", "double: The value to pass to the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call a method taking one double on a view in the layout for this RemoteViews.", "history": "Added in API level 3", "FullName": "public void setDouble (int viewId, String methodName, double value)"}, "setAccessibilityTraversalAfter(int, int)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose after view in accessibility traversal to set."], ["int", "int: The id of the next in the accessibility traversal."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#view#View#setAccessibilityTraversalAfter_E@.", "history": "added in API level 22", "FullName": "public void setAccessibilityTraversalAfter (int viewId, int nextId)"}, "onLoadClass(java.lang.Class)": {"Returns": [["boolean", "True if this class is allowed to be inflated, or false otherwise"]], "Parameters": [["@B_java#lang#Class_E@", "Class: The class object for the View that is about to be inflated"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook to allow clients of the LayoutInflater to restrict the set of Views that are allowed to be inflated.", "history": "Added in API level 1", "FullName": "public boolean onLoadClass (Class clazz)"}, "setImageViewIcon(int,android.graphics.drawable.Icon)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose bitmap should change"], ["@B_android#graphics#drawable#Icon_E@", "Icon: The new Icon for the ImageView"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#ImageView#setImageIcon_E@", "history": "Added in API level 23", "FullName": "public void setImageViewIcon (int viewId, Icon icon)"}, "setRelativeScrollPosition(int,int)": {"Returns": [], "Parameters": [["int", "int: The id of the view to change"], ["int", "int: Scroll by this adapter position offset"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#ListView#smoothScrollByOffset_E@.", "history": "Added in API level 11", "FullName": "public void setRelativeScrollPosition (int viewId, int offset)"}, "setOnClickFillInIntent(int,android.content.Intent)": {"Returns": [], "Parameters": [["int", "int: The id of the view on which to set the fillInIntent"], ["@B_android#content#Intent_E@", "Intent: The intent which will be combined with the parent's PendingIntent in order to determine the on-click behavior of the view specified by viewId"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When using collections (eg. @B_android#widget#ListView_E@, @B_android#widget#StackView_E@ etc.) in widgets, it is very costly to set PendingIntents on the individual items, and is hence not permitted. Instead a single PendingIntent template can be set on the collection, see @B_android#widget#RemoteViews#setPendingIntentTemplate_E@, and the individual on-click action of a given item can be distinguished by setting a fillInIntent on that item. The fillInIntent is then combined with the PendingIntent template in order to determine the final intent which will be executed when the item is clicked. This works as follows: any fields which are left blank in the PendingIntent template, but are provided by the fillInIntent will be overwritten, and the resulting PendingIntent will be used. The rest of the PendingIntent template will then be filled in with the associated fields that are set in fillInIntent. See @B_android#content#Intent#fillIn_E@ for more details.", "history": "Added in API level 11", "FullName": "public void setOnClickFillInIntent (int viewId, Intent fillInIntent)"}, "reapply(android.content.Context,android.view.View)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#view#View_E@", "View: The view to apply the actions to. This should be the result of the @B_android#widget#RemoteViews#apply_E@ call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies all of the actions to the provided view.", "history": "Added in API level 1", "FullName": "public void reapply (Context context, View v)"}, "setImageViewResource(int, int)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose drawable should change"], ["int", "int: The new resource id for the drawable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#ImageView#setImageResource_E@", "history": "added in API level 1", "FullName": "public void setImageViewResource (int viewId, int srcId)"}, "setImageViewUri(int, android.net.Uri)": {"Returns": [], "Parameters": [["int", "int: The id of the view whose drawable should change"], ["@B_android#net#Uri_E@", "Uri: The Uri for the image"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_android#widget#ImageView#setImageURI_E@", "history": "added in API level 1", "FullName": "public void setImageViewUri (int viewId, Uri uri)"}}, "Inheritance": [], "ClassName": "android.widget.RemoteViews", "ClassDesc": "A class that describes a view hierarchy that can be displayed in another process. The hierarchy is inflated from a layout resource file, and this class provides some basic operations for modifying the content of the inflated hierarchy. RemoteViews is limited to support for the following layouts: @B_android#widget#AdapterViewFlipper_E@ @B_android#widget#FrameLayout_E@ @B_android#widget#GridLayout_E@ @B_android#widget#GridView_E@ @B_android#widget#LinearLayout_E@ @B_android#widget#ListView_E@ @B_android#widget#RelativeLayout_E@ @B_android#widget#StackView_E@ @B_android#widget#ViewFlipper_E@ And the following widgets: @B_android#widget#AnalogClock_E@ @B_android#widget#Button_E@ @B_android#widget#Chronometer_E@ @B_android#widget#ImageButton_E@ @B_android#widget#ImageView_E@ @B_android#widget#ProgressBar_E@ @B_android#widget#TextClock_E@ @B_android#widget#TextView_E@ Descendants of these classes are not supported."}