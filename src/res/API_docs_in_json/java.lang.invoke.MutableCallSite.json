{"Functions": {"MutableCallSite(java.lang.invoke.MethodType)": {"Returns": [], "Parameters": [["@B_java#lang#invoke#MethodType_E@", "MethodType: the method type that this call site will have"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the proposed type is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a blank call site object with the given method type. The initial target is set to a method handle of the given type which will throw an @B_java#lang#IllegalStateException_E@ if called. The type of the call site is permanently set to the given type. Before this CallSite object is returned from a bootstrap method, or invoked in some other manner, it is usually provided with a more useful target method, via a call to @B_java#lang#invoke#CallSite#setTarget_E@.", "history": "Added in API level 26", "FullName": "public MutableCallSite (MethodType type)"}, "getTarget()": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "the linkage state of this call site, a method handle which can change over time"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#invoke#MutableCallSite#setTarget_E@"], "Permissions": [], "Description": "Returns the target method of the call site, which behaves like a normal field of the MutableCallSite. The interactions of getTarget with memory are the same as of a read from an ordinary variable, such as an array element or a non-volatile, non-final field. In particular, the current thread may choose to reuse the result of a previous read of the target from memory, and may fail to see a recent update to the target by another thread.", "history": "Added in API level 26", "FullName": "public final MethodHandle getTarget ()"}, "MutableCallSite(java.lang.invoke.MethodHandle)": {"Returns": [], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: the method handle that will be the initial target of the call site"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the proposed target is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a call site object with an initial target method handle. The type of the call site is permanently set to the initial target's type.", "history": "Added in API level 26", "FullName": "public MutableCallSite (MethodHandle target)"}, "dynamicInvoker()": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which always invokes this call site's current target"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site. This method is equivalent to the following code:", "history": "Added in API level 26", "FullName": "public final MethodHandle dynamicInvoker ()"}, "setTarget(java.lang.invoke.MethodHandle)": {"Returns": [], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: the new target"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the proposed new target is null"], ["@B_java#lang#invoke#WrongMethodTypeException_E@", "if the proposed new target has a method type that differs from the previous target"]], "SeeAlso": ["@B_java#lang#invoke#MutableCallSite#getTarget_E@"], "Permissions": [], "Description": "Updates the target method of this call site, as a normal variable. The type of the new target must agree with the type of the old target. The interactions with memory are the same as of a write to an ordinary variable, such as an array element or a non-volatile, non-final field. In particular, unrelated threads may fail to see the updated target until they perform a read from memory. Stronger guarantees can be created by putting appropriate operations into the bootstrap method and/or the target methods used at any given call site.", "history": "Added in API level 26", "FullName": "public void setTarget (MethodHandle newTarget)"}}, "Inheritance": ["@B_java#lang#invoke#CallSite_E@"], "ClassName": "java.lang.invoke.MutableCallSite", "ClassDesc": "A MutableCallSite is a @B_java#lang#invoke#CallSite_E@ whose target variable behaves like an ordinary field. An invokedynamic instruction linked to a MutableCallSite delegates all calls to the site's current target. The Here is an example of a mutable call site which introduces a state variable into a method handle chain. The same call site may be used in several places at once. Non-synchronization of target values: A write to a mutable call site's target does not force other threads to become aware of the updated value. Threads which do not perform suitable synchronization actions relative to the updated call site may cache the old target value and delay their use of the new target value indefinitely. (This is a normal consequence of the Java Memory Model as applied to object fields.) For target values which will be frequently updated, consider using a"}