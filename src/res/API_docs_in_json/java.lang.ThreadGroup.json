{"Functions": {"enumerate(java.lang.ThreadGroup[])": {"Returns": [["int", "the number of thread groups put into the array"]], "Parameters": [["@B_java#lang#ThreadGroup_E@", "ThreadGroup: an array into which to put the list of thread groups"]], "Throws": [["@B_java#lang#SecurityException_E@", "if checkAccess determines that the current thread cannot access this thread group"]], "SeeAlso": [], "Permissions": [], "Description": "Copies into the specified array references to every active subgroup in this thread group and its subgroups. An invocation of this method behaves in exactly the same way as the invocation", "history": "Added in API level 1", "FullName": "public int enumerate (ThreadGroup[] list)"}, "enumerate(java.lang.Thread[],boolean)": {"Returns": [["int", "the number of threads put into the array"]], "Parameters": [["@B_java#lang#Thread_E@", "Thread: an array into which to put the list of threads"], ["boolean", "boolean: if true, recursively enumerate all subgroups of this thread group"]], "Throws": [["@B_java#lang#SecurityException_E@", "if checkAccess determines that the current thread cannot access this thread group"]], "SeeAlso": [], "Permissions": [], "Description": "Copies into the specified array every active thread in this thread group. If recurse is true, this method recursively enumerates all subgroups of this thread group and references to every active thread in these subgroups are also included. If the array is too short to hold all the threads, the extra threads are silently ignored. An application might use the list. Due to the inherent race condition in this method, it is recommended that the method only be used for debugging and monitoring purposes.", "history": "Added in API level 1", "FullName": "public int enumerate (Thread[] list, boolean recurse)"}, "parentOf(java.lang.ThreadGroup)": {"Returns": [["boolean", "true if this thread group is the thread group argument or one of its ancestor thread groups; false otherwise."]], "Parameters": [["@B_java#lang#ThreadGroup_E@", "ThreadGroup: a thread group."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if this thread group is either the thread group argument or one of its ancestor thread groups.", "history": "Added in API level 1", "FullName": "public final boolean parentOf (ThreadGroup g)"}, "getParent()": {"Returns": [["@B_java#lang#ThreadGroup_E@", "the parent of this thread group. The top-level thread group is the only thread group whose parent is null."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread cannot modify this thread group."]], "SeeAlso": ["@B_java#lang#ThreadGroup#checkAccess_E@", "@B_java#lang#SecurityException_E@", "@B_java#lang#RuntimePermission_E@"], "Permissions": [], "Description": "Returns the parent of this thread group. First, if the parent is not null, the checkAccess method of the parent thread group is called with no arguments; this may result in a security exception.", "history": "Added in API level 1", "FullName": "public final ThreadGroup getParent ()"}, "ThreadGroup(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the new thread group."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread cannot create a thread in the specified thread group."]], "SeeAlso": ["@B_java#lang#ThreadGroup#checkAccess_E@"], "Permissions": [], "Description": "Constructs a new thread group. The parent of this new group is the thread group of the currently running thread. The checkAccess method of the parent thread group is called with no arguments; this may result in a security exception.", "history": "Added in API level 1", "FullName": "public ThreadGroup (String name)"}, "destroy()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalThreadStateException_E@", "if the thread group is not empty or if the thread group has already been destroyed."], ["@B_java#lang#SecurityException_E@", "if the current thread cannot modify this thread group."]], "SeeAlso": ["@B_java#lang#ThreadGroup#checkAccess_E@"], "Permissions": [], "Description": "Destroys this thread group and all of its subgroups. This thread group must be empty, indicating that all threads that had been in this thread group have since stopped. First, the checkAccess method of this thread group is called with no arguments; this may result in a security exception.", "history": "Added in API level 1", "FullName": "public final void destroy ()"}, "interrupt()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread is not allowed to access this thread group or any of the threads in the thread group."]], "SeeAlso": ["@B_java#lang#Thread#interrupt_E@", "@B_java#lang#SecurityException_E@", "@B_java#lang#ThreadGroup#checkAccess_E@"], "Permissions": [], "Description": "Interrupts all threads in this thread group. First, the checkAccess method of this thread group is called with no arguments; this may result in a security exception. This method then calls the interrupt method on all the threads in this thread group and in all of its subgroups.", "history": "Added in API level 1", "FullName": "public final void interrupt ()"}, "isDaemon()": {"Returns": [["boolean", "true if this thread group is a daemon thread group; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if this thread group is a daemon thread group. A daemon thread group is automatically destroyed when its last thread is stopped or its last thread group is destroyed.", "history": "Added in API level 1", "FullName": "public final boolean isDaemon ()"}, "resume()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread is not allowed to access this thread group or any of the threads in the thread group."]], "SeeAlso": ["@B_java#lang#SecurityException_E@", "@B_java#lang#Thread#resume_E@", "@B_java#lang#ThreadGroup#checkAccess_E@"], "Permissions": [], "Description": "This method is used solely in conjunction with @B_java#lang#Thread#suspend_E@ for details. Resumes all threads in this thread group. First, the checkAccess method of this thread group is called with no arguments; this may result in a security exception. This method then calls the resume method on all the threads in this thread group and in all of its sub groups.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public final void resume ()"}, "activeGroupCount()": {"Returns": [["int", "the number of active thread groups with this thread group as an ancestor"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of active groups in this thread group and its subgroups. Recursively iterates over all subgroups in this thread group. The value returned is only an estimate because the number of thread groups may change dynamically while this method traverses internal data structures. This method is intended primarily for debugging and monitoring purposes.", "history": "Added in API level 1", "FullName": "public int activeGroupCount ()"}, "stop()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread is not allowed to access this thread group or any of the threads in the thread group."]], "SeeAlso": ["@B_java#lang#SecurityException_E@", "@B_java#lang#Thread#stop_E@", "@B_java#lang#ThreadGroup#checkAccess_E@"], "Permissions": [], "Description": "This method is inherently unsafe. See @B_java#lang#Thread#stop_E@ for details. Stops all threads in this thread group. First, the checkAccess method of this thread group is called with no arguments; this may result in a security exception. This method then calls the stop method on all the threads in this thread group and in all of its subgroups.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public final void stop ()"}, "list()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints information about this thread group to the standard output. This method is useful only for debugging.", "history": "Added in API level 1", "FullName": "public void list ()"}, "getMaxPriority()": {"Returns": [["int", "the maximum priority that a thread in this thread group can have."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#ThreadGroup#setMaxPriority_E@"], "Permissions": [], "Description": "Returns the maximum priority of this thread group. Threads that are part of this group cannot have a higher priority than the maximum priority.", "history": "Added in API level 1", "FullName": "public final int getMaxPriority ()"}, "ThreadGroup(java.lang.ThreadGroup,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#ThreadGroup_E@", "ThreadGroup: the parent thread group."], ["@B_java#lang#String_E@", "String: the name of the new thread group."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the thread group argument is null."], ["@B_java#lang#SecurityException_E@", "if the current thread cannot create a thread in the specified thread group."]], "SeeAlso": ["@B_java#lang#SecurityException_E@", "@B_java#lang#ThreadGroup#checkAccess_E@"], "Permissions": [], "Description": "Creates a new thread group. The parent of this new group is the specified thread group. The checkAccess method of the parent thread group is called with no arguments; this may result in a security exception.", "history": "Added in API level 1", "FullName": "public ThreadGroup (ThreadGroup parent, String name)"}, "setMaxPriority(int)": {"Returns": [], "Parameters": [["int", "int: the new priority of the thread group."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread cannot modify this thread group."]], "SeeAlso": ["@B_java#lang#ThreadGroup#getMaxPriority_E@", "@B_java#lang#SecurityException_E@", "@B_java#lang#ThreadGroup#checkAccess_E@"], "Permissions": [], "Description": "Sets the maximum priority of the group. Threads in the thread group that already have a higher priority are not affected. First, the checkAccess method of this thread group is called with no arguments; this may result in a security exception. If the pri argument is less than @B_java#lang#Thread#MIN_PRIORITY_E@ or greater than @B_java#lang#Thread#MAX_PRIORITY_E@, it is clamped to those values. Otherwise, the priority of this ThreadGroup object is set to the smaller of the specified pri and the maximum permitted priority of the parent of this thread group. (If this thread group is the system thread group, which has no parent, then its maximum priority is simply set to pri.) Then this method is called recursively, with pri as its argument, for every thread group that belongs to this thread group.", "history": "Added in API level 1", "FullName": "public final void setMaxPriority (int pri)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "the name of this thread group."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this thread group.", "history": "Added in API level 1", "FullName": "public final String getName ()"}, "checkAccess()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread is not allowed to access this thread group."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkAccess_E@"], "Permissions": [], "Description": "Determines if the currently running thread has permission to modify this thread group. If there is a security manager, its checkAccess method is called with this thread group as its argument. This may result in throwing a SecurityException.", "history": "Added in API level 1", "FullName": "public final void checkAccess ()"}, "uncaughtException(java.lang.Thread,java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#Thread_E@", "Thread: the thread that is about to exit."], ["@B_java#lang#Throwable_E@", "Throwable: the uncaught exception."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the Java Virtual Machine when a thread in this thread group stops because of an uncaught exception, and the thread does not have a specific @B_java#lang#Thread#UncaughtExceptionHandler_E@ installed. The uncaughtException method of ThreadGroup does the following: If this thread group has a parent thread group, the uncaughtException method of that parent is called with the same two arguments. Otherwise, this method checks to see if there is a uncaughtException method is called with the same two arguments. Otherwise, this method determines if the Throwable argument is an instance of @B_java#lang#ThreadDeath_E@. If so, nothing special is done. Otherwise, a message containing the thread's name, as returned from the thread's @B_java#lang#Thread#getName_E@ method, and a stack backtrace, using the Throwable's @B_java#lang#Throwable#printStackTrace_E@ method, is printed to the Applications can override this method in subclasses of ThreadGroup to provide alternative handling of uncaught exceptions.", "history": "Added in API level 1", "FullName": "public void uncaughtException (Thread t, Throwable e)"}, "enumerate(java.lang.ThreadGroup[], boolean)": {"Returns": [["int", "the number of thread groups put into the array"]], "Parameters": [["@B_java#lang#ThreadGroup_E@", "ThreadGroup: an array into which to put the list of thread groups"], ["boolean", "boolean: if true, recursively enumerate all subgroups"]], "Throws": [["@B_java#lang#SecurityException_E@", "if checkAccess determines that the current thread cannot access this thread group"]], "SeeAlso": [], "Permissions": [], "Description": "Copies into the specified array references to every active subgroup in this thread group. If recurse is true, this method recursively enumerates all subgroups of this thread group and references to every active thread group in these subgroups are also included. An application might use the list. Due to the inherent race condition in this method, it is recommended that the method only be used for debugging and monitoring purposes.", "history": "added in API level 1", "FullName": "public int enumerate (ThreadGroup[] list, boolean recurse)"}, "enumerate(java.lang.ThreadGroup[],boolean)": {"Returns": [["int", "the number of thread groups put into the array"]], "Parameters": [["@B_java#lang#ThreadGroup_E@", "ThreadGroup: an array into which to put the list of thread groups"], ["boolean", "boolean: if true, recursively enumerate all subgroups"]], "Throws": [["@B_java#lang#SecurityException_E@", "if checkAccess determines that the current thread cannot access this thread group"]], "SeeAlso": [], "Permissions": [], "Description": "Copies into the specified array references to every active subgroup in this thread group. If recurse is true, this method recursively enumerates all subgroups of this thread group and references to every active thread group in these subgroups are also included. An application might use the list. Due to the inherent race condition in this method, it is recommended that the method only be used for debugging and monitoring purposes.", "history": "Added in API level 1", "FullName": "public int enumerate (ThreadGroup[] list, boolean recurse)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this thread group."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this Thread group.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "setDaemon(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: if true, marks this thread group as a daemon thread group; otherwise, marks this thread group as normal."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread cannot modify this thread group."]], "SeeAlso": ["@B_java#lang#SecurityException_E@", "@B_java#lang#ThreadGroup#checkAccess_E@"], "Permissions": [], "Description": "Changes the daemon status of this thread group. First, the checkAccess method of this thread group is called with no arguments; this may result in a security exception. A daemon thread group is automatically destroyed when its last thread is stopped or its last thread group is destroyed.", "history": "Added in API level 1", "FullName": "public final void setDaemon (boolean daemon)"}, "activeCount()": {"Returns": [["int", "an estimate of the number of active threads in this thread group and in any other thread group that has this thread group as an ancestor"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of active threads in this thread group and its subgroups. Recursively iterates over all subgroups in this thread group. The value returned is only an estimate because the number of threads may change dynamically while this method traverses internal data structures, and might be affected by the presence of certain system threads. This method is intended primarily for debugging and monitoring purposes.", "history": "Added in API level 1", "FullName": "public int activeCount ()"}, "suspend()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread is not allowed to access this thread group or any of the threads in the thread group."]], "SeeAlso": ["@B_java#lang#Thread#suspend_E@", "@B_java#lang#SecurityException_E@", "@B_java#lang#ThreadGroup#checkAccess_E@"], "Permissions": [], "Description": "This method is inherently deadlock-prone. See @B_java#lang#Thread#suspend_E@ for details. Suspends all threads in this thread group. First, the checkAccess method of this thread group is called with no arguments; this may result in a security exception. This method then calls the suspend method on all the threads in this thread group and in all of its subgroups.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public final void suspend ()"}, "enumerate(java.lang.Thread[], boolean)": {"Returns": [["int", "the number of threads put into the array"]], "Parameters": [["@B_java#lang#Thread_E@", "Thread: an array into which to put the list of threads"], ["boolean", "boolean: if true, recursively enumerate all subgroups of this thread group"]], "Throws": [["@B_java#lang#SecurityException_E@", "if checkAccess determines that the current thread cannot access this thread group"]], "SeeAlso": [], "Permissions": [], "Description": "Copies into the specified array every active thread in this thread group. If recurse is true, this method recursively enumerates all subgroups of this thread group and references to every active thread in these subgroups are also included. If the array is too short to hold all the threads, the extra threads are silently ignored. An application might use the list. Due to the inherent race condition in this method, it is recommended that the method only be used for debugging and monitoring purposes.", "history": "added in API level 1", "FullName": "public int enumerate (Thread[] list, boolean recurse)"}, "enumerate(java.lang.Thread[])": {"Returns": [["int", "the number of threads put into the array"]], "Parameters": [["@B_java#lang#Thread_E@", "Thread: an array into which to put the list of threads"]], "Throws": [["@B_java#lang#SecurityException_E@", "if checkAccess determines that the current thread cannot access this thread group"]], "SeeAlso": [], "Permissions": [], "Description": "Copies into the specified array every active thread in this thread group and its subgroups. An invocation of this method behaves in exactly the same way as the invocation", "history": "Added in API level 1", "FullName": "public int enumerate (Thread[] list)"}, "isDestroyed()": {"Returns": [["boolean", "true if this object is destroyed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if this thread group has been destroyed.", "history": "Added in API level 1", "FullName": "public boolean isDestroyed ()"}, "allowThreadSuspension(boolean)": {"Returns": [["boolean", "true on success"]], "Parameters": [["boolean", "boolean: boolean to allow or disallow suspension"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The definition of this call depends on @B_java#lang#ThreadGroup#suspend_E@, which is deprecated. Further, the behavior of this call was never specified. Used by VM to control lowmem implicit suspension.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public boolean allowThreadSuspension (boolean b)"}}, "Inheritance": [], "ClassName": "java.lang.ThreadGroup", "ClassDesc": "A thread group represents a set of threads. In addition, a thread group can also include other thread groups. The thread groups form a tree in which every thread group except the initial thread group has a parent. A thread is allowed to access information about its own thread group, but not to access information about its thread group's parent thread group or any other thread groups."}