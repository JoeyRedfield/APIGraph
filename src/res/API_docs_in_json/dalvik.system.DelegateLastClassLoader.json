{"Functions": {"DelegateLastClassLoader(java.lang.String,java.lang.String,java.lang.ClassLoader,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the list of jar/apk files containing classes and resources, delimited by File.pathSeparator, which defaults to \":\" on Android."], ["@B_java#lang#String_E@", "String: the list of directories containing native libraries, delimited by File.pathSeparator; may be null."], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the parent class loader. May be null for the boot classloader."], ["boolean", "boolean: whether to delegate resource loading to the parent if the resource is not found. This does not affect class loading delegation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a DelegateLastClassLoader that operates on a given dexPath and a librarySearchPath. The dexPath should consist of one or more of the following, separated by File.pathSeparator, which is \":\" on Android. JAR/ZIP/APK files, possibly containing a \"classes.dex\" file as well as arbitrary resources. Raw \".dex\" files (not inside a zip file). Unlike @B_dalvik#system#PathClassLoader_E@, this classloader will attempt to locate classes (or resources) using the following lookup order. The boot classpath is always searched first. Then, the list of dex files contained in dexPath is searched./li> Lastly, this classloader will delegate to the specified parent. Note that this is in contrast to other standard classloaders that follow the delegation model. In those classloaders, the parent is always searched first. librarySearchPath specifies one more directories containing native library files, separated by File.pathSeparator.", "history": "Added in API level 29", "FullName": "public DelegateLastClassLoader (String dexPath, String librarySearchPath, ClassLoader parent, boolean delegateResourceLoading)"}, "DelegateLastClassLoader(java.lang.String,java.lang.String,java.lang.ClassLoader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#ClassLoader_E@", "ClassLoader no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_dalvik#system#DelegateLastClassLoader#DelegateLastClassLoader_E@ with delegateResourceLoading = true.", "history": "Added in API level 27", "FullName": "public DelegateLastClassLoader (String dexPath, String librarySearchPath, ClassLoader parent)"}, "getResource(java.lang.String)": {"Returns": [["@B_java#net#URL_E@", "A URL object for reading the resource, or null if the resource could not be found or the invoker doesn't have adequate privileges to get the resource."]], "Parameters": [["@B_java#lang#String_E@", "String: The resource name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finds the resource with the given name. A resource is some data (images, audio, text, etc) that can be accessed by class code in a way that is independent of the location of the code. The name of a resource is a ' This method will first search the parent class loader for the resource; if the parent is @B_java#lang#ClassLoader#findResource_E@ to find the resource.", "history": "Added in API level 27", "FullName": "public URL getResource (String name)"}, "loadClass(java.lang.String,boolean)": {"Returns": [["@B_java#lang#Class_E@", "The resulting Class object"]], "Parameters": [["@B_java#lang#String_E@", "String: The binary name of the class"], ["boolean", "boolean: If true then resolve the class"]], "Throws": [["@B_java#lang#ClassNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Loads the class with the specified If the class was found using the above steps, and the @B_java#lang#ClassLoader#resolveClass_E@ method on the resulting Subclasses of @B_java#lang#ClassLoader#findClass_E@, rather than this method.", "history": "Added in API level 27", "FullName": "protected Class<?> loadClass (String name, boolean resolve)"}, "loadClass(java.lang.String, boolean)": {"Returns": [["@B_java#lang#Class_E@", "The resulting Class object"]], "Parameters": [["@B_java#lang#String_E@", "String: The binary name of the class"], ["boolean", "boolean: If true then resolve the class"]], "Throws": [["@B_java#lang#ClassNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Loads the class with the specified If the class was found using the above steps, and the @B_java#lang#ClassLoader#resolveClass_E@ method on the resulting Subclasses of @B_java#lang#ClassLoader#findClass_E@, rather than this method.", "history": "added in API level 27", "FullName": "protected Class<?> loadClass (String name, boolean resolve)"}, "getResources(java.lang.String)": {"Returns": [["@B_java#util#Enumeration_E@", "An enumeration of @B_java#net#URL_E@ objects for the resource. If no resources could be found, the enumeration will be empty. Resources that the class loader doesn't have access to will not be in the enumeration."]], "Parameters": [["@B_java#lang#String_E@", "String: The resource name"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Finds all the resources with the given name. A resource is some data (images, audio, text, etc) that can be accessed by class code in a way that is independent of the location of the code. The name of a resource is a The search order is described in the documentation for @B_java#lang#ClassLoader#getResource_E@.", "history": "Added in API level 27", "FullName": "public Enumeration<URL> getResources (String name)"}, "DelegateLastClassLoader(java.lang.String,java.lang.ClassLoader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#ClassLoader_E@", "ClassLoader no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to calling @B_dalvik#system#DelegateLastClassLoader#DelegateLastClassLoader_E@ with librarySearchPath = null, delegateResourceLoading = true.", "history": "Added in API level 27", "FullName": "public DelegateLastClassLoader (String dexPath, ClassLoader parent)"}}, "Inheritance": ["@B_java#lang#ClassLoader_E@", "@B_dalvik#system#BaseDexClassLoader_E@", "@B_dalvik#system#PathClassLoader_E@"], "ClassName": "dalvik.system.DelegateLastClassLoader", "ClassDesc": "A ClassLoader implementation that implements a The boot classpath is always searched first Then, the list of dex files associated with this classloaders's dexPath is searched. Finally, this classloader will delegate to the specified parent."}