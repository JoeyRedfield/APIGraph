{"Functions": {"openSocketChannel()": {"Returns": [["@B_java#nio#channels#SocketChannel_E@", "The new channel"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a socket channel.", "history": "Added in API level 1", "FullName": "public abstract SocketChannel openSocketChannel ()"}, "openSelector()": {"Returns": [["@B_java#nio#channels#spi#AbstractSelector_E@", "The new selector"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a selector.", "history": "Added in API level 1", "FullName": "public abstract AbstractSelector openSelector ()"}, "openDatagramChannel()": {"Returns": [["@B_java#nio#channels#DatagramChannel_E@", "The new channel"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a datagram channel.", "history": "Added in API level 1", "FullName": "public abstract DatagramChannel openDatagramChannel ()"}, "openPipe()": {"Returns": [["@B_java#nio#channels#Pipe_E@", "The new pipe"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a pipe.", "history": "Added in API level 1", "FullName": "public abstract Pipe openPipe ()"}, "openDatagramChannel(java.net.ProtocolFamily)": {"Returns": [["@B_java#nio#channels#DatagramChannel_E@", "A new datagram channel"]], "Parameters": [["@B_java#net#ProtocolFamily_E@", "ProtocolFamily: The protocol family"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If the specified protocol family is not supported"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a datagram channel.", "history": "Added in API level 24", "FullName": "public abstract DatagramChannel openDatagramChannel (ProtocolFamily family)"}, "openServerSocketChannel()": {"Returns": [["@B_java#nio#channels#ServerSocketChannel_E@", "The new channel"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a server-socket channel.", "history": "Added in API level 1", "FullName": "public abstract ServerSocketChannel openServerSocketChannel ()"}, "inheritedChannel()": {"Returns": [["@B_java#nio#channels#Channel_E@", "The inherited channel, if any, otherwise null."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it denies @B_java#lang#RuntimePermission_E@(\"inheritedChannel\")"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the channel inherited from the entity that created this Java virtual machine. On many operating systems a process, such as a Java virtual machine, can be started in a manner that allows the process to inherit a channel from the entity that created the process. The manner in which this is done is system dependent, as are the possible entities to which the channel may be connected. For example, on UNIX systems, the Internet services daemon ( In cases where the inherited channel represents a network socket then the @B_java#nio#channels#Channel_E@ type returned by this method is determined as follows: If the inherited channel represents a stream-oriented connected socket then a @B_java#nio#channels#SocketChannel_E@ is returned. The socket channel is, at least initially, in blocking mode, bound to a socket address, and connected to a peer. If the inherited channel represents a stream-oriented listening socket then a @B_java#nio#channels#ServerSocketChannel_E@ is returned. The server-socket channel is, at least initially, in blocking mode, and bound to a socket address. If the inherited channel is a datagram-oriented socket then a @B_java#nio#channels#DatagramChannel_E@ is returned. The datagram channel is, at least initially, in blocking mode, and bound to a socket address. In addition to the network-oriented channels described, this method may return other kinds of channels in the future. The first invocation of this method creates the channel that is returned. Subsequent invocations of this method return the same channel.", "history": "Added in API level 1", "FullName": "public Channel inheritedChannel ()"}, "SelectorProvider()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it denies @B_java#lang#RuntimePermission_E@(\"selectorProvider\")"]], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 1", "FullName": "protected SelectorProvider ()"}, "provider()": {"Returns": [["@B_java#nio#channels#spi#SelectorProvider_E@", "The system-wide default selector provider"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the system-wide default selector provider for this invocation of the Java virtual machine. The first invocation of this method locates the default provider object as follows: Subsequent invocations of this method return the provider that was returned by the first invocation.", "history": "Added in API level 1", "FullName": "public static SelectorProvider provider ()"}}, "Inheritance": [], "ClassName": "java.nio.channels.spi.SelectorProvider", "ClassDesc": "Service-provider class for selectors and selectable channels. A selector provider is a concrete subclass of this class that has a zero-argument constructor and implements the abstract methods specified below. A given invocation of the Java virtual machine maintains a single system-wide default provider instance, which is returned by the @B_java#nio#channels#spi#SelectorProvider#provider_E@ method. The first invocation of that method will locate the default provider as specified below. The system-wide default provider is used by the static @B_java#nio#channels#DatagramChannel#open_E@, @B_java#nio#channels#Pipe#open_E@, @B_java#nio#channels#Selector#open_E@, @B_java#nio#channels#ServerSocketChannel#open_E@, and @B_java#nio#channels#SocketChannel#open_E@ classes. It is also used by the @B_java#lang#System#inheritedChannel_E@ method. A program may make use of a provider other than the default provider by instantiating that provider and then directly invoking the All of the methods in this class are safe for use by multiple concurrent threads."}