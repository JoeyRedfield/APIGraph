{"Functions": {"prepare(android.content.Context)": {"Returns": [["@B_android#content#Intent_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#net#VpnService#onRevoke_E@"], "Permissions": [], "Description": "Prepare to establish a VPN connection. This method returns null if the VPN application is already prepared or if the user has previously consented to the VPN application. Otherwise, it returns an @B_android#content#Intent_E@ to a system activity. The application should launch the activity using @B_android#app#Activity#startActivityForResult_E@ to get itself prepared. The activity may pop up a dialog to require user action, and the result will come back via its @B_android#app#Activity#onActivityResult_E@. If the result is @B_android#app#Activity#RESULT_OK_E@, the application becomes prepared and is granted to use other methods in this class. Only one application can be granted at the same time. The right is revoked when another application is granted. The application losing the right will be notified via its @B_android#net#VpnService#onRevoke_E@. Unless it becomes prepared again, subsequent calls to other methods in this class will fail. The user may disable the VPN at any time while it is activated, in which case this method will return an intent the next time it is executed to obtain the user's consent again.", "history": "Added in API level 14", "FullName": "public static Intent prepare (Context context)"}, "VpnService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 14", "FullName": "public VpnService ()"}, "onRevoke()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#net#VpnService#prepare_E@"], "Permissions": [], "Description": "Invoked when the application is revoked. At this moment, the VPN interface is already deactivated by the system. The application should close the file descriptor and shut down gracefully. The default implementation of this method is calling @B_android#app#Service#stopSelf_E@. Calls to this method may not happen on the main thread of the process.", "history": "Added in API level 14", "FullName": "public void onRevoke ()"}, "protect(int)": {"Returns": [["boolean", "true on success."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Protect a socket from VPN connections. After protecting, data sent through this socket will go directly to the underlying network, so its traffic will not be forwarded through the VPN. This method is useful if some connections need to be kept outside of VPN. For example, a VPN tunnel should protect itself if its destination is covered by VPN routes. Otherwise its outgoing packets will be sent back to the VPN interface and cause an infinite loop. This method will fail if the application is not prepared or is revoked. The socket is NOT closed by this method.", "history": "Added in API level 14", "FullName": "public boolean protect (int socket)"}, "protect(java.net.Socket)": {"Returns": [["boolean", "true on success."]], "Parameters": [["@B_java#net#Socket_E@", "Socket no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#net#VpnService#protect_E@"], "Permissions": [], "Description": "Convenience method to protect a @B_java#net#Socket_E@ from VPN connections.", "history": "Added in API level 14", "FullName": "public boolean protect (Socket socket)"}, "isAlwaysOn()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setAlwaysOnVpnPackage_E@"], "Permissions": [], "Description": "Returns whether the service is running in always-on VPN mode. In this mode the system ensures that the service is always running by restarting it when necessary, e.g. after reboot.", "history": "Added in API level 29", "FullName": "public final boolean isAlwaysOn ()"}, "setUnderlyingNetworks(android.net.Network[])": {"Returns": [["boolean", "true on success."]], "Parameters": [["@B_android#net#Network_E@", "Network: An array of networks the VPN uses to tunnel traffic to/from its servers."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the underlying networks used by the VPN for its upstream connections. Used by the system to know the actual networks that carry traffic for apps affected by this VPN in order to present this information to the user (e.g., via status bar icons). This method only needs to be called if the VPN has explicitly bound its underlying communications channels \u2014 such as the socket(s) passed to @B_android#net#VpnService#protect_E@ \u2014 to a Network using APIs such as @B_android#net#Network#bindSocket_E@ or @B_android#net#Network#bindSocket_E@. The VPN should call this method every time the set of Networks it is using changes. networks is one of the following: @B_android#net#Network_E@s, in decreasing preference order. For example, if this VPN uses both wifi and mobile (cellular) networks to carry app traffic, but prefers or uses wifi more than mobile, wifi should appear first in the array. bindSocket or bindDatagramSocket APIs mentioned above to send traffic over specific channels. This call will succeed only if the VPN is currently established. For setting this value when the VPN has not yet been established, see @B_android#net#VpnService#Builder#setUnderlyingNetworks_E@.", "history": "Added in API level 22", "FullName": "public boolean setUnderlyingNetworks (Network[] networks)"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": ["@B_android#app#Service#onBind_E@"], "Permissions": [], "Description": "Return the communication interface to the service. This method returns null on @B_android#content#Intent_E@s other than @B_android#net#VpnService#SERVICE_INTERFACE_E@ action. Applications overriding this method must identify the intent and return the corresponding interface accordingly.", "history": "Added in API level 14", "FullName": "public IBinder onBind (Intent intent)"}, "protect(java.net.DatagramSocket)": {"Returns": [["boolean", "true on success."]], "Parameters": [["@B_java#net#DatagramSocket_E@", "DatagramSocket no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#net#VpnService#protect_E@"], "Permissions": [], "Description": "Convenience method to protect a @B_java#net#DatagramSocket_E@ from VPN connections.", "history": "Added in API level 14", "FullName": "public boolean protect (DatagramSocket socket)"}, "isLockdownEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setAlwaysOnVpnPackage_E@"], "Permissions": [], "Description": "Returns whether the service is running in always-on VPN lockdown mode. In this mode the system ensures that the service is always running and that the apps aren't allowed to bypass the VPN.", "history": "Added in API level 29", "FullName": "public final boolean isLockdownEnabled ()"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.net.VpnService", "ClassDesc": "VpnService is a base class for applications to extend and build their own VPN solutions. In general, it creates a virtual network interface, configures addresses and routing rules, and returns a file descriptor to the application. Each read from the descriptor retrieves an outgoing packet which was routed to the interface. Each write to the descriptor injects an incoming packet just like it was received from the interface. The interface is running on Internet Protocol (IP), so packets are always started with IP headers. The application then completes a VPN connection by processing and exchanging packets with the remote server over a tunnel. Letting applications intercept packets raises huge security concerns. A VPN application can easily break the network. Besides, two of them may conflict with each other. The system takes several actions to address these issues. Here are some key points: User action is required the first time an application creates a VPN connection. There can be only one VPN connection running at the same time. The existing interface is deactivated when a new one is created. A system-managed notification is shown during the lifetime of a VPN connection. A system-managed dialog gives the information of the current VPN connection. It also provides a button to disconnect. The network is restored automatically when the file descriptor is closed. It also covers the cases when a VPN application is crashed or killed by the system. There are two primary methods in this class: @B_android#net#VpnService#prepare_E@ and @B_android#net#VpnService#Builder#establish_E@. The former deals with user action and stops the VPN connection created by another application. The latter creates a VPN interface using the parameters supplied to the @B_android#net#VpnService#Builder_E@. An application must call @B_android#net#VpnService#prepare_E@ to grant the right to use other methods in this class, and the right can be revoked at any time. Here are the general steps to create a VPN connection: Services extending this class need to be declared with an appropriate permission and intent filter. Their access must be secured by @B_android#Manifest#permission#BIND_VPN_SERVICE_E@ permission, and their intent filter must match @B_android#net#VpnService#SERVICE_INTERFACE_E@ action. Here is an example of declaring a VPN service in AndroidManifest.xml: The Android system starts a VPN in the background by calling @B_android#content#Context#startService_E@. In Android 8.0 (API level 26) and higher, the system places VPN apps on the temporary whitelist for a short period so the app can start in the background. The VPN app must promote itself to the foreground after it's launched or the system will shut down the app. To learn more about developing VPN apps, read the"}