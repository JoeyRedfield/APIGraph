{"Functions": {"set(int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the fields. Sets weekDay, yearDay and gmtoff to 0, and isDst to -1. Call @B_android#text#format#Time#normalize_E@ if you need those.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public void set (int second, int minute, int hour, int monthDay, int month, int year)"}, "isEpoch(android.text.format.Time)": {"Returns": [["boolean", "true if epoch."]], "Parameters": [["@B_android#text#format#Time_E@", "Time: the time to test"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the day of the given time is the epoch on the Julian Calendar (January 1, 1970 on the Gregorian calendar). This method can return an incorrect answer when the date / time fields have been set to a local time that contradicts the available timezone information.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public static boolean isEpoch (Time time)"}, "parse3339(java.lang.String)": {"Returns": [["boolean", "true if the resulting time value is in UTC time"]], "Parameters": [["@B_java#lang#String_E@", "String: the string to parse"]], "Throws": [["@B_android#util#TimeFormatException_E@", "if s cannot be parsed."]], "SeeAlso": [], "Permissions": [], "Description": "Parse a time in RFC 3339 format. This method also parses simple dates (that is, strings that contain no time or time offset). For example, all of the following strings are valid: \"2008-10-13T16:00:00.000Z\" \"2008-10-13T16:00:00.000+07:00\" \"2008-10-13T16:00:00.000-07:00\" \"2008-10-13\" If the string contains a time and time offset, then the time offset will be used to convert the time value to UTC. If the given string contains just a date (with no time field), then the @B_android#text#format#Time#allDay_E@ field is set to true and the @B_android#text#format#Time#hour_E@, @B_android#text#format#Time#minute_E@, and @B_android#text#format#Time#second_E@ fields are set to zero. Returns true if the resulting time value is in UTC time.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public boolean parse3339 (String s)"}, "setJulianDay(int)": {"Returns": [["long", "the UTC milliseconds for the beginning of the Julian day"]], "Parameters": [["int", "int: the Julian day in the timezone for this Time object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time from the given Julian day number, which must be based on the same timezone that is set in this Time object. The \"gmtoff\" field need not be initialized because the given Julian day may have a different GMT offset than whatever is currently stored in this Time object anyway. After this method returns all the fields will be normalized and the time will be set to 12am at the beginning of the given Julian day. The only exception to this is if 12am does not exist for that day because of daylight saving time. For example, Cairo, Eqypt moves time ahead one hour at 12am on April 25, 2008 and there are a few other places that also change daylight saving time at 12am. In those cases, the time will be set to 1am.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public long setJulianDay (int julianDay)"}, "getWeekNumber()": {"Returns": [["int", "the ISO week number."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Computes the week number according to ISO 8601. The current Time object must already be normalized because this method uses the yearDay and weekDay fields. In IS0 8601, weeks start on Monday. The first week of the year (week 1) is defined by ISO 8601 as the first week with four or more of its days in the starting year. Or equivalently, the week containing January 4. Or equivalently, the week with the year's first Thursday in it. The week number can be calculated by counting Thursdays. Week N contains the Nth Thursday of the year.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public int getWeekNumber ()"}, "getJulianMondayFromWeeksSinceEpoch(int)": {"Returns": [["int", "The julian day for the Monday of the given week since the epoch"]], "Parameters": [["int", "int: Number of weeks since the epoch"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Takes a number of weeks since the epoch and calculates the Julian day of the Monday for that week. This assumes that the week containing the @B_android#text#format#Time#EPOCH_JULIAN_DAY_E@ is considered week 0. It returns the Julian day for the Monday week weeks after the Monday of the week containing the epoch.", "history": "Added in API level 11 Deprecated in API level 22", "FullName": "public static int getJulianMondayFromWeeksSinceEpoch (int week)"}, "switchTimezone(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert this time object so the time represented remains the same, but is instead located in a different timezone. This method automatically calls normalize() in some cases. This method can return incorrect results if the date / time cannot be normalized.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public void switchTimezone (String timezone)"}, "set(int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the fields. Sets weekDay, yearDay and gmtoff to 0, and isDst to -1. Call @B_android#text#format#Time#normalize_E@ if you need those.", "history": "added in API level 3", "FullName": "public void set (int second, int minute, int hour, int monthDay, int month, int year)"}, "parse(java.lang.String)": {"Returns": [["boolean", "true if the resulting time value is in UTC time"]], "Parameters": [["@B_java#lang#String_E@", "String: the string to parse"]], "Throws": [["@B_android#util#TimeFormatException_E@", "if s cannot be parsed."]], "SeeAlso": [], "Permissions": [], "Description": "Parses a date-time string in either the RFC 2445 format or an abbreviated format that does not include the \"time\" field. For example, all of the following strings are valid: \"20081013T160000Z\" \"20081013T160000\" \"20081013\" Returns whether or not the time is in UTC (ends with Z). If the string ends with \"Z\" then the timezone is set to UTC. If the date-time string included only a date and no time field, then the allDay field of this Time class is set to true and the hour, minute, and second fields are set to zero; otherwise (a time field was included in the date-time string) allDay is set to false. The fields weekDay, yearDay, and gmtoff are always set to zero, and the field isDst is set to -1 (unknown). To set those fields, call @B_android#text#format#Time#normalize_E@ after parsing. To parse a date-time string and convert it to UTC milliseconds, do something like this:", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public boolean parse (String s)"}, "set(int, int, int)": {"Returns": [], "Parameters": [["int", "int: the day of the month (in the range [1,31])"], ["int", "int: the zero-based month number (in the range [0,11])"], ["int", "int: the year"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the date from the given fields. Also sets allDay to true. Sets weekDay, yearDay and gmtoff to 0, and isDst to -1. Call @B_android#text#format#Time#normalize_E@ if you need those.", "history": "added in API level 3", "FullName": "public void set (int monthDay, int month, int year)"}, "format2445()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format according to RFC 2445 DATE-TIME type. The same as format(\"%Y%m%dT%H%M%S\"), or format(\"%Y%m%dT%H%M%SZ\") for a Time with a timezone set to \"UTC\".", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public String format2445 ()"}, "format3339(boolean)": {"Returns": [["@B_java#lang#String_E@", "string in the RFC 3339 format."]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a string in the RFC 3339 format. If allDay is true, expresses the time as Y-M-D Otherwise, if the timezone is UTC, expresses the time as Y-M-D-T-H-M-S UTC Otherwise the time is expressed the time as Y-M-D-T-H-M-S +- GMT", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public String format3339 (boolean allDay)"}, "normalize(boolean)": {"Returns": [["long", "the UTC milliseconds since the epoch, or -1"]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ensures the values in each field are in range. For example if the current value of this calendar is March 32, normalize() will convert it to April 1. It also fills in weekDay, yearDay, isDst and gmtoff. If \"ignoreDst\" is true, then this method sets the \"isDst\" field to -1 (the \"unknown\" value) before normalizing. It then computes the time in milliseconds and sets the correct value for \"isDst\" if the fields resolve to a valid date / time. See @B_android#text#format#Time#toMillis_E@ for more information about when to use -1 might be returned.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public long normalize (boolean ignoreDst)"}, "Time()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a Time object in the default timezone. The time is initialized to Jan 1, 1970.", "history": "Added in API level 3", "FullName": "public Time ()"}, "set(android.text.format.Time)": {"Returns": [], "Parameters": [["@B_android#text#format#Time_E@", "Time no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy the value of that to this Time object. No normalization happens.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public void set (Time that)"}, "getWeeksSinceEpochFromJulianDay(int,int)": {"Returns": [["int", "Weeks since the epoch"]], "Parameters": [["int", "int: The julian day to calculate the week number for"], ["int", "int: Which week day is the first day of the week, see @B_android#text#format#Time#SUNDAY_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the week since @B_android#text#format#Time#EPOCH_JULIAN_DAY_E@ (Jan 1, 1970) adjusted for first day of week. This takes a julian day and the week start day and calculates which week since @B_android#text#format#Time#EPOCH_JULIAN_DAY_E@ that day occurs in, starting at 0. *Do not* use this to compute the ISO week number for the year.", "history": "Added in API level 11 Deprecated in API level 22", "FullName": "public static int getWeeksSinceEpochFromJulianDay (int julianDay, int firstDayOfWeek)"}, "compare(android.text.format.Time,android.text.format.Time)": {"Returns": [["int", "a negative result if a is earlier, a positive result if b is earlier, or 0 if they are equal."]], "Parameters": [["@B_android#text#format#Time_E@", "Time: first Time instance to compare"], ["@B_android#text#format#Time_E@", "Time: second Time instance to compare"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if either argument is null"], ["@B_java#lang#IllegalArgumentException_E@", "if @B_android#text#format#Time#allDay_E@ is true but hour, minute, and second are not 0."]], "SeeAlso": [], "Permissions": [], "Description": "Compare two Time objects and return a negative number if a is less than b, a positive number if a is greater than b, or 0 if they are equal. This method can return an incorrect answer when the date / time fields of either Time have been set to a local time that contradicts the available timezone information.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public static int compare (Time a, Time b)"}, "before(android.text.format.Time)": {"Returns": [["boolean", "true if this time is less than the given time"]], "Parameters": [["@B_android#text#format#Time_E@", "Time: a given Time object to compare against"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the time represented by this Time object occurs before the given time. Equivalent to Time.compare(this, that) < 0. See @B_android#text#format#Time#compare_E@ for details.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public boolean before (Time that)"}, "setToNow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time of the given Time object to the current time.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public void setToNow ()"}, "getCurrentTimezone()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the timezone string that is currently set for the device.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public static String getCurrentTimezone ()"}, "format(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "a String containing the current time expressed in the current locale."]], "Parameters": [["@B_java#lang#String_E@", "String: a string containing the desired format."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Print the current value given the format string provided. See man strftime for what means what. The final string must be less than 256 characters.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public String format (String format)"}, "set(long)": {"Returns": [], "Parameters": [["long", "long: the time in UTC milliseconds since the epoch."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the fields in this Time object given the UTC milliseconds. After this method returns, all the fields are normalized. This also sets the \"isDst\" field to the correct value.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public void set (long millis)"}, "after(android.text.format.Time)": {"Returns": [["boolean", "true if this time is greater than the given time"]], "Parameters": [["@B_android#text#format#Time_E@", "Time: a given Time object to compare against"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the time represented by this Time object occurs after the given time. Equivalent to Time.compare(this, that) > 0. See @B_android#text#format#Time#compare_E@ for details.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public boolean after (Time that)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current time in YYYYMMDDTHHMMSS<tz> format", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public String toString ()"}, "toMillis(boolean)": {"Returns": [["long", "no returns description in source"]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this time to milliseconds. Suitable for interacting with the standard java libraries. The time is in UTC milliseconds since the epoch. This does an implicit normalization to compute the milliseconds but does not change any of the fields in this Time object. If you want to normalize the fields in this Time object and also get the milliseconds then use @B_android#text#format#Time#normalize_E@. If \"ignoreDst\" is false, then this method uses the current setting of the \"isDst\" field and will adjust the returned time if the \"isDst\" field is wrong for the given time. See the sample code below for an example of this. If \"ignoreDst\" is true, then this method ignores the current setting of the \"isDst\" field in this Time object and will instead figure out the correct value of \"isDst\" (as best it can) from the fields in this Time object. The only case where this method cannot figure out the correct value of the \"isDst\" field is when the time is inherently ambiguous because it falls in the hour that is repeated when switching from Daylight-Saving Time to Standard Time. Here is an example where To avoid this problem, use You should also use @B_android#text#format#Time#set_E@ or @B_android#text#format#Time#set_E@ or after parsing a date string. This method can return -1 when the date / time fields have been set to a local time that conflicts with available timezone information. For example, when daylight savings transitions cause an hour to be skipped: times within that hour will return -1 if isDst = -1.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public long toMillis (boolean ignoreDst)"}, "Time(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: string containing the timezone to use."]], "Throws": [], "SeeAlso": ["@B_java#util#TimeZone_E@"], "Permissions": [], "Description": "Construct a Time object in the timezone named by the string argument \"timezone\". The time is initialized to Jan 1, 1970.", "history": "Added in API level 3", "FullName": "public Time (String timezoneId)"}, "set(int,int,int)": {"Returns": [], "Parameters": [["int", "int: the day of the month (in the range [1,31])"], ["int", "int: the zero-based month number (in the range [0,11])"], ["int", "int: the year"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the date from the given fields. Also sets allDay to true. Sets weekDay, yearDay and gmtoff to 0, and isDst to -1. Call @B_android#text#format#Time#normalize_E@ if you need those.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public void set (int monthDay, int month, int year)"}, "getJulianDay(long, long)": {"Returns": [["int", "the Julian day"]], "Parameters": [["long", "long: the time in UTC milliseconds"], ["long", "long: the offset from UTC in seconds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Computes the Julian day number for a point in time in a particular timezone. The Julian day for a given date is the same for every timezone. For example, the Julian day for July 1, 2008 is 2454649. Callers must pass the time in UTC millisecond (as can be returned by @B_android#text#format#Time#toMillis_E@ or @B_android#text#format#Time#normalize_E@) and the offset from UTC of the timezone in seconds (as might be in @B_android#text#format#Time#gmtoff_E@). The Julian day is useful for testing if two events occur on the same calendar date and for determining the relative time of an event from the present (\"yesterday\", \"3 days ago\", etc.).", "history": "added in API level 3", "FullName": "public static int getJulianDay (long millis, long gmtoff)"}, "getJulianDay(long,long)": {"Returns": [["int", "the Julian day"]], "Parameters": [["long", "long: the time in UTC milliseconds"], ["long", "long: the offset from UTC in seconds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Computes the Julian day number for a point in time in a particular timezone. The Julian day for a given date is the same for every timezone. For example, the Julian day for July 1, 2008 is 2454649. Callers must pass the time in UTC millisecond (as can be returned by @B_android#text#format#Time#toMillis_E@ or @B_android#text#format#Time#normalize_E@) and the offset from UTC of the timezone in seconds (as might be in @B_android#text#format#Time#gmtoff_E@). The Julian day is useful for testing if two events occur on the same calendar date and for determining the relative time of an event from the present (\"yesterday\", \"3 days ago\", etc.).", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public static int getJulianDay (long millis, long gmtoff)"}, "Time(android.text.format.Time)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A copy constructor. Construct a Time object by copying the given Time object. No normalization occurs.", "history": "Added in API level 3", "FullName": "public Time (Time other)"}, "getActualMaximum(int)": {"Returns": [["int", "the maximum value for the field."]], "Parameters": [["int", "int: one of the constants for HOUR, MINUTE, SECOND, etc."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the maximum possible value for the given field given the value of the other fields. Requires that it be normalized for MONTH_DAY and YEAR_DAY.", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public int getActualMaximum (int field)"}, "getWeeksSinceEpochFromJulianDay(int, int)": {"Returns": [["int", "Weeks since the epoch"]], "Parameters": [["int", "int: The julian day to calculate the week number for"], ["int", "int: Which week day is the first day of the week, see @B_android#text#format#Time#SUNDAY_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the week since @B_android#text#format#Time#EPOCH_JULIAN_DAY_E@ (Jan 1, 1970) adjusted for first day of week. This takes a julian day and the week start day and calculates which week since @B_android#text#format#Time#EPOCH_JULIAN_DAY_E@ that day occurs in, starting at 0. *Do not* use this to compute the ISO week number for the year.", "history": "added in API level 11", "FullName": "public static int getWeeksSinceEpochFromJulianDay (int julianDay, int firstDayOfWeek)"}, "clear(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the timezone to use."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears all values, setting the timezone to the given timezone. Sets isDst to a negative value to mean \"unknown\".", "history": "Added in API level 3 Deprecated in API level 22", "FullName": "public void clear (String timezoneId)"}}, "Inheritance": [], "ClassName": "android.text.format.Time", "ClassDesc": "Use @B_java#util#GregorianCalendar_E@ instead. An alternative to the @B_java#util#Calendar_E@ and @B_java#util#GregorianCalendar_E@ classes. An instance of the Time class represents a moment in time, specified with second precision. It is modelled after struct tm. This class is not thread-safe and does not consider leap seconds. This class has a number of issues and it is recommended that @B_java#util#GregorianCalendar_E@ is used instead. Known issues: For historical reasons when performing time calculations all arithmetic currently takes place using 32-bit integers. This limits the reliable time range representable from 1902 until 2037.See the wikipedia article on the Calling @B_android#text#format#Time#switchTimezone_E@ on a date that cannot exist, such as a wall time that was skipped due to a DST transition, will result in a date in 1969 (i.e. -1, or 1 second before 1st Jan 1970 UTC). Much of the formatting / parsing assumes ASCII text and is therefore not suitable for use with non-ASCII scripts. No support for pseudo-zones like \"GMT-07:00\"."}