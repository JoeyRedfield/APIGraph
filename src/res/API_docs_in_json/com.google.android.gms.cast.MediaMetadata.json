{"Functions": {"getDate(java.lang.String)": {"Returns": [["", "The date, as a @B_java#util#Calendar_E@, or null if this field has not been set."]], "Parameters": [["String", "The field name."]], "Throws": [["IllegalArgumentException", "If the key is null or empty or the specified field's predefined type is not a date."]], "SeeAlso": [], "Permissions": [], "Description": "Reads the value of a date field.", "history": "", "FullName": "public Calendar getDate (String key)"}, "getMediaType()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the media type.", "history": "", "FullName": "public int getMediaType ()"}, "putDouble(java.lang.String, double)": {"Returns": [], "Parameters": [["String", "The key for the field."], ["double", "The new value for the field."]], "Throws": [["IllegalArgumentException", "If the key is null or empty or refers to a predefined field which is not a double field."]], "SeeAlso": [], "Permissions": [], "Description": "Stores a value in a double field.", "history": "", "FullName": "public void putDouble (String key, double value)"}, "putDate(java.lang.String, java.util.Calendar)": {"Returns": [], "Parameters": [["String", "The key for the field."], ["Calendar", "The new value for the field."]], "Throws": [["IllegalArgumentException", "If the key is null or empty or refers to a predefined field which is not a date field."]], "SeeAlso": [], "Permissions": [], "Description": "Stores a value in a date field.", "history": "", "FullName": "public void putDate (String key, Calendar value)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears this object. The media type is left unchanged.", "history": "", "FullName": "public void clear ()"}, "getInt(java.lang.String)": {"Returns": [["", "The value of the field, or null if the field has not been set."]], "Parameters": [], "Throws": [["IllegalArgumentException", "If the key is null or empty or refers to a predefined field which is not an int field."]], "SeeAlso": [], "Permissions": [], "Description": "Reads the value of an int field.", "history": "", "FullName": "public int getInt (String key)"}, "hasImages()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the metadata includes any images.", "history": "", "FullName": "public boolean hasImages ()"}, "putString(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["String", "The key for the field."], ["String", "The new value for the field."]], "Throws": [["IllegalArgumentException", "If the key is null or empty or refers to a predefined field which is not a String field."]], "SeeAlso": [], "Permissions": [], "Description": "Stores a value in a String field.", "history": "", "FullName": "public void putString (String key, String value)"}, "getDateAsString(java.lang.String)": {"Returns": [["", "The date, as a String containing hte ISO-8601 representation of the date, or null if this field has not been set."]], "Parameters": [["String", "The field name."]], "Throws": [["IllegalArgumentException", "If the key is null or empty or the specified field's predefined type is not a date."]], "SeeAlso": [], "Permissions": [], "Description": "Reads the value of a date field, as a string.", "history": "", "FullName": "public String getDateAsString (String key)"}, "putInt(java.lang.String, int)": {"Returns": [], "Parameters": [["String", "The key for the field."], ["int", "The new value for the field."]], "Throws": [["IllegalArgumentException", "If the key is null or empty or refers to a predefined field which is not an int field."]], "SeeAlso": [], "Permissions": [], "Description": "Stores a value in an int field.", "history": "", "FullName": "public void putInt (String key, int value)"}, "clearImages()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the list of images.", "history": "", "FullName": "public void clearImages ()"}, "MediaMetadata(int)": {"Returns": [], "Parameters": [["int", "The media type; one of the MEDIA_TYPE_* constants, or a value greater than or equal to @B_com#google#android#gms#cast#MediaMetadata#MEDIA_TYPE_USER_E@ for custom media types."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty, MediaMetadata with the given media type.", "history": "", "FullName": "public MediaMetadata (int mediaType)"}, "getImages()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of images. If there are no images, returns an empty list.", "history": "", "FullName": "public List<WebImage> getImages ()"}, "getString(java.lang.String)": {"Returns": [["", "The value of the field, or null if the field has not been set."]], "Parameters": [], "Throws": [["IllegalArgumentException", "If the key is null or empty or refers to a predefined field which is not a String field."]], "SeeAlso": [], "Permissions": [], "Description": "Reads the value of a String field.", "history": "", "FullName": "public String getString (String key)"}, "containsKey(java.lang.String)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if the object contains a field with the given key.", "history": "", "FullName": "public boolean containsKey (String key)"}, "equals(java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public boolean equals (Object other)"}, "getDouble(java.lang.String)": {"Returns": [["", "The value of the field, or null if the field has not been set."]], "Parameters": [], "Throws": [["IllegalArgumentException", "If the key is null or empty or refers to a predefined field which is not a double field."]], "SeeAlso": [], "Permissions": [], "Description": "Reads the value of a double field.", "history": "", "FullName": "public double getDouble (String key)"}, "MediaMetadata()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty, MediaMetadata with a media type of @B_com#google#android#gms#cast#MediaMetadata#MEDIA_TYPE_GENERIC_E@.", "history": "", "FullName": "public MediaMetadata ()"}, "keySet()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of keys for all fields that are present in the object.", "history": "", "FullName": "public Set<String> keySet ()"}, "addImage(com.google.android.gms.common.images.WebImage)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds an image to the list of images.", "history": "", "FullName": "public void addImage (WebImage image)"}, "hashCode()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int hashCode ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.cast.MediaMetadata", "ClassDesc": "Container class for media metadata. Metadata has a media type, an optional list of images, and a collection of metadata fields. Keys for common metadata fields are predefined as constants, but the application is free to define and use additional fields of its own. The values of the predefined fields have predefined types. For example, a track number is an int and a creation date is a String containing an ISO-8601 representation of a date and time. Attempting to store a value of an incorrect type in a field will result in a @B_java#lang#IllegalArgumentException_E@. Note that the Cast protocol limits which metadata fields can be used for a given media type. When a MediaMetadata object is serialized to JSON for delivery to a Cast receiver, any predefined fields which are not supported for a given media type will not be included in the serialized form, but any application-defined fields will always be included."}