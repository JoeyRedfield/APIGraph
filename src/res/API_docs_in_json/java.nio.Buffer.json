{"Functions": {"capacity()": {"Returns": [["int", "The capacity of this buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this buffer's capacity.", "history": "Added in API level 1", "FullName": "public final int capacity ()"}, "arrayOffset()": {"Returns": [["int", "The offset within this buffer's array of the first element of the buffer"]], "Parameters": [], "Throws": [["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is backed by an array but is read-only"], ["@B_java#lang#UnsupportedOperationException_E@", "If this buffer is not backed by an accessible array"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset within this buffer's backing array of the first element of the buffer If this buffer is backed by an array then buffer position Invoke the @B_java#nio#Buffer#hasArray_E@ method before invoking this method in order to ensure that this buffer has an accessible backing array.", "history": "Added in API level 9", "FullName": "public abstract int arrayOffset ()"}, "position()": {"Returns": [["int", "The position of this buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this buffer's position.", "history": "Added in API level 1", "FullName": "public final int position ()"}, "isDirect()": {"Returns": [["boolean", "true if, and only if, this buffer is direct"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this buffer is", "history": "Added in API level 9", "FullName": "public abstract boolean isDirect ()"}, "array()": {"Returns": [["@B_java#lang#Object_E@", "The array that backs this buffer"]], "Parameters": [], "Throws": [["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is backed by an array but is read-only"], ["@B_java#lang#UnsupportedOperationException_E@", "If this buffer is not backed by an accessible array"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the array that backs this buffer This method is intended to allow array-backed buffers to be passed to native code more efficiently. Concrete subclasses provide more strongly-typed return values for this method. Modifications to this buffer's content will cause the returned array's content to be modified, and vice versa. Invoke the @B_java#nio#Buffer#hasArray_E@ method before invoking this method in order to ensure that this buffer has an accessible backing array.", "history": "Added in API level 9", "FullName": "public abstract Object array ()"}, "rewind()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Rewinds this buffer. The position is set to zero and the mark is discarded. Invoke this method before a sequence of channel-write or", "history": "Added in API level 1", "FullName": "public Buffer rewind ()"}, "hasArray()": {"Returns": [["boolean", "true if, and only if, this buffer is backed by an array and is not read-only"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this buffer is backed by an accessible array. If this method returns @B_java#nio#Buffer#array_E@ and @B_java#nio#Buffer#arrayOffset_E@ methods may safely be invoked.", "history": "Added in API level 9", "FullName": "public abstract boolean hasArray ()"}, "position(int)": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [["int", "int: The new position value; must be non-negative and no larger than the current limit"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on newPosition do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Sets this buffer's position. If the mark is defined and larger than the new position then it is discarded.", "history": "Added in API level 1", "FullName": "public Buffer position (int newPosition)"}, "toString()": {"Returns": [["", "a printable representation of this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing this buffer.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "clear()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears this buffer. The position is set to zero, the limit is set to the capacity, and the mark is discarded. Invoke this method before using a sequence of channel-read or This method does not actually erase the data in the buffer, but it is named as if it did because it will most often be used in situations in which that might as well be the case.", "history": "Added in API level 1", "FullName": "public Buffer clear ()"}, "flip()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flips this buffer. The limit is set to the current position and then the position is set to zero. If the mark is defined then it is discarded. After a sequence of channel-read or This method is often used in conjunction with the @B_java#nio#ByteBuffer#compact_E@ method when transferring data from one place to another.", "history": "Added in API level 1", "FullName": "public Buffer flip ()"}, "limit()": {"Returns": [["int", "The limit of this buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this buffer's limit.", "history": "Added in API level 1", "FullName": "public final int limit ()"}, "limit(int)": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [["int", "int: The new limit value; must be non-negative and no larger than this buffer's capacity"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on newLimit do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Sets this buffer's limit. If the position is larger than the new limit then it is set to the new limit. If the mark is defined and larger than the new limit then it is discarded.", "history": "Added in API level 1", "FullName": "public Buffer limit (int newLimit)"}, "isReadOnly()": {"Returns": [["boolean", "true if, and only if, this buffer is read-only"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this buffer is read-only.", "history": "Added in API level 1", "FullName": "public abstract boolean isReadOnly ()"}, "reset()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [["@B_java#nio#InvalidMarkException_E@", "If the mark has not been set"]], "SeeAlso": [], "Permissions": [], "Description": "Resets this buffer's position to the previously-marked position. Invoking this method neither changes nor discards the mark's value.", "history": "Added in API level 1", "FullName": "public Buffer reset ()"}, "hasRemaining()": {"Returns": [["boolean", "true if, and only if, there is at least one element remaining in this buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether there are any elements between the current position and the limit.", "history": "Added in API level 1", "FullName": "public final boolean hasRemaining ()"}, "remaining()": {"Returns": [["int", "The number of elements remaining in this buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements between the current position and the limit.", "history": "Added in API level 1", "FullName": "public final int remaining ()"}, "mark()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this buffer's mark at its position.", "history": "Added in API level 1", "FullName": "public Buffer mark ()"}}, "Inheritance": [], "ClassName": "java.nio.Buffer", "ClassDesc": "A container for data of a specific primitive type. A buffer is a linear, finite sequence of elements of a specific primitive type. Aside from its content, the essential properties of a buffer are its capacity, limit, and position: There is one subclass of this class for each non-boolean primitive type. Each subclass of this class defines two categories of Data may also, of course, be transferred in to or out of a buffer by the I/O operations of an appropriate channel, which are always relative to the current position. A buffer's @B_java#nio#Buffer#reset_E@ method is invoked. The mark is not always defined, but when it is defined it is never negative and is never greater than the position. If the mark is defined then it is discarded when the position or the limit is adjusted to a value smaller than the mark. If the mark is not defined then invoking the @B_java#nio#Buffer#reset_E@ method causes an @B_java#nio#InvalidMarkException_E@ to be thrown. The following invariant holds for the mark, position, limit, and capacity values: A newly-created buffer always has a position of zero and a mark that is undefined. The initial limit may be zero, or it may be some other value that depends upon the type of the buffer and the manner in which it is constructed. Each element of a newly-allocated buffer is initialized to zero. In addition to methods for accessing the position, limit, and capacity values and for marking and resetting, this class also defines the following operations upon buffers: @B_java#nio#Buffer#clear_E@ makes a buffer ready for a new sequence of channel-read or relative @B_java#nio#Buffer#flip_E@ makes a buffer ready for a new sequence of channel-write or relative @B_java#nio#Buffer#rewind_E@ makes a buffer ready for re-reading the data that it already contains: It leaves the limit unchanged and sets the position to zero. Every buffer is readable, but not every buffer is writable. The mutation methods of each buffer class are specified as @B_java#nio#ReadOnlyBufferException_E@ when invoked upon a read-only buffer. A read-only buffer does not allow its content to be changed, but its mark, position, and limit values are mutable. Whether or not a buffer is read-only may be determined by invoking its @B_java#nio#Buffer#isReadOnly_E@ method. Buffers are not safe for use by multiple concurrent threads. If a buffer is to be used by more than one thread then access to the buffer should be controlled by appropriate synchronization. Methods in this class that do not otherwise have a value to return are specified to return the buffer upon which they are invoked. This allows method invocations to be chained; for example, the sequence of statements"}