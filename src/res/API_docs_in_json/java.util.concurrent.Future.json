{"Functions": {"get()": {"Returns": [["V", "the computed result"]], "Parameters": [], "Throws": [["@B_java#util#concurrent#CancellationException_E@", "if the computation was cancelled"], ["@B_java#util#concurrent#ExecutionException_E@", "if the computation threw an exception"], ["@B_java#lang#InterruptedException_E@", "if the current thread was interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Waits if necessary for the computation to complete, and then retrieves its result.", "history": "Added in API level 1", "FullName": "public abstract V get ()"}, "cancel(boolean)": {"Returns": [["boolean", "false if the task could not be cancelled, typically because it has already completed normally; true otherwise"]], "Parameters": [["boolean", "boolean: true if the thread executing this task should be interrupted; otherwise, in-progress tasks are allowed to complete"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to cancel execution of this task. This attempt will fail if the task has already completed, has already been cancelled, or could not be cancelled for some other reason. If successful, and this task has not started when cancel is called, this task should never run. If the task has already started, then the mayInterruptIfRunning parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task. After this method returns, subsequent calls to @B_java#util#concurrent#Future#isDone_E@ will always return true. Subsequent calls to @B_java#util#concurrent#Future#isCancelled_E@ will always return true if this method returned true.", "history": "Added in API level 1", "FullName": "public abstract boolean cancel (boolean mayInterruptIfRunning)"}, "isDone()": {"Returns": [["boolean", "true if this task completed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this task completed. Completion may be due to normal termination, an exception, or cancellation -- in all of these cases, this method will return true.", "history": "Added in API level 1", "FullName": "public abstract boolean isDone ()"}, "get(long,java.util.concurrent.TimeUnit)": {"Returns": [["V", "the computed result"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#util#concurrent#CancellationException_E@", "if the computation was cancelled"], ["@B_java#util#concurrent#ExecutionException_E@", "if the computation threw an exception"], ["@B_java#lang#InterruptedException_E@", "if the current thread was interrupted while waiting"], ["@B_java#util#concurrent#TimeoutException_E@", "if the wait timed out"]], "SeeAlso": [], "Permissions": [], "Description": "Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.", "history": "Added in API level 1", "FullName": "public abstract V get (long timeout, TimeUnit unit)"}, "get(long, java.util.concurrent.TimeUnit)": {"Returns": [["V", "the computed result"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#util#concurrent#CancellationException_E@", "if the computation was cancelled"], ["@B_java#util#concurrent#ExecutionException_E@", "if the computation threw an exception"], ["@B_java#lang#InterruptedException_E@", "if the current thread was interrupted while waiting"], ["@B_java#util#concurrent#TimeoutException_E@", "if the wait timed out"]], "SeeAlso": [], "Permissions": [], "Description": "Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.", "history": "added in API level 1", "FullName": "public abstract V get (long timeout, TimeUnit unit)"}, "isCancelled()": {"Returns": [["boolean", "true if this task was cancelled before it completed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this task was cancelled before it completed normally.", "history": "Added in API level 1", "FullName": "public abstract boolean isCancelled ()"}}, "Inheritance": [], "ClassName": "java.util.concurrent.Future<V>", "ClassDesc": "A Future represents the result of an asynchronous computation. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. The result can only be retrieved using method get when the computation has completed, blocking if necessary until it is ready. Cancellation is performed by the cancel method. Additional methods are provided to determine if the task completed normally or was cancelled. Once a computation has completed, the computation cannot be cancelled. If you would like to use a Future for the sake of cancellability but not provide a usable result, you can declare types of the form Future<?> and return null as a result of the underlying task. @B_java#util#concurrent#FutureTask_E@ class is an implementation of Future that implements Runnable, and so may be executed by an Executor. For example, the above construction with submit could be replaced by: Memory consistency effects: Actions taken by the asynchronous computation Future.get() in another thread."}