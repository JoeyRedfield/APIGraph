{"Functions": {"unmap(java.nio.ByteBuffer)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer to unmap This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unmaps a buffer previously returned by @B_android#os#SharedMemory#map_E@. This will immediately release the backing memory of the ByteBuffer, invalidating all references to it. Only call this method if there are no duplicates of the ByteBuffer in use and don't access the ByteBuffer after calling this method.", "history": "Added in API level 27", "FullName": "public static void unmap (ByteBuffer buffer)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 27", "FullName": "public int describeContents ()"}, "map(int,int,int)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "A ByteBuffer mapping. This value will never be null."]], "Parameters": [["int", "int: A bitwise-or'd combination of PROT_READ, PROT_WRITE, PROT_EXEC, or PROT_NONE."], ["int", "int: The offset into the shared memory to begin mapping. Must be >= 0 and less than getSize()."], ["int", "int: The length of the region to map. Must be > 0 and offset + length must not exceed getSize()."]], "Throws": [["@B_android#system#ErrnoException_E@", "if the mmap call failed."]], "SeeAlso": [], "Permissions": [], "Description": "Creates an mmap of the SharedMemory with the specified prot, offset, and length. This will always produce a new ByteBuffer window to the backing shared memory region. Every call to map() may be paired with a call to @B_android#os#SharedMemory#unmap_E@ when the ByteBuffer returned by map() is no longer needed.", "history": "Added in API level 27", "FullName": "public ByteBuffer map (int prot, int offset, int length)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close the backing @B_java#io#FileDescriptor_E@ of this SharedMemory instance. Note that all open mappings of the shared memory will remain valid and may continue to be used. The shared memory will not be freed until all file descriptor handles are closed and all memory mappings are unmapped.", "history": "Added in API level 27", "FullName": "public void close ()"}, "map(int, int, int)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "A ByteBuffer mapping.This value will never be null."]], "Parameters": [["int", "int: A bitwise-or'd combination of PROT_READ, PROT_WRITE, PROT_EXEC, or PROT_NONE."], ["int", "int: The offset into the shared memory to begin mapping. Must be >= 0 and less than getSize()."], ["int", "int: The length of the region to map. Must be > 0 and offset + length must not exceed getSize()."]], "Throws": [["@B_android#system#ErrnoException_E@", "if the mmap call failed."]], "SeeAlso": [], "Permissions": [], "Description": "Creates an mmap of the SharedMemory with the specified prot, offset, and length. This will always produce a new ByteBuffer window to the backing shared memory region. Every call to map() may be paired with a call to @B_android#os#SharedMemory#unmap_E@ when the ByteBuffer returned by map() is no longer needed.", "history": "added in API level 27", "FullName": "public ByteBuffer map (int prot, int offset, int length)"}, "mapReadOnly()": {"Returns": [["@B_java#nio#ByteBuffer_E@", "A ByteBuffer mapping This value will never be null."]], "Parameters": [], "Throws": [["@B_android#system#ErrnoException_E@", "if the mmap call failed."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a read-only mapping of the entire shared memory region. This requires the the protection level of the shared memory is at least PROT_READ or the map will fail. Use @B_android#os#SharedMemory#map_E@ to have more control over the mapping if desired. This is equivalent to map(OsConstants.PROT_READ, 0, getSize())", "history": "Added in API level 27", "FullName": "public ByteBuffer mapReadOnly ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written.This value must never be null."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 27", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "create(java.lang.String,int)": {"Returns": [["@B_android#os#SharedMemory_E@", "A SharedMemory instance of the requested size"]], "Parameters": [["@B_java#lang#String_E@", "String: The debug name to use for this SharedMemory instance. This can be null, however a debug name is recommended to help identify memory usage when using tools such as lsof or examining /proc/[pid]/maps This value may be null."], ["int", "int: The size of the shared memory to create. Must be greater than 0."]], "Throws": [["@B_android#system#ErrnoException_E@", "if the requested allocation fails."]], "SeeAlso": [], "Permissions": [], "Description": "Creates an anonymous SharedMemory instance with the provided debug name and size. The name is only used for debugging purposes and can help identify what the shared memory is used for when inspecting memory maps for the processes that have mapped this SharedMemory instance.", "history": "Added in API level 27", "FullName": "public static SharedMemory create (String name, int size)"}, "getSize()": {"Returns": [["int", "The size of the SharedMemory region."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 27", "FullName": "public int getSize ()"}, "create(java.lang.String, int)": {"Returns": [["@B_android#os#SharedMemory_E@", "A SharedMemory instance of the requested sizeThis value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The debug name to use for this SharedMemory instance. This can be null, however a debug name is recommended to help identify memory usage when using tools such as lsof or examining /proc/[pid]/maps"], ["int", "int: The size of the shared memory to create. Must be greater than 0."]], "Throws": [["@B_android#system#ErrnoException_E@", "if the requested allocation fails."]], "SeeAlso": [], "Permissions": [], "Description": "Creates an anonymous SharedMemory instance with the provided debug name and size. The name is only used for debugging purposes and can help identify what the shared memory is used for when inspecting memory maps for the processes that have mapped this SharedMemory instance.", "history": "added in API level 27", "FullName": "public static SharedMemory create (String name, int size)"}, "mapReadWrite()": {"Returns": [["@B_java#nio#ByteBuffer_E@", "A ByteBuffer mapping This value will never be null."]], "Parameters": [], "Throws": [["@B_android#system#ErrnoException_E@", "if the mmap call failed."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a read/write mapping of the entire shared memory region. This requires the the protection level of the shared memory is at least PROT_READ|PROT_WRITE or the map will fail. Use @B_android#os#SharedMemory#map_E@ to have more control over the mapping if desired. This is equivalent to map(OsConstants.PROT_READ | OsConstants.PROT_WRITE, 0, getSize())", "history": "Added in API level 27", "FullName": "public ByteBuffer mapReadWrite ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: This value must never be null."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 27", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "setProtect(int)": {"Returns": [["boolean", "Whether or not the requested protection was applied. Returns true on success, false if the requested protection was broader than the existing protection."]], "Parameters": [["int", "int: Any bitwise-or'ed combination of @B_android#system#OsConstants#PROT_READ_E@, @B_android#system#OsConstants#PROT_WRITE_E@, and @B_android#system#OsConstants#PROT_EXEC_E@; or @B_android#system#OsConstants#PROT_NONE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the protection on the shared memory to the combination specified in prot, which is either a bitwise-or'd combination of @B_android#system#OsConstants#PROT_READ_E@, @B_android#system#OsConstants#PROT_WRITE_E@, @B_android#system#OsConstants#PROT_EXEC_E@ from @B_android#system#OsConstants_E@, or @B_android#system#OsConstants#PROT_NONE_E@, to remove all further access. Note that protection can only ever be removed, not added. By default shared memory is created with protection set to PROT_READ | PROT_WRITE | PROT_EXEC. The protection passed here also only applies to any mappings created after calling this method. Existing mmaps of the shared memory retain whatever protection they had when they were created. A common usage of this is to share a read-only copy of the data with something else. To do that first create the read/write mapping with PROT_READ | PROT_WRITE, then call setProtect(PROT_READ) to remove write capability, then send the SharedMemory to another process. That process will only be able to mmap with PROT_READ.", "history": "Added in API level 27", "FullName": "public boolean setProtect (int prot)"}}, "Inheritance": [], "ClassName": "android.os.SharedMemory", "ClassDesc": "SharedMemory enables the creation, mapping, and protection control over anonymous shared memory."}