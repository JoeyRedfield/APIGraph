{"Functions": {"getKeyValidityStart()": {"Returns": [["@B_java#util#Date_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time instant before which the key is not yet valid or null if not restricted.", "history": "Added in API level 23", "FullName": "public Date getKeyValidityStart ()"}, "getDigests()": {"Returns": [["@B_java#lang#String_E@", "Value is @B_android#security#keystore#KeyProperties#DIGEST_NONE_E@, @B_android#security#keystore#KeyProperties#DIGEST_MD5_E@, @B_android#security#keystore#KeyProperties#DIGEST_SHA1_E@, @B_android#security#keystore#KeyProperties#DIGEST_SHA224_E@, @B_android#security#keystore#KeyProperties#DIGEST_SHA256_E@, @B_android#security#keystore#KeyProperties#DIGEST_SHA384_E@, or @B_android#security#keystore#KeyProperties#DIGEST_SHA512_E@"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this set has not been specified."]], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#isDigestsSpecified_E@"], "Permissions": [], "Description": "Returns the set of digest algorithms (e.g., SHA-256, SHA-384 with which the key can be used or null if not specified. See @B_android#security#keystore#KeyProperties_E@.DIGEST constants.", "history": "Added in API level 23", "FullName": "public String[] getDigests ()"}, "getEncryptionPaddings()": {"Returns": [["@B_java#lang#String_E@", "This value will never be null. Value is @B_android#security#keystore#KeyProperties#ENCRYPTION_PADDING_NONE_E@, @B_android#security#keystore#KeyProperties#ENCRYPTION_PADDING_PKCS7_E@, @B_android#security#keystore#KeyProperties#ENCRYPTION_PADDING_RSA_PKCS1_E@, or @B_android#security#keystore#KeyProperties#ENCRYPTION_PADDING_RSA_OAEP_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of padding schemes (e.g., PKCS7Padding, OEAPPadding, PKCS1Padding, NoPadding) with which the key can be used when encrypting/decrypting. Attempts to use the key with any other padding scheme will be rejected. See @B_android#security#keystore#KeyProperties_E@.ENCRYPTION_PADDING constants.", "history": "Added in API level 23", "FullName": "public String[] getEncryptionPaddings ()"}, "isUserPresenceRequired()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the key is authorized to be used only if a test of user presence has been performed between the Signature.initSign() and Signature.sign() calls. It requires that the KeyStore implementation have a direct way to validate the user presence for example a KeyStore hardware backed strongbox can use a button press that is observable in hardware. A test for user presence is tangential to authentication. The test can be part of an authentication step as long as this step can be validated by the hardware protecting the key and cannot be spoofed. For example, a physical button press can be used as a test of user presence if the other pins connected to the button are not able to simulate a button press. There must be no way for the primary processor to fake a button press, or that button must not be used as a test of user presence.", "history": "Added in API level 28", "FullName": "public boolean isUserPresenceRequired ()"}, "getUserAuthenticationValidityDurationSeconds()": {"Returns": [["int", "duration in seconds or -1 if authentication is required for every use of the key."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#isUserAuthenticationRequired_E@", "@B_android#security#keystore#KeyGenParameterSpec#Builder#setUserAuthenticationValidityDurationSeconds_E@"], "Permissions": [], "Description": "Gets the duration of time (seconds) for which this key is authorized to be used after the user is successfully authenticated. This has effect only if user authentication is required (see @B_android#security#keystore#KeyGenParameterSpec#isUserAuthenticationRequired_E@). This authorization applies only to secret key and private key operations. Public key operations are not restricted.", "history": "Added in API level 23", "FullName": "public int getUserAuthenticationValidityDurationSeconds ()"}, "isUserAuthenticationRequired()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#getUserAuthenticationValidityDurationSeconds_E@", "@B_android#security#keystore#KeyGenParameterSpec#Builder#setUserAuthenticationRequired_E@"], "Permissions": [], "Description": "Returns true if the key is authorized to be used only if the user has been authenticated. This authorization applies only to secret key and private key operations. Public key operations are not restricted.", "history": "Added in API level 23", "FullName": "public boolean isUserAuthenticationRequired ()"}, "getCertificateSerialNumber()": {"Returns": [["@B_java#math#BigInteger_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the serial number to be used on the X.509 certificate that will be put in the @B_java#security#KeyStore_E@.", "history": "Added in API level 23", "FullName": "public BigInteger getCertificateSerialNumber ()"}, "isRandomizedEncryptionRequired()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if encryption using this key must be sufficiently randomized to produce different ciphertexts for the same plaintext every time. The formal cryptographic property being required is indistinguishability under chosen-plaintext attack (IND-CPA). This property is important because it mitigates several classes of weaknesses due to which ciphertext may leak information about plaintext. For example, if a given plaintext always produces the same ciphertext, an attacker may see the repeated ciphertexts and be able to deduce something about the plaintext.", "history": "Added in API level 23", "FullName": "public boolean isRandomizedEncryptionRequired ()"}, "isUnlockedDeviceRequired()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#Builder#setUnlockedDeviceRequired_E@"], "Permissions": [], "Description": "Returns true if the screen must be unlocked for this key to be used for decryption or signing. Encryption and signature verification will still be available when the screen is locked.", "history": "Added in API level 28", "FullName": "public boolean isUnlockedDeviceRequired ()"}, "getAttestationChallenge()": {"Returns": [["byte[]", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#Builder#setAttestationChallenge_E@"], "Permissions": [], "Description": "Returns the attestation challenge value that will be placed in attestation certificate for this key pair. If this method returns non-null, the public key certificate for this key pair will contain an extension that describes the details of the key's configuration and authorizations, including the content of the attestation challenge value. If the key is in secure hardware, and if the secure hardware supports attestation, the certificate will be signed by a chain of certificates rooted at a trustworthy CA key. Otherwise the chain will be rooted at an untrusted certificate. If this method returns null, and the spec is used to generate an asymmetric (RSA or EC) key pair, the public key will have a self-signed certificate if it has purpose @B_android#security#keystore#KeyProperties#PURPOSE_SIGN_E@. If does not have purpose @B_android#security#keystore#KeyProperties#PURPOSE_SIGN_E@, it will have a fake certificate. Symmetric keys, such as AES and HMAC keys, do not have public key certificates. If a KeyGenParameterSpec with getAttestationChallenge returning non-null is used to generate a symmetric (AES or HMAC) key, @B_javax#crypto#KeyGenerator#generateKey_E@ will throw @B_java#security#InvalidAlgorithmParameterException_E@.", "history": "Added in API level 24", "FullName": "public byte[] getAttestationChallenge ()"}, "getSignaturePaddings()": {"Returns": [["@B_java#lang#String_E@", "This value will never be null. Value is @B_android#security#keystore#KeyProperties#SIGNATURE_PADDING_RSA_PKCS1_E@, or @B_android#security#keystore#KeyProperties#SIGNATURE_PADDING_RSA_PSS_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the set of padding schemes (e.g., PSS, PKCS#1) with which the key can be used when signing/verifying. Attempts to use the key with any other padding scheme will be rejected. See @B_android#security#keystore#KeyProperties_E@.SIGNATURE_PADDING constants.", "history": "Added in API level 23", "FullName": "public String[] getSignaturePaddings ()"}, "getBlockModes()": {"Returns": [["@B_java#lang#String_E@", "This value will never be null. Value is @B_android#security#keystore#KeyProperties#BLOCK_MODE_ECB_E@, @B_android#security#keystore#KeyProperties#BLOCK_MODE_CBC_E@, @B_android#security#keystore#KeyProperties#BLOCK_MODE_CTR_E@, or @B_android#security#keystore#KeyProperties#BLOCK_MODE_GCM_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the set of block modes (e.g., GCM, CBC) with which the key can be used when encrypting/decrypting. Attempts to use the key with any other block modes will be rejected. See @B_android#security#keystore#KeyProperties_E@.BLOCK_MODE constants.", "history": "Added in API level 23", "FullName": "public String[] getBlockModes ()"}, "isUserAuthenticationValidWhileOnBody()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#isUserAuthenticationRequired_E@", "@B_android#security#keystore#KeyGenParameterSpec#getUserAuthenticationValidityDurationSeconds_E@", "@B_android#security#keystore#KeyGenParameterSpec#Builder#setUserAuthenticationValidWhileOnBody_E@"], "Permissions": [], "Description": "Returns true if the key will remain authorized only until the device is removed from the user's body, up to the validity duration. This option has no effect on keys that don't have an authentication validity duration, and has no effect if the device lacks an on-body sensor. Authorization applies only to secret key and private key operations. Public key operations are not restricted.", "history": "Added in API level 24", "FullName": "public boolean isUserAuthenticationValidWhileOnBody ()"}, "getKeystoreAlias()": {"Returns": [["@B_java#lang#String_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the alias that will be used in the java.security.KeyStore in conjunction with the AndroidKeyStore.", "history": "Added in API level 23", "FullName": "public String getKeystoreAlias ()"}, "getPurposes()": {"Returns": [["int", "Value is either 0 or a combination of @B_android#security#keystore#KeyProperties#PURPOSE_ENCRYPT_E@, @B_android#security#keystore#KeyProperties#PURPOSE_DECRYPT_E@, @B_android#security#keystore#KeyProperties#PURPOSE_SIGN_E@, @B_android#security#keystore#KeyProperties#PURPOSE_VERIFY_E@, and @B_android#security#keystore#KeyProperties#PURPOSE_WRAP_KEY_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of purposes (e.g., encrypt, decrypt, sign) for which the key can be used. Attempts to use the key for any other purpose will be rejected. See @B_android#security#keystore#KeyProperties_E@.PURPOSE flags.", "history": "Added in API level 23", "FullName": "public int getPurposes ()"}, "isInvalidatedByBiometricEnrollment()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#isUserAuthenticationRequired_E@", "@B_android#security#keystore#KeyGenParameterSpec#getUserAuthenticationValidityDurationSeconds_E@", "@B_android#security#keystore#KeyGenParameterSpec#Builder#setInvalidatedByBiometricEnrollment_E@"], "Permissions": [], "Description": "Returns true if the key is irreversibly invalidated when a new biometric is enrolled or all enrolled biometrics are removed. This has effect only for keys that require biometric user authentication for every use.", "history": "Added in API level 24", "FullName": "public boolean isInvalidatedByBiometricEnrollment ()"}, "getKeySize()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the requested key size. If -1, the size should be looked up from @B_android#security#keystore#KeyGenParameterSpec#getAlgorithmParameterSpec_E@, if provided, otherwise an algorithm-specific default size should be used.", "history": "Added in API level 23", "FullName": "public int getKeySize ()"}, "getCertificateNotAfter()": {"Returns": [["@B_java#util#Date_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the end date to be used on the X.509 certificate that will be put in the @B_java#security#KeyStore_E@.", "history": "Added in API level 23", "FullName": "public Date getCertificateNotAfter ()"}, "getCertificateSubject()": {"Returns": [["@B_javax#security#auth#x500#X500Principal_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the subject distinguished name to be used on the X.509 certificate that will be put in the @B_java#security#KeyStore_E@.", "history": "Added in API level 23", "FullName": "public X500Principal getCertificateSubject ()"}, "getKeyValidityForConsumptionEnd()": {"Returns": [["@B_java#util#Date_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time instant after which the key is no longer valid for decryption and verification or null if not restricted.", "history": "Added in API level 23", "FullName": "public Date getKeyValidityForConsumptionEnd ()"}, "getKeyValidityForOriginationEnd()": {"Returns": [["@B_java#util#Date_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time instant after which the key is no longer valid for encryption and signing or null if not restricted.", "history": "Added in API level 23", "FullName": "public Date getKeyValidityForOriginationEnd ()"}, "getAlgorithmParameterSpec()": {"Returns": [["@B_java#security#spec#AlgorithmParameterSpec_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the key algorithm-specific @B_java#security#spec#AlgorithmParameterSpec_E@ that will be used for creation of the key or null if algorithm-specific defaults should be used.", "history": "Added in API level 23", "FullName": "public AlgorithmParameterSpec getAlgorithmParameterSpec ()"}, "isStrongBoxBacked()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the key is protected by a Strongbox security chip.", "history": "Added in API level 28", "FullName": "public boolean isStrongBoxBacked ()"}, "isUserConfirmationRequired()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#Builder#setUserConfirmationRequired_E@"], "Permissions": [], "Description": "Returns true if the key is authorized to be used only for messages confirmed by the user. Confirmation is separate from user authentication (see @B_android#security#keystore#KeyGenParameterSpec#Builder#setUserAuthenticationRequired_E@). Keys can be created that require confirmation but not user authentication, or user authentication but not confirmation, or both. Confirmation verifies that some user with physical possession of the device has approved a displayed message. User authentication verifies that the correct user is present and has authenticated. This authorization applies only to secret key and private key operations. Public key operations are not restricted.", "history": "Added in API level 28", "FullName": "public boolean isUserConfirmationRequired ()"}, "isDigestsSpecified()": {"Returns": [["boolean", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#getDigests_E@"], "Permissions": [], "Description": "Returns true if the set of digest algorithms with which the key can be used has been specified.", "history": "Added in API level 23", "FullName": "public boolean isDigestsSpecified ()"}, "getCertificateNotBefore()": {"Returns": [["@B_java#util#Date_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the start date to be used on the X.509 certificate that will be put in the @B_java#security#KeyStore_E@.", "history": "Added in API level 23", "FullName": "public Date getCertificateNotBefore ()"}}, "Inheritance": [], "ClassName": "android.security.keystore.KeyGenParameterSpec", "ClassDesc": "@B_java#security#spec#AlgorithmParameterSpec_E@ for initializing a @B_java#security#KeyPairGenerator_E@ or a @B_javax#crypto#KeyGenerator_E@ of the To generate an asymmetric key pair or a symmetric key, create an instance of this class using the @B_android#security#keystore#KeyGenParameterSpec#Builder_E@, initialize a KeyPairGenerator or a KeyGenerator of the desired key type (e.g., EC or AES -- see @B_android#security#keystore#KeyProperties_E@.KEY_ALGORITHM constants) from the AndroidKeyStore provider with the KeyGenParameterSpec instance, and then generate a key or key pair using @B_javax#crypto#KeyGenerator#generateKey_E@ or @B_java#security#KeyPairGenerator#generateKeyPair_E@. The generated key pair or key will be returned by the generator and also stored in the Android Keystore under the alias specified in this spec. To obtain the secret or private key from the Android Keystore use @B_java#security#KeyStore#getKey_E@ or @B_java#security#KeyStore#getEntry_E@. To obtain the public key from the Android Keystore use @B_java#security#KeyStore#getCertificate_E@ and then @B_java#security#cert#Certificate#getPublicKey_E@. To help obtain algorithm-specific public parameters of key pairs stored in the Android Keystore, generated private keys implement @B_java#security#interfaces#ECKey_E@ or @B_java#security#interfaces#RSAKey_E@ interfaces whereas public keys implement @B_java#security#interfaces#ECPublicKey_E@ or @B_java#security#interfaces#RSAPublicKey_E@ interfaces. For asymmetric key pairs, a self-signed X.509 certificate will be also generated and stored in the Android Keystore. This is because the @B_java#security#KeyStore_E@ abstraction does not support storing key pairs without a certificate. The subject, serial number, and validity dates of the certificate can be customized in this spec. The self-signed certificate may be replaced at a later time by a certificate signed by a Certificate Authority (CA). NOTE: If a private key is not authorized to sign the self-signed certificate, then the certificate will be created with an invalid signature which will not verify. Such a certificate is still useful because it provides access to the public key. To generate a valid signature for the certificate the key needs to be authorized for all of the following: @B_android#security#keystore#KeyProperties#PURPOSE_SIGN_E@, operation without requiring the user to be authenticated (see @B_android#security#keystore#KeyGenParameterSpec#Builder#setUserAuthenticationRequired_E@), signing/origination at this moment in time (see @B_android#security#keystore#KeyGenParameterSpec#Builder#setKeyValidityStart_E@ and @B_android#security#keystore#KeyGenParameterSpec#Builder#setKeyValidityForOriginationEnd_E@), suitable digest, (RSA keys only) padding scheme @B_android#security#keystore#KeyProperties#SIGNATURE_PADDING_RSA_PKCS1_E@. NOTE: The key material of the generated symmetric and private keys is not accessible. The key material of the public keys is accessible. Instances of this class are immutable. key1 where the private key is authorized to be used only for signing using SHA-256, SHA-384, or SHA-512 digest and only if the user has been authenticated within the last five minutes. The use of the public key is unrestricted (See Known Issues). key1 authorized to be used only for signing using the RSA-PSS signature padding scheme with SHA-256 or SHA-512 digests. The use of the public key is unrestricted. key1 where the private key is authorized to be used only for decryption using RSA OAEP encryption padding scheme with SHA-256 or SHA-512 digests. The use of the public key is unrestricted. key2 authorized to be used only for encryption/decryption in GCM mode with no padding. key2 authorized to be used only for generating an HMAC using SHA-256."}