{"Functions": {"setHotspotBounds(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: position in pixels of the left bound"], ["int", "int: position in pixels of the top bound"], ["int", "int: position in pixels of the right bound"], ["int", "int: position in pixels of the bottom bound"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#getHotspotBounds_E@"], "Permissions": [], "Description": "Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds.", "history": "Added in API level 21", "FullName": "public void setHotspotBounds (int left, int top, int right, int bottom)"}, "getHotspotBounds(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: the rect to populate with the hotspot bounds This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#setHotspotBounds_E@"], "Permissions": [], "Description": "Populates outRect with the hotspot bounds.", "history": "Added in API level 23", "FullName": "public void getHotspotBounds (Rect outRect)"}, "getState()": {"Returns": [["int[]", "An array of resource Ids describing the current state. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describes the current state, as a union of primitve states, such as @B_android#R#attr#state_focused_E@, @B_android#R#attr#state_selected_E@, etc. Some drawables may modify their imagery based on the selected state.", "history": "Added in API level 1", "FullName": "public int[] getState ()"}, "isStateful()": {"Returns": [["boolean", "True if this drawable changes its appearance based on state, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#setState_E@"], "Permissions": [], "Description": "Indicates whether this drawable will change its appearance based on state. Clients can use this to determine whether it is necessary to calculate their state and call setState.", "history": "Added in API level 1", "FullName": "public boolean isStateful ()"}, "unscheduleSelf(java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: The runnable that you no longer want called. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#Callback#unscheduleDrawable_E@"], "Permissions": [], "Description": "Use the current @B_android#graphics#drawable#Drawable#Callback_E@ implementation to have this Drawable unscheduled. Does nothing if there is no Callback attached to the Drawable.", "history": "Added in API level 1", "FullName": "public void unscheduleSelf (Runnable what)"}, "isProjected()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#RenderNode#setProjectBackwards_E@"], "Permissions": [], "Description": "Whether this drawable requests projection. Indicates that the @B_android#graphics#RenderNode_E@ this Drawable will draw into should be drawn immediately after the closest ancestor RenderNode containing a projection receiver.", "history": "Added in API level 29", "FullName": "public boolean isProjected ()"}, "copyBounds(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: Rect to receive the drawable's bounds (allocated by the caller). This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a copy of the drawable's bounds in the specified Rect (allocated by the caller). The bounds specify where this will draw when its draw() method is called.", "history": "Added in API level 1", "FullName": "public final void copyBounds (Rect bounds)"}, "setAutoMirrored(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Set to true if the Drawable should be mirrored, false if not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left). See @B_android#util#LayoutDirection_E@.", "history": "Added in API level 19", "FullName": "public void setAutoMirrored (boolean mirrored)"}, "setBounds(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify a bounding rectangle for the Drawable. This is where the drawable will draw when its draw() method is called.", "history": "Added in API level 1", "FullName": "public void setBounds (int left, int top, int right, int bottom)"}, "scheduleSelf(java.lang.Runnable,long)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: The action being scheduled. This value must never be null."], ["long", "long: The time (in milliseconds) to run."]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#Callback#scheduleDrawable_E@"], "Permissions": [], "Description": "Use the current @B_android#graphics#drawable#Drawable#Callback_E@ implementation to have this Drawable scheduled. Does nothing if there is no Callback attached to the Drawable.", "history": "Added in API level 1", "FullName": "public void scheduleSelf (Runnable what, long when)"}, "setDither(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setDither_E@"], "Permissions": [], "Description": "This property is ignored. Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public void setDither (boolean dither)"}, "setColorFilter(int,android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: This value must never be null."]], "Throws": [], "SeeAlso": ["_E@"], "Permissions": [], "Description": "use @B_android#graphics#drawable#Drawable#setColorFilter_E@ with an instance of @B_android#graphics#BlendModeColorFilter_E@ Specify a color and Porter-Duff mode to be the color filter for this drawable. Convenience for @B_android#graphics#drawable#Drawable#setColorFilter_E@ which constructs a @B_android#graphics#PorterDuffColorFilter_E@. @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public void setColorFilter (int color, PorterDuff.Mode mode)"}, "scheduleSelf(java.lang.Runnable, long)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: The action being scheduled.This value must never be null."], ["long", "long: The time (in milliseconds) to run."]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#Callback#scheduleDrawable_E@"], "Permissions": [], "Description": "Use the current @B_android#graphics#drawable#Drawable#Callback_E@ implementation to have this Drawable scheduled. Does nothing if there is no Callback attached to the Drawable.", "history": "added in API level 1", "FullName": "public void scheduleSelf (Runnable what, long when)"}, "createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "no returns description in source"]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value must never be null."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Create a drawable from inside an XML document using an optional @B_android#content#res#Resources#Theme_E@. Called on a parser positioned at a tag in an XML document, tries to create a Drawable from that tag. Returns null if the tag is not a valid drawable.", "history": "Added in API level 21", "FullName": "public static Drawable createFromXmlInner (Resources r, XmlPullParser parser, AttributeSet attrs, Resources.Theme theme)"}, "setHotspot(float, float)": {"Returns": [], "Parameters": [["float", "float: The X coordinate of the center of the hotspot"], ["float", "float: The Y coordinate of the center of the hotspot"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the hotspot's location within the drawable.", "history": "added in API level 21", "FullName": "public void setHotspot (float x, float y)"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The canvas to draw into This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter).", "history": "Added in API level 1", "FullName": "public abstract void draw (Canvas canvas)"}, "inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": ["@B_android#graphics#drawable#Drawable#inflate_E@"], "Permissions": [], "Description": "Inflate this Drawable from an XML resource. Does not apply a theme.", "history": "Added in API level 1", "FullName": "public void inflate (Resources r, XmlPullParser parser, AttributeSet attrs)"}, "inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: Resources used to resolve attribute values This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: XML parser from which to inflate this Drawable This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: Base set of attribute values This value must never be null."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: Theme to apply, may be null This value may be null."]], "Throws": [["", "org.xmlpull.v1.XmlPullParserException"], ["", "java.io.IOException"], ["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inflate this Drawable from an XML resource optionally styled by a theme. This can't be called more than once for each Drawable. Note that framework may have called this once to create the Drawable instance from XML resource.", "history": "Added in API level 21", "FullName": "public void inflate (Resources r, XmlPullParser parser, AttributeSet attrs, Resources.Theme theme)"}, "getMinimumHeight()": {"Returns": [["int", "The minimum height suggested by this Drawable. If this Drawable doesn't have a suggested minimum height, 0 is returned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum height suggested by this Drawable. If a View uses this Drawable as a background, it is suggested that the View use at least this value for its height. (There will be some scenarios where this will not be possible.) This value should INCLUDE any padding.", "history": "Added in API level 1", "FullName": "public int getMinimumHeight ()"}, "createFromStream(java.io.InputStream,java.lang.String)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "no returns description in source"]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a drawable from an inputstream", "history": "Added in API level 1", "FullName": "public static Drawable createFromStream (InputStream is, String srcName)"}, "copyBounds()": {"Returns": [["@B_android#graphics#Rect_E@", "A copy of the drawable's bounds This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a copy of the drawable's bounds in a new Rect. This returns the same values as getBounds(), but the returned object is guaranteed to not be changed later by the drawable (i.e. it retains no reference to this rect). If the caller already has a Rect allocated, call copyBounds(rect).", "history": "Added in API level 1", "FullName": "public final Rect copyBounds ()"}, "setAlpha(int)": {"Returns": [], "Parameters": [["int", "int: Value is between 0 and 255 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an alpha value for the drawable. 0 means fully transparent, and 255 means fully opaque.", "history": "Added in API level 1", "FullName": "public abstract void setAlpha (int alpha)"}, "setFilterBitmap(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#isFilterBitmap_E@", "@B_android#graphics#Paint#setFilterBitmap_E@"], "Permissions": [], "Description": "Set to true to have the drawable filter its bitmaps with bilinear sampling when they are scaled or rotated. This can improve appearance when bitmaps are rotated. If the drawable does not use bitmaps, this call is ignored.", "history": "Added in API level 1", "FullName": "public void setFilterBitmap (boolean filter)"}, "onStateChange(int[])": {"Returns": [["boolean", "Returns true if the state change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last state."]], "Parameters": [["int[]", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you recognize the specified state.", "history": "Added in API level 1", "FullName": "protected boolean onStateChange (int[] state)"}, "createFromPath(java.lang.String)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This value may be null."]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a drawable from file path name.", "history": "Added in API level 1", "FullName": "public static Drawable createFromPath (String pathName)"}, "createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "no returns description in source"]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Create from inside an XML document. Called on a parser positioned at a tag in an XML document, tries to create a Drawable from that tag. Returns null if the tag is not a valid drawable.", "history": "Added in API level 1", "FullName": "public static Drawable createFromXmlInner (Resources r, XmlPullParser parser, AttributeSet attrs)"}, "getOpacity()": {"Returns": [["int", "int The opacity class of the Drawable. Value is @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#PixelFormat_E@"], "Permissions": [], "Description": "This method is no longer used in graphics optimizations Return the opacity/transparency of this Drawable. The returned value is one of the abstract format constants in @B_android#graphics#PixelFormat_E@: @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@. An OPAQUE drawable is one that draws all all content within its bounds, completely covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable is a drawable in any other state, where the drawable will draw some, but not all, of the content within its bounds and at least some content behind the drawable will be visible. If the visibility of the drawable's contents cannot be determined, the safest/best return value is TRANSLUCENT. Generally a Drawable should be as conservative as possible with the value it returns. For example, if it contains multiple child drawables and only shows one of them at a time, if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned. You can use the method @B_android#graphics#drawable#Drawable#resolveOpacity_E@ to perform a standard reduction of two opacities to the appropriate single output. Note that the returned value does not necessarily take into account a custom alpha or color filter that has been applied by the client through the @B_android#graphics#drawable#Drawable#setAlpha_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ methods. Some subclasses, such as @B_android#graphics#drawable#BitmapDrawable_E@, @B_android#graphics#drawable#ColorDrawable_E@, and @B_android#graphics#drawable#GradientDrawable_E@, do account for the value of @B_android#graphics#drawable#Drawable#setAlpha_E@, but the general behavior is dependent upon the implementation of the subclass.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public abstract int getOpacity ()"}, "getTransparentRegion()": {"Returns": [["@B_android#graphics#Region_E@", "Returns null if the Drawables has no transparent region to report, else a Region holding the parts of the Drawable's bounds that are transparent."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Region representing the part of the Drawable that is completely transparent. This can be used to perform drawing operations, identifying which parts of the target will not change when rendering the Drawable. The default implementation returns null, indicating no transparent region; subclasses can optionally override this to return an actual Region if they want to supply this optimization information, but it is not required that they do so.", "history": "Added in API level 1", "FullName": "public Region getTransparentRegion ()"}, "setTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: BlendMode to apply to the drawable, a value of null sets the default blend mode value of @B_android#graphics#BlendMode#SRC_IN_E@ This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#setTint_E@", "@B_android#graphics#drawable#Drawable#setTintList_E@"], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#BlendMode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@", "history": "Added in API level 29", "FullName": "public void setTintBlendMode (BlendMode blendMode)"}, "getBounds()": {"Returns": [["@B_android#graphics#Rect_E@", "The bounds of the drawable (which may change later, so caller beware). DO NOT ALTER the returned object as it may change the stored bounds of this drawable. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#copyBounds_E@"], "Permissions": [], "Description": "Return the drawable's bounds Rect. Note: for efficiency, the returned object may be the same object stored in the drawable (though this is not guaranteed), so if a persistent copy of the bounds is needed, call copyBounds(rect) instead. You should also not change the object returned by this method as it may be the same object stored in the drawable.", "history": "Added in API level 1", "FullName": "public final Rect getBounds ()"}, "onLevelChange(int)": {"Returns": [["boolean", "Returns true if the level change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last level."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on level.", "history": "Added in API level 1", "FullName": "protected boolean onLevelChange (int level)"}, "Drawable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public Drawable ()"}, "canApplyTheme()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean canApplyTheme ()"}, "setHotspot(float,float)": {"Returns": [], "Parameters": [["float", "float: The X coordinate of the center of the hotspot"], ["float", "float: The Y coordinate of the center of the hotspot"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the hotspot's location within the drawable.", "history": "Added in API level 21", "FullName": "public void setHotspot (float x, float y)"}, "onLayoutDirectionChanged(int)": {"Returns": [["boolean", "true if the layout direction change has caused the appearance of the drawable to change such that it needs to be re-drawn, false otherwise"]], "Parameters": [["int", "int: the new resolved layout direction Value is @B_android#view#View#LAYOUT_DIRECTION_LTR_E@, or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#setLayoutDirection_E@"], "Permissions": [], "Description": "Called when the drawable's resolved layout direction changes.", "history": "Added in API level 23", "FullName": "public boolean onLayoutDirectionChanged (int layoutDirection)"}, "mutate()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This drawable. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#ConstantState_E@", "@B_android#graphics#drawable#Drawable#getConstantState_E@"], "Permissions": [], "Description": "Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default, all drawables instances loaded from the same resource share a common state; if you modify the state of one instance, all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect.", "history": "Added in API level 3", "FullName": "public Drawable mutate ()"}, "setLevel(int)": {"Returns": [["boolean", "Returns true if this change in level has caused the appearance of the Drawable to change (hence requiring an invalidate), otherwise returns false."]], "Parameters": [["int", "int: The new level, from 0 (minimum) to 10000 (maximum). Value is between 0 and 10000 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify the level for the drawable. This allows a drawable to vary its imagery based on a continuous controller, for example to show progress or volume level. If the new level you are supplying causes the appearance of the Drawable to change, then it is responsible for calling @B_android#graphics#drawable#Drawable#invalidateSelf_E@ in order to have itself redrawn, and true will be returned from this function.", "history": "Added in API level 1", "FullName": "public final boolean setLevel (int level)"}, "setCallback(android.graphics.drawable.Drawable.Callback)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable#Callback_E@", "Drawable.Callback: The client's Callback implementation. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#getCallback_E@"], "Permissions": [], "Description": "Bind a @B_android#graphics#drawable#Drawable#Callback_E@ object to this Drawable. Required for clients that want to support animated drawables.", "history": "Added in API level 1", "FullName": "public final void setCallback (Drawable.Callback cb)"}, "setTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: A Porter-Duff blending mode to apply to the drawable, a value of null sets the default Porter-Diff blending mode value of @B_android#graphics#PorterDuff#Mode#SRC_IN_E@ This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#setTint_E@", "@B_android#graphics#drawable#Drawable#setTintList_E@"], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "Added in API level 21", "FullName": "public void setTintMode (PorterDuff.Mode tintMode)"}, "getLayoutDirection()": {"Returns": [["int", "One of @B_android#view#View#LAYOUT_DIRECTION_LTR_E@, @B_android#view#View#LAYOUT_DIRECTION_RTL_E@ Value is @B_android#view#View#LAYOUT_DIRECTION_LTR_E@, or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#setLayoutDirection_E@"], "Permissions": [], "Description": "Returns the resolved layout direction for this Drawable.", "history": "Added in API level 23", "FullName": "public int getLayoutDirection ()"}, "createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "no returns description in source"]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources no parameter comment"], ["@B_android#util#TypedValue_E@", "TypedValue no parameter comment"], ["@B_java#io#InputStream_E@", "InputStream no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a drawable from an inputstream, using the given resources and value to determine density information.", "history": "Added in API level 4", "FullName": "public static Drawable createFromResourceStream (Resources res, TypedValue value, InputStream is, String srcName)"}, "setTint(int)": {"Returns": [], "Parameters": [["int", "int: Color to use for tinting this drawable"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#setTintList_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintBlendMode_E@"], "Permissions": [], "Description": "Specifies tint color for this drawable. A Drawable's drawing content will be blended together with its tint before it is drawn to the screen. This functions similarly to @B_android#graphics#drawable#Drawable#setColorFilter_E@. To clear the tint, pass null to @B_android#graphics#drawable#Drawable#setTintList_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "Added in API level 21", "FullName": "public void setTint (int tintColor)"}, "getIntrinsicWidth()": {"Returns": [["int", "the intrinsic width, or -1 if no intrinsic width"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic width. Intrinsic width is the width at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic width, such as a solid color, this method returns -1.", "history": "Added in API level 1", "FullName": "public int getIntrinsicWidth ()"}, "getColorFilter()": {"Returns": [["@B_android#graphics#ColorFilter_E@", "the current color filter, or null if none set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current color filter, or null if none set.", "history": "Added in API level 21", "FullName": "public ColorFilter getColorFilter ()"}, "jumpToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If this Drawable does transition animations between states, ask that it immediately jump to the current state and skip any active animations.", "history": "Added in API level 11", "FullName": "public void jumpToCurrentState ()"}, "isVisible()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public final boolean isVisible ()"}, "createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources.Theme)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This value will never be null."]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: This value must never be null."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Create a drawable from an XML document using an optional @B_android#content#res#Resources#Theme_E@. For more information on how to create resources in XML, see", "history": "Added in API level 21", "FullName": "public static Drawable createFromXml (Resources r, XmlPullParser parser, Resources.Theme theme)"}, "setVisible(boolean,boolean)": {"Returns": [["boolean", "boolean Returns true if the new visibility is different than its previous state."]], "Parameters": [["boolean", "boolean: Set to true if visible, false if not."], ["boolean", "boolean: You can supply true here to force the drawable to behave as if it has just become visible, even if it had last been set visible. Used for example to force animations to restart."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is visible. This generally does not impact the Drawable's behavior, but is a hint that can be used by some Drawables, for example, to decide whether run animations.", "history": "Added in API level 1", "FullName": "public boolean setVisible (boolean visible, boolean restart)"}, "createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory.Options)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This value may be null."]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: This value may be null."], ["@B_android#util#TypedValue_E@", "TypedValue: This value may be null."], ["@B_java#io#InputStream_E@", "InputStream: This value may be null."], ["@B_java#lang#String_E@", "String: This value may be null."], ["@B_android#graphics#BitmapFactory#Options_E@", "BitmapFactory.Options: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prefer the version without an Options object. Create a drawable from an inputstream, using the given resources and value to determine density information.", "history": "Added in API level 5 Deprecated in API level 28", "FullName": "public static Drawable createFromResourceStream (Resources res, TypedValue value, InputStream is, String srcName, BitmapFactory.Options opts)"}, "setBounds(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify a bounding rectangle for the Drawable. This is where the drawable will draw when its draw() method is called.", "history": "Added in API level 1", "FullName": "public void setBounds (Rect bounds)"}, "setLayoutDirection(int)": {"Returns": [["boolean", "true if the layout direction change has caused the appearance of the drawable to change such that it needs to be re-drawn, false otherwise"]], "Parameters": [["int", "int: the resolved layout direction for the drawable, either @B_android#view#View#LAYOUT_DIRECTION_LTR_E@ or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@ Value is @B_android#view#View#LAYOUT_DIRECTION_LTR_E@, or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#getLayoutDirection_E@"], "Permissions": [], "Description": "Set the layout direction for this drawable. Should be a resolved layout direction, as the Drawable has no capacity to do the resolution on its own.", "history": "Added in API level 23", "FullName": "public final boolean setLayoutDirection (int layoutDirection)"}, "resolveOpacity(int,int)": {"Returns": [["int", "int The combined opacity value. Value is @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@"]], "Parameters": [["int", "int: One opacity value. Value is @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@"], ["int", "int: Another opacity value. Value is @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#getOpacity_E@"], "Permissions": [], "Description": "Return the appropriate opacity value for two source opacities. If either is UNKNOWN, that is returned; else, if either is TRANSLUCENT, that is returned; else, if either is TRANSPARENT, that is returned; else, OPAQUE is returned. This is to help in implementing @B_android#graphics#drawable#Drawable#getOpacity_E@.", "history": "Added in API level 1", "FullName": "public static int resolveOpacity (int op1, int op2)"}, "getLevel()": {"Returns": [["int", "int Current level, from 0 (minimum) to 10000 (maximum). Value is between 0 and 10000 inclusive"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current level.", "history": "Added in API level 1", "FullName": "public final int getLevel ()"}, "resolveOpacity(int, int)": {"Returns": [["int", "int The combined opacity value."]], "Parameters": [["int", "int: One opacity value."], ["int", "int: Another opacity value."]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#getOpacity_E@"], "Permissions": [], "Description": "Return the appropriate opacity value for two source opacities. If either is UNKNOWN, that is returned; else, if either is TRANSLUCENT, that is returned; else, if either is TRANSPARENT, that is returned; else, OPAQUE is returned. This is to help in implementing @B_android#graphics#drawable#Drawable#getOpacity_E@.", "history": "added in API level 1", "FullName": "public static int resolveOpacity (int op1, int op2)"}, "getOpticalInsets()": {"Returns": [["@B_android#graphics#Insets_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return in insets the layout insets suggested by this Drawable for use with alignment operations during layout.", "history": "Added in API level 29", "FullName": "public Insets getOpticalInsets ()"}, "getAlpha()": {"Returns": [["int", "Value is between 0 and 255 inclusive"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.", "history": "Added in API level 19", "FullName": "public int getAlpha ()"}, "getIntrinsicHeight()": {"Returns": [["int", "the intrinsic height, or -1 if no intrinsic height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic height. Intrinsic height is the height at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic height, such as a solid color, this method returns -1.", "history": "Added in API level 1", "FullName": "public int getIntrinsicHeight ()"}, "getDirtyBounds()": {"Returns": [["@B_android#graphics#Rect_E@", "The dirty bounds of this drawable This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the drawable's dirty bounds Rect. Note: for efficiency, the returned object may be the same object stored in the drawable (though this is not guaranteed). By default, this returns the full drawable bounds. Custom drawables may override this method to perform more precise invalidation.", "history": "Added in API level 21", "FullName": "public Rect getDirtyBounds ()"}, "getConstantState()": {"Returns": [["@B_android#graphics#drawable#Drawable#ConstantState_E@", "The ConstantState associated to that Drawable. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#ConstantState_E@", "@B_android#graphics#drawable#Drawable#mutate_E@"], "Permissions": [], "Description": "Return a @B_android#graphics#drawable#Drawable#ConstantState_E@ instance that holds the shared state of this Drawable.", "history": "Added in API level 1", "FullName": "public Drawable.ConstantState getConstantState ()"}, "createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This value will never be null."]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Create a drawable from an XML document. For more information on how to create resources in XML, see", "history": "Added in API level 1", "FullName": "public static Drawable createFromXml (Resources r, XmlPullParser parser)"}, "isAutoMirrored()": {"Returns": [["boolean", "boolean Returns true if this Drawable will be automatically mirrored."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left. See @B_android#util#LayoutDirection_E@.", "history": "Added in API level 19", "FullName": "public boolean isAutoMirrored ()"}, "getOutline(android.graphics.Outline)": {"Returns": [], "Parameters": [["@B_android#graphics#Outline_E@", "Outline: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setOutlineProvider_E@"], "Permissions": [], "Description": "Called to get the drawable to populate the Outline that defines its drawing area. This method is called by the default @B_android#view#ViewOutlineProvider_E@ to define the outline of the View. The default behavior defines the outline to be the bounding rectangle of 0 alpha. Subclasses that wish to convey a different shape or alpha value must override this method.", "history": "Added in API level 21", "FullName": "public void getOutline (Outline outline)"}, "setVisible(boolean, boolean)": {"Returns": [["boolean", "boolean Returns true if the new visibility is different than its previous state."]], "Parameters": [["boolean", "boolean: Set to true if visible, false if not."], ["boolean", "boolean: You can supply true here to force the drawable to behave as if it has just become visible, even if it had last been set visible. Used for example to force animations to restart."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is visible. This generally does not impact the Drawable's behavior, but is a hint that can be used by some Drawables, for example, to decide whether run animations.", "history": "added in API level 1", "FullName": "public boolean setVisible (boolean visible, boolean restart)"}, "setBounds(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify a bounding rectangle for the Drawable. This is where the drawable will draw when its draw() method is called.", "history": "added in API level 1", "FullName": "public void setBounds (int left, int top, int right, int bottom)"}, "getMinimumWidth()": {"Returns": [["int", "The minimum width suggested by this Drawable. If this Drawable doesn't have a suggested minimum width, 0 is returned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum width suggested by this Drawable. If a View uses this Drawable as a background, it is suggested that the View use at least this value for its width. (There will be some scenarios where this will not be possible.) This value should INCLUDE any padding.", "history": "Added in API level 1", "FullName": "public int getMinimumWidth ()"}, "onBoundsChange(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on the bounds.", "history": "Added in API level 1", "FullName": "protected void onBoundsChange (Rect bounds)"}, "clearColorFilter()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the color filter for this drawable.", "history": "Added in API level 1", "FullName": "public void clearColorFilter ()"}, "getCallback()": {"Returns": [["@B_android#graphics#drawable#Drawable#Callback_E@", "A @B_android#graphics#drawable#Drawable#Callback_E@ instance or null if no callback was set."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#setCallback_E@"], "Permissions": [], "Description": "Return the current @B_android#graphics#drawable#Drawable#Callback_E@ implementation attached to this Drawable.", "history": "Added in API level 11", "FullName": "public Drawable.Callback getCallback ()"}, "applyTheme(android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: the theme to apply This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies the specified theme to this Drawable and its children.", "history": "Added in API level 21", "FullName": "public void applyTheme (Resources.Theme t)"}, "invalidateSelf()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#Callback#invalidateDrawable_E@", "@B_android#graphics#drawable#Drawable#getCallback_E@", "@B_android#graphics#drawable#Drawable#setCallback_E@"], "Permissions": [], "Description": "Use the current @B_android#graphics#drawable#Drawable#Callback_E@ implementation to have this Drawable redrawn. Does nothing if there is no Callback attached to the Drawable.", "history": "Added in API level 1", "FullName": "public void invalidateSelf ()"}, "getPadding(android.graphics.Rect)": {"Returns": [["boolean", "true if this drawable actually has a padding, else false. When false is returned, the padding is always set to 0."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. Positive values move toward the center of the Drawable (set Rect.inset).", "history": "Added in API level 1", "FullName": "public boolean getPadding (Rect padding)"}, "setState(int[])": {"Returns": [["boolean", "Returns true if this change in state has caused the appearance of the Drawable to change (hence requiring an invalidate), otherwise returns false."]], "Parameters": [["int[]", "int: The new set of states to be displayed. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify a set of states for the drawable. These are use-case specific, so see the relevant documentation. As an example, the background for widgets like Button understand the following states: [@B_android#R#attr#state_focused_E@, @B_android#R#attr#state_pressed_E@]. If the new state you are supplying causes the appearance of the Drawable to change, then it is responsible for calling @B_android#graphics#drawable#Drawable#invalidateSelf_E@ in order to have itself redrawn, and true will be returned from this function. Note: The Drawable holds a reference on to", "history": "Added in API level 1", "FullName": "public boolean setState (int[] stateSet)"}, "setChangingConfigurations(int)": {"Returns": [], "Parameters": [["int", "int: A mask of the changing configuration parameters, as defined by @B_android#content#pm#ActivityInfo_E@. Value is either 0 or a combination of @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_HIDDEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, @B_android#content#pm#ActivityInfo#CONFIG_UI_MODE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_DENSITY_E@, @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@, @B_android#content#pm#ActivityInfo#CONFIG_COLOR_MODE_E@, and @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@"]], "Throws": [], "SeeAlso": ["@B_android#content#pm#ActivityInfo_E@"], "Permissions": [], "Description": "Set a mask of the configuration parameters for which this drawable may change, requiring that it be re-created.", "history": "Added in API level 1", "FullName": "public void setChangingConfigurations (int configs)"}, "getCurrent()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The current drawable that will be used by this drawable. For simple drawables, this is just the drawable itself. For drawables that change state like @B_android#graphics#drawable#StateListDrawable_E@ and @B_android#graphics#drawable#LevelListDrawable_E@ this will be the child drawable currently in use. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Drawable getCurrent ()"}, "setTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: Color state list to use for tinting this drawable, or null to clear the tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#setTint_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintBlendMode_E@"], "Permissions": [], "Description": "Specifies tint color for this drawable as a color state list. A Drawable's drawing content will be blended together with its tint before it is drawn to the screen. This functions similarly to @B_android#graphics#drawable#Drawable#setColorFilter_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "Added in API level 21", "FullName": "public void setTintList (ColorStateList tint)"}, "getChangingConfigurations()": {"Returns": [["int", "Returns a mask of the changing configuration parameters, as defined by @B_android#content#pm#ActivityInfo_E@. Value is either 0 or a combination of @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_HIDDEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, @B_android#content#pm#ActivityInfo#CONFIG_UI_MODE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_DENSITY_E@, @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@, @B_android#content#pm#ActivityInfo#CONFIG_COLOR_MODE_E@, and @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#ActivityInfo_E@"], "Permissions": [], "Description": "Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. The default implementation returns whatever was provided through @B_android#graphics#drawable#Drawable#setChangingConfigurations_E@ or 0 by default. Subclasses may extend this to or in the changing configurations of any other drawables they hold.", "history": "Added in API level 1", "FullName": "public int getChangingConfigurations ()"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorFilter_E@", "ColorFilter: The color filter to apply, or null to remove the existing color filter This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an optional color filter for the drawable. If a Drawable has a ColorFilter, each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas. Pass null to remove any existing color filter. null color filter disables @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 1", "FullName": "public abstract void setColorFilter (ColorFilter colorFilter)"}, "setHotspotBounds(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: position in pixels of the left bound"], ["int", "int: position in pixels of the top bound"], ["int", "int: position in pixels of the right bound"], ["int", "int: position in pixels of the bottom bound"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#getHotspotBounds_E@"], "Permissions": [], "Description": "Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds.", "history": "added in API level 21", "FullName": "public void setHotspotBounds (int left, int top, int right, int bottom)"}, "isFilterBitmap()": {"Returns": [["boolean", "whether this drawable filters its bitmaps"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#Drawable#setFilterBitmap_E@"], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public boolean isFilterBitmap ()"}}, "Inheritance": [], "ClassName": "android.graphics.drawable.Drawable", "ClassDesc": "A Drawable is a general abstraction for \"something that can be drawn.\" Most often you will deal with Drawable as the type of resource retrieved for drawing things to the screen; the Drawable class provides a generic API for dealing with an underlying visual resource that may take a variety of forms. Unlike a @B_android#view#View_E@, a Drawable does not have any facility to receive events or otherwise interact with the user. In addition to simple drawing, Drawable provides a number of generic mechanisms for its client to interact with what is being drawn: The @B_android#graphics#drawable#Drawable#setBounds_E@ method @B_android#graphics#drawable#Drawable#getIntrinsicHeight_E@ and @B_android#graphics#drawable#Drawable#getIntrinsicWidth_E@ methods. The @B_android#graphics#drawable#Drawable#getPadding_E@ method can return from some Drawables information about how to frame content that is placed inside of them. For example, a Drawable that is intended to be the frame for a button widget would need to return padding that correctly places the label inside of itself. The @B_android#graphics#drawable#Drawable#setState_E@ method allows the client to tell the Drawable in which state it is to be drawn, such as \"focused\", \"selected\", etc. Some drawables may modify their imagery based on the selected state. The @B_android#graphics#drawable#Drawable#setLevel_E@ method allows the client to supply a single continuous controller that can modify the Drawable is displayed, such as a battery level or progress level. Some drawables may modify their imagery based on the current level. A Drawable can perform animations by calling back to its client through the @B_android#graphics#drawable#Drawable#Callback_E@ interface. All clients should support this interface (via @B_android#graphics#drawable#Drawable#setCallback_E@) so that animations will work. A simple way to do this is through the system facilities such as @B_android#view#View#setBackground_E@ and @B_android#widget#ImageView_E@. Though usually not visible to the application, Drawables may take a variety of forms: All versions of Android allow the Drawable class to be extended and used at run time in place of framework-provided drawable classes. Starting in @B_android#os#Build#VERSION_CODES#N_E@, custom drawables classes may also be used in XML. At a minimum, custom drawable classes must implement the abstract methods on Drawable and should override the @B_android#graphics#drawable#Drawable#draw_E@ method to draw content. Custom drawables classes may be used in XML in multiple ways: Using the fully-qualified class name as the XML element name. For this method, the custom drawable class must be a public top-level class. Using drawable as the XML element name and specifying the fully-qualified class name from the class attribute. This method may be used for both public top-level classes and public static inner classes."}