{"Functions": {"EnumMap(java.util.Map<K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the map from which to initialize this enum map"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if m is not an EnumMap instance and contains no mappings"], ["@B_java#lang#NullPointerException_E@", "if m is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an enum map initialized from the specified map. If the specified map is an @B_java#util#EnumMap#EnumMap_E@. Otherwise, the specified map must contain at least one mapping (in order to determine the new enum map's key type).", "history": "added in API level 1", "FullName": "public EnumMap (Map<K, ? extends V> m)"}, "get(java.lang.Object)": {"Returns": [["V", "the value to which the specified key is mapped, or null if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that (key == k), then this method returns v; otherwise it returns null. (There can be at most one such mapping.) A return value of null does not null. The @B_java#util#EnumMap#containsKey_E@ operation may be used to distinguish these two cases.", "history": "Added in API level 1", "FullName": "public V get (Object key)"}, "containsKey(java.lang.Object)": {"Returns": [["boolean", "true if this map contains a mapping for the specified key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose presence in this map is to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public boolean containsKey (Object key)"}, "size()": {"Returns": [["int", "the number of key-value mappings in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of key-value mappings in this map.", "history": "Added in API level 1", "FullName": "public int size ()"}, "putAll(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the mappings to be stored in this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "the specified map is null, or if one or more keys in the specified map are null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.", "history": "Added in API level 1", "FullName": "public void putAll (Map<? extends K, ? extends V> m)"}, "EnumMap(java.lang.Class<K>)": {"Returns": [], "Parameters": [["@B_java#lang#Class_E@", "Class: the class object of the key type for this enum map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if keyType is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an empty enum map with the specified key type.", "history": "Added in API level 1", "FullName": "public EnumMap (Class<K> keyType)"}, "values()": {"Returns": [["@B_java#util#Collection_E@", "a collection view of the values contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Collection_E@ view of the values contained in this map. The returned collection obeys the general contract outlined in @B_java#util#Map#values_E@. The collection's iterator will return the values in the order their corresponding keys appear in map, which is their natural order (the order in which the enum constants are declared).", "history": "Added in API level 1", "FullName": "public Collection<V> values ()"}, "EnumMap(java.util.EnumMap<K,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#EnumMap_E@", "EnumMap: the enum map from which to initialize this enum map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if m is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an enum map with the same key type as the specified enum map, initially containing the same mappings (if any).", "history": "Added in API level 1", "FullName": "public EnumMap (EnumMap<K, ? extends V> m)"}, "putAll(java.util.Map<? extends K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the mappings to be stored in this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "the specified map is null, or if one or more keys in the specified map are null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.", "history": "added in API level 1", "FullName": "public void putAll (Map<? extends K, ? extends V> m)"}, "remove(java.lang.Object)": {"Returns": [["V", "the previous value associated with specified key, or null if there was no entry for key. (A null return can also indicate that the map previously associated null with the specified key.)"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose mapping is to be removed from the map"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the mapping for this key from this map if present.", "history": "Added in API level 1", "FullName": "public V remove (Object key)"}, "containsValue(java.lang.Object)": {"Returns": [["boolean", "true if this map maps one or more keys to this value"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the value whose presence in this map is to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public boolean containsValue (Object value)"}, "EnumMap(java.util.Map<K,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the map from which to initialize this enum map"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if m is not an EnumMap instance and contains no mappings"], ["@B_java#lang#NullPointerException_E@", "if m is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an enum map initialized from the specified map. If the specified map is an @B_java#util#EnumMap#EnumMap_E@. Otherwise, the specified map must contain at least one mapping (in order to determine the new enum map's key type).", "history": "Added in API level 1", "FullName": "public EnumMap (Map<K, ? extends V> m)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all mappings from this map.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "entrySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the mappings contained in this enum map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the mappings contained in this map. The returned set obeys the general contract outlined in @B_java#util#Map#keySet_E@. The set's iterator will return the mappings in the order their keys appear in map, which is their natural order (the order in which the enum constants are declared).", "history": "Added in API level 1", "FullName": "public Set<Entry<K, V>> entrySet ()"}, "EnumMap(java.util.EnumMap<K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#EnumMap_E@", "EnumMap: the enum map from which to initialize this enum map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if m is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an enum map with the same key type as the specified enum map, initially containing the same mappings (if any).", "history": "added in API level 1", "FullName": "public EnumMap (EnumMap<K, ? extends V> m)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is equal to this map"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to be compared for equality with this map"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the specified object with this map for equality. Returns @B_java#util#Map#equals_E@ contract.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "put(K, V)": {"Returns": [["V", "the previous value associated with specified key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with the specified key.)"]], "Parameters": [["K", "K: the key with which the specified value is to be associated"], ["V", "V: the value to be associated with the specified key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Associates the specified value with the specified key in this map. If the map previously contained a mapping for this key, the old value is replaced.", "history": "added in API level 1", "FullName": "public V put (K key, V value)"}, "keySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the keys contained in this enum map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the keys contained in this map. The returned set obeys the general contract outlined in @B_java#util#Map#keySet_E@. The set's iterator will return the keys in their natural order (the order in which the enum constants are declared).", "history": "Added in API level 1", "FullName": "public Set<K> keySet ()"}, "clone()": {"Returns": [["@B_java#util#EnumMap_E@", "a shallow copy of this enum map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a shallow copy of this enum map. (The values themselves are not cloned.", "history": "Added in API level 1", "FullName": "public EnumMap<K, V> clone ()"}, "put(K,V)": {"Returns": [["V", "the previous value associated with specified key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with the specified key.)"]], "Parameters": [["K", "K: the key with which the specified value is to be associated"], ["V", "V: the value to be associated with the specified key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Associates the specified value with the specified key in this map. If the map previously contained a mapping for this key, the old value is replaced.", "history": "Added in API level 1", "FullName": "public V put (K key, V value)"}, "hashCode()": {"Returns": [["int", "the hash code value for this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hash code value for this map. The hash code of a map is defined to be the sum of the hash codes of each entry in the map.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": ["@B_java#util#AbstractMap_E@"], "ClassName": "@B_java#lang#Enum_E@", "ClassDesc": "A specialized @B_java#util#Map_E@ implementation for use with enum type keys. All of the keys in an enum map must come from a single enum type that is specified, explicitly or implicitly, when the map is created. Enum maps are represented internally as arrays. This representation is extremely compact and efficient. Enum maps are maintained in the @B_java#util#EnumMap#keySet_E@, @B_java#util#EnumMap#entrySet_E@, and @B_java#util#EnumMap#values_E@). Iterators returned by the collection views are @B_java#util#ConcurrentModificationException_E@ and they may or may not show the effects of any modifications to the map that occur while the iteration is in progress. Null keys are not permitted. Attempts to insert a null key will throw @B_java#lang#NullPointerException_E@. Attempts to test for the presence of a null key or to remove one will, however, function properly. Null values are permitted. Like most collection implementations @B_java#util#Collections#synchronizedMap_E@ method. This is best done at creation time, to prevent accidental unsynchronized access: Implementation note: All basic operations execute in constant time. They are likely (though not guaranteed) to be faster than their @B_java#util#HashMap_E@ counterparts. This class is a member of the"}