{"Functions": {"skip(long)": {"Returns": [["long", "the actual number of bytes skipped"]], "Parameters": [["long", "long: the number of bytes to skip"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Skips specified number of bytes of input.", "history": "Added in API level 1", "FullName": "public long skip (long n)"}, "read(byte[],int,int)": {"Returns": [["int", "the actual number of bytes read, or -1 if the end of the stream is reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read"], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If buf is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than buf.length - off"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Reads into an array of bytes. If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned.", "history": "Added in API level 1", "FullName": "public int read (byte[] buf, int off, int len)"}, "read(byte[], int, int)": {"Returns": [["int", "the actual number of bytes read, or -1 if the end of the stream is reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read"], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If buf is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than buf.length - off"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Reads into an array of bytes. If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned.", "history": "added in API level 1", "FullName": "public int read (byte[] buf, int off, int len)"}, "getChecksum()": {"Returns": [["@B_java#util#zip#Checksum_E@", "the Checksum value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Checksum for this input stream.", "history": "Added in API level 1", "FullName": "public Checksum getChecksum ()"}, "read()": {"Returns": [["int", "the byte read, or -1 if the end of the stream is reached."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a byte. Will block if no input is available.", "history": "Added in API level 1", "FullName": "public int read ()"}, "CheckedInputStream(java.io.InputStream,java.util.zip.Checksum)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream"], ["@B_java#util#zip#Checksum_E@", "Checksum: the Checksum"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an input stream using the specified Checksum.", "history": "Added in API level 1", "FullName": "public CheckedInputStream (InputStream in, Checksum cksum)"}}, "Inheritance": ["@B_java#io#InputStream_E@", "@B_java#io#FilterInputStream_E@"], "ClassName": "java.util.zip.CheckedInputStream", "ClassDesc": "An input stream that also maintains a checksum of the data being read. The checksum can then be used to verify the integrity of the input data."}