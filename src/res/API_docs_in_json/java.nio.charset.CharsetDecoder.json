{"Functions": {"malformedInputAction()": {"Returns": [["@B_java#nio#charset#CodingErrorAction_E@", "The current malformed-input action, which is never null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this decoder's current action for malformed-input errors.", "history": "Added in API level 1", "FullName": "public CodingErrorAction malformedInputAction ()"}, "maxCharsPerByte()": {"Returns": [["float", "The maximum number of characters that will be produced per byte of input"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum number of characters that will be produced for each byte of input. This value may be used to compute the worst-case size of the output buffer required for a given input sequence.", "history": "Added in API level 1", "FullName": "public final float maxCharsPerByte ()"}, "replacement()": {"Returns": [["@B_java#lang#String_E@", "This decoder's current replacement, which is never null and is never empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this decoder's replacement value.", "history": "Added in API level 1", "FullName": "public final String replacement ()"}, "implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)": {"Returns": [], "Parameters": [["@B_java#nio#charset#CodingErrorAction_E@", "CodingErrorAction: The new action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports a change to this decoder's unmappable-character action. The default implementation of this method does nothing. This method should be overridden by decoders that require notification of changes to the unmappable-character action.", "history": "Added in API level 1", "FullName": "protected void implOnUnmappableCharacter (CodingErrorAction newAction)"}, "implReset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets this decoder, clearing any charset-specific internal state. The default implementation of this method does nothing. This method should be overridden by decoders that maintain internal state.", "history": "Added in API level 1", "FullName": "protected void implReset ()"}, "unmappableCharacterAction()": {"Returns": [["@B_java#nio#charset#CodingErrorAction_E@", "The current unmappable-character action, which is never null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this decoder's current action for unmappable-character errors.", "history": "Added in API level 1", "FullName": "public CodingErrorAction unmappableCharacterAction ()"}, "detectedCharset()": {"Returns": [["@B_java#nio#charset#Charset_E@", "The charset detected by this auto-detecting decoder, or null if the charset has not yet been determined"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If insufficient bytes have been read to determine a charset"], ["@B_java#lang#UnsupportedOperationException_E@", "If this decoder does not implement an auto-detecting charset"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the charset that was detected by this decoder If this decoder implements an auto-detecting charset then this method returns the actual charset once it has been detected. After that point, this method returns the same value for the duration of the current decoding operation. If not enough input bytes have yet been read to determine the actual charset then this method throws an @B_java#lang#IllegalStateException_E@. The default implementation of this method always throws an @B_java#lang#UnsupportedOperationException_E@; it should be overridden by auto-detecting decoders to return the appropriate value.", "history": "Added in API level 1", "FullName": "public Charset detectedCharset ()"}, "isAutoDetecting()": {"Returns": [["boolean", "true if, and only if, this decoder implements an auto-detecting charset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this decoder implements an auto-detecting charset. The default implementation of this method always returns", "history": "Added in API level 1", "FullName": "public boolean isAutoDetecting ()"}, "implFlush(java.nio.CharBuffer)": {"Returns": [["@B_java#nio#charset#CoderResult_E@", "A coder-result object, either @B_java#nio#charset#CoderResult#UNDERFLOW_E@ or @B_java#nio#charset#CoderResult#OVERFLOW_E@"]], "Parameters": [["@B_java#nio#CharBuffer_E@", "CharBuffer: The output character buffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flushes this decoder. The default implementation of this method does nothing, and always returns @B_java#nio#charset#CoderResult#UNDERFLOW_E@. This method should be overridden by decoders that may need to write final characters to the output buffer once the entire input sequence has been read.", "history": "Added in API level 1", "FullName": "protected CoderResult implFlush (CharBuffer out)"}, "decodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)": {"Returns": [["@B_java#nio#charset#CoderResult_E@", "A coder-result object describing the reason for termination"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The input byte buffer"], ["@B_java#nio#CharBuffer_E@", "CharBuffer: The output character buffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decodes one or more bytes into one or more characters. This method encapsulates the basic decoding loop, decoding as many bytes as possible until it either runs out of input, runs out of room in the output buffer, or encounters a decoding error. This method is invoked by the @B_java#nio#charset#CharsetDecoder#decode_E@ method, which handles result interpretation and error recovery. The buffers are read from, and written to, starting at their current positions. At most @B_java#nio#Buffer#remaining_E@ bytes will be read, and at most @B_java#nio#Buffer#remaining_E@ characters will be written. The buffers' positions will be advanced to reflect the bytes read and the characters written, but their marks and limits will not be modified. This method returns a @B_java#nio#charset#CoderResult_E@ object to describe its reason for termination, in the same manner as the @B_java#nio#charset#CharsetDecoder#decode_E@ method. Most implementations of this method will handle decoding errors by returning an appropriate result object for interpretation by the @B_java#nio#charset#CharsetDecoder#decode_E@ method. An optimized implementation may instead examine the relevant error action and implement that action itself. An implementation of this method may perform arbitrary lookahead by returning @B_java#nio#charset#CoderResult#UNDERFLOW_E@ until it receives sufficient input.", "history": "Added in API level 1", "FullName": "protected abstract CoderResult decodeLoop (ByteBuffer in, CharBuffer out)"}, "implOnMalformedInput(java.nio.charset.CodingErrorAction)": {"Returns": [], "Parameters": [["@B_java#nio#charset#CodingErrorAction_E@", "CodingErrorAction: The new action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports a change to this decoder's malformed-input action. The default implementation of this method does nothing. This method should be overridden by decoders that require notification of changes to the malformed-input action.", "history": "Added in API level 1", "FullName": "protected void implOnMalformedInput (CodingErrorAction newAction)"}, "decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)": {"Returns": [["@B_java#nio#charset#CoderResult_E@", "A coder-result object describing the reason for termination"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The input byte buffer"], ["@B_java#nio#CharBuffer_E@", "CharBuffer: The output character buffer"], ["boolean", "boolean: true if, and only if, the invoker can provide no additional input bytes beyond those in the given buffer"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If a decoding operation is already in progress and the previous step was an invocation neither of the @B_java#nio#charset#CharsetDecoder#reset_E@ method, nor of this method with a value of false for the endOfInput parameter, nor of this method with a value of true for the endOfInput parameter but a return value indicating an incomplete decoding operation"], ["@B_java#nio#charset#CoderMalfunctionError_E@", "If an invocation of the decodeLoop method threw an unexpected exception"]], "SeeAlso": [], "Permissions": [], "Description": "Decodes as many bytes as possible from the given input buffer, writing the results to the given output buffer. The buffers are read from, and written to, starting at their current positions. At most @B_java#nio#Buffer#remaining_E@ bytes will be read and at most @B_java#nio#Buffer#remaining_E@ characters will be written. The buffers' positions will be advanced to reflect the bytes read and the characters written, but their marks and limits will not be modified. In addition to reading bytes from the input buffer and writing characters to the output buffer, this method returns a @B_java#nio#charset#CoderResult_E@ object to describe its reason for termination: @B_java#nio#charset#CoderResult#UNDERFLOW_E@ indicates that as much of the input buffer as possible has been decoded. If there is no further input then the invoker can proceed to the next step of the @B_java#nio#charset#CoderResult#OVERFLOW_E@ indicates that there is insufficient space in the output buffer to decode any more bytes. This method should be invoked again with an output buffer that has more A @B_java#nio#charset#CoderResult#length_E@ method. This case applies only if the @B_java#nio#charset#CodingErrorAction#REPORT_E@; otherwise the malformed input will be ignored or replaced, as requested. An @B_java#nio#charset#CoderResult#length_E@ method. This case applies only if the @B_java#nio#charset#CodingErrorAction#REPORT_E@; otherwise the unmappable character will be ignored or replaced, as requested. In any case, if this method is to be reinvoked in the same decoding operation then care should be taken to preserve any bytes remaining in the input buffer so that they are available to the next invocation. The This method works by invoking the @B_java#nio#charset#CharsetDecoder#decodeLoop_E@ method, interpreting its results, handling error conditions, and reinvoking it as necessary.", "history": "Added in API level 1", "FullName": "public final CoderResult decode (ByteBuffer in, CharBuffer out, boolean endOfInput)"}, "reset()": {"Returns": [["@B_java#nio#charset#CharsetDecoder_E@", "This decoder"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets this decoder, clearing any internal state. This method resets charset-independent state and also invokes the @B_java#nio#charset#CharsetDecoder#implReset_E@ method in order to perform any charset-specific reset actions.", "history": "Added in API level 1", "FullName": "public final CharsetDecoder reset ()"}, "flush(java.nio.CharBuffer)": {"Returns": [["@B_java#nio#charset#CoderResult_E@", "A coder-result object, either @B_java#nio#charset#CoderResult#UNDERFLOW_E@ or @B_java#nio#charset#CoderResult#OVERFLOW_E@"]], "Parameters": [["@B_java#nio#CharBuffer_E@", "CharBuffer: The output character buffer"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the previous step of the current decoding operation was an invocation neither of the @B_java#nio#charset#CharsetDecoder#flush_E@ method nor of the three-argument @B_java#nio#charset#CharsetDecoder#decode_E@ method with a value of true for the endOfInput parameter"]], "SeeAlso": [], "Permissions": [], "Description": "Flushes this decoder. Some decoders maintain internal state and may need to write some final characters to the output buffer once the overall input sequence has been read. Any additional output is written to the output buffer beginning at its current position. At most @B_java#nio#Buffer#remaining_E@ characters will be written. The buffer's position will be advanced appropriately, but its mark and limit will not be modified. If this method completes successfully then it returns @B_java#nio#charset#CoderResult#UNDERFLOW_E@. If there is insufficient room in the output buffer then it returns @B_java#nio#charset#CoderResult#OVERFLOW_E@. If this happens then this method must be invoked again, with an output buffer that has more room, in order to complete the current If this decoder has already been flushed then invoking this method has no effect. This method invokes the @B_java#nio#charset#CharsetDecoder#implFlush_E@ method to perform the actual flushing operation.", "history": "Added in API level 1", "FullName": "public final CoderResult flush (CharBuffer out)"}, "isCharsetDetected()": {"Returns": [["boolean", "true if, and only if, this decoder has detected a specific charset"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If this decoder does not implement an auto-detecting charset"]], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this decoder has yet detected a charset If this decoder implements an auto-detecting charset then at a single point during a decoding operation this method may start returning @B_java#nio#charset#CharsetDecoder#detectedCharset_E@ method may be invoked to retrieve the detected charset. That this method returns The default implementation of this method always throws an @B_java#lang#UnsupportedOperationException_E@; it should be overridden by auto-detecting decoders to return", "history": "Added in API level 1", "FullName": "public boolean isCharsetDetected ()"}, "averageCharsPerByte()": {"Returns": [["float", "The average number of characters produced per byte of input"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the average number of characters that will be produced for each byte of input. This heuristic value may be used to estimate the size of the output buffer required for a given input sequence.", "history": "Added in API level 1", "FullName": "public final float averageCharsPerByte ()"}, "decode(java.nio.ByteBuffer)": {"Returns": [["@B_java#nio#CharBuffer_E@", "A newly-allocated character buffer containing the result of the decoding operation. The buffer's position will be zero and its limit will follow the last character written."]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The input byte buffer"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If a decoding operation is already in progress"], ["@B_java#nio#charset#MalformedInputException_E@", "If the byte sequence starting at the input buffer's current position is not legal for this charset and the current malformed-input action is @B_java#nio#charset#CodingErrorAction#REPORT_E@"], ["@B_java#nio#charset#UnmappableCharacterException_E@", "If the byte sequence starting at the input buffer's current position cannot be mapped to an equivalent character sequence and the current unmappable-character action is @B_java#nio#charset#CodingErrorAction#REPORT_E@"], ["@B_java#nio#charset#CharacterCodingException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Convenience method that decodes the remaining content of a single input byte buffer into a newly-allocated character buffer. This method implements an entire", "history": "Added in API level 1", "FullName": "public final CharBuffer decode (ByteBuffer in)"}, "CharsetDecoder(java.nio.charset.Charset,float,float)": {"Returns": [], "Parameters": [["@B_java#nio#charset#Charset_E@", "Charset: The charset that created this decoder"], ["float", "float: A positive float value indicating the expected number of characters that will be produced for each input byte"], ["float", "float: A positive float value indicating the maximum number of characters that will be produced for each input byte"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on the parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new decoder. The new decoder will have the given chars-per-byte values and its replacement will be the string", "history": "Added in API level 1", "FullName": "protected CharsetDecoder (Charset cs, float averageCharsPerByte, float maxCharsPerByte)"}, "onMalformedInput(java.nio.charset.CodingErrorAction)": {"Returns": [["@B_java#nio#charset#CharsetDecoder_E@", "This decoder"]], "Parameters": [["@B_java#nio#charset#CodingErrorAction_E@", "CodingErrorAction: The new action; must not be null"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the precondition on the parameter does not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Changes this decoder's action for malformed-input errors. This method invokes the @B_java#nio#charset#CharsetDecoder#implOnMalformedInput_E@ method, passing the new action.", "history": "Added in API level 1", "FullName": "public final CharsetDecoder onMalformedInput (CodingErrorAction newAction)"}, "charset()": {"Returns": [["@B_java#nio#charset#Charset_E@", "This decoder's charset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the charset that created this decoder.", "history": "Added in API level 1", "FullName": "public final Charset charset ()"}, "onUnmappableCharacter(java.nio.charset.CodingErrorAction)": {"Returns": [["@B_java#nio#charset#CharsetDecoder_E@", "This decoder"]], "Parameters": [["@B_java#nio#charset#CodingErrorAction_E@", "CodingErrorAction: The new action; must not be null"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the precondition on the parameter does not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Changes this decoder's action for unmappable-character errors. This method invokes the @B_java#nio#charset#CharsetDecoder#implOnUnmappableCharacter_E@ method, passing the new action.", "history": "Added in API level 1", "FullName": "public final CharsetDecoder onUnmappableCharacter (CodingErrorAction newAction)"}, "replaceWith(java.lang.String)": {"Returns": [["@B_java#nio#charset#CharsetDecoder_E@", "This decoder"]], "Parameters": [["@B_java#lang#String_E@", "String: The replacement value The new replacement; must not be null and must have non-zero length"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on the parameter do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Changes this decoder's replacement value. This method invokes the @B_java#nio#charset#CharsetDecoder#implReplaceWith_E@ method, passing the new replacement, after checking that the new replacement is acceptable.", "history": "Added in API level 1", "FullName": "public final CharsetDecoder replaceWith (String newReplacement)"}, "implReplaceWith(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The replacement value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports a change to this decoder's replacement value. The default implementation of this method does nothing. This method should be overridden by decoders that require notification of changes to the replacement.", "history": "Added in API level 1", "FullName": "protected void implReplaceWith (String newReplacement)"}}, "Inheritance": [], "ClassName": "java.nio.charset.CharsetDecoder", "ClassDesc": "An engine that can transform a sequence of bytes in a specific charset into a sequence of sixteen-bit Unicode characters. The input byte sequence is provided in a byte buffer or a series of such buffers. The output character sequence is written to a character buffer or a series of such buffers. A decoder should always be used by making the following sequence of method invocations, hereinafter referred to as a @B_java#nio#charset#CharsetDecoder#decode_E@ method will decode as many bytes as possible from the input buffer, writing the resulting characters to the output buffer. The @B_java#nio#charset#CharsetDecoder#decode_E@ method returns when more input is required, when there is not enough room in the output buffer, or when a decoding error has occurred. In each case a @B_java#nio#charset#CoderResult_E@ object is returned to describe the reason for termination. An invoker can examine this object and fill the input buffer, flush the output buffer, or attempt to recover from a decoding error, as appropriate, and try again. There are two general types of decoding errors. If the input byte sequence is not legal for this charset then the input is considered How a decoding error is handled depends upon the action requested for that type of error, which is described by an instance of the @B_java#nio#charset#CodingErrorAction_E@ class. The possible error actions are to @B_java#nio#charset#CoderResult_E@ object, or @B_java#nio#charset#CharsetDecoder#replaceWith_E@ method. The default action for malformed-input and unmappable-character errors is to @B_java#nio#charset#CharsetDecoder#onMalformedInput_E@ method; the unmappable-character action may be changed via the @B_java#nio#charset#CharsetDecoder#onUnmappableCharacter_E@ method. This class is designed to handle many of the details of the decoding process, including the implementation of error actions. A decoder for a specific charset, which is a concrete subclass of this class, need only implement the abstract @B_java#nio#charset#CharsetDecoder#decodeLoop_E@ method, which encapsulates the basic decoding loop. A subclass that maintains internal state should, additionally, override the @B_java#nio#charset#CharsetDecoder#implFlush_E@ and @B_java#nio#charset#CharsetDecoder#implReset_E@ methods. Instances of this class are not safe for use by multiple concurrent threads."}