{"Functions": {"reportError(java.lang.String,java.lang.Exception,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a descriptive string (may be null)"], ["@B_java#lang#Exception_E@", "Exception: an exception (may be null)"], ["int", "int: an error code defined in ErrorManager"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Protected convenience method to report an error to this Handler's ErrorManager. Note that this method retrieves and uses the ErrorManager without doing a security check. It can therefore be used in environments where the caller may be non-privileged.", "history": "Added in API level 1", "FullName": "protected void reportError (String msg, Exception ex, int code)"}, "setErrorManager(java.util.logging.ErrorManager)": {"Returns": [], "Parameters": [["@B_java#util#logging#ErrorManager_E@", "ErrorManager: the new ErrorManager"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."]], "SeeAlso": [], "Permissions": [], "Description": "Define an ErrorManager for this Handler. The ErrorManager's \"error\" method will be invoked if any errors occur while using this Handler.", "history": "Added in API level 1", "FullName": "public void setErrorManager (ErrorManager em)"}, "getFilter()": {"Returns": [["@B_java#util#logging#Filter_E@", "a Filter object (may be null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the current", "history": "Added in API level 1", "FullName": "public Filter getFilter ()"}, "getErrorManager()": {"Returns": [["@B_java#util#logging#ErrorManager_E@", "the ErrorManager for this Handler"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the ErrorManager for this Handler.", "history": "Added in API level 1", "FullName": "public ErrorManager getErrorManager ()"}, "setEncoding(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of a supported character encoding. May be null, to indicate the default platform encoding."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."], ["@B_java#io#UnsupportedEncodingException_E@", "if the named encoding is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Set the character encoding used by this The encoding should be set before any", "history": "Added in API level 1", "FullName": "public void setEncoding (String encoding)"}, "setLevel(java.util.logging.Level)": {"Returns": [], "Parameters": [["@B_java#util#logging#Level_E@", "Level: the new value for the log level"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."]], "SeeAlso": [], "Permissions": [], "Description": "Set the log level specifying which message levels will be logged by this The intention is to allow developers to turn on voluminous logging, but to limit the messages that are sent to certain", "history": "Added in API level 1", "FullName": "public void setLevel (Level newLevel)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."]], "SeeAlso": [], "Permissions": [], "Description": "Close the The close method will perform a", "history": "Added in API level 1", "FullName": "public abstract void close ()"}, "getEncoding()": {"Returns": [["@B_java#lang#String_E@", "The encoding name. May be null, which indicates the default encoding should be used."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the character encoding for this", "history": "Added in API level 1", "FullName": "public String getEncoding ()"}, "publish(java.util.logging.LogRecord)": {"Returns": [], "Parameters": [["@B_java#util#logging#LogRecord_E@", "LogRecord: description of the log event. A null record is silently ignored and is not published"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Publish a The logging request was made initially to a The", "history": "Added in API level 1", "FullName": "public abstract void publish (LogRecord record)"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flush any buffered output.", "history": "Added in API level 1", "FullName": "public abstract void flush ()"}, "getFormatter()": {"Returns": [["@B_java#util#logging#Formatter_E@", "the Formatter (may be null)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the", "history": "Added in API level 1", "FullName": "public Formatter getFormatter ()"}, "setFormatter(java.util.logging.Formatter)": {"Returns": [], "Parameters": [["@B_java#util#logging#Formatter_E@", "Formatter: the Formatter to use (may not be null)"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."]], "SeeAlso": [], "Permissions": [], "Description": "Set a Some", "history": "Added in API level 1", "FullName": "public void setFormatter (Formatter newFormatter)"}, "getLevel()": {"Returns": [["@B_java#util#logging#Level_E@", "the level of messages being logged."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the log level specifying which messages will be logged by this", "history": "Added in API level 1", "FullName": "public Level getLevel ()"}, "isLoggable(java.util.logging.LogRecord)": {"Returns": [["boolean", "true if the LogRecord would be logged."]], "Parameters": [["@B_java#util#logging#LogRecord_E@", "LogRecord: a LogRecord"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if this This method checks if the", "history": "Added in API level 1", "FullName": "public boolean isLoggable (LogRecord record)"}, "setFilter(java.util.logging.Filter)": {"Returns": [], "Parameters": [["@B_java#util#logging#Filter_E@", "Filter: a Filter object (may be null)"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."]], "SeeAlso": [], "Permissions": [], "Description": "Set a For each call of", "history": "Added in API level 1", "FullName": "public void setFilter (Filter newFilter)"}, "Handler()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default constructor. The resulting", "history": "Added in API level 1", "FullName": "protected Handler ()"}}, "Inheritance": [], "ClassName": "java.util.logging.Handler", "ClassDesc": "A A"}