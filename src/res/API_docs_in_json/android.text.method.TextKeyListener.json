{"Functions": {"TextKeyListener(android.text.method.TextKeyListener.Capitalize,boolean)": {"Returns": [], "Parameters": [["@B_android#text#method#TextKeyListener#Capitalize_E@", "TextKeyListener.Capitalize: when, if ever, to automatically capitalize."], ["boolean", "boolean: whether to automatically do spelling corrections."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new TextKeyListener with the specified capitalization and correction properties.", "history": "Added in API level 1", "FullName": "public TextKeyListener (TextKeyListener.Capitalize cap, boolean autotext)"}, "getInstance()": {"Returns": [["@B_android#text#method#TextKeyListener_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new or existing instance with no automatic capitalization or correction.", "history": "Added in API level 1", "FullName": "public static TextKeyListener getInstance ()"}, "getInstance(boolean,android.text.method.TextKeyListener.Capitalize)": {"Returns": [["@B_android#text#method#TextKeyListener_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean: whether to automatically do spelling corrections."], ["@B_android#text#method#TextKeyListener#Capitalize_E@", "TextKeyListener.Capitalize: when, if ever, to automatically capitalize."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new or existing instance with the specified capitalization and correction properties.", "history": "Added in API level 1", "FullName": "public static TextKeyListener getInstance (boolean autotext, TextKeyListener.Capitalize cap)"}, "onSpanChanged(android.text.Spannable,java.lang.Object,int,int,int,int)": {"Returns": [], "Parameters": [["@B_android#text#Spannable_E@", "Spannable no parameter comment"], ["@B_java#lang#Object_E@", "Object no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called to notify you that the specified object has been relocated from the range ostart\u2026oend to the new range nstart\u2026nend of the text.", "history": "Added in API level 1", "FullName": "public void onSpanChanged (Spannable s, Object what, int start, int end, int st, int en)"}, "onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#text#Editable_E@", "Editable no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Base implementation handles ACTION_MULTIPLE KEYCODE_UNKNOWN by inserting the event's text into the content.", "history": "Added in API level 3", "FullName": "public boolean onKeyOther (View view, Editable content, KeyEvent event)"}, "onSpanRemoved(android.text.Spannable,java.lang.Object,int,int)": {"Returns": [], "Parameters": [["@B_android#text#Spannable_E@", "Spannable no parameter comment"], ["@B_java#lang#Object_E@", "Object no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called to notify you that the specified object has been detached from the specified range of the text.", "history": "Added in API level 1", "FullName": "public void onSpanRemoved (Spannable s, Object what, int start, int end)"}, "clear(android.text.Editable)": {"Returns": [], "Parameters": [["@B_android#text#Editable_E@", "Editable: the buffer whose text and state are to be cleared."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear all the input state (autotext, autocap, multitap, undo) from the specified Editable, going beyond Editable.clear(), which just clears the text but not the input state.", "history": "Added in API level 1", "FullName": "public static void clear (Editable e)"}, "getInputType()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public int getInputType ()"}, "onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#text#Editable_E@", "Editable no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles release of the meta keys.", "history": "Added in API level 1", "FullName": "public boolean onKeyUp (View view, Editable content, int keyCode, KeyEvent event)"}, "shouldCap(android.text.method.TextKeyListener.Capitalize,java.lang.CharSequence,int)": {"Returns": [["boolean", "whether the character being inserted should be capitalized."]], "Parameters": [["@B_android#text#method#TextKeyListener#Capitalize_E@", "TextKeyListener.Capitalize: the capitalization rules to consider."], ["@B_java#lang#CharSequence_E@", "CharSequence: the text in which an insertion is being made."], ["int", "int: the offset into that text where the insertion is being made."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether it makes sense to automatically capitalize at the specified position in the specified text, with the specified rules.", "history": "Added in API level 1", "FullName": "public static boolean shouldCap (TextKeyListener.Capitalize cap, CharSequence cs, int off)"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void release ()"}, "onSpanAdded(android.text.Spannable,java.lang.Object,int,int)": {"Returns": [], "Parameters": [["@B_android#text#Spannable_E@", "Spannable no parameter comment"], ["@B_java#lang#Object_E@", "Object no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called to notify you that the specified object has been attached to the specified range of the text.", "history": "Added in API level 1", "FullName": "public void onSpanAdded (Spannable s, Object what, int start, int end)"}, "onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#text#Editable_E@", "Editable no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles presses of the meta keys.", "history": "Added in API level 1", "FullName": "public boolean onKeyDown (View view, Editable content, int keyCode, KeyEvent event)"}}, "Inheritance": ["@B_android#text#method#MetaKeyKeyListener_E@", "@B_android#text#method#BaseKeyListener_E@"], "ClassName": "android.text.method.TextKeyListener", "ClassDesc": "This is the key listener for typing normal text. It delegates to other key listeners appropriate to the current keyboard and language. As for all implementations of @B_android#text#method#KeyListener_E@, this class is only concerned with hardware keyboards. Software input methods have no obligation to trigger the methods in this class."}