{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "toString()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public String toString ()"}, "getBatchInterval(java.util.concurrent.TimeUnit)": {"Returns": [["", "the maximum latency, in micros, or @B_com#google#android#gms#fitness#service#FitnessSensorServiceRequest#UNSPECIFIED_E@ if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the maximum delay between a data point being detected and reported. The batch interval can be used to enable batching, which can save battery by reducing the number of times the AP is awaken, and the number of network transfers. This is specially important if the sensor exposed is from a companion device. The batch interval is a hint to the system, and events can be reported sooner. If no interval is specified, or if the underlying data source does not support batching, events may be reported as soon as they are detected.", "history": "", "FullName": "public long getBatchInterval (TimeUnit timeUnit)"}, "getDataSource()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the data source the client is registering to. The Fitness Platform will guarantee that applications only receive requests for data sources they own. Duplicate requests for the same data source should be treated as update requests.", "history": "", "FullName": "public DataSource getDataSource ()"}, "getDispatcher()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a dispatcher that can be used to send events back to the Fitness Platform for this particular registration.", "history": "", "FullName": "public SensorEventDispatcher getDispatcher ()"}, "getBatchIntervalMicros()": {"Returns": [["", "the maximum latency, in micros, or @B_com#google#android#gms#fitness#service#FitnessSensorServiceRequest#UNSPECIFIED_E@ if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the maximum delay between a data point being detected and reported. The batch interval can be used to enable batching, which can save battery by reducing the number of times the AP is awaken, and the number of network transfers. This is specially important if the sensor exposed is from a companion device. The batch interval is a hint to the system, and events can be reported sooner. If no interval is specified, or if the underlying data source does not support batching, events may be reported as soon as they are detected.", "history": "", "FullName": "public long getBatchIntervalMicros ()"}, "equals(java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public boolean equals (Object that)"}, "describeContents()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int describeContents ()"}, "getSamplingRate(java.util.concurrent.TimeUnit)": {"Returns": [["", "the sampling rate, in the specified unit, or @B_com#google#android#gms#fitness#service#FitnessSensorServiceRequest#UNSPECIFIED_E@ if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the desired delay between two consecutive collected data points, in the given time unit. This is only a hint, and events may be sampled faster or slower than the specified rate. If the sampling rate is unspecified, the application should select a default rate with conservative battery usage for an always-on registration.", "history": "", "FullName": "public long getSamplingRate (TimeUnit timeUnit)"}, "getSamplingRateMicros()": {"Returns": [["", "the sampling rate, in microseconds, or @B_com#google#android#gms#fitness#service#FitnessSensorServiceRequest#UNSPECIFIED_E@ if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the desired delay between two consecutive collected data points, in microseconds. This is only a hint, and events may be sampled faster or slower than the specified rate. If the sampling rate is unspecified, the application should select a default rate with conservative battery usage for an always-on registration.", "history": "", "FullName": "public long getSamplingRateMicros ()"}, "hashCode()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int hashCode ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.fitness.service.FitnessSensorServiceRequest", "ClassDesc": "Request for registering for sensor events from an application-exposed sensor @B_com#google#android#gms#fitness#data#DataSource_E@. The request specifies the data source, the desired sampling rate and batching interval for the registration, and a listener to deliver events to."}