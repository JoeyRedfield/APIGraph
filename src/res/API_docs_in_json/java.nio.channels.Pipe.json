{"Functions": {"Pipe()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 1", "FullName": "protected Pipe ()"}, "sink()": {"Returns": [["@B_java#nio#channels#Pipe#SinkChannel_E@", "This pipe's sink channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this pipe's sink channel.", "history": "Added in API level 1", "FullName": "public abstract Pipe.SinkChannel sink ()"}, "source()": {"Returns": [["@B_java#nio#channels#Pipe#SourceChannel_E@", "This pipe's source channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this pipe's source channel.", "history": "Added in API level 1", "FullName": "public abstract Pipe.SourceChannel source ()"}, "open()": {"Returns": [["@B_java#nio#channels#Pipe_E@", "A new pipe"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a pipe. The new pipe is created by invoking the @B_java#nio#channels#spi#SelectorProvider#openPipe_E@ method of the system-wide default @B_java#nio#channels#spi#SelectorProvider_E@ object.", "history": "Added in API level 1", "FullName": "public static Pipe open ()"}}, "Inheritance": [], "ClassName": "java.nio.channels.Pipe", "ClassDesc": "A pair of channels that implements a unidirectional pipe. A pipe consists of a pair of channels: A writable @B_java#nio#channels#Pipe#SinkChannel_E@ channel and a readable @B_java#nio#channels#Pipe#SourceChannel_E@ channel. Once some bytes are written to the sink channel they can be read from source channel in exactlyAthe order in which they were written. Whether or not a thread writing bytes to a pipe will block until another thread reads those bytes, or some previously-written bytes, from the pipe is system-dependent and therefore unspecified. Many pipe implementations will buffer up to a certain number of bytes between the sink and source channels, but such buffering should not be assumed."}