{"Functions": {"assertOpen()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected abstract void assertOpen ()"}, "sendResponseEntity(org.apache.http.HttpResponse)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpResponse_E@", "the response whose entity to send."]], "Throws": [["@B_org#apache#http#HttpException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sends the response entity of a response over this connection.", "history": "Added in API level 1", "FullName": "public void sendResponseEntity (HttpResponse response)"}, "createResponseWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected HttpMessageWriter createResponseWriter (SessionOutputBuffer buffer, HttpParams params)"}, "init(org.apache.http.io.SessionInputBuffer, org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected void init (SessionInputBuffer inbuffer, SessionOutputBuffer outbuffer, HttpParams params)"}, "createEntitySerializer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected EntitySerializer createEntitySerializer ()"}, "createRequestParser(org.apache.http.io.SessionInputBuffer, org.apache.http.HttpRequestFactory, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected HttpMessageParser createRequestParser (SessionInputBuffer buffer, HttpRequestFactory requestFactory, HttpParams params)"}, "receiveRequestHeader()": {"Returns": [["", "a new HttpRequest object whose request line and headers are initialized."]], "Parameters": [], "Throws": [["@B_org#apache#http#HttpException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Receives the request line and all headers available from this connection. The caller should examine the returned request and decide if to receive a request entity as well.", "history": "Added in API level 1", "FullName": "public HttpRequest receiveRequestHeader ()"}, "AbstractHttpServerConnection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public AbstractHttpServerConnection ()"}, "receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpEntityEnclosingRequest_E@", "the request to attach the entity to."]], "Throws": [["@B_org#apache#http#HttpException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Receives the next request entity available from this connection and attaches it to an existing request.", "history": "Added in API level 1", "FullName": "public void receiveRequestEntity (HttpEntityEnclosingRequest request)"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sends all pending buffered data over this connection.", "history": "Added in API level 1", "FullName": "public void flush ()"}, "getMetrics()": {"Returns": [["", "HttpConnectionMetrics"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a collection of connection metrcis", "history": "Added in API level 1", "FullName": "public HttpConnectionMetrics getMetrics ()"}, "sendResponseHeader(org.apache.http.HttpResponse)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpResponse_E@", "the response whose headers to send."]], "Throws": [["@B_org#apache#http#HttpException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sends the response line and headers of a response over this connection.", "history": "Added in API level 1", "FullName": "public void sendResponseHeader (HttpResponse response)"}, "isStale()": {"Returns": [["", "true if attempts to use this connection are likely to succeed, or false if they are likely to fail and this connection should be closed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether this connection has gone down. Network connections may get closed during some time of inactivity for several reasons. The next time a read is attempted on such a connection it will throw an IOException. This method tries to alleviate this inconvenience by trying to find out if a connection is still usable. Implementations may do that by attempting a read with a very small timeout. Thus this method may block for a small amount of time before returning a result. It is therefore an", "history": "Added in API level 1", "FullName": "public boolean isStale ()"}, "doFlush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected void doFlush ()"}, "createEntityDeserializer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected EntityDeserializer createEntityDeserializer ()"}, "createHttpRequestFactory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected HttpRequestFactory createHttpRequestFactory ()"}}, "Inheritance": [], "ClassName": "org.apache.http.impl.AbstractHttpServerConnection", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Abstract server-side HTTP connection capable of transmitting and receiving data using arbitrary @B_org#apache#http#io#SessionInputBuffer_E@ and @B_org#apache#http#io#SessionOutputBuffer_E@"}