{"Functions": {"setLocale(java.util.Locale)": {"Returns": [["@B_java#util#Locale#Builder_E@", "This builder."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale"]], "Throws": [["@B_java#util#IllformedLocaleException_E@", "if locale has any ill-formed fields."], ["@B_java#lang#NullPointerException_E@", "if locale is null."]], "SeeAlso": [], "Permissions": [], "Description": "Resets the Builder to match the provided locale. Existing state is discarded. All fields of the locale must be well-formed, see @B_java#util#Locale_E@. Locales with any ill-formed fields cause IllformedLocaleException to be thrown, except for the following three cases which are accepted for compatibility reasons: Locale(\"ja\", \"JP\", \"JP\") is treated as \"ja-JP-u-ca-japanese\" Locale(\"th\", \"TH\", \"TH\") is treated as \"th-TH-u-nu-thai\" Locale(\"no\", \"NO\", \"NY\") is treated as \"nn-NO\"", "history": "Added in API level 21", "FullName": "public Locale.Builder setLocale (Locale locale)"}, "setScript(java.lang.String)": {"Returns": [["@B_java#util#Locale#Builder_E@", "This builder."]], "Parameters": [["@B_java#lang#String_E@", "String: the script"]], "Throws": [["@B_java#util#IllformedLocaleException_E@", "if script is ill-formed"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the script. If script is null or the empty string, the script in this Builder is removed. Otherwise, the script must be The typical script value is a four-letter script code as defined by ISO 15924.", "history": "Added in API level 21", "FullName": "public Locale.Builder setScript (String script)"}, "clear()": {"Returns": [["@B_java#util#Locale#Builder_E@", "This builder."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets the builder to its initial, empty state.", "history": "Added in API level 21", "FullName": "public Locale.Builder clear ()"}, "Locale.Builder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty Builder. The default value of all fields, extensions, and private use information is the empty string.", "history": "Added in API level 21", "FullName": "public Locale.Builder ()"}, "addUnicodeLocaleAttribute(java.lang.String)": {"Returns": [["@B_java#util#Locale#Builder_E@", "This builder."]], "Parameters": [["@B_java#lang#String_E@", "String: the attribute"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if attribute is null"], ["@B_java#util#IllformedLocaleException_E@", "if attribute is ill-formed"]], "SeeAlso": ["@B_java#util#Locale#Builder#setExtension_E@"], "Permissions": [], "Description": "Adds a unicode locale attribute, if not already present, otherwise has no effect. The attribute must not be null and must be", "history": "Added in API level 21", "FullName": "public Locale.Builder addUnicodeLocaleAttribute (String attribute)"}, "build()": {"Returns": [["@B_java#util#Locale_E@", "A Locale."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an instance of Locale created from the fields set on this builder. This applies the conversions listed in @B_java#util#Locale#forLanguageTag_E@ when constructing a Locale. (Grandfathered tags are handled in @B_java#util#Locale#Builder#setLanguageTag_E@.)", "history": "Added in API level 21", "FullName": "public Locale build ()"}, "setExtension(char, java.lang.String)": {"Returns": [["@B_java#util#Locale#Builder_E@", "This builder."]], "Parameters": [["char", "char: the extension key"], ["@B_java#lang#String_E@", "String: the extension value"]], "Throws": [["@B_java#util#IllformedLocaleException_E@", "if key is illegal or value is ill-formed"]], "SeeAlso": ["@B_java#util#Locale#Builder#setUnicodeLocaleKeyword_E@"], "Permissions": [], "Description": "Sets the extension for the given key. If the value is null or the empty string, the extension is removed. Otherwise, the extension must be @B_java#util#Locale#UNICODE_LOCALE_EXTENSION_E@ ('u') is used for the Unicode locale extension. Setting a value for this key replaces any existing Unicode locale key/type pairs with those defined in the extension. @B_java#util#Locale#PRIVATE_USE_EXTENSION_E@ ('x') is used for the private use code. To be well-formed, the value for this key needs only to have subtags of one to eight alphanumeric characters, not two to eight as in the general case.", "history": "added in API level 21", "FullName": "public Locale.Builder setExtension (char key, String value)"}, "clearExtensions()": {"Returns": [["@B_java#util#Locale#Builder_E@", "This builder."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#Builder#setExtension_E@"], "Permissions": [], "Description": "Resets the extensions to their initial, empty state. Language, script, region and variant are unchanged.", "history": "Added in API level 21", "FullName": "public Locale.Builder clearExtensions ()"}, "setLanguage(java.lang.String)": {"Returns": [["@B_java#util#Locale#Builder_E@", "This builder."]], "Parameters": [["@B_java#lang#String_E@", "String: the language"]], "Throws": [["@B_java#util#IllformedLocaleException_E@", "if language is ill-formed"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the language. If language is the empty string or null, the language in this Builder is removed. Otherwise, the language must be The typical language value is a two or three-letter language code as defined in ISO639.", "history": "Added in API level 21", "FullName": "public Locale.Builder setLanguage (String language)"}, "setExtension(char,java.lang.String)": {"Returns": [["@B_java#util#Locale#Builder_E@", "This builder."]], "Parameters": [["char", "char: the extension key"], ["@B_java#lang#String_E@", "String: the extension value"]], "Throws": [["@B_java#util#IllformedLocaleException_E@", "if key is illegal or value is ill-formed"]], "SeeAlso": ["@B_java#util#Locale#Builder#setUnicodeLocaleKeyword_E@"], "Permissions": [], "Description": "Sets the extension for the given key. If the value is null or the empty string, the extension is removed. Otherwise, the extension must be @B_java#util#Locale#UNICODE_LOCALE_EXTENSION_E@ ('u') is used for the Unicode locale extension. Setting a value for this key replaces any existing Unicode locale key/type pairs with those defined in the extension. @B_java#util#Locale#PRIVATE_USE_EXTENSION_E@ ('x') is used for the private use code. To be well-formed, the value for this key needs only to have subtags of one to eight alphanumeric characters, not two to eight as in the general case.", "history": "Added in API level 21", "FullName": "public Locale.Builder setExtension (char key, String value)"}, "setUnicodeLocaleKeyword(java.lang.String,java.lang.String)": {"Returns": [["@B_java#util#Locale#Builder_E@", "This builder."]], "Parameters": [["@B_java#lang#String_E@", "String: the Unicode locale key"], ["@B_java#lang#String_E@", "String: the Unicode locale type"]], "Throws": [["@B_java#util#IllformedLocaleException_E@", "if key or type is ill-formed"], ["@B_java#lang#NullPointerException_E@", "if key is null"]], "SeeAlso": ["@B_java#util#Locale#Builder#setExtension_E@"], "Permissions": [], "Description": "Sets the Unicode locale keyword type for the given key. If the type is null, the Unicode keyword is removed. Otherwise, the key must be non-null and both key and type must be Keys and types are converted to lower case. @B_java#util#Locale#Builder#setExtension_E@ replaces all Unicode locale keywords with those defined in the extension.", "history": "Added in API level 21", "FullName": "public Locale.Builder setUnicodeLocaleKeyword (String key, String type)"}, "removeUnicodeLocaleAttribute(java.lang.String)": {"Returns": [["@B_java#util#Locale#Builder_E@", "This builder."]], "Parameters": [["@B_java#lang#String_E@", "String: the attribute"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if attribute is null"], ["@B_java#util#IllformedLocaleException_E@", "if attribute is ill-formed"]], "SeeAlso": ["@B_java#util#Locale#Builder#setExtension_E@"], "Permissions": [], "Description": "Removes a unicode locale attribute, if present, otherwise has no effect. The attribute must not be null and must be Attribute comparision for removal is case-insensitive.", "history": "Added in API level 21", "FullName": "public Locale.Builder removeUnicodeLocaleAttribute (String attribute)"}, "setVariant(java.lang.String)": {"Returns": [["@B_java#util#Locale#Builder_E@", "This builder."]], "Parameters": [["@B_java#lang#String_E@", "String: the variant"]], "Throws": [["@B_java#util#IllformedLocaleException_E@", "if variant is ill-formed"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the variant. If variant is null or the empty string, the variant in this Builder is removed. Otherwise, it must consist of one or more variant satisfies the IETF BCP 47 variant subtag's syntax requirements, and normalizes the value to lowercase letters. However, the Locale class does not impose any syntactic restriction on variant, and the variant value in Locale is case sensitive. To set such a variant, use a Locale constructor.", "history": "Added in API level 21", "FullName": "public Locale.Builder setVariant (String variant)"}, "setRegion(java.lang.String)": {"Returns": [["@B_java#util#Locale#Builder_E@", "This builder."]], "Parameters": [["@B_java#lang#String_E@", "String: the region"]], "Throws": [["@B_java#util#IllformedLocaleException_E@", "if region is ill-formed"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the region. If region is null or the empty string, the region in this Builder is removed. Otherwise, the region must be The typical region value is a two-letter ISO 3166 code or a three-digit UN M.49 area code. The country value in the Locale created by the Builder is always normalized to upper case.", "history": "Added in API level 21", "FullName": "public Locale.Builder setRegion (String region)"}, "setLanguageTag(java.lang.String)": {"Returns": [["@B_java#util#Locale#Builder_E@", "This builder."]], "Parameters": [["@B_java#lang#String_E@", "String: the language tag"]], "Throws": [["@B_java#util#IllformedLocaleException_E@", "if languageTag is ill-formed"]], "SeeAlso": ["@B_java#util#Locale#forLanguageTag_E@"], "Permissions": [], "Description": "Resets the Builder to match the provided IETF BCP 47 language tag. Discards the existing state. Null and the empty string cause the builder to be reset, like @B_java#util#Locale#Builder#clear_E@. Grandfathered tags (see @B_java#util#Locale#forLanguageTag_E@) are converted to their canonical form before being processed. Otherwise, the language tag must be well-formed (see @B_java#util#Locale_E@) or an exception is thrown (unlike Locale.forLanguageTag, which just discards ill-formed and following portions of the tag).", "history": "Added in API level 21", "FullName": "public Locale.Builder setLanguageTag (String languageTag)"}}, "Inheritance": [], "ClassName": "java.util.Locale.Builder", "ClassDesc": "Builder is used to build instances of Locale from values configured by the setters. Unlike the Locale constructors, the Builder checks if a value configured by a setter satisfies the syntax requirements defined by the Locale class. A Locale object created by a Builder is well-formed and can be transformed to a well-formed IETF BCP 47 language tag without losing information. Locale class does not provide any syntactic restrictions on variant, while BCP 47 requires each variant subtag to be 5 to 8 alphanumerics or a single numeric followed by 3 alphanumerics. The method setVariant throws IllformedLocaleException for a variant that does not satisfy this restriction. If it is necessary to support such a variant, use a Locale constructor. However, keep in mind that a Locale object created this way might lose the variant information when transformed to a BCP 47 language tag. The following example shows how to create a Locale object with the Builder. Builders can be reused; clear() resets all fields to their default values."}