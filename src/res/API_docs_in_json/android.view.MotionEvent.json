{"Functions": {"addBatch(long,android.view.MotionEvent.PointerCoords[],int)": {"Returns": [], "Parameters": [["long", "long: The time stamp (in ms) for this data."], ["@B_android#view#MotionEvent#PointerCoords_E@", "PointerCoords: The new pointer coordinates."], ["int", "int: Meta key state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new movement to the batch of movements in this event. The event's current location, position and size is updated to the new values. The current values in the event are added to a list of historical values. Only applies to @B_android#view#MotionEvent#ACTION_MOVE_E@ or @B_android#view#MotionEvent#ACTION_HOVER_MOVE_E@ events.", "history": "Added in API level 9", "FullName": "public void addBatch (long eventTime, PointerCoords[] pointerCoords, int metaState)"}, "getTouchMajor()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getTouchMajor_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 9", "FullName": "public float getTouchMajor ()"}, "getActionMasked()": {"Returns": [["int", "The action, such as @B_android#view#MotionEvent#ACTION_DOWN_E@ or @B_android#view#MotionEvent#ACTION_POINTER_DOWN_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the masked action being performed, without pointer index information. Use @B_android#view#MotionEvent#getActionIndex_E@ to return the index associated with pointer actions.", "history": "Added in API level 8", "FullName": "public int getActionMasked ()"}, "getAction()": {"Returns": [["int", "The action, such as @B_android#view#MotionEvent#ACTION_DOWN_E@ or the combination of @B_android#view#MotionEvent#ACTION_POINTER_DOWN_E@ with a shifted pointer index."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the kind of action being performed. Consider using @B_android#view#MotionEvent#getActionMasked_E@ and @B_android#view#MotionEvent#getActionIndex_E@ to retrieve the separate masked action and pointer index.", "history": "Added in API level 1", "FullName": "public int getAction ()"}, "getEventTime()": {"Returns": [["long", "Returns the time this event occurred, in the @B_android#os#SystemClock#uptimeMillis_E@ time base."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the time this event occurred, in the @B_android#os#SystemClock#uptimeMillis_E@ time base.", "history": "Added in API level 1", "FullName": "public long getEventTime ()"}, "getOrientation(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the orientation of the touch area and tool area in radians clockwise from vertical for the given pointer index (use @B_android#view#MotionEvent#getPointerId_E@ to find the pointer identifier for this index). An angle of 0 radians indicates that the major axis of contact is oriented upwards, is perfectly circular or is of unknown orientation. A positive angle indicates that the major axis of contact is oriented to the right. A negative angle indicates that the major axis of contact is oriented to the left. The full range is from -PI/2 radians (finger pointing fully left) to PI/2 radians (finger pointing fully right).", "history": "Added in API level 9", "FullName": "public float getOrientation (int pointerIndex)"}, "getHistoricalPressure(int, int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getPressure_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical pressure coordinate, as per @B_android#view#MotionEvent#getPressure_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "added in API level 5", "FullName": "public float getHistoricalPressure (int pointerIndex, int pos)"}, "getHistoricalTouchMinor(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getTouchMinor_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getHistoricalTouchMinor_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 9", "FullName": "public float getHistoricalTouchMinor (int pos)"}, "getX(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the X coordinate of this event for the given pointer index (use @B_android#view#MotionEvent#getPointerId_E@ to find the pointer identifier for this index). Whole numbers are pixels; the value may have a fraction for input devices that are sub-pixel precise.", "history": "Added in API level 5", "FullName": "public float getX (int pointerIndex)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "getAxisValue(int, int)": {"Returns": [["float", "The value of the axis, or 0 if the axis is not available."]], "Parameters": [["int", "int: The axis identifier for the axis value to retrieve."], ["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the value of the requested axis for the given pointer index (use @B_android#view#MotionEvent#getPointerId_E@ to find the pointer identifier for this index).", "history": "added in API level 12", "FullName": "public float getAxisValue (int axis, int pointerIndex)"}, "getPointerCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The number of pointers of data contained in this event. Always >= 1.", "history": "Added in API level 5", "FullName": "public int getPointerCount ()"}, "setLocation(float, float)": {"Returns": [], "Parameters": [["float", "float: New absolute X location."], ["float", "float: New absolute Y location."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set this event's location. Applies @B_android#view#MotionEvent#offsetLocation_E@ with a delta from the current location to the given new location.", "history": "added in API level 1", "FullName": "public void setLocation (float x, float y)"}, "getHistoricalToolMajor(int,int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getToolMajor_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical tool major axis coordinate, as per @B_android#view#MotionEvent#getToolMajor_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "Added in API level 9", "FullName": "public float getHistoricalToolMajor (int pointerIndex, int pos)"}, "getHistoricalAxisValue(int, int, int)": {"Returns": [["float", "The value of the axis, or 0 if the axis is not available."]], "Parameters": [["int", "int: The axis identifier for the axis value to retrieve."], ["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the historical value of the requested axis, as per @B_android#view#MotionEvent#getAxisValue_E@, occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "added in API level 12", "FullName": "public float getHistoricalAxisValue (int axis, int pointerIndex, int pos)"}, "getHistorySize()": {"Returns": [["int", "Returns the number of historical points in the event."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of historical points in this event. These are movements that have occurred between this event and the previous event. This only applies to ACTION_MOVE events -- all other actions will have a size of 0.", "history": "Added in API level 1", "FullName": "public int getHistorySize ()"}, "getPointerCoords(int,android.view.MotionEvent.PointerCoords)": {"Returns": [], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["@B_android#view#MotionEvent#PointerCoords_E@", "MotionEvent.PointerCoords: The pointer coordinate object to populate."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#PointerCoords_E@"], "Permissions": [], "Description": "Populates a @B_android#view#MotionEvent#PointerCoords_E@ object with pointer coordinate data for the specified pointer index.", "history": "Added in API level 9", "FullName": "public void getPointerCoords (int pointerIndex, MotionEvent.PointerCoords outPointerCoords)"}, "getHistoricalSize(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getSize_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getHistoricalSize_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 1", "FullName": "public float getHistoricalSize (int pos)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "actionToString(int)": {"Returns": [["@B_java#lang#String_E@", "The symbolic name of the specified action."]], "Parameters": [["int", "int: The unmasked action."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getAction_E@"], "Permissions": [], "Description": "Returns a string that represents the symbolic name of the specified unmasked action such as \"ACTION_DOWN\", \"ACTION_POINTER_DOWN(3)\" or an equivalent numeric constant such as \"35\" if unknown.", "history": "Added in API level 19", "FullName": "public static String actionToString (int action)"}, "getSize()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getSize_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 1", "FullName": "public float getSize ()"}, "getHistoricalTouchMajor(int,int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getTouchMajor_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical touch major axis coordinate, as per @B_android#view#MotionEvent#getTouchMajor_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "Added in API level 9", "FullName": "public float getHistoricalTouchMajor (int pointerIndex, int pos)"}, "getHistoricalSize(int,int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getSize_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical size coordinate, as per @B_android#view#MotionEvent#getSize_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "Added in API level 5", "FullName": "public float getHistoricalSize (int pointerIndex, int pos)"}, "getActionButton()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getButtonState_E@"], "Permissions": [], "Description": "Gets which button has been modified during a press or release action. For actions other than @B_android#view#MotionEvent#ACTION_BUTTON_PRESS_E@ and @B_android#view#MotionEvent#ACTION_BUTTON_RELEASE_E@ the returned value is undefined.", "history": "Added in API level 23", "FullName": "public int getActionButton ()"}, "getHistoricalSize(int, int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getSize_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical size coordinate, as per @B_android#view#MotionEvent#getSize_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "added in API level 5", "FullName": "public float getHistoricalSize (int pointerIndex, int pos)"}, "obtain(long, long, int, float, float, int)": {"Returns": [["@B_android#view#MotionEvent_E@", "no returns description in source"]], "Parameters": [["long", "long: The time (in ms) when the user originally pressed down to start a stream of position events. This must be obtained from @B_android#os#SystemClock#uptimeMillis_E@."], ["long", "long: The the time (in ms) when this specific event was generated. This must be obtained from @B_android#os#SystemClock#uptimeMillis_E@."], ["int", "int: The kind of action being performed, such as @B_android#view#MotionEvent#ACTION_DOWN_E@."], ["float", "float: The X coordinate of this event."], ["float", "float: The Y coordinate of this event."], ["int", "int: The state of any meta / modifier keys that were in effect when the event was generated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new MotionEvent, filling in a subset of the basic motion values. Those not specified here are: device id (always 0), pressure and size (always 1), x and y precision (always 1), and edgeFlags (always 0).", "history": "added in API level 1", "FullName": "public static MotionEvent obtain (long downTime, long eventTime, int action, float x, float y, int metaState)"}, "getAxisValue(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: The axis identifier for the axis value to retrieve."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getAxisValue_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 12", "FullName": "public float getAxisValue (int axis)"}, "getHistoricalOrientation(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getOrientation_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getHistoricalOrientation_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 9", "FullName": "public float getHistoricalOrientation (int pos)"}, "getHistoricalPressure(int,int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getPressure_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical pressure coordinate, as per @B_android#view#MotionEvent#getPressure_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "Added in API level 5", "FullName": "public float getHistoricalPressure (int pointerIndex, int pos)"}, "getRawX(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getX_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the original raw X coordinate of this event. For touch events on the screen, this is the original location of the event on the screen, before it had been adjusted for the containing window and views.", "history": "Added in API level 29", "FullName": "public float getRawX (int pointerIndex)"}, "getHistoricalTouchMinor(int, int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getTouchMinor_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical touch minor axis coordinate, as per @B_android#view#MotionEvent#getTouchMinor_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "added in API level 9", "FullName": "public float getHistoricalTouchMinor (int pointerIndex, int pos)"}, "getDeviceId()": {"Returns": [["int", "The device id."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the id for the device that this event came from. An id of zero indicates that the event didn't come from a physical device and maps to the default keymap. The other numbers are arbitrary and you shouldn't depend on the values.", "history": "Added in API level 1", "FullName": "public int getDeviceId ()"}, "addBatch(long,float,float,float,float,int)": {"Returns": [], "Parameters": [["long", "long: The time stamp (in ms) for this data."], ["float", "float: The new X position."], ["float", "float: The new Y position."], ["float", "float: The new pressure."], ["float", "float: The new size."], ["int", "int: Meta key state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new movement to the batch of movements in this event. The event's current location, position and size is updated to the new values. The current values in the event are added to a list of historical values. Only applies to @B_android#view#MotionEvent#ACTION_MOVE_E@ or @B_android#view#MotionEvent#ACTION_HOVER_MOVE_E@ events.", "history": "Added in API level 1", "FullName": "public void addBatch (long eventTime, float x, float y, float pressure, float size, int metaState)"}, "getToolMinor(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the length of the minor axis of an ellipse that describes the size of the approaching tool for the given pointer index (use @B_android#view#MotionEvent#getPointerId_E@ to find the pointer identifier for this index). The tool area represents the estimated size of the finger or pen that is touching the device independent of its actual touch area at the point of contact.", "history": "Added in API level 9", "FullName": "public float getToolMinor (int pointerIndex)"}, "getPressure(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the current pressure of this event for the given pointer index (use @B_android#view#MotionEvent#getPointerId_E@ to find the pointer identifier for this index). The pressure generally ranges from 0 (no pressure at all) to 1 (normal pressure), however values higher than 1 may be generated depending on the calibration of the input device.", "history": "Added in API level 5", "FullName": "public float getPressure (int pointerIndex)"}, "getHistoricalOrientation(int, int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getOrientation_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical orientation coordinate, as per @B_android#view#MotionEvent#getOrientation_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "added in API level 9", "FullName": "public float getHistoricalOrientation (int pointerIndex, int pos)"}, "getSize(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a scaled value of the approximate size for the given pointer index (use @B_android#view#MotionEvent#getPointerId_E@ to find the pointer identifier for this index). This represents some approximation of the area of the screen being pressed; the actual value in pixels corresponding to the touch is normalized with the device specific range of values and scaled to a value between 0 and 1. The value of size can be used to determine fat touch events.", "history": "Added in API level 5", "FullName": "public float getSize (int pointerIndex)"}, "getHistoricalToolMajor(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getToolMajor_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getHistoricalToolMajor_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 9", "FullName": "public float getHistoricalToolMajor (int pos)"}, "obtain(long,long,int,float,float,float,float,int,float,float,int,int)": {"Returns": [["@B_android#view#MotionEvent_E@", "no returns description in source"]], "Parameters": [["long", "long: The time (in ms) when the user originally pressed down to start a stream of position events. This must be obtained from @B_android#os#SystemClock#uptimeMillis_E@."], ["long", "long: The the time (in ms) when this specific event was generated. This must be obtained from @B_android#os#SystemClock#uptimeMillis_E@."], ["int", "int: The kind of action being performed, such as @B_android#view#MotionEvent#ACTION_DOWN_E@."], ["float", "float: The X coordinate of this event."], ["float", "float: The Y coordinate of this event."], ["float", "float: The current pressure of this event. The pressure generally ranges from 0 (no pressure at all) to 1 (normal pressure), however values higher than 1 may be generated depending on the calibration of the input device."], ["float", "float: A scaled value of the approximate size of the area being pressed when touched with the finger. The actual value in pixels corresponding to the finger touch is normalized with a device specific range of values and scaled to a value between 0 and 1."], ["int", "int: The state of any meta / modifier keys that were in effect when the event was generated."], ["float", "float: The precision of the X coordinate being reported."], ["float", "float: The precision of the Y coordinate being reported."], ["int", "int: The id for the device that this event came from. An id of zero indicates that the event didn't come from a physical device; other numbers are arbitrary and you shouldn't depend on the values."], ["int", "int: A bitfield indicating which edges, if any, were touched by this MotionEvent."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new MotionEvent, filling in all of the basic values that define the motion.", "history": "Added in API level 1", "FullName": "public static MotionEvent obtain (long downTime, long eventTime, int action, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags)"}, "getHistoricalAxisValue(int, int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: The axis identifier for the axis value to retrieve."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getAxisValue_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getHistoricalAxisValue_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "added in API level 12", "FullName": "public float getHistoricalAxisValue (int axis, int pos)"}, "getAxisValue(int,int)": {"Returns": [["float", "The value of the axis, or 0 if the axis is not available."]], "Parameters": [["int", "int: The axis identifier for the axis value to retrieve."], ["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the value of the requested axis for the given pointer index (use @B_android#view#MotionEvent#getPointerId_E@ to find the pointer identifier for this index).", "history": "Added in API level 12", "FullName": "public float getAxisValue (int axis, int pointerIndex)"}, "getHistoricalX(int,int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getX_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical X coordinate, as per @B_android#view#MotionEvent#getX_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "Added in API level 5", "FullName": "public float getHistoricalX (int pointerIndex, int pos)"}, "getHistoricalY(int, int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getY_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical Y coordinate, as per @B_android#view#MotionEvent#getY_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "added in API level 5", "FullName": "public float getHistoricalY (int pointerIndex, int pos)"}, "getHistoricalTouchMajor(int, int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getTouchMajor_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical touch major axis coordinate, as per @B_android#view#MotionEvent#getTouchMajor_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "added in API level 9", "FullName": "public float getHistoricalTouchMajor (int pointerIndex, int pos)"}, "getHistoricalX(int, int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getX_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical X coordinate, as per @B_android#view#MotionEvent#getX_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "added in API level 5", "FullName": "public float getHistoricalX (int pointerIndex, int pos)"}, "obtainNoHistory(android.view.MotionEvent)": {"Returns": [["@B_android#view#MotionEvent_E@", "no returns description in source"]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new MotionEvent, copying from an existing one, but not including any historical point information.", "history": "Added in API level 5", "FullName": "public static MotionEvent obtainNoHistory (MotionEvent other)"}, "getClassification()": {"Returns": [["int", "Value is @B_android#view#MotionEvent#CLASSIFICATION_NONE_E@, @B_android#view#MotionEvent#CLASSIFICATION_AMBIGUOUS_GESTURE_E@, or @B_android#view#MotionEvent#CLASSIFICATION_DEEP_PRESS_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the classification for the current gesture. The classification may change as more events become available for the same gesture.", "history": "Added in API level 29", "FullName": "public int getClassification ()"}, "getHistoricalAxisValue(int,int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: The axis identifier for the axis value to retrieve."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getAxisValue_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getHistoricalAxisValue_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 12", "FullName": "public float getHistoricalAxisValue (int axis, int pos)"}, "getHistoricalToolMinor(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getToolMinor_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getHistoricalToolMinor_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 9", "FullName": "public float getHistoricalToolMinor (int pos)"}, "offsetLocation(float, float)": {"Returns": [], "Parameters": [["float", "float: Amount to add to the current X coordinate of the event."], ["float", "float: Amount to add to the current Y coordinate of the event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adjust this event's location.", "history": "added in API level 1", "FullName": "public void offsetLocation (float deltaX, float deltaY)"}, "getXPrecision()": {"Returns": [["float", "Returns the precision of X coordinates being reported."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Return the precision of the X coordinates being reported. You can multiply this number with @B_android#view#MotionEvent#getX_E@ to find the actual hardware value of the X coordinate.", "history": "Added in API level 1", "FullName": "public float getXPrecision ()"}, "getEdgeFlags()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a bitfield indicating which edges, if any, were touched by this MotionEvent. For touch events, clients can use this to determine if the user's finger was touching the edge of the display. This property is only set for @B_android#view#MotionEvent#ACTION_DOWN_E@ events.", "history": "Added in API level 1", "FullName": "public int getEdgeFlags ()"}, "getPressure()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getPressure_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 1", "FullName": "public float getPressure ()"}, "getX()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getX_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 1", "FullName": "public float getX ()"}, "getHistoricalToolMinor(int,int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getToolMinor_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical tool minor axis coordinate, as per @B_android#view#MotionEvent#getToolMinor_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "Added in API level 9", "FullName": "public float getHistoricalToolMinor (int pointerIndex, int pos)"}, "obtain(long,long,int,int,int[],android.view.MotionEvent.PointerCoords[],int,float,float,int,int,int,int)": {"Returns": [["@B_android#view#MotionEvent_E@", "no returns description in source"]], "Parameters": [["long", "long: The time (in ms) when the user originally pressed down to start a stream of position events. This must be obtained from @B_android#os#SystemClock#uptimeMillis_E@."], ["long", "long: The the time (in ms) when this specific event was generated. This must be obtained from @B_android#os#SystemClock#uptimeMillis_E@."], ["int", "int: The kind of action being performed, such as @B_android#view#MotionEvent#ACTION_DOWN_E@."], ["int", "int: The number of pointers that will be in this event."], ["int[]", "int: An array of pointerCount values providing an identifier for each pointer."], ["@B_android#view#MotionEvent#PointerCoords_E@", "PointerCoords: An array of pointerCount values providing a @B_android#view#MotionEvent#PointerCoords_E@ coordinate object for each pointer."], ["int", "int: The state of any meta / modifier keys that were in effect when the event was generated."], ["float", "float: The precision of the X coordinate being reported."], ["float", "float: The precision of the Y coordinate being reported."], ["int", "int: The id for the device that this event came from. An id of zero indicates that the event didn't come from a physical device; other numbers are arbitrary and you shouldn't depend on the values."], ["int", "int: A bitfield indicating which edges, if any, were touched by this MotionEvent."], ["int", "int: The source of this event."], ["int", "int: The motion event flags."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#MotionEvent#obtain_E@ instead. Create a new MotionEvent, filling in all of the basic values that define the motion.", "history": "Added in API level 9 Deprecated in API level 15", "FullName": "public static MotionEvent obtain (long downTime, long eventTime, int action, int pointerCount, int[] pointerIds, PointerCoords[] pointerCoords, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags)"}, "obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)": {"Returns": [["@B_android#view#MotionEvent_E@", "no returns description in source"]], "Parameters": [["long", "long: The time (in ms) when the user originally pressed down to start a stream of position events. This must be obtained from @B_android#os#SystemClock#uptimeMillis_E@."], ["long", "long: The the time (in ms) when this specific event was generated. This must be obtained from @B_android#os#SystemClock#uptimeMillis_E@."], ["int", "int: The kind of action being performed, such as @B_android#view#MotionEvent#ACTION_DOWN_E@."], ["int", "int: The number of pointers that are active in this event."], ["float", "float: The X coordinate of this event."], ["float", "float: The Y coordinate of this event."], ["float", "float: The current pressure of this event. The pressure generally ranges from 0 (no pressure at all) to 1 (normal pressure), however values higher than 1 may be generated depending on the calibration of the input device."], ["float", "float: A scaled value of the approximate size of the area being pressed when touched with the finger. The actual value in pixels corresponding to the finger touch is normalized with a device specific range of values and scaled to a value between 0 and 1."], ["int", "int: The state of any meta / modifier keys that were in effect when the event was generated."], ["float", "float: The precision of the X coordinate being reported."], ["float", "float: The precision of the Y coordinate being reported."], ["int", "int: The id for the device that this event came from. An id of zero indicates that the event didn't come from a physical device; other numbers are arbitrary and you shouldn't depend on the values."], ["int", "int: A bitfield indicating which edges, if any, were touched by this MotionEvent."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#MotionEvent#obtain_E@ instead. Create a new MotionEvent, filling in all of the basic values that define the motion.", "history": "Added in API level 5 Deprecated in API level 15", "FullName": "public static MotionEvent obtain (long downTime, long eventTime, int action, int pointerCount, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags)"}, "getMetaState()": {"Returns": [["int", "an integer in which each bit set to 1 represents a pressed meta key"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent#getMetaState_E@"], "Permissions": [], "Description": "Returns the state of any meta / modifier keys that were in effect when the event was generated. This is the same values as those returned by @B_android#view#KeyEvent#getMetaState_E@.", "history": "Added in API level 1", "FullName": "public int getMetaState ()"}, "addBatch(long, float, float, float, float, int)": {"Returns": [], "Parameters": [["long", "long: The time stamp (in ms) for this data."], ["float", "float: The new X position."], ["float", "float: The new Y position."], ["float", "float: The new pressure."], ["float", "float: The new size."], ["int", "int: Meta key state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new movement to the batch of movements in this event. The event's current location, position and size is updated to the new values. The current values in the event are added to a list of historical values. Only applies to @B_android#view#MotionEvent#ACTION_MOVE_E@ or @B_android#view#MotionEvent#ACTION_HOVER_MOVE_E@ events.", "history": "added in API level 1", "FullName": "public void addBatch (long eventTime, float x, float y, float pressure, float size, int metaState)"}, "getRawY(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getY_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the original raw Y coordinate of this event. For touch events on the screen, this is the original location of the event on the screen, before it had been adjusted for the containing window and views.", "history": "Added in API level 29", "FullName": "public float getRawY (int pointerIndex)"}, "obtain(long,long,int,float,float,int)": {"Returns": [["@B_android#view#MotionEvent_E@", "no returns description in source"]], "Parameters": [["long", "long: The time (in ms) when the user originally pressed down to start a stream of position events. This must be obtained from @B_android#os#SystemClock#uptimeMillis_E@."], ["long", "long: The the time (in ms) when this specific event was generated. This must be obtained from @B_android#os#SystemClock#uptimeMillis_E@."], ["int", "int: The kind of action being performed, such as @B_android#view#MotionEvent#ACTION_DOWN_E@."], ["float", "float: The X coordinate of this event."], ["float", "float: The Y coordinate of this event."], ["int", "int: The state of any meta / modifier keys that were in effect when the event was generated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new MotionEvent, filling in a subset of the basic motion values. Those not specified here are: device id (always 0), pressure and size (always 1), x and y precision (always 1), and edgeFlags (always 0).", "history": "Added in API level 1", "FullName": "public static MotionEvent obtain (long downTime, long eventTime, int action, float x, float y, int metaState)"}, "getY(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the Y coordinate of this event for the given pointer index (use @B_android#view#MotionEvent#getPointerId_E@ to find the pointer identifier for this index). Whole numbers are pixels; the value may have a fraction for input devices that are sub-pixel precise.", "history": "Added in API level 5", "FullName": "public float getY (int pointerIndex)"}, "getYPrecision()": {"Returns": [["float", "Returns the precision of Y coordinates being reported."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Return the precision of the Y coordinates being reported. You can multiply this number with @B_android#view#MotionEvent#getY_E@ to find the actual hardware value of the Y coordinate.", "history": "Added in API level 1", "FullName": "public float getYPrecision ()"}, "getToolMajor(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the length of the major axis of an ellipse that describes the size of the approaching tool for the given pointer index (use @B_android#view#MotionEvent#getPointerId_E@ to find the pointer identifier for this index). The tool area represents the estimated size of the finger or pen that is touching the device independent of its actual touch area at the point of contact.", "history": "Added in API level 9", "FullName": "public float getToolMajor (int pointerIndex)"}, "getY()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getY_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 1", "FullName": "public float getY ()"}, "obtain(android.view.MotionEvent)": {"Returns": [["@B_android#view#MotionEvent_E@", "no returns description in source"]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new MotionEvent, copying from an existing one.", "history": "Added in API level 1", "FullName": "public static MotionEvent obtain (MotionEvent other)"}, "isButtonPressed(int)": {"Returns": [["boolean", "True if specified buttons are pressed."]], "Parameters": [["int", "int: Button (or combination of buttons)."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Checks if a mouse or stylus button (or combination of buttons) is pressed.", "history": "Added in API level 21", "FullName": "public boolean isButtonPressed (int button)"}, "setAction(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this event's action.", "history": "Added in API level 1", "FullName": "public void setAction (int action)"}, "getRawY()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getY_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the original raw Y coordinate of this event. For touch events on the screen, this is the original location of the event on the screen, before it had been adjusted for the containing window and views.", "history": "Added in API level 1", "FullName": "public float getRawY ()"}, "setLocation(float,float)": {"Returns": [], "Parameters": [["float", "float: New absolute X location."], ["float", "float: New absolute Y location."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set this event's location. Applies @B_android#view#MotionEvent#offsetLocation_E@ with a delta from the current location to the given new location.", "history": "Added in API level 1", "FullName": "public void setLocation (float x, float y)"}, "getHistoricalToolMajor(int, int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getToolMajor_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical tool major axis coordinate, as per @B_android#view#MotionEvent#getToolMajor_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "added in API level 9", "FullName": "public float getHistoricalToolMajor (int pointerIndex, int pos)"}, "getActionIndex()": {"Returns": [["int", "The index associated with the action."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For @B_android#view#MotionEvent#ACTION_POINTER_DOWN_E@ or @B_android#view#MotionEvent#ACTION_POINTER_UP_E@ as returned by @B_android#view#MotionEvent#getActionMasked_E@, this returns the associated pointer index. The index may be used with @B_android#view#MotionEvent#getPointerId_E@, @B_android#view#MotionEvent#getX_E@, @B_android#view#MotionEvent#getY_E@, @B_android#view#MotionEvent#getPressure_E@, and @B_android#view#MotionEvent#getSize_E@ to get information about the pointer that has gone down or up.", "history": "Added in API level 8", "FullName": "public int getActionIndex ()"}, "getToolMinor()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getToolMinor_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 9", "FullName": "public float getToolMinor ()"}, "getHistoricalX(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getX_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getHistoricalX_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 1", "FullName": "public float getHistoricalX (int pos)"}, "getButtonState()": {"Returns": [["int", "The button state."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Gets the state of all buttons that are pressed such as a mouse or stylus button.", "history": "Added in API level 14", "FullName": "public int getButtonState ()"}, "setEdgeFlags(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getEdgeFlags_E@"], "Permissions": [], "Description": "Sets the bitfield indicating which edges, if any, were touched by this MotionEvent.", "history": "Added in API level 1", "FullName": "public void setEdgeFlags (int flags)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "getHistoricalPointerCoords(int,int,android.view.MotionEvent.PointerCoords)": {"Returns": [], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"], ["@B_android#view#MotionEvent#PointerCoords_E@", "MotionEvent.PointerCoords: The pointer coordinate object to populate."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getPointerCoords_E@", "@B_android#view#MotionEvent#PointerCoords_E@"], "Permissions": [], "Description": "Populates a @B_android#view#MotionEvent#PointerCoords_E@ object with historical pointer coordinate data, as per @B_android#view#MotionEvent#getPointerCoords_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "Added in API level 9", "FullName": "public void getHistoricalPointerCoords (int pointerIndex, int pos, MotionEvent.PointerCoords outPointerCoords)"}, "getHistoricalToolMinor(int, int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getToolMinor_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical tool minor axis coordinate, as per @B_android#view#MotionEvent#getToolMinor_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "added in API level 9", "FullName": "public float getHistoricalToolMinor (int pointerIndex, int pos)"}, "getHistoricalAxisValue(int,int,int)": {"Returns": [["float", "The value of the axis, or 0 if the axis is not available."]], "Parameters": [["int", "int: The axis identifier for the axis value to retrieve."], ["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the historical value of the requested axis, as per @B_android#view#MotionEvent#getAxisValue_E@, occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "Added in API level 12", "FullName": "public float getHistoricalAxisValue (int axis, int pointerIndex, int pos)"}, "getFlags()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Gets the motion event flags.", "history": "Added in API level 9", "FullName": "public int getFlags ()"}, "offsetLocation(float,float)": {"Returns": [], "Parameters": [["float", "float: Amount to add to the current X coordinate of the event."], ["float", "float: Amount to add to the current Y coordinate of the event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adjust this event's location.", "history": "Added in API level 1", "FullName": "public void offsetLocation (float deltaX, float deltaY)"}, "getToolType(int)": {"Returns": [["int", "The tool type of the pointer."]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Gets the tool type of a pointer for the given pointer index. The tool type indicates the type of tool used to make contact such as a finger or stylus, if known.", "history": "Added in API level 14", "FullName": "public int getToolType (int pointerIndex)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "recycle()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Recycle the MotionEvent, to be re-used by a later caller. After calling this function you must not ever touch the event again.", "history": "Added in API level 1", "FullName": "public void recycle ()"}, "getSource()": {"Returns": [["int", "The event source or @B_android#view#InputDevice#SOURCE_UNKNOWN_E@ if unknown."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the source of the event.", "history": "Added in API level 9", "FullName": "public int getSource ()"}, "axisToString(int)": {"Returns": [["@B_java#lang#String_E@", "The symbolic name of the specified axis."]], "Parameters": [["int", "int: The axis."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string that represents the symbolic name of the specified axis such as \"AXIS_X\" or an equivalent numeric constant such as \"42\" if unknown.", "history": "Added in API level 12", "FullName": "public static String axisToString (int axis)"}, "getToolMajor()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getToolMajor_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 9", "FullName": "public float getToolMajor ()"}, "getTouchMinor(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the length of the minor axis of an ellipse that describes the touch area at the point of contact for the given pointer index (use @B_android#view#MotionEvent#getPointerId_E@ to find the pointer identifier for this index).", "history": "Added in API level 9", "FullName": "public float getTouchMinor (int pointerIndex)"}, "getHistoricalPressure(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getPressure_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getHistoricalPressure_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 1", "FullName": "public float getHistoricalPressure (int pos)"}, "findPointerIndex(int)": {"Returns": [["int", "Returns either the index of the pointer (for use with @B_android#view#MotionEvent#getX_E@ et al.), or -1 if there is no data available for that pointer identifier."]], "Parameters": [["int", "int: The identifier of the pointer to be found."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given a pointer identifier, find the index of its data in the event.", "history": "Added in API level 5", "FullName": "public int findPointerIndex (int pointerId)"}, "getHistoricalY(int,int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getY_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical Y coordinate, as per @B_android#view#MotionEvent#getY_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "Added in API level 5", "FullName": "public float getHistoricalY (int pointerIndex, int pos)"}, "getHistoricalOrientation(int,int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getOrientation_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical orientation coordinate, as per @B_android#view#MotionEvent#getOrientation_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "Added in API level 9", "FullName": "public float getHistoricalOrientation (int pointerIndex, int pos)"}, "getHistoricalY(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getY_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getHistoricalY_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 1", "FullName": "public float getHistoricalY (int pos)"}, "transform(android.graphics.Matrix)": {"Returns": [], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix: The transformation matrix to apply."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies a transformation matrix to all of the points in the event.", "history": "Added in API level 11", "FullName": "public void transform (Matrix matrix)"}, "getHistoricalEventTime(int)": {"Returns": [["long", "Returns the time that a historical movement occurred between this event and the previous event, in the @B_android#os#SystemClock#uptimeMillis_E@ time base."]], "Parameters": [["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getEventTime_E@"], "Permissions": [], "Description": "Returns the time that a historical movement occurred between this event and the previous event, in the @B_android#os#SystemClock#uptimeMillis_E@ time base. This only applies to ACTION_MOVE events.", "history": "Added in API level 1", "FullName": "public long getHistoricalEventTime (int pos)"}, "getHistoricalTouchMinor(int,int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getTouchMinor_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns a historical touch minor axis coordinate, as per @B_android#view#MotionEvent#getTouchMinor_E@, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.", "history": "Added in API level 9", "FullName": "public float getHistoricalTouchMinor (int pointerIndex, int pos)"}, "getTouchMajor(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the length of the major axis of an ellipse that describes the touch area at the point of contact for the given pointer index (use @B_android#view#MotionEvent#getPointerId_E@ to find the pointer identifier for this index).", "history": "Added in API level 9", "FullName": "public float getTouchMajor (int pointerIndex)"}, "getPointerProperties(int,android.view.MotionEvent.PointerProperties)": {"Returns": [], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."], ["@B_android#view#MotionEvent#PointerProperties_E@", "MotionEvent.PointerProperties: The pointer properties object to populate."]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#PointerProperties_E@"], "Permissions": [], "Description": "Populates a @B_android#view#MotionEvent#PointerProperties_E@ object with pointer properties for the specified pointer index.", "history": "Added in API level 14", "FullName": "public void getPointerProperties (int pointerIndex, MotionEvent.PointerProperties outPointerProperties)"}, "getRawX()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getX_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "Returns the original raw X coordinate of this event. For touch events on the screen, this is the original location of the event on the screen, before it had been adjusted for the containing window and views.", "history": "Added in API level 1", "FullName": "public float getRawX ()"}, "setSource(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 12", "FullName": "public void setSource (int source)"}, "getOrientation()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getOrientation_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 9", "FullName": "public float getOrientation ()"}, "obtain(long,long,int,int,android.view.MotionEvent.PointerProperties[],android.view.MotionEvent.PointerCoords[],int,int,float,float,int,int,int,int)": {"Returns": [["@B_android#view#MotionEvent_E@", "no returns description in source"]], "Parameters": [["long", "long: The time (in ms) when the user originally pressed down to start a stream of position events. This must be obtained from @B_android#os#SystemClock#uptimeMillis_E@."], ["long", "long: The the time (in ms) when this specific event was generated. This must be obtained from @B_android#os#SystemClock#uptimeMillis_E@."], ["int", "int: The kind of action being performed, such as @B_android#view#MotionEvent#ACTION_DOWN_E@."], ["int", "int: The number of pointers that will be in this event."], ["@B_android#view#MotionEvent#PointerProperties_E@", "PointerProperties: An array of pointerCount values providing a @B_android#view#MotionEvent#PointerProperties_E@ property object for each pointer, which must include the pointer identifier."], ["@B_android#view#MotionEvent#PointerCoords_E@", "PointerCoords: An array of pointerCount values providing a @B_android#view#MotionEvent#PointerCoords_E@ coordinate object for each pointer."], ["int", "int: The state of any meta / modifier keys that were in effect when the event was generated."], ["int", "int: The state of buttons that are pressed."], ["float", "float: The precision of the X coordinate being reported."], ["float", "float: The precision of the Y coordinate being reported."], ["int", "int: The id for the device that this event came from. An id of zero indicates that the event didn't come from a physical device; other numbers are arbitrary and you shouldn't depend on the values."], ["int", "int: A bitfield indicating which edges, if any, were touched by this MotionEvent."], ["int", "int: The source of this event."], ["int", "int: The motion event flags."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new MotionEvent, filling in all of the basic values that define the motion.", "history": "Added in API level 14", "FullName": "public static MotionEvent obtain (long downTime, long eventTime, int action, int pointerCount, PointerProperties[] pointerProperties, PointerCoords[] pointerCoords, int metaState, int buttonState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags)"}, "getPointerId(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to @B_android#view#MotionEvent#getPointerCount_E@-1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the pointer identifier associated with a particular pointer data index in this event. The identifier tells you the actual pointer number associated with the data, accounting for individual pointers going up and down since the start of the current gesture.", "history": "Added in API level 5", "FullName": "public int getPointerId (int pointerIndex)"}, "getDownTime()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time (in ms) when the user originally pressed down to start a stream of position events.", "history": "Added in API level 1", "FullName": "public long getDownTime ()"}, "getHistoricalTouchMajor(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Which historical value to return; must be less than @B_android#view#MotionEvent#getHistorySize_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent#getHistorySize_E@", "@B_android#view#MotionEvent#getTouchMajor_E@", "@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getHistoricalTouchMajor_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 9", "FullName": "public float getHistoricalTouchMajor (int pos)"}, "getTouchMinor()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "@B_android#view#MotionEvent#getTouchMinor_E@ for the first pointer index (may be an arbitrary pointer identifier).", "history": "Added in API level 9", "FullName": "public float getTouchMinor ()"}, "axisFromString(java.lang.String)": {"Returns": [["int", "The axis or -1 if not found."]], "Parameters": [["@B_java#lang#String_E@", "String: The symbolic name of the axis."]], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent#keyCodeToString_E@"], "Permissions": [], "Description": "Gets an axis by its symbolic name such as \"AXIS_X\" or an equivalent numeric constant such as \"42\".", "history": "Added in API level 12", "FullName": "public static int axisFromString (String symbolicName)"}}, "Inheritance": ["@B_android#view#InputEvent_E@"], "ClassName": "android.view.MotionEvent", "ClassDesc": "Object used to report movement (mouse, pen, finger, trackball) events. Motion events may hold either absolute or relative movements and other data, depending on the type of device. Motion events describe movements in terms of an action code and a set of axis values. The action code specifies the state change that occurred such as a pointer going down or up. The axis values describe the position and other movement properties. For example, when the user first touches the screen, the system delivers a touch event to the appropriate @B_android#view#View_E@ with the action code @B_android#view#MotionEvent#ACTION_DOWN_E@ and a set of axis values that include the X and Y coordinates of the touch and information about the pressure, size and orientation of the contact area. Some devices can report multiple movement traces at the same time. Multi-touch screens emit one movement trace for each finger. The individual fingers or other objects that generate movement traces are referred to as pointers. Motion events contain information about all of the pointers that are currently active even if some of them have not moved since the last event was delivered. The number of pointers only ever changes by one as individual pointers go up and down, except when the gesture is canceled. Each pointer has a unique id that is assigned when it first goes down (indicated by @B_android#view#MotionEvent#ACTION_DOWN_E@ or @B_android#view#MotionEvent#ACTION_POINTER_DOWN_E@). A pointer id remains valid until the pointer eventually goes up (indicated by @B_android#view#MotionEvent#ACTION_UP_E@ or @B_android#view#MotionEvent#ACTION_POINTER_UP_E@) or when the gesture is canceled (indicated by @B_android#view#MotionEvent#ACTION_CANCEL_E@). The MotionEvent class provides many methods to query the position and other properties of pointers, such as @B_android#view#MotionEvent#getX_E@, @B_android#view#MotionEvent#getY_E@, @B_android#view#MotionEvent#getAxisValue_E@, @B_android#view#MotionEvent#getPointerId_E@, @B_android#view#MotionEvent#getToolType_E@, and many others. Most of these methods accept the pointer index as a parameter rather than the pointer id. The pointer index of each pointer in the event ranges from 0 to one less than the value returned by @B_android#view#MotionEvent#getPointerCount_E@. The order in which individual pointers appear within a motion event is undefined. Thus the pointer index of a pointer can change from one event to the next but the pointer id of a pointer is guaranteed to remain constant as long as the pointer remains active. Use the @B_android#view#MotionEvent#getPointerId_E@ method to obtain the pointer id of a pointer to track it across all subsequent motion events in a gesture. Then for successive motion events, use the @B_android#view#MotionEvent#findPointerIndex_E@ method to obtain the pointer index for a given pointer id in that motion event. Mouse and stylus buttons can be retrieved using @B_android#view#MotionEvent#getButtonState_E@. It is a good idea to check the button state while handling @B_android#view#MotionEvent#ACTION_DOWN_E@ as part of a touch event. The application may choose to perform some different action if the touch event starts due to a secondary button click, such as presenting a context menu. For efficiency, motion events with @B_android#view#MotionEvent#ACTION_MOVE_E@ may batch together multiple movement samples within a single object. The most current pointer coordinates are available using @B_android#view#MotionEvent#getX_E@ and @B_android#view#MotionEvent#getY_E@. Earlier coordinates within the batch are accessed using @B_android#view#MotionEvent#getHistoricalX_E@ and @B_android#view#MotionEvent#getHistoricalY_E@. The coordinates are \"historical\" only insofar as they are older than the current coordinates in the batch; however, they are still distinct from any other coordinates reported in prior motion events. To process all coordinates in the batch in time order, first consume the historical coordinates then consume the current coordinates. Example: Consuming all samples for all pointers in a motion event in time order. The interpretation of the contents of a MotionEvent varies significantly depending on the source class of the device. On pointing devices with source class @B_android#view#InputDevice#SOURCE_CLASS_POINTER_E@ such as touch screens, the pointer coordinates specify absolute positions such as view X/Y coordinates. Each complete gesture is represented by a sequence of motion events with actions that describe pointer state transitions and movements. A gesture starts with a motion event with @B_android#view#MotionEvent#ACTION_DOWN_E@ that provides the location of the first pointer down. As each additional pointer that goes down or up, the framework will generate a motion event with @B_android#view#MotionEvent#ACTION_POINTER_DOWN_E@ or @B_android#view#MotionEvent#ACTION_POINTER_UP_E@ accordingly. Pointer movements are described by motion events with @B_android#view#MotionEvent#ACTION_MOVE_E@. Finally, a gesture end either when the final pointer goes up as represented by a motion event with @B_android#view#MotionEvent#ACTION_UP_E@ or when gesture is canceled with @B_android#view#MotionEvent#ACTION_CANCEL_E@. Some pointing devices such as mice may support vertical and/or horizontal scrolling. A scroll event is reported as a generic motion event with @B_android#view#MotionEvent#ACTION_SCROLL_E@ that includes the relative scroll offset in the @B_android#view#MotionEvent#AXIS_VSCROLL_E@ and @B_android#view#MotionEvent#AXIS_HSCROLL_E@ axes. See @B_android#view#MotionEvent#getAxisValue_E@ for information about retrieving these additional axes. On trackball devices with source class @B_android#view#InputDevice#SOURCE_CLASS_TRACKBALL_E@, the pointer coordinates specify relative movements as X/Y deltas. A trackball gesture consists of a sequence of movements described by motion events with @B_android#view#MotionEvent#ACTION_MOVE_E@ interspersed with occasional @B_android#view#MotionEvent#ACTION_DOWN_E@ or @B_android#view#MotionEvent#ACTION_UP_E@ motion events when the trackball button is pressed or released. On joystick devices with source class @B_android#view#InputDevice#SOURCE_CLASS_JOYSTICK_E@, the pointer coordinates specify the absolute position of the joystick axes. The joystick axis values are normalized to a range of -1.0 to 1.0 where 0.0 corresponds to the center position. More information about the set of available axes and the range of motion can be obtained using @B_android#view#InputDevice#getMotionRange_E@. Some common joystick axes are @B_android#view#MotionEvent#AXIS_X_E@, @B_android#view#MotionEvent#AXIS_Y_E@, @B_android#view#MotionEvent#AXIS_HAT_X_E@, @B_android#view#MotionEvent#AXIS_HAT_Y_E@, @B_android#view#MotionEvent#AXIS_Z_E@ and @B_android#view#MotionEvent#AXIS_RZ_E@. Refer to @B_android#view#InputDevice_E@ for more information about how different kinds of input devices and sources represent pointer coordinates. Motion events are always delivered to views as a consistent stream of events. What constitutes a consistent stream varies depending on the type of device. For touch events, consistency implies that pointers go down one at a time, move around as a group and then go up one at a time or are canceled. While the framework tries to deliver consistent streams of motion events to views, it cannot guarantee it. Some events may be dropped or modified by containing views in the application before they are delivered thereby making the stream of events inconsistent. Views should always be prepared to handle @B_android#view#MotionEvent#ACTION_CANCEL_E@ and should tolerate anomalous situations such as receiving a new @B_android#view#MotionEvent#ACTION_DOWN_E@ without first having received an @B_android#view#MotionEvent#ACTION_UP_E@ for the prior gesture."}