{"Functions": {"isNetworkTypeValid(int)": {"Returns": [["boolean", "a boolean. true if the type is valid, else false"]], "Parameters": [["int", "int: the type to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "All APIs accepting a network type are deprecated. There should be no need to validate a network type. Tests if a given integer represents a valid network type.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static boolean isNetworkTypeValid (int networkType)"}, "reportBadNetwork(android.net.Network)": {"Returns": [], "Parameters": [["@B_android#net#Network_E@", "Network: The @B_android#net#Network_E@ the application was attempting to use or null to indicate the current default network. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#net#ConnectivityManager#reportNetworkConnectivity_E@ which allows reporting both working and non-working connectivity. Report a problem network to the framework. This provides a hint to the system that there might be connectivity problems on this network and may cause the framework to re-evaluate network connectivity and/or switch to another network.", "history": "Added in API level 21 Deprecated in API level 23", "FullName": "public void reportBadNetwork (Network network)"}, "createSocketKeepalive(android.net.Network,android.net.IpSecManager.UdpEncapsulationSocket,java.net.InetAddress,java.net.InetAddress,java.util.concurrent.Executor,android.net.SocketKeepalive.Callback)": {"Returns": [["@B_android#net#SocketKeepalive_E@", "A @B_android#net#SocketKeepalive_E@ object that can be used to control the keepalive on the given socket. This value will never be null."]], "Parameters": [["@B_android#net#Network_E@", "Network: The @B_android#net#Network_E@ the socket is on. This value must never be null."], ["@B_android#net#IpSecManager#UdpEncapsulationSocket_E@", "IpSecManager.UdpEncapsulationSocket: The socket that needs to be kept alive. This value must never be null."], ["@B_java#net#InetAddress_E@", "InetAddress: The source address of the @B_android#net#IpSecManager#UdpEncapsulationSocket_E@. This value must never be null."], ["@B_java#net#InetAddress_E@", "InetAddress: The destination address of the @B_android#net#IpSecManager#UdpEncapsulationSocket_E@. This value must never be null."], ["@B_java#util#concurrent#Executor_E@", "Executor: The executor on which callback will be invoked. The provided @B_java#util#concurrent#Executor_E@ must run callback sequentially, otherwise the order of callbacks cannot be guaranteed. This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#net#SocketKeepalive#Callback_E@", "SocketKeepalive.Callback: A @B_android#net#SocketKeepalive#Callback_E@. Used for notifications about keepalive changes. Must be extended by applications that use this API. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request that keepalives be started on a IPsec NAT-T socket.", "history": "Added in API level 29", "FullName": "public SocketKeepalive createSocketKeepalive (Network network, IpSecManager.UdpEncapsulationSocket socket, InetAddress source, InetAddress destination, Executor executor, SocketKeepalive.Callback callback)"}, "getProcessDefaultNetwork()": {"Returns": [["@B_android#net#Network_E@", "Network to which this process is bound, or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Using this function can lead to other functions throwing @B_java#lang#IllegalStateException_E@. Use @B_android#net#ConnectivityManager#getBoundNetworkForProcess_E@ instead. getBoundNetworkForProcess is a direct replacement. Returns the @B_android#net#Network_E@ currently bound to this process via @B_android#net#ConnectivityManager#bindProcessToNetwork_E@, or null if no @B_android#net#Network_E@ is explicitly bound.", "history": "Added in API level 21 Deprecated in API level 23", "FullName": "public static Network getProcessDefaultNetwork ()"}, "requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler,int)": {"Returns": [], "Parameters": [["@B_android#net#NetworkRequest_E@", "NetworkRequest: @B_android#net#NetworkRequest_E@ describing this request. This value must never be null."], ["@B_android#net#ConnectivityManager#NetworkCallback_E@", "ConnectivityManager.NetworkCallback: The @B_android#net#ConnectivityManager#NetworkCallback_E@ to be utilized for this request. Note the callback must not be shared - it uniquely specifies this request. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ to specify the thread upon which the callback will be invoked. This value must never be null."], ["int", "int: The time in milliseconds to attempt looking for a suitable network before @B_android#net#ConnectivityManager#NetworkCallback#onUnavailable_E@ is called."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if request contains invalid network capabilities."], ["@B_java#lang#SecurityException_E@", "if missing the appropriate permissions."], ["@B_java#lang#RuntimeException_E@", "if request limit per UID is exceeded."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@"], "Description": "Request a network to satisfy a set of @B_android#net#NetworkCapabilities_E@, limited by a timeout. This function behaves identically to the version without timeout, but if a suitable network is not found within the given time (in milliseconds) the @B_android#net#ConnectivityManager#NetworkCallback#onUnavailable_E@ callback is called. The request can still be released normally by calling @B_android#net#ConnectivityManager#unregisterNetworkCallback_E@ but does not have to be released if timed-out (it is automatically released). Unregistering a request that timed out is not an error. Do not use this method to poll for the existence of specific networks (e.g. with a small timeout) - @B_android#net#ConnectivityManager#registerNetworkCallback_E@ is provided for that purpose. Calling this method will attempt to bring up the requested network. This method requires the caller to hold either the @B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@ permission or the ability to modify system settings as determined by @B_android#provider#Settings#System#canWrite_E@.", "history": "Added in API level 26", "FullName": "public void requestNetwork (NetworkRequest request, ConnectivityManager.NetworkCallback networkCallback, Handler handler, int timeoutMs)"}, "bindProcessToNetwork(android.net.Network)": {"Returns": [["boolean", "true on success, false if the @B_android#net#Network_E@ is no longer valid."]], "Parameters": [["@B_android#net#Network_E@", "Network: The @B_android#net#Network_E@ to bind the current process to, or null to clear the current binding. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Binds the current process to network. All Sockets created in the future (and not explicitly bound via a bound SocketFactory from @B_android#net#Network#getSocketFactory_E@) will be bound to network. All host name resolutions will be limited to network as well. Note that if network ever disconnects, all Sockets created in this way will cease to work and all host name resolutions will fail. This is by design so an application doesn't accidentally use Sockets it thinks are still bound to a particular @B_android#net#Network_E@. To clear binding pass null for network. Using individually bound Sockets created by Network.getSocketFactory().createSocket() and performing network-specific host name resolutions via @B_android#net#Network#getAllByName_E@ is preferred to calling bindProcessToNetwork.", "history": "Added in API level 23", "FullName": "public boolean bindProcessToNetwork (Network network)"}, "registerNetworkCallback(android.net.NetworkRequest,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#net#NetworkRequest_E@", "NetworkRequest: @B_android#net#NetworkRequest_E@ describing this request. This value must never be null."], ["@B_android#app#PendingIntent_E@", "PendingIntent: Action to perform when the network is available (corresponds to the @B_android#net#ConnectivityManager#NetworkCallback#onAvailable_E@ call. Typically comes from @B_android#app#PendingIntent#getBroadcast_E@. Cannot be null. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "Registers a PendingIntent to be sent when a network is available which satisfies the given @B_android#net#NetworkRequest_E@. This function behaves identically to the version that takes a NetworkCallback, but instead of @B_android#net#ConnectivityManager#NetworkCallback_E@ a @B_android#app#PendingIntent_E@ is used. This means the request may outlive the calling application and get called back when a suitable network is found. The operation is an Intent broadcast that goes to a broadcast receiver that you registered with @B_android#content#Context#registerReceiver_E@ or through the <receiver> tag in an AndroidManifest.xml file The operation Intent is delivered with two extras, a @B_android#net#Network_E@ typed extra called @B_android#net#ConnectivityManager#EXTRA_NETWORK_E@ and a @B_android#net#NetworkRequest_E@ typed extra called @B_android#net#ConnectivityManager#EXTRA_NETWORK_REQUEST_E@ containing the original requests parameters. If there is already a request for this Intent registered (with the equality of two Intents defined by @B_android#content#Intent#filterEquals_E@), then it will be removed and replaced by this one, effectively releasing the previous @B_android#net#NetworkRequest_E@. The request may be released normally by calling @B_android#net#ConnectivityManager#unregisterNetworkCallback_E@. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 23", "FullName": "public void registerNetworkCallback (NetworkRequest request, PendingIntent operation)"}, "getActiveNetworkInfo()": {"Returns": [["@B_android#net#NetworkInfo_E@", "a @B_android#net#NetworkInfo_E@ object for the current default network or null if no default network is currently active"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "See @B_android#net#NetworkInfo_E@. Returns details about the currently active default data network. When connected, this network is the default route for outgoing connections. You should always check @B_android#net#NetworkInfo#isConnected_E@ before initiating network traffic. This may return null when there is no default network. Note that if the default network is a VPN, this method will return the NetworkInfo for one of its underlying networks instead, or null if the VPN agent did not specify any. Apps interested in learning about VPNs should use @B_android#net#ConnectivityManager#getNetworkInfo_E@ instead. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public NetworkInfo getActiveNetworkInfo ()"}, "registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback)": {"Returns": [], "Parameters": [["@B_android#net#ConnectivityManager#NetworkCallback_E@", "ConnectivityManager.NetworkCallback: The @B_android#net#ConnectivityManager#NetworkCallback_E@ that the system will call as the system default network changes. The callback is invoked on the default internal Handler. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "Registers to receive notifications about changes in the system default network. The callbacks will continue to be called until either the application exits or @B_android#net#ConnectivityManager#unregisterNetworkCallback_E@ is called. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 24", "FullName": "public void registerDefaultNetworkCallback (ConnectivityManager.NetworkCallback networkCallback)"}, "addDefaultNetworkActiveListener(android.net.ConnectivityManager.OnNetworkActiveListener)": {"Returns": [], "Parameters": [["@B_android#net#ConnectivityManager#OnNetworkActiveListener_E@", "ConnectivityManager.OnNetworkActiveListener: The listener to be told when the network is active."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start listening to reports when the system's default data network is active, meaning it is a good time to perform network traffic. Use @B_android#net#ConnectivityManager#isDefaultNetworkActive_E@ to determine the current state of the system's default network after registering the listener. If the process default network has been set with @B_android#net#ConnectivityManager#bindProcessToNetwork_E@ this function will not reflect the process's default, but the system default.", "history": "Added in API level 21", "FullName": "public void addDefaultNetworkActiveListener (ConnectivityManager.OnNetworkActiveListener l)"}, "getNetworkInfo(int)": {"Returns": [["@B_android#net#NetworkInfo_E@", "a @B_android#net#NetworkInfo_E@ object for the requested network type or null if the type is not supported by the device. If networkType is TYPE_VPN and a VPN is active for the calling app, then this method will try to return one of the underlying networks for the VPN or null if the VPN agent didn't specify any."]], "Parameters": [["int", "int: integer specifying which networkType in which you're interested."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "This method does not support multiple connected networks of the same type. Use @B_android#net#ConnectivityManager#getAllNetworks_E@ and @B_android#net#ConnectivityManager#getNetworkInfo_E@ instead. Returns connection status information about a particular network type. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public NetworkInfo getNetworkInfo (int networkType)"}, "getNetworkInfo(android.net.Network)": {"Returns": [["@B_android#net#NetworkInfo_E@", "a @B_android#net#NetworkInfo_E@ object for the requested network or null if the Network is not valid."]], "Parameters": [["@B_android#net#Network_E@", "Network: @B_android#net#Network_E@ specifying which network in which you're interested. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "See @B_android#net#NetworkInfo_E@. Returns connection status information about a particular Network. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 21 Deprecated in API level 29", "FullName": "public NetworkInfo getNetworkInfo (Network network)"}, "unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback)": {"Returns": [], "Parameters": [["@B_android#net#ConnectivityManager#NetworkCallback_E@", "ConnectivityManager.NetworkCallback: The @B_android#net#ConnectivityManager#NetworkCallback_E@ used when making the request. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters a NetworkCallback and possibly releases networks originating from @B_android#net#ConnectivityManager#requestNetwork_E@ and @B_android#net#ConnectivityManager#registerNetworkCallback_E@ calls. If the given NetworkCallback had previously been used with #requestNetwork, any networks that had been connected to only to satisfy that request will be disconnected. Notifications that would have triggered that NetworkCallback will immediately stop triggering it as soon as this call returns.", "history": "Added in API level 21", "FullName": "public void unregisterNetworkCallback (ConnectivityManager.NetworkCallback networkCallback)"}, "getNetworkCapabilities(android.net.Network)": {"Returns": [["@B_android#net#NetworkCapabilities_E@", "The @B_android#net#NetworkCapabilities_E@ for the network, or null."]], "Parameters": [["@B_android#net#Network_E@", "Network: The @B_android#net#Network_E@ object identifying the network in question. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "Get the @B_android#net#NetworkCapabilities_E@ for the given @B_android#net#Network_E@. This will return null if the network is unknown. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 21", "FullName": "public NetworkCapabilities getNetworkCapabilities (Network network)"}, "getMultipathPreference(android.net.Network)": {"Returns": [["int", "a bitwise OR of zero or more of the MULTIPATH_PREFERENCE_* constants. Value is either 0 or a combination of @B_android#net#ConnectivityManager#MULTIPATH_PREFERENCE_HANDOVER_E@, @B_android#net#ConnectivityManager#MULTIPATH_PREFERENCE_RELIABILITY_E@, and @B_android#net#ConnectivityManager#MULTIPATH_PREFERENCE_PERFORMANCE_E@"]], "Parameters": [["@B_android#net#Network_E@", "Network: The network on which the application desires to use multipath data. If null, this method will return the a preference that will generally apply to metered networks. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "Provides a hint to the calling application on whether it is desirable to use the multinetwork APIs (e.g., @B_android#net#Network#openConnection_E@, @B_android#net#Network#bindSocket_E@, etc.) for multipath data transfer on this network when it is not the system default network. Applications desiring to use multipath network protocols should call this method before each such operation. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 26", "FullName": "public int getMultipathPreference (Network network)"}, "isActiveNetworkMetered()": {"Returns": [["boolean", "true if large transfers should be avoided, otherwise false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "Returns if the currently active data network is metered. A network is classified as metered when the user is sensitive to heavy data usage on that connection due to monetary costs, data limitations or battery/performance issues. You should check this before doing large data transfers, and warn the user or delay the operation until another network is available. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 16", "FullName": "public boolean isActiveNetworkMetered ()"}, "requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback)": {"Returns": [], "Parameters": [["@B_android#net#NetworkRequest_E@", "NetworkRequest: @B_android#net#NetworkRequest_E@ describing this request. This value must never be null."], ["@B_android#net#ConnectivityManager#NetworkCallback_E@", "ConnectivityManager.NetworkCallback: The @B_android#net#ConnectivityManager#NetworkCallback_E@ to be utilized for this request. Note the callback must not be shared - it uniquely specifies this request. The callback is invoked on the default internal Handler. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if request contains invalid network capabilities."], ["@B_java#lang#SecurityException_E@", "if missing the appropriate permissions."], ["@B_java#lang#RuntimeException_E@", "if request limit per UID is exceeded."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@"], "Description": "Request a network to satisfy a set of @B_android#net#NetworkCapabilities_E@. This @B_android#net#NetworkRequest_E@ will live until released via @B_android#net#ConnectivityManager#unregisterNetworkCallback_E@ or the calling application exits. A version of the method which takes a timeout is @B_android#net#ConnectivityManager#requestNetwork_E@. Status of the request can be followed by listening to the various callbacks described in @B_android#net#ConnectivityManager#NetworkCallback_E@. The @B_android#net#Network_E@ can be used to direct traffic to the network. It is presently unsupported to request a network with mutable @B_android#net#NetworkCapabilities_E@ such as @B_android#net#NetworkCapabilities#NET_CAPABILITY_VALIDATED_E@ or @B_android#net#NetworkCapabilities#NET_CAPABILITY_CAPTIVE_PORTAL_E@ as these NetworkCapabilities represent states that a particular network may never attain, and whether a network will attain these states is unknown prior to bringing up the network so the framework does not know how to go about satisfing a request with these capabilities. This method requires the caller to hold either the @B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@ permission or the ability to modify system settings as determined by @B_android#provider#Settings#System#canWrite_E@.", "history": "Added in API level 21", "FullName": "public void requestNetwork (NetworkRequest request, ConnectivityManager.NetworkCallback networkCallback)"}, "getAllNetworkInfo()": {"Returns": [["@B_android#net#NetworkInfo_E@", "an array of @B_android#net#NetworkInfo_E@ objects. Check each @B_android#net#NetworkInfo#getType_E@ for which type each applies. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "This method does not support multiple connected networks of the same type. Use @B_android#net#ConnectivityManager#getAllNetworks_E@ and @B_android#net#ConnectivityManager#getNetworkInfo_E@ instead. Returns connection status information about all network types supported by the device. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public NetworkInfo[] getAllNetworkInfo ()"}, "stopUsingNetworkFeature(int, java.lang.String)": {"Returns": [["int", "an integer value representing the outcome of the request. The interpretation of this value is specific to each networking implementation+feature combination, except that the value -1 always indicates failure."]], "Parameters": [["int", "int: specifies which network the request pertains to"], ["@B_java#lang#String_E@", "String: the name of the feature that is no longer needed"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@"], "Description": "Deprecated in favor of the cleaner @B_android#net#ConnectivityManager#unregisterNetworkCallback_E@ API. In @B_android#os#Build#VERSION_CODES#M_E@, and above, this method is unsupported and will throw UnsupportedOperationException if called. Tells the underlying networking system that the caller is finished using the named feature. The interpretation of feature is completely up to each networking implementation. This method requires the caller to hold either the @B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@ permission or the ability to modify system settings as determined by @B_android#provider#Settings#System#canWrite_E@.", "history": "Added in API level 1", "FullName": "int stopUsingNetworkFeature (int networkType, String feature)"}, "requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#net#NetworkRequest_E@", "NetworkRequest: @B_android#net#NetworkRequest_E@ describing this request. This value must never be null."], ["@B_android#net#ConnectivityManager#NetworkCallback_E@", "ConnectivityManager.NetworkCallback: The @B_android#net#ConnectivityManager#NetworkCallback_E@ to be utilized for this request. Note the callback must not be shared - it uniquely specifies this request. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ to specify the thread upon which the callback will be invoked. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if request contains invalid network capabilities."], ["@B_java#lang#SecurityException_E@", "if missing the appropriate permissions."], ["@B_java#lang#RuntimeException_E@", "if request limit per UID is exceeded."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@"], "Description": "Request a network to satisfy a set of @B_android#net#NetworkCapabilities_E@. This @B_android#net#NetworkRequest_E@ will live until released via @B_android#net#ConnectivityManager#unregisterNetworkCallback_E@ or the calling application exits. A version of the method which takes a timeout is @B_android#net#ConnectivityManager#requestNetwork_E@. Status of the request can be followed by listening to the various callbacks described in @B_android#net#ConnectivityManager#NetworkCallback_E@. The @B_android#net#Network_E@ can be used to direct traffic to the network. It is presently unsupported to request a network with mutable @B_android#net#NetworkCapabilities_E@ such as @B_android#net#NetworkCapabilities#NET_CAPABILITY_VALIDATED_E@ or @B_android#net#NetworkCapabilities#NET_CAPABILITY_CAPTIVE_PORTAL_E@ as these NetworkCapabilities represent states that a particular network may never attain, and whether a network will attain these states is unknown prior to bringing up the network so the framework does not know how to go about satisfying a request with these capabilities. This method requires the caller to hold either the @B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@ permission or the ability to modify system settings as determined by @B_android#provider#Settings#System#canWrite_E@.", "history": "Added in API level 26", "FullName": "public void requestNetwork (NetworkRequest request, ConnectivityManager.NetworkCallback networkCallback, Handler handler)"}, "getNetworkWatchlistConfigHash()": {"Returns": [["byte[]", "Hash of network watchlist config file. Null if config does not exist. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The network watchlist is a list of domains and IP addresses that are associated with potentially harmful apps. This method returns the SHA-256 of the watchlist config file currently used by the system for validation purposes.", "history": "Added in API level 28", "FullName": "public byte[] getNetworkWatchlistConfigHash ()"}, "getNetworkPreference()": {"Returns": [["int", "an integer representing the preferred network type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "Functionality has been removed as it no longer makes sense, with many more than two networks - we'd need an array to express preference. Instead we use dynamic network properties of the networks to describe their precedence. Retrieves the current preferred network type. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public int getNetworkPreference ()"}, "registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#net#ConnectivityManager#NetworkCallback_E@", "ConnectivityManager.NetworkCallback: The @B_android#net#ConnectivityManager#NetworkCallback_E@ that the system will call as the system default network changes. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ to specify the thread upon which the callback will be invoked. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "Registers to receive notifications about changes in the system default network. The callbacks will continue to be called until either the application exits or @B_android#net#ConnectivityManager#unregisterNetworkCallback_E@ is called. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 26", "FullName": "public void registerDefaultNetworkCallback (ConnectivityManager.NetworkCallback networkCallback, Handler handler)"}, "reportNetworkConnectivity(android.net.Network,boolean)": {"Returns": [], "Parameters": [["@B_android#net#Network_E@", "Network: The @B_android#net#Network_E@ the application was attempting to use or null to indicate the current default network. This value may be null."], ["boolean", "boolean: true if the application was able to successfully access the Internet using network or false if not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report to the framework whether a network has working connectivity. This provides a hint to the system that a particular network is providing working connectivity or not. In response the framework may re-evaluate the network's connectivity and might take further action thereafter.", "history": "Added in API level 23", "FullName": "public void reportNetworkConnectivity (Network network, boolean hasConnectivity)"}, "requestRouteToHost(int, int)": {"Returns": [["boolean", "true on success, false on failure"]], "Parameters": [["int", "int: the type of the network over which traffic to the specified host is to be routed"], ["int", "int: the IP address of the host to which the route is desired"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@"], "Description": "Deprecated in favor of the @B_android#net#ConnectivityManager#requestNetwork_E@, @B_android#net#ConnectivityManager#bindProcessToNetwork_E@ and @B_android#net#Network#getSocketFactory_E@ API. In @B_android#os#Build#VERSION_CODES#M_E@, and above, this method is unsupported and will throw UnsupportedOperationException if called. Ensure that a network route exists to deliver traffic to the specified host via the specified network interface. An attempt to add a route that already exists is ignored, but treated as successful. This method requires the caller to hold either the @B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@ permission or the ability to modify system settings as determined by @B_android#provider#Settings#System#canWrite_E@.", "history": "Added in API level 1", "FullName": "boolean requestRouteToHost (int networkType, int hostAddress)"}, "isDefaultNetworkActive()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the data network is currently active. An active network means that it is currently in a high power state for performing data transmission. On some types of networks, it may be expensive to move and stay in such a state, so it is more power efficient to batch network traffic together when the radio is already in this state. This method tells you whether right now is currently a good time to initiate network traffic, as the network is already active.", "history": "Added in API level 21", "FullName": "public boolean isDefaultNetworkActive ()"}, "requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,int)": {"Returns": [], "Parameters": [["@B_android#net#NetworkRequest_E@", "NetworkRequest: @B_android#net#NetworkRequest_E@ describing this request. This value must never be null."], ["@B_android#net#ConnectivityManager#NetworkCallback_E@", "ConnectivityManager.NetworkCallback: The @B_android#net#ConnectivityManager#NetworkCallback_E@ to be utilized for this request. Note the callback must not be shared - it uniquely specifies this request. This value must never be null."], ["int", "int: The time in milliseconds to attempt looking for a suitable network before @B_android#net#ConnectivityManager#NetworkCallback#onUnavailable_E@ is called. The timeout must be a positive value (i.e. >0)."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if request contains invalid network capabilities."], ["@B_java#lang#SecurityException_E@", "if missing the appropriate permissions."], ["@B_java#lang#RuntimeException_E@", "if request limit per UID is exceeded."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@"], "Description": "Request a network to satisfy a set of @B_android#net#NetworkCapabilities_E@, limited by a timeout. This function behaves identically to the non-timed-out version @B_android#net#ConnectivityManager#requestNetwork_E@, but if a suitable network is not found within the given time (in milliseconds) the @B_android#net#ConnectivityManager#NetworkCallback#onUnavailable_E@ callback is called. The request can still be released normally by calling @B_android#net#ConnectivityManager#unregisterNetworkCallback_E@ but does not have to be released if timed-out (it is automatically released). Unregistering a request that timed out is not an error. Do not use this method to poll for the existence of specific networks (e.g. with a small timeout) - @B_android#net#ConnectivityManager#registerNetworkCallback_E@ is provided for that purpose. Calling this method will attempt to bring up the requested network. This method requires the caller to hold either the @B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@ permission or the ability to modify system settings as determined by @B_android#provider#Settings#System#canWrite_E@.", "history": "Added in API level 26", "FullName": "public void requestNetwork (NetworkRequest request, ConnectivityManager.NetworkCallback networkCallback, int timeoutMs)"}, "requestNetwork(android.net.NetworkRequest,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#net#NetworkRequest_E@", "NetworkRequest: @B_android#net#NetworkRequest_E@ describing this request. This value must never be null."], ["@B_android#app#PendingIntent_E@", "PendingIntent: Action to perform when the network is available (corresponds to the @B_android#net#ConnectivityManager#NetworkCallback#onAvailable_E@ call. Typically comes from @B_android#app#PendingIntent#getBroadcast_E@. Cannot be null. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if request contains invalid network capabilities."], ["@B_java#lang#SecurityException_E@", "if missing the appropriate permissions."], ["@B_java#lang#RuntimeException_E@", "if request limit per UID is exceeded."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@"], "Description": "Request a network to satisfy a set of @B_android#net#NetworkCapabilities_E@. This function behaves identically to the version that takes a NetworkCallback, but instead of @B_android#net#ConnectivityManager#NetworkCallback_E@ a @B_android#app#PendingIntent_E@ is used. This means the request may outlive the calling application and get called back when a suitable network is found. The operation is an Intent broadcast that goes to a broadcast receiver that you registered with @B_android#content#Context#registerReceiver_E@ or through the <receiver> tag in an AndroidManifest.xml file The operation Intent is delivered with two extras, a @B_android#net#Network_E@ typed extra called @B_android#net#ConnectivityManager#EXTRA_NETWORK_E@ and a @B_android#net#NetworkRequest_E@ typed extra called @B_android#net#ConnectivityManager#EXTRA_NETWORK_REQUEST_E@ containing the original requests parameters. It is important to create a new, @B_android#net#ConnectivityManager#NetworkCallback_E@ based request before completing the processing of the Intent to reserve the network or it will be released shortly after the Intent is processed. If there is already a request for this Intent registered (with the equality of two Intents defined by @B_android#content#Intent#filterEquals_E@), then it will be removed and replaced by this one, effectively releasing the previous @B_android#net#NetworkRequest_E@. The request may be released normally by calling @B_android#net#ConnectivityManager#releaseNetworkRequest_E@. It is presently unsupported to request a network with either @B_android#net#NetworkCapabilities#NET_CAPABILITY_VALIDATED_E@ or @B_android#net#NetworkCapabilities#NET_CAPABILITY_CAPTIVE_PORTAL_E@ as these NetworkCapabilities represent states that a particular network may never attain, and whether a network will attain these states is unknown prior to bringing up the network so the framework does not know how to go about satisfying a request with these capabilities. This method requires the caller to hold either the @B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@ permission or the ability to modify system settings as determined by @B_android#provider#Settings#System#canWrite_E@.", "history": "Added in API level 22", "FullName": "public void requestNetwork (NetworkRequest request, PendingIntent operation)"}, "getBoundNetworkForProcess()": {"Returns": [["@B_android#net#Network_E@", "Network to which this process is bound, or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#net#Network_E@ currently bound to this process via @B_android#net#ConnectivityManager#bindProcessToNetwork_E@, or null if no @B_android#net#Network_E@ is explicitly bound.", "history": "Added in API level 23", "FullName": "public Network getBoundNetworkForProcess ()"}, "registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback)": {"Returns": [], "Parameters": [["@B_android#net#NetworkRequest_E@", "NetworkRequest: @B_android#net#NetworkRequest_E@ describing this request. This value must never be null."], ["@B_android#net#ConnectivityManager#NetworkCallback_E@", "ConnectivityManager.NetworkCallback: The @B_android#net#ConnectivityManager#NetworkCallback_E@ that the system will call as suitable networks change state. The callback is invoked on the default internal Handler. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "Registers to receive notifications about all networks which satisfy the given @B_android#net#NetworkRequest_E@. The callbacks will continue to be called until either the application exits or @B_android#net#ConnectivityManager#unregisterNetworkCallback_E@ is called. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 21", "FullName": "public void registerNetworkCallback (NetworkRequest request, ConnectivityManager.NetworkCallback networkCallback)"}, "unregisterNetworkCallback(android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent: A PendingIntent equal (as defined by @B_android#content#Intent#filterEquals_E@) to the PendingIntent passed to @B_android#net#ConnectivityManager#registerNetworkCallback_E@. Cannot be null. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters a callback previously registered via @B_android#net#ConnectivityManager#registerNetworkCallback_E@.", "history": "Added in API level 23", "FullName": "public void unregisterNetworkCallback (PendingIntent operation)"}, "startUsingNetworkFeature(int, java.lang.String)": {"Returns": [["int", "an integer value representing the outcome of the request. The interpretation of this value is specific to each networking implementation+feature combination, except that the value -1 always indicates failure."]], "Parameters": [["int", "int: specifies which network the request pertains to"], ["@B_java#lang#String_E@", "String: the name of the feature to be used"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@"], "Description": "Deprecated in favor of the cleaner @B_android#net#ConnectivityManager#requestNetwork_E@ API. In @B_android#os#Build#VERSION_CODES#M_E@, and above, this method is unsupported and will throw UnsupportedOperationException if called. Tells the underlying networking system that the caller wants to begin using the named feature. The interpretation of feature is completely up to each networking implementation. This method requires the caller to hold either the @B_android#Manifest#permission#CHANGE_NETWORK_STATE_E@ permission or the ability to modify system settings as determined by @B_android#provider#Settings#System#canWrite_E@.", "history": "Added in API level 1", "FullName": "int startUsingNetworkFeature (int networkType, String feature)"}, "registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#net#NetworkRequest_E@", "NetworkRequest: @B_android#net#NetworkRequest_E@ describing this request. This value must never be null."], ["@B_android#net#ConnectivityManager#NetworkCallback_E@", "ConnectivityManager.NetworkCallback: The @B_android#net#ConnectivityManager#NetworkCallback_E@ that the system will call as suitable networks change state. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ to specify the thread upon which the callback will be invoked. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "Registers to receive notifications about all networks which satisfy the given @B_android#net#NetworkRequest_E@. The callbacks will continue to be called until either the application exits or @B_android#net#ConnectivityManager#unregisterNetworkCallback_E@ is called. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 26", "FullName": "public void registerNetworkCallback (NetworkRequest request, ConnectivityManager.NetworkCallback networkCallback, Handler handler)"}, "releaseNetworkRequest(android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent: A PendingIntent equal (as defined by @B_android#content#Intent#filterEquals_E@) to the PendingIntent passed to @B_android#net#ConnectivityManager#requestNetwork_E@ with the corresponding NetworkRequest you'd like to remove. Cannot be null. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a request made via @B_android#net#ConnectivityManager#requestNetwork_E@ This method has the same behavior as @B_android#net#ConnectivityManager#unregisterNetworkCallback_E@ with respect to releasing network resources and disconnecting.", "history": "Added in API level 22", "FullName": "public void releaseNetworkRequest (PendingIntent operation)"}, "requestBandwidthUpdate(android.net.Network)": {"Returns": [["boolean", "true on success, false if the @B_android#net#Network_E@ is no longer valid."]], "Parameters": [["@B_android#net#Network_E@", "Network: @B_android#net#Network_E@ specifying which network you're interested. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests bandwidth update for a given @B_android#net#Network_E@ and returns whether the update request is accepted by ConnectivityService. Once accepted, ConnectivityService will poll underlying network connection for updated bandwidth information. The caller will be notified via @B_android#net#ConnectivityManager#NetworkCallback_E@ if there is an update. Notice that this method assumes that the caller has previously called @B_android#net#ConnectivityManager#registerNetworkCallback_E@ to listen for network changes.", "history": "Added in API level 23", "FullName": "public boolean requestBandwidthUpdate (Network network)"}, "setProcessDefaultNetwork(android.net.Network)": {"Returns": [["boolean", "true on success, false if the @B_android#net#Network_E@ is no longer valid."]], "Parameters": [["@B_android#net#Network_E@", "Network: The @B_android#net#Network_E@ to bind the current process to, or null to clear the current binding. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function can throw @B_java#lang#IllegalStateException_E@. Use @B_android#net#ConnectivityManager#bindProcessToNetwork_E@ instead. bindProcessToNetwork is a direct replacement. Binds the current process to network. All Sockets created in the future (and not explicitly bound via a bound SocketFactory from @B_android#net#Network#getSocketFactory_E@) will be bound to network. All host name resolutions will be limited to network as well. Note that if network ever disconnects, all Sockets created in this way will cease to work and all host name resolutions will fail. This is by design so an application doesn't accidentally use Sockets it thinks are still bound to a particular @B_android#net#Network_E@. To clear binding pass null for network. Using individually bound Sockets created by Network.getSocketFactory().createSocket() and performing network-specific host name resolutions via @B_android#net#Network#getAllByName_E@ is preferred to calling setProcessDefaultNetwork.", "history": "Added in API level 21 Deprecated in API level 23", "FullName": "public static boolean setProcessDefaultNetwork (Network network)"}, "getAllNetworks()": {"Returns": [["@B_android#net#Network_E@", "an array of @B_android#net#Network_E@ objects. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "Returns an array of all @B_android#net#Network_E@ currently tracked by the framework. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 21", "FullName": "public Network[] getAllNetworks ()"}, "getLinkProperties(android.net.Network)": {"Returns": [["@B_android#net#LinkProperties_E@", "The @B_android#net#LinkProperties_E@ for the network, or null."]], "Parameters": [["@B_android#net#Network_E@", "Network: The @B_android#net#Network_E@ object identifying the network in question. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "Get the @B_android#net#LinkProperties_E@ for the given @B_android#net#Network_E@. This will return null if the network is unknown. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 21", "FullName": "public LinkProperties getLinkProperties (Network network)"}, "removeDefaultNetworkActiveListener(android.net.ConnectivityManager.OnNetworkActiveListener)": {"Returns": [], "Parameters": [["@B_android#net#ConnectivityManager#OnNetworkActiveListener_E@", "ConnectivityManager.OnNetworkActiveListener: Previously registered listener. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove network active listener previously registered with @B_android#net#ConnectivityManager#addDefaultNetworkActiveListener_E@.", "history": "Added in API level 21", "FullName": "public void removeDefaultNetworkActiveListener (ConnectivityManager.OnNetworkActiveListener l)"}, "getDefaultProxy()": {"Returns": [["@B_android#net#ProxyInfo_E@", "the @B_android#net#ProxyInfo_E@ for the current HTTP proxy, or null if no HTTP proxy is active."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the current default HTTP proxy settings. If a global proxy is set it will be returned, otherwise if this process is bound to a @B_android#net#Network_E@ using @B_android#net#ConnectivityManager#bindProcessToNetwork_E@ then that Network's proxy is returned, otherwise the default network's proxy is returned.", "history": "Added in API level 23", "FullName": "public ProxyInfo getDefaultProxy ()"}, "setNetworkPreference(int)": {"Returns": [], "Parameters": [["int", "int: the network type to prefer over all others. It is unspecified what happens to the old preferred network in the overall ordering."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Functionality has been removed as it no longer makes sense, with many more than two networks - we'd need an array to express preference. Instead we use dynamic network properties of the networks to describe their precedence. Specifies the preferred network type. When the device has more than one type available the preferred network type will be used.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public void setNetworkPreference (int preference)"}, "getRestrictBackgroundStatus()": {"Returns": [["int", "@B_android#net#ConnectivityManager#RESTRICT_BACKGROUND_STATUS_DISABLED_E@, @B_android#net#ConnectivityManager#RESTRICT_BACKGROUND_STATUS_ENABLED_E@, or @B_android#net#ConnectivityManager#RESTRICT_BACKGROUND_STATUS_WHITELISTED_E@ Value is @B_android#net#ConnectivityManager#RESTRICT_BACKGROUND_STATUS_DISABLED_E@, @B_android#net#ConnectivityManager#RESTRICT_BACKGROUND_STATUS_WHITELISTED_E@, or @B_android#net#ConnectivityManager#RESTRICT_BACKGROUND_STATUS_ENABLED_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if the calling application is subject to metered network restrictions while running on background.", "history": "Added in API level 24", "FullName": "public int getRestrictBackgroundStatus ()"}, "getBackgroundDataSetting()": {"Returns": [["boolean", "Whether background data usage is allowed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "As of @B_android#os#Build#VERSION_CODES#ICE_CREAM_SANDWICH_E@, availability of background data depends on several combined factors, and this method will always return true. Instead, when background data is unavailable, @B_android#net#ConnectivityManager#getActiveNetworkInfo_E@ will now appear disconnected. Returns the value of the setting for background data usage. If false, applications should not use the network if the application is not in the foreground. Developers should respect this setting, and check the value of this before performing any background data operations. All applications that have background services that use the network should listen to @B_android#net#ConnectivityManager#ACTION_BACKGROUND_DATA_SETTING_CHANGED_E@.", "history": "Added in API level 3 Deprecated in API level 15", "FullName": "public boolean getBackgroundDataSetting ()"}, "getActiveNetwork()": {"Returns": [["@B_android#net#Network_E@", "a @B_android#net#Network_E@ object for the current default network or null if no default network is currently active"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@"], "Description": "Returns a @B_android#net#Network_E@ object corresponding to the currently active default data network. In the event that the current active default data network disconnects, the returned Network object will no longer be usable. This will return null when there is no default network. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "history": "Added in API level 23", "FullName": "public Network getActiveNetwork ()"}, "getConnectionOwnerUid(int,java.net.InetSocketAddress,java.net.InetSocketAddress)": {"Returns": [["int", "uid if the connection is found and the app has permission to observe it (e.g., if it is associated with the calling VPN app's tunnel) or @B_android#os#Process#INVALID_UID_E@ if the connection is not found. Throws @B_java#lang#SecurityException_E@ if the caller is not the active VPN for the current user. Throws @B_java#lang#IllegalArgumentException_E@ if an unsupported protocol is requested."]], "Parameters": [["int", "int: The protocol of the connection. Only IPPROTO_TCP and IPPROTO_UDP currently supported."], ["@B_java#net#InetSocketAddress_E@", "InetSocketAddress: The local @B_java#net#InetSocketAddress_E@ of a connection. This value must never be null."], ["@B_java#net#InetSocketAddress_E@", "InetSocketAddress: The remote @B_java#net#InetSocketAddress_E@ of a connection. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the uid of the owner of a network connection.", "history": "Added in API level 29", "FullName": "public int getConnectionOwnerUid (int protocol, InetSocketAddress local, InetSocketAddress remote)"}}, "Inheritance": [], "ClassName": "android.net.ConnectivityManager", "ClassDesc": "Class that answers queries about the state of network connectivity. It also notifies applications when network connectivity changes. The primary responsibilities of this class are to:"}