{"Functions": {"getUnderlineColor()": {"Returns": [["int", "The color of the underline for that span, or 0 if there is no underline"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public int getUnderlineColor ()"}, "getFlags()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public int getFlags ()"}, "getLocaleObject()": {"Returns": [["@B_java#util#Locale_E@", "the locale of the suggestions. null is returned if no locale is specified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a well-formed BCP 47 language tag representation of the suggestions, as a @B_java#util#Locale_E@ object. @B_java#util#Locale_E@ object, e.g. new Locale(\" a \", \" b c d \", \" \".", "history": "Added in API level 24", "FullName": "public Locale getLocaleObject ()"}, "updateDrawState(android.text.TextPaint)": {"Returns": [], "Parameters": [["@B_android#text#TextPaint_E@", "TextPaint no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public void updateDrawState (TextPaint tp)"}, "SuggestionSpan(android.content.Context,java.lang.String[],int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: Context for the application"], ["@B_java#lang#String_E@", "String: Suggestions for the string under the span"], ["int", "int: Additional flags indicating how this span is handled in TextView"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public SuggestionSpan (Context context, String[] suggestions, int flags)"}, "SuggestionSpan(android.content.Context,java.util.Locale,java.lang.String[],int,java.lang.Class<?>)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: Context for the application"], ["@B_java#util#Locale_E@", "Locale: locale Locale of the suggestions"], ["@B_java#lang#String_E@", "String: Suggestions for the string under the span. Only the first up to @B_android#text#style#SuggestionSpan#SUGGESTIONS_MAX_SIZE_E@ will be considered. Null values not permitted."], ["int", "int: Additional flags indicating how this span is handled in TextView"], ["@B_java#lang#Class_E@", "Class: if not null, this class will get notified when the user selects one of the suggestions. On Android @B_android#os#Build#VERSION_CODES#Q_E@ and later this parameter is always ignored."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public SuggestionSpan (Context context, Locale locale, String[] suggestions, int flags, Class<?> notificationTargetClass)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 14", "FullName": "public int describeContents ()"}, "SuggestionSpan(java.util.Locale,java.lang.String[],int)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: Locale of the suggestions"], ["@B_java#lang#String_E@", "String: Suggestions for the string under the span"], ["int", "int: Additional flags indicating how this span is handled in TextView"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public SuggestionSpan (Locale locale, String[] suggestions, int flags)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 14", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "SuggestionSpan(android.os.Parcel)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public SuggestionSpan (Parcel src)"}, "getSuggestions()": {"Returns": [["@B_java#lang#String_E@", "an array of suggestion texts for this span"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public String[] getSuggestions ()"}, "getSpanTypeId()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a special type identifier for this span class.", "history": "Added in API level 14", "FullName": "public int getSpanTypeId ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 14", "FullName": "public boolean equals (Object o)"}, "getLocale()": {"Returns": [["@B_java#lang#String_E@", "the locale of the suggestions. An empty string is returned if no locale is specified. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#text#style#SuggestionSpan#getLocaleObject_E@ instead.", "history": "Added in API level 14 Deprecated in API level 24", "FullName": "public String getLocale ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 14", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "setFlags(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public void setFlags (int flags)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 14", "FullName": "public int hashCode ()"}}, "Inheritance": ["@B_android#text#style#CharacterStyle_E@"], "ClassName": "android.text.style.SuggestionSpan", "ClassDesc": "Holds suggestion candidates for the text enclosed in this span. When such a span is edited in an EditText, double tapping on the text enclosed in this span will display a popup dialog listing suggestion replacement for that text. The user can then replace the original text by one of the suggestions. These spans should typically be created by the input method to provide correction and alternates for the text."}