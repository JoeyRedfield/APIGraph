{"Functions": {"setAcl(java.util.List<java.nio.file.attribute.AclEntry>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the new access control list"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs or the ACL is invalid"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, a security manager is installed, it denies @B_java#lang#RuntimePermission_E@(\"accessUserInformation\") or its @B_java#lang#SecurityManager#checkWrite_E@ method denies write access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Updates (replace) the access control list. Where the file system supports Access Control Lists, and it uses an ACL model that differs from the NFSv4 defined ACL model, then this method must translate the ACL to the model supported by the file system. This method should reject (by throwing @B_java#io#IOException_E@) any attempt to write an ACL that would appear to make the file more secure than would be the case if the ACL were updated. Where an implementation does not support a mapping of @B_java#nio#file#attribute#AclEntryType#AUDIT_E@ or @B_java#nio#file#attribute#AclEntryType#ALARM_E@ entries, then this method ignores these entries when writing the ACL. If an ACL entry contains a @B_java#nio#file#attribute#AclEntry#principal_E@ that is not associated with the same provider as this attribute view then @B_java#nio#file#ProviderMismatchException_E@ is thrown. Additional validation, if any, is implementation dependent. If the file system supports other security related file attributes (such as a file @B_java#nio#file#attribute#PosixFileAttributes#permissions_E@ for example), the updating the access control list may also cause these security related attributes to be updated.", "history": "Added in API level 26", "FullName": "public abstract void setAcl (List<AclEntry> acl)"}, "name()": {"Returns": [["@B_java#lang#String_E@", "the name of the attribute view"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the attribute view. Attribute views of this type have the name \"acl\".", "history": "Added in API level 26", "FullName": "public abstract String name ()"}, "getAcl()": {"Returns": [["@B_java#util#List_E@", "an ordered list of @B_java#nio#file#attribute#AclEntry_E@ representing the ACL"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, a security manager is installed, and it denies @B_java#lang#RuntimePermission_E@(\"accessUserInformation\") or its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Reads the access control list. When the file system uses an ACL model that differs from the NFSv4 defined ACL model, then this method returns an ACL that is the translation of the ACL to the NFSv4 ACL model. The returned list is modifiable so as to facilitate changes to the existing ACL. The @B_java#nio#file#attribute#AclFileAttributeView#setAcl_E@ method is used to update the file's ACL attribute.", "history": "Added in API level 26", "FullName": "public abstract List<AclEntry> getAcl ()"}}, "Inheritance": [], "ClassName": "java.nio.file.attribute.AclFileAttributeView", "ClassDesc": "A file attribute view that supports reading or updating a file's Access Control Lists (ACL) or file owner attributes. ACLs are used to specify access rights to file system objects. An ACL is an ordered list of @B_java#nio#file#attribute#AclEntry_E@, each specifying a @B_java#nio#file#attribute#UserPrincipal_E@ and the level of access for that user principal. This file attribute view defines the @B_java#nio#file#attribute#AclFileAttributeView#getAcl_E@, and @B_java#nio#file#attribute#AclFileAttributeView#setAcl_E@ methods to read and write ACLs based on the ACL model specified in well-defined mapping between the NFSv4 ACL model and the ACL model used by the file system. The details of such mapping are implementation dependent and are therefore unspecified. This class also extends FileOwnerAttributeView so as to define methods to get and set the file owner. When a file system provides access to a set of @B_java#nio#file#FileStore_E@ that are not homogeneous then only some of the file systems may support ACLs. The @B_java#nio#file#FileStore#supportsFileAttributeView_E@ method can be used to test if a file system supports ACLs. OWNER@\", \"GROUP@\", and \"EVERYONE@\". When both the AclFileAttributeView and the @B_java#nio#file#attribute#PosixFileAttributeView_E@ are supported then these special user identities may be included in ACL @B_java#nio#file#attribute#AclEntry_E@ that are read or written. The file system's @B_java#nio#file#attribute#UserPrincipalLookupService_E@ may be used to obtain a @B_java#nio#file#attribute#UserPrincipal_E@ to represent these special identities by invoking the @B_java#nio#file#attribute#UserPrincipalLookupService#lookupPrincipalByName_E@ method. Where dynamic access to file attributes is required, the attributes supported by this attribute view are as follows: The @B_java#nio#file#Files#getAttribute_E@ method may be used to read the ACL or owner attributes as if by invoking the @B_java#nio#file#attribute#AclFileAttributeView#getAcl_E@ or @B_java#nio#file#attribute#FileOwnerAttributeView#getOwner_E@ methods. The @B_java#nio#file#Files#setAttribute_E@ method may be used to update the ACL or owner attributes as if by invoking the @B_java#nio#file#attribute#AclFileAttributeView#setAcl_E@ or @B_java#nio#file#attribute#FileOwnerAttributeView#setOwner_E@ methods. Implementations supporting this attribute view may also support setting the initial ACL when creating a file or directory. The initial ACL may be provided to methods such as @B_java#nio#file#Files#createFile_E@ or @B_java#nio#file#Files#createDirectory_E@ as an @B_java#nio#file#attribute#FileAttribute_E@ with @B_java#nio#file#attribute#FileAttribute#name_E@ \"acl:acl\" and a @B_java#nio#file#attribute#FileAttribute#value_E@ that is the list of AclEntry objects. Where an implementation supports an ACL model that differs from the NFSv4 defined ACL model then setting the initial ACL when creating the file must translate the ACL to the model supported by the file system. Methods that create a file should reject (by throwing @B_java#io#IOException_E@) any attempt to create a file that would be less secure as a result of the translation."}