{"Functions": {"getResourceBundleName()": {"Returns": [["@B_java#lang#String_E@", "localization resource bundle name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the level's localization resource bundle name, or null if no localization bundle is defined.", "history": "Added in API level 1", "FullName": "public String getResourceBundleName ()"}, "Level(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the Level, for example \"SEVERE\"."], ["int", "int: an integer value for the level."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Create a named Level with a given integer value. Note that this constructor is \"protected\" to allow subclassing. In general clients of logging should use one of the constant Level objects such as SEVERE or FINEST. However, if clients need to add new logging levels, they may subclass Level and define new constants.", "history": "Added in API level 1", "FullName": "protected Level (String name, int value)"}, "intValue()": {"Returns": [["int", "the integer value for this level."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the integer value for this level. This integer value can be used for efficient ordering comparisons between Level objects.", "history": "Added in API level 1", "FullName": "public final int intValue ()"}, "getLocalizedName()": {"Returns": [["@B_java#lang#String_E@", "localized name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the localized string name of the Level, for the current default locale. If no localization information is available, the non-localized name is returned.", "history": "Added in API level 1", "FullName": "public String getLocalizedName ()"}, "Level(java.lang.String,int,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the Level, for example \"SEVERE\"."], ["int", "int: an integer value for the level."], ["@B_java#lang#String_E@", "String: name of a resource bundle to use in localizing the given name. If the resourceBundleName is null or an empty string, it is ignored."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Create a named Level with a given integer value and a given localization resource name.", "history": "Added in API level 1", "FullName": "protected Level (String name, int value, String resourceBundleName)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the non-localized name of the Level, for example \"INFO\"."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this Level.", "history": "Added in API level 1", "FullName": "public final String toString ()"}, "Level(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the Level, for example \"SEVERE\"."], ["int", "int: an integer value for the level."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Create a named Level with a given integer value. Note that this constructor is \"protected\" to allow subclassing. In general clients of logging should use one of the constant Level objects such as SEVERE or FINEST. However, if clients need to add new logging levels, they may subclass Level and define new constants.", "history": "added in API level 1", "FullName": "protected Level (String name, int value)"}, "parse(java.lang.String)": {"Returns": [["@B_java#util#logging#Level_E@", "The parsed value. Passing an integer that corresponds to a known name (e.g., 700) will return the associated name (e.g., CONFIG). Passing an integer that does not (e.g., 1) will return a new level name initialized to that value."]], "Parameters": [["@B_java#lang#String_E@", "String: string to be parsed"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the name is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the value is not valid. Valid values are integers between Integer.MIN_VALUE and Integer.MAX_VALUE, and all known level names. Known names are the levels defined by this class (e.g., FINE, FINER, FINEST), or created by this class with appropriate package access, or new levels defined or created by subclasses."]], "SeeAlso": [], "Permissions": [], "Description": "Parse a level name string into a Level. The argument string may consist of either a level name or an integer value. For example: \"SEVERE\" \"1000\"", "history": "Added in API level 1", "FullName": "public static Level parse (String name)"}, "Level(java.lang.String, int, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the Level, for example \"SEVERE\"."], ["int", "int: an integer value for the level."], ["@B_java#lang#String_E@", "String: name of a resource bundle to use in localizing the given name. If the resourceBundleName is null or an empty string, it is ignored."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Create a named Level with a given integer value and a given localization resource name.", "history": "added in API level 1", "FullName": "protected Level (String name, int value, String resourceBundleName)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if and only if the two objects have the same level value."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compare two objects for value equality.", "history": "Added in API level 1", "FullName": "public boolean equals (Object ox)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "non-localized name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the non-localized string name of the Level.", "history": "Added in API level 1", "FullName": "public String getName ()"}, "hashCode()": {"Returns": [["int", "a hashcode based on the level value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generate a hashcode.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.util.logging.Level", "ClassDesc": "The Level class defines a set of standard logging levels that can be used to control logging output. The logging Level objects are ordered and are specified by ordered integers. Enabling logging at a given level also enables logging at all higher levels. Clients should normally use the predefined Level constants such as Level.SEVERE. The levels in descending order are: SEVERE (highest value) WARNING INFO CONFIG FINE FINER FINEST (lowest value) In addition there is a level OFF that can be used to turn off logging, and a level ALL that can be used to enable logging of all messages. It is possible for third parties to define additional logging levels by subclassing Level. In such cases subclasses should take care to chose unique integer level values and to ensure that they maintain the Object uniqueness property across serialization by defining a suitable readResolve method."}