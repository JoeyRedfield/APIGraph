{"Functions": {"getEntityResolver()": {"Returns": [["@B_org#xml#sax#EntityResolver_E@", "The current entity resolver, or null if none has been registered."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current entity resolver.", "history": "Added in API level 1", "FullName": "public EntityResolver getEntityResolver ()"}, "getSystemId()": {"Returns": [["@B_java#lang#String_E@", "A string containing the system identifier, or null if none is available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the system identifier for the current document event. The return value is the system identifier of the document entity or of the external parsed entity in which the markup triggering the event appears. If the system identifier is a URL, the parser must resolve it fully before passing it to the application. For example, a file name must always be provided as a file:... URL, and other kinds of relative URI are also resolved against their bases.", "history": "Added in API level 1", "FullName": "public String getSystemId ()"}, "getValue(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The attribute value as a string, or null if the attribute is not in the list."]], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI, or the empty String if the name has no Namespace URI."], ["@B_java#lang#String_E@", "String: The local name of the attribute."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up an attribute's value by Namespace name. See @B_org#xml#sax#Attributes#getValue_E@ for a description of the possible values.", "history": "Added in API level 1", "FullName": "public String getValue (String uri, String localName)"}, "getProperty(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "The current value of the property."]], "Parameters": [["@B_java#lang#String_E@", "String: The property name, which is a fully-qualified URI."]], "Throws": [["@B_org#xml#sax#SAXNotRecognizedException_E@", ""], ["@B_org#xml#sax#SAXNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Look up the value of a property. The property name is any fully-qualified URI. It is possible for an XMLReader to recognize a property name but temporarily be unable to return its value. Some property values may be available only in specific contexts, such as before, during, or after a parse. XMLReaders are not required to recognize any specific property names, though an initial core set is documented for SAX2. Implementors are free (and encouraged) to invent their own properties, using names built on their own URIs.", "history": "Added in API level 1", "FullName": "public Object getProperty (String name)"}, "parse(org.xml.sax.InputSource)": {"Returns": [], "Parameters": [["@B_org#xml#sax#InputSource_E@", "InputSource: The input source for the top-level of the XML document."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xml#sax#SAXException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Parse an XML document. The application can use this method to instruct the XML reader to begin parsing an XML document from any valid input source (a character stream, a byte stream, or a URI). Applications may not invoke this method while a parse is in progress (they should create a new XMLReader instead for each nested XML document). Once a parse is complete, an application may reuse the same XMLReader object, possibly with a different input source. Configuration of the XMLReader object (such as handler bindings and values established for feature flags and properties) is unchanged by completion of a parse, unless the definition of that aspect of the configuration explicitly specifies other behavior. (For example, feature flags or properties exposing characteristics of the document being parsed.) During the parse, the XMLReader will provide information about the XML document through the registered event handlers. This method is synchronous: it will not return until parsing has ended. If a client application wants to terminate parsing early, it should throw an exception.", "history": "Added in API level 1", "FullName": "public void parse (InputSource source)"}, "startElement(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_org#xml#sax#SAXException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Calls @B_org#xml#sax#ContentHandler#startElement_E@ on the ContentHandler with this driver object as the @B_org#xml#sax#Attributes_E@ implementation. In default implementation @B_org#xml#sax#Attributes_E@ object is valid only during this method call and may not be stored. Sub-classes can overwrite this method to cache attributes.", "history": "Added in API level 1", "FullName": "protected void startElement (String namespace, String localName, String qName)"}, "getIndex(java.lang.String, java.lang.String)": {"Returns": [["int", "The index of the attribute, or -1 if it does not appear in the list."]], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI, or the empty string if the name has no Namespace URI."], ["@B_java#lang#String_E@", "String: The attribute's local name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up the index of an attribute by Namespace name.", "history": "added in API level 1", "FullName": "public int getIndex (String uri, String localName)"}, "getIndex(java.lang.String)": {"Returns": [["int", "The index of the attribute, or -1 if it does not appear in the list."]], "Parameters": [["@B_java#lang#String_E@", "String: The qualified (prefixed) name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up the index of an attribute by XML qualified (prefixed) name.", "history": "Added in API level 1", "FullName": "public int getIndex (String qName)"}, "getIndex(java.lang.String,java.lang.String)": {"Returns": [["int", "The index of the attribute, or -1 if it does not appear in the list."]], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI, or the empty string if the name has no Namespace URI."], ["@B_java#lang#String_E@", "String: The attribute's local name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up the index of an attribute by Namespace name.", "history": "Added in API level 1", "FullName": "public int getIndex (String uri, String localName)"}, "getContentHandler()": {"Returns": [["@B_org#xml#sax#ContentHandler_E@", "The current content handler, or null if none has been registered."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current content handler.", "history": "Added in API level 1", "FullName": "public ContentHandler getContentHandler ()"}, "getLineNumber()": {"Returns": [["int", "The line number, or -1 if none is available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the line number where the current document event ends. Lines are delimited by line ends, which are defined in the XML specification. The return value is an approximation of the line number in the document entity or external parsed entity where the markup triggering the event appears. If possible, the SAX driver should provide the line position of the first character after the text associated with the document event. The first line is line 1.", "history": "Added in API level 1", "FullName": "public int getLineNumber ()"}, "getType(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The attribute type as a string, or null if the attribute is not in the list or if qualified names are not available."]], "Parameters": [["@B_java#lang#String_E@", "String: The XML qualified name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up an attribute's type by XML qualified (prefixed) name. See @B_org#xml#sax#Attributes#getType_E@ for a description of the possible types.", "history": "Added in API level 1", "FullName": "public String getType (String qName)"}, "parse(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The system identifier (URI)."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xml#sax#SAXException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Parse an XML document from a system identifier (URI). This method is a shortcut for the common case of reading a document from a system identifier. It is the exact equivalent of the following: If the system identifier is a URL, it must be fully resolved by the application before it is passed to the parser.", "history": "Added in API level 1", "FullName": "public void parse (String systemId)"}, "getLocalName(int)": {"Returns": [["@B_java#lang#String_E@", "The local name, or the empty string if Namespace processing is not being performed, or null if the index is out of range."]], "Parameters": [["int", "int: The attribute index (zero-based)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up an attribute's local name by index.", "history": "Added in API level 1", "FullName": "public String getLocalName (int index)"}, "getType(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The attribute type as a string, or null if the attribute is not in the list or if Namespace processing is not being performed."]], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI, or the empty String if the name has no Namespace URI."], ["@B_java#lang#String_E@", "String: The local name of the attribute."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up an attribute's type by Namespace name. See @B_org#xml#sax#Attributes#getType_E@ for a description of the possible types.", "history": "added in API level 1", "FullName": "public String getType (String uri, String localName)"}, "getQName(int)": {"Returns": [["@B_java#lang#String_E@", "The XML qualified name, or the empty string if none is available, or null if the index is out of range."]], "Parameters": [["int", "int: The attribute index (zero-based)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up an attribute's XML qualified (prefixed) name by index.", "history": "Added in API level 1", "FullName": "public String getQName (int index)"}, "parseSubTree(org.xmlpull.v1.XmlPullParser)": {"Returns": [], "Parameters": [["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xml#sax#SAXException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void parseSubTree (XmlPullParser pp)"}, "getValue(int)": {"Returns": [["@B_java#lang#String_E@", "The attribute's value as a string, or null if the index is out of range."]], "Parameters": [["int", "int: The attribute index (zero-based)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up an attribute's value by index. If the attribute value is a list of tokens (IDREFS, ENTITIES, or NMTOKENS), the tokens will be concatenated into a single string with each token separated by a single space.", "history": "Added in API level 1", "FullName": "public String getValue (int index)"}, "getValue(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The attribute value as a string, or null if the attribute is not in the list."]], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI, or the empty String if the name has no Namespace URI."], ["@B_java#lang#String_E@", "String: The local name of the attribute."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up an attribute's value by Namespace name. See @B_org#xml#sax#Attributes#getValue_E@ for a description of the possible values.", "history": "added in API level 1", "FullName": "public String getValue (String uri, String localName)"}, "getType(int)": {"Returns": [["@B_java#lang#String_E@", "The attribute's type as a string, or null if the index is out of range."]], "Parameters": [["int", "int: The attribute index (zero-based)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up an attribute's type by index. The attribute type is one of the strings \"CDATA\", \"ID\", \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\", \"ENTITIES\", or \"NOTATION\" (always in upper case). If the parser has not read a declaration for the attribute, or if the parser does not report attribute types, then it must return the value \"CDATA\" as stated in the XML 1.0 Recommendation (clause 3.3.3, \"Attribute-Value Normalization\"). For an enumerated attribute that is not a notation, the parser will report the type as \"NMTOKEN\".", "history": "Added in API level 1", "FullName": "public String getType (int index)"}, "setFeature(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The feature name, which is a fully-qualified URI."], ["boolean", "boolean: The requested value of the feature (true or false)."]], "Throws": [["@B_org#xml#sax#SAXNotRecognizedException_E@", ""], ["@B_org#xml#sax#SAXNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set the value of a feature flag. The feature name is any fully-qualified URI. It is possible for an XMLReader to expose a feature value but to be unable to change the current value. Some feature values may be immutable or mutable only in specific contexts, such as before, during, or after a parse. All XMLReaders are required to support setting http://xml.org/sax/features/namespaces to true and http://xml.org/sax/features/namespace-prefixes to false.", "history": "added in API level 1", "FullName": "public void setFeature (String name, boolean value)"}, "getFeature(java.lang.String)": {"Returns": [["boolean", "The current value of the feature (true or false)."]], "Parameters": [["@B_java#lang#String_E@", "String: The feature name, which is a fully-qualified URI."]], "Throws": [["@B_org#xml#sax#SAXNotRecognizedException_E@", ""], ["@B_org#xml#sax#SAXNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Look up the value of a feature flag. The feature name is any fully-qualified URI. It is possible for an XMLReader to recognize a feature name but temporarily be unable to return its value. Some feature values may be available only in specific contexts, such as before, during, or after a parse. Also, some feature values may not be programmatically accessible. (In the case of an adapter for SAX1 @B_org#xml#sax#Parser_E@, there is no implementation-independent way to expose whether the underlying parser is performing validation, expanding external entities, and so forth.) All XMLReaders are required to recognize the http://xml.org/sax/features/namespaces and the http://xml.org/sax/features/namespace-prefixes feature names. Typical usage is something like this: Implementors are free (and encouraged) to invent their own features, using names built on their own URIs.", "history": "Added in API level 1", "FullName": "public boolean getFeature (String name)"}, "getLength()": {"Returns": [["int", "The number of attributes in the list."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of attributes in the list. Once you know the number of attributes, you can iterate through the list.", "history": "Added in API level 1", "FullName": "public int getLength ()"}, "getURI(int)": {"Returns": [["@B_java#lang#String_E@", "The Namespace URI, or the empty string if none is available, or null if the index is out of range."]], "Parameters": [["int", "int: The attribute index (zero-based)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up an attribute's Namespace URI by index.", "history": "Added in API level 1", "FullName": "public String getURI (int index)"}, "getType(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The attribute type as a string, or null if the attribute is not in the list or if Namespace processing is not being performed."]], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI, or the empty String if the name has no Namespace URI."], ["@B_java#lang#String_E@", "String: The local name of the attribute."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up an attribute's type by Namespace name. See @B_org#xml#sax#Attributes#getType_E@ for a description of the possible types.", "history": "Added in API level 1", "FullName": "public String getType (String uri, String localName)"}, "setErrorHandler(org.xml.sax.ErrorHandler)": {"Returns": [], "Parameters": [["@B_org#xml#sax#ErrorHandler_E@", "ErrorHandler: The error handler."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allow an application to register an error event handler. If the application does not register an error handler, all error events reported by the SAX parser will be silently ignored; however, normal processing may not continue. It is highly recommended that all SAX applications implement an error handler to avoid unexpected bugs. Applications may register a new or different handler in the middle of a parse, and the SAX parser must begin using the new handler immediately.", "history": "Added in API level 1", "FullName": "public void setErrorHandler (ErrorHandler handler)"}, "setDTDHandler(org.xml.sax.DTDHandler)": {"Returns": [], "Parameters": [["@B_org#xml#sax#DTDHandler_E@", "DTDHandler: The DTD handler."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allow an application to register a DTD event handler. If the application does not register a DTD handler, all DTD events reported by the SAX parser will be silently ignored. Applications may register a new or different handler in the middle of a parse, and the SAX parser must begin using the new handler immediately.", "history": "Added in API level 1", "FullName": "public void setDTDHandler (DTDHandler handler)"}, "setEntityResolver(org.xml.sax.EntityResolver)": {"Returns": [], "Parameters": [["@B_org#xml#sax#EntityResolver_E@", "EntityResolver: The entity resolver."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allow an application to register an entity resolver. If the application does not register an entity resolver, the XMLReader will perform its own default resolution. Applications may register a new or different resolver in the middle of a parse, and the SAX parser must begin using the new resolver immediately.", "history": "Added in API level 1", "FullName": "public void setEntityResolver (EntityResolver resolver)"}, "setContentHandler(org.xml.sax.ContentHandler)": {"Returns": [], "Parameters": [["@B_org#xml#sax#ContentHandler_E@", "ContentHandler: The content handler."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allow an application to register a content event handler. If the application does not register a content handler, all content events reported by the SAX parser will be silently ignored. Applications may register a new or different handler in the middle of a parse, and the SAX parser must begin using the new handler immediately.", "history": "Added in API level 1", "FullName": "public void setContentHandler (ContentHandler handler)"}, "setFeature(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The feature name, which is a fully-qualified URI."], ["boolean", "boolean: The requested value of the feature (true or false)."]], "Throws": [["@B_org#xml#sax#SAXNotRecognizedException_E@", ""], ["@B_org#xml#sax#SAXNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set the value of a feature flag. The feature name is any fully-qualified URI. It is possible for an XMLReader to expose a feature value but to be unable to change the current value. Some feature values may be immutable or mutable only in specific contexts, such as before, during, or after a parse. All XMLReaders are required to support setting http://xml.org/sax/features/namespaces to true and http://xml.org/sax/features/namespace-prefixes to false.", "history": "Added in API level 1", "FullName": "public void setFeature (String name, boolean value)"}, "getValue(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The attribute value as a string, or null if the attribute is not in the list or if qualified names are not available."]], "Parameters": [["@B_java#lang#String_E@", "String: The XML qualified name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up an attribute's value by XML qualified (prefixed) name. See @B_org#xml#sax#Attributes#getValue_E@ for a description of the possible values.", "history": "Added in API level 1", "FullName": "public String getValue (String qName)"}, "setProperty(java.lang.String, java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The property name, which is a fully-qualified URI."], ["@B_java#lang#Object_E@", "Object: The requested value for the property."]], "Throws": [["@B_org#xml#sax#SAXNotRecognizedException_E@", ""], ["@B_org#xml#sax#SAXNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set the value of a property. The property name is any fully-qualified URI. It is possible for an XMLReader to recognize a property name but to be unable to change the current value. Some property values may be immutable or mutable only in specific contexts, such as before, during, or after a parse. XMLReaders are not required to recognize setting any specific property names, though a core set is defined by SAX2. This method is also the standard mechanism for setting extended handlers.", "history": "added in API level 1", "FullName": "public void setProperty (String name, Object value)"}, "Driver(org.xmlpull.v1.XmlPullParser)": {"Returns": [], "Parameters": [["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser no parameter comment"]], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Driver (XmlPullParser pp)"}, "getColumnNumber()": {"Returns": [["int", "The column number, or -1 if none is available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the column number where the current document event ends. This is one-based number of Java char values since the last line end. The return value is an approximation of the column number in the document entity or external parsed entity where the markup triggering the event appears. If possible, the SAX driver should provide the line position of the first character after the text associated with the document event. The first column in each line is column 1.", "history": "Added in API level 1", "FullName": "public int getColumnNumber ()"}, "Driver()": {"Returns": [], "Parameters": [], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Driver ()"}, "setProperty(java.lang.String,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The property name, which is a fully-qualified URI."], ["@B_java#lang#Object_E@", "Object: The requested value for the property."]], "Throws": [["@B_org#xml#sax#SAXNotRecognizedException_E@", ""], ["@B_org#xml#sax#SAXNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set the value of a property. The property name is any fully-qualified URI. It is possible for an XMLReader to recognize a property name but to be unable to change the current value. Some property values may be immutable or mutable only in specific contexts, such as before, during, or after a parse. XMLReaders are not required to recognize setting any specific property names, though a core set is defined by SAX2. This method is also the standard mechanism for setting extended handlers.", "history": "Added in API level 1", "FullName": "public void setProperty (String name, Object value)"}, "getErrorHandler()": {"Returns": [["@B_org#xml#sax#ErrorHandler_E@", "The current error handler, or null if none has been registered."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current error handler.", "history": "Added in API level 1", "FullName": "public ErrorHandler getErrorHandler ()"}, "getDTDHandler()": {"Returns": [["@B_org#xml#sax#DTDHandler_E@", "The current DTD handler, or null if none has been registered."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current DTD handler.", "history": "Added in API level 1", "FullName": "public DTDHandler getDTDHandler ()"}, "getPublicId()": {"Returns": [["@B_java#lang#String_E@", "A string containing the public identifier, or null if none is available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the public identifier for the current document event. The return value is the public identifier of the document entity or of the external parsed entity in which the markup triggering the event appears.", "history": "Added in API level 1", "FullName": "public String getPublicId ()"}}, "Inheritance": [], "ClassName": "org.xmlpull.v1.sax2.Driver", "ClassDesc": "SAX2 Driver that pulls events from XmlPullParser and converts them into SAX2 callbacks."}