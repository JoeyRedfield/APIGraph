{"Functions": {"toString(java.lang.Object, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the result of calling toString on the first argument if it is not null and the second argument otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: an object"], ["@B_java#lang#String_E@", "String: string to return if the first argument is null"]], "Throws": [], "SeeAlso": ["@B_java#util#Objects#toString_E@"], "Permissions": [], "Description": "Returns the result of calling toString on the first argument if the first argument is not null and returns the second argument otherwise.", "history": "added in API level 19", "FullName": "public static String toString (Object o, String nullDefault)"}, "nonNull(java.lang.Object)": {"Returns": [["boolean", "true if the provided reference is non-null otherwise false"]], "Parameters": [["@B_java#lang#Object_E@", "Object: a reference to be checked against null"]], "Throws": [], "SeeAlso": ["@B_java#util#function#Predicate_E@"], "Permissions": [], "Description": "Returns true if the provided reference is non-null otherwise returns false.", "history": "Added in API level 24", "FullName": "public static boolean nonNull (Object obj)"}, "requireNonNull(T)": {"Returns": [["T", "obj if not null"]], "Parameters": [["T", "T: the object reference to check for nullity"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if obj is null"]], "SeeAlso": [], "Permissions": [], "Description": "Checks that the specified object reference is not null. This method is designed primarily for doing parameter validation in methods and constructors, as demonstrated below:", "history": "Added in API level 19", "FullName": "public static T requireNonNull (T obj)"}, "requireNonNull(T, java.lang.String)": {"Returns": [["T", "obj if not null"]], "Parameters": [["T", "T: the object reference to check for nullity"], ["@B_java#lang#String_E@", "String: detail message to be used in the event that a NullPointerException is thrown"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if obj is null"]], "SeeAlso": [], "Permissions": [], "Description": "Checks that the specified object reference is not null and throws a customized @B_java#lang#NullPointerException_E@ if it is. This method is designed primarily for doing parameter validation in methods and constructors with multiple parameters, as demonstrated below:", "history": "added in API level 19", "FullName": "public static T requireNonNull (T obj, String message)"}, "hash(java.lang.Object...)": {"Returns": [["int", "a hash value of the sequence of input values"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the values to be hashed"]], "Throws": [], "SeeAlso": ["@B_java#util#Arrays#hashCode_E@", "@B_java#util#List#hashCode_E@"], "Permissions": [], "Description": "Generates a hash code for a sequence of input values. The hash code is generated as if all the input values were placed into an array, and that array were hashed by calling @B_java#util#Arrays#hashCode_E@. This method is useful for implementing @B_java#lang#Object#hashCode_E@ on objects containing multiple fields. For example, if an object that has three fields, x, y, and z, one could write: @B_java#util#Objects#hashCode_E@.", "history": "Added in API level 19", "FullName": "public static int hash (Object... values)"}, "equals(java.lang.Object, java.lang.Object)": {"Returns": [["boolean", "true if the arguments are equal to each other and false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: an object"], ["@B_java#lang#Object_E@", "Object: an object to be compared with a for equality"]], "Throws": [], "SeeAlso": ["@B_java#lang#Object#equals_E@"], "Permissions": [], "Description": "Returns true if the arguments are equal to each other and false otherwise. Consequently, if both arguments are null, true is returned and if exactly one argument is null, false is returned. Otherwise, equality is determined by using the @B_java#lang#Object#equals_E@ method of the first argument.", "history": "added in API level 19", "FullName": "public static boolean equals (Object a, Object b)"}, "equals(java.lang.Object,java.lang.Object)": {"Returns": [["boolean", "true if the arguments are equal to each other and false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: an object"], ["@B_java#lang#Object_E@", "Object: an object to be compared with a for equality"]], "Throws": [], "SeeAlso": ["@B_java#lang#Object#equals_E@"], "Permissions": [], "Description": "Returns true if the arguments are equal to each other and false otherwise. Consequently, if both arguments are null, true is returned and if exactly one argument is null, false is returned. Otherwise, equality is determined by using the @B_java#lang#Object#equals_E@ method of the first argument.", "history": "Added in API level 19", "FullName": "public static boolean equals (Object a, Object b)"}, "isNull(java.lang.Object)": {"Returns": [["boolean", "true if the provided reference is null otherwise false"]], "Parameters": [["@B_java#lang#Object_E@", "Object: a reference to be checked against null"]], "Throws": [], "SeeAlso": ["@B_java#util#function#Predicate_E@"], "Permissions": [], "Description": "Returns true if the provided reference is null otherwise returns false.", "history": "Added in API level 24", "FullName": "public static boolean isNull (Object obj)"}, "requireNonNull(T,java.lang.String)": {"Returns": [["T", "obj if not null"]], "Parameters": [["T", "T: the object reference to check for nullity"], ["@B_java#lang#String_E@", "String: detail message to be used in the event that a NullPointerException is thrown"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if obj is null"]], "SeeAlso": [], "Permissions": [], "Description": "Checks that the specified object reference is not null and throws a customized @B_java#lang#NullPointerException_E@ if it is. This method is designed primarily for doing parameter validation in methods and constructors with multiple parameters, as demonstrated below:", "history": "Added in API level 19", "FullName": "public static T requireNonNull (T obj, String message)"}, "compare(T,T,java.util.Comparator<?superT>)": {"Returns": [["int", "0 if the arguments are identical and c.compare(a, b) otherwise."]], "Parameters": [["T", "T: an object"], ["T", "T: an object to be compared with a"], ["@B_java#util#Comparator_E@", "Comparator: the Comparator to compare the first two arguments"]], "Throws": [], "SeeAlso": ["@B_java#lang#Comparable_E@", "@B_java#util#Comparator_E@"], "Permissions": [], "Description": "Returns 0 if the arguments are identical and c.compare(a, b) otherwise. Consequently, if both arguments are null 0 is returned. Note that if one of the arguments is null, a NullPointerException may or may not be thrown depending on what ordering policy, if any, the @B_java#util#Comparator_E@ chooses to have for null values.", "history": "Added in API level 19", "FullName": "public static int compare (T a, T b, Comparator<? super T> c)"}, "deepEquals(java.lang.Object, java.lang.Object)": {"Returns": [["boolean", "true if the arguments are deeply equal to each other and false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: an object"], ["@B_java#lang#Object_E@", "Object: an object to be compared with a for deep equality"]], "Throws": [], "SeeAlso": ["@B_java#util#Arrays#deepEquals_E@", "@B_java#util#Objects#equals_E@"], "Permissions": [], "Description": "Returns true if the arguments are deeply equal to each other and false otherwise. Two null values are deeply equal. If both arguments are arrays, the algorithm in @B_java#util#Arrays#deepEquals_E@ is used to determine equality. Otherwise, equality is determined by using the @B_java#lang#Object#equals_E@ method of the first argument.", "history": "added in API level 19", "FullName": "public static boolean deepEquals (Object a, Object b)"}, "toString(java.lang.Object,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the result of calling toString on the first argument if it is not null and the second argument otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: an object"], ["@B_java#lang#String_E@", "String: string to return if the first argument is null"]], "Throws": [], "SeeAlso": ["@B_java#util#Objects#toString_E@"], "Permissions": [], "Description": "Returns the result of calling toString on the first argument if the first argument is not null and returns the second argument otherwise.", "history": "Added in API level 19", "FullName": "public static String toString (Object o, String nullDefault)"}, "compare(T, T, java.util.Comparator<? super T>)": {"Returns": [["int", "0 if the arguments are identical and c.compare(a, b) otherwise."]], "Parameters": [["T", "T: an object"], ["T", "T: an object to be compared with a"], ["@B_java#util#Comparator_E@", "Comparator: the Comparator to compare the first two arguments"]], "Throws": [], "SeeAlso": ["@B_java#lang#Comparable_E@", "@B_java#util#Comparator_E@"], "Permissions": [], "Description": "Returns 0 if the arguments are identical and c.compare(a, b) otherwise. Consequently, if both arguments are null 0 is returned. Note that if one of the arguments is null, a NullPointerException may or may not be thrown depending on what ordering policy, if any, the @B_java#util#Comparator_E@ chooses to have for null values.", "history": "added in API level 19", "FullName": "public static int compare (T a, T b, Comparator<? super T> c)"}, "hashCode(java.lang.Object)": {"Returns": [["int", "the hash code of a non-null argument and 0 for a null argument"]], "Parameters": [["@B_java#lang#Object_E@", "Object: an object"]], "Throws": [], "SeeAlso": ["@B_java#lang#Object#hashCode_E@"], "Permissions": [], "Description": "Returns the hash code of a non-null argument and 0 for a null argument.", "history": "Added in API level 19", "FullName": "public static int hashCode (Object o)"}, "requireNonNull(T,java.util.function.Supplier<java.lang.String>)": {"Returns": [["T", "obj if not null"]], "Parameters": [["T", "T: the object reference to check for nullity"], ["@B_java#util#function#Supplier_E@", "Supplier: supplier of the detail message to be used in the event that a NullPointerException is thrown"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if obj is null"]], "SeeAlso": [], "Permissions": [], "Description": "Checks that the specified object reference is not null and throws a customized @B_java#lang#NullPointerException_E@ if it is. Unlike the method @B_java#util#Objects#requireNonNull_E@, this method allows creation of the message to be deferred until after the null check is made. While this may confer a performance advantage in the non-null case, when deciding to call this method care should be taken that the costs of creating the message supplier are less than the cost of just creating the string message directly.", "history": "Added in API level 24", "FullName": "public static T requireNonNull (T obj, Supplier<String> messageSupplier)"}, "deepEquals(java.lang.Object,java.lang.Object)": {"Returns": [["boolean", "true if the arguments are deeply equal to each other and false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: an object"], ["@B_java#lang#Object_E@", "Object: an object to be compared with a for deep equality"]], "Throws": [], "SeeAlso": ["@B_java#util#Arrays#deepEquals_E@", "@B_java#util#Objects#equals_E@"], "Permissions": [], "Description": "Returns true if the arguments are deeply equal to each other and false otherwise. Two null values are deeply equal. If both arguments are arrays, the algorithm in @B_java#util#Arrays#deepEquals_E@ is used to determine equality. Otherwise, equality is determined by using the @B_java#lang#Object#equals_E@ method of the first argument.", "history": "Added in API level 19", "FullName": "public static boolean deepEquals (Object a, Object b)"}, "toString(java.lang.Object)": {"Returns": [["@B_java#lang#String_E@", "the result of calling toString for a non-null argument and \"null\" for a null argument"]], "Parameters": [["@B_java#lang#Object_E@", "Object: an object"]], "Throws": [], "SeeAlso": ["@B_java#lang#Object#toString_E@", "@B_java#lang#String#valueOf_E@"], "Permissions": [], "Description": "Returns the result of calling toString for a non-null argument and \"null\" for a null argument.", "history": "Added in API level 19", "FullName": "public static String toString (Object o)"}}, "Inheritance": [], "ClassName": "java.util.Objects", "ClassDesc": "This class consists of static utility methods for operating on objects. These utilities include null-safe or null-tolerant methods for computing the hash code of an object, returning a string for an object, and comparing two objects."}