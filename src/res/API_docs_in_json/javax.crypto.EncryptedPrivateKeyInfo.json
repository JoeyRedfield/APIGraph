{"Functions": {"EncryptedPrivateKeyInfo(java.security.AlgorithmParameters,byte[])": {"Returns": [], "Parameters": [["@B_java#security#AlgorithmParameters_E@", "AlgorithmParameters: the algorithm parameters for the encryption algorithm. algParams.getEncoded() should return the ASN.1 encoded bytes of the parameters field of the AlgorithmIdentifer component of the EncryptedPrivateKeyInfo type."], ["byte[]", "byte: encrypted data. The contents of encrypedData are copied to protect against subsequent modification when constructing this object."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if algParams or encryptedData is null."], ["@B_java#lang#IllegalArgumentException_E@", "if encryptedData is empty, i.e. 0-length."], ["@B_java#security#NoSuchAlgorithmException_E@", "if the specified algName of the specified algParams parameter is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an EncryptedPrivateKeyInfo from the encryption algorithm parameters and the encrypted data.", "history": "Added in API level 1", "FullName": "public EncryptedPrivateKeyInfo (AlgorithmParameters algParams, byte[] encryptedData)"}, "getKeySpec(java.security.Key, java.lang.String)": {"Returns": [["@B_java#security#spec#PKCS8EncodedKeySpec_E@", "the PKCS8EncodedKeySpec object."]], "Parameters": [["@B_java#security#Key_E@", "Key: key used for decrypting the encrypted data."], ["@B_java#lang#String_E@", "String: the name of provider whose Cipher implementation will be used."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if decryptKey or providerName is null."], ["@B_java#security#NoSuchProviderException_E@", "if no provider providerName is registered."], ["@B_java#security#NoSuchAlgorithmException_E@", "if cannot find appropriate cipher to decrypt the encrypted data."], ["@B_java#security#InvalidKeyException_E@", "if decryptKey cannot be used to decrypt the encrypted data or the decryption result is not a valid PKCS8KeySpec."]], "SeeAlso": [], "Permissions": [], "Description": "Extract the enclosed PKCS8EncodedKeySpec object from the encrypted data and return it.", "history": "added in API level 1", "FullName": "public PKCS8EncodedKeySpec getKeySpec (Key decryptKey, String providerName)"}, "getKeySpec(java.security.Key,java.lang.String)": {"Returns": [["@B_java#security#spec#PKCS8EncodedKeySpec_E@", "the PKCS8EncodedKeySpec object."]], "Parameters": [["@B_java#security#Key_E@", "Key: key used for decrypting the encrypted data."], ["@B_java#lang#String_E@", "String: the name of provider whose Cipher implementation will be used."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if decryptKey or providerName is null."], ["@B_java#security#NoSuchProviderException_E@", "if no provider providerName is registered."], ["@B_java#security#NoSuchAlgorithmException_E@", "if cannot find appropriate cipher to decrypt the encrypted data."], ["@B_java#security#InvalidKeyException_E@", "if decryptKey cannot be used to decrypt the encrypted data or the decryption result is not a valid PKCS8KeySpec."]], "SeeAlso": [], "Permissions": [], "Description": "Extract the enclosed PKCS8EncodedKeySpec object from the encrypted data and return it.", "history": "Added in API level 1", "FullName": "public PKCS8EncodedKeySpec getKeySpec (Key decryptKey, String providerName)"}, "EncryptedPrivateKeyInfo(java.lang.String, byte[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: encryption algorithm name. See Appendix A in the Java Cryptography Architecture Reference Guide for information about standard Cipher algorithm names."], ["byte[]", "byte: encrypted data. The contents of encrypedData are copied to protect against subsequent modification when constructing this object."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if algName or encryptedData is null."], ["@B_java#lang#IllegalArgumentException_E@", "if encryptedData is empty, i.e. 0-length."], ["@B_java#security#NoSuchAlgorithmException_E@", "if the specified algName is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an EncryptedPrivateKeyInfo from the encryption algorithm name and the encrypted data. Note: This constructor will use null as the value of the algorithm parameters. If the encryption algorithm has parameters whose value is not null, a different constructor, e.g. EncryptedPrivateKeyInfo(AlgorithmParameters, byte[]), should be used.", "history": "added in API level 1", "FullName": "public EncryptedPrivateKeyInfo (String algName, byte[] encryptedData)"}, "EncryptedPrivateKeyInfo(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the ASN.1 encoding of this object. The contents of the array are copied to protect against subsequent modification."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the encoded is null."], ["@B_java#io#IOException_E@", "if error occurs when parsing the ASN.1 encoding."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs (i.e., parses) an EncryptedPrivateKeyInfo from its ASN.1 encoding.", "history": "Added in API level 1", "FullName": "public EncryptedPrivateKeyInfo (byte[] encoded)"}, "getAlgName()": {"Returns": [["@B_java#lang#String_E@", "the encryption algorithm name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the encryption algorithm. Note: Standard name is returned instead of the specified one in the constructor when such mapping is available. See Appendix A in the", "history": "Added in API level 1", "FullName": "public String getAlgName ()"}, "getEncoded()": {"Returns": [["byte[]", "the ASN.1 encoding. Returns a new array each time this method is called."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if error occurs when constructing its ASN.1 encoding."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the ASN.1 encoding of this object.", "history": "Added in API level 1", "FullName": "public byte[] getEncoded ()"}, "EncryptedPrivateKeyInfo(java.lang.String,byte[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: encryption algorithm name. See Appendix A in the Java Cryptography Architecture Reference Guide for information about standard Cipher algorithm names."], ["byte[]", "byte: encrypted data. The contents of encrypedData are copied to protect against subsequent modification when constructing this object."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if algName or encryptedData is null."], ["@B_java#lang#IllegalArgumentException_E@", "if encryptedData is empty, i.e. 0-length."], ["@B_java#security#NoSuchAlgorithmException_E@", "if the specified algName is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an EncryptedPrivateKeyInfo from the encryption algorithm name and the encrypted data. Note: This constructor will use null as the value of the algorithm parameters. If the encryption algorithm has parameters whose value is not null, a different constructor, e.g. EncryptedPrivateKeyInfo(AlgorithmParameters, byte[]), should be used.", "history": "Added in API level 1", "FullName": "public EncryptedPrivateKeyInfo (String algName, byte[] encryptedData)"}, "getAlgParameters()": {"Returns": [["@B_java#security#AlgorithmParameters_E@", "the algorithm parameters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the algorithm parameters used by the encryption algorithm.", "history": "Added in API level 1", "FullName": "public AlgorithmParameters getAlgParameters ()"}, "getEncryptedData()": {"Returns": [["byte[]", "the encrypted data. Returns a new array each time this method is called."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the encrypted data.", "history": "Added in API level 1", "FullName": "public byte[] getEncryptedData ()"}, "getKeySpec(javax.crypto.Cipher)": {"Returns": [["@B_java#security#spec#PKCS8EncodedKeySpec_E@", "the PKCS8EncodedKeySpec object."]], "Parameters": [["@B_javax#crypto#Cipher_E@", "Cipher: the initialized cipher object which will be used for decrypting the encrypted data."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if cipher is null."], ["@B_java#security#spec#InvalidKeySpecException_E@", "if the given cipher is inappropriate for the encrypted data or the encrypted data is corrupted and cannot be decrypted."]], "SeeAlso": [], "Permissions": [], "Description": "Extract the enclosed PKCS8EncodedKeySpec object from the encrypted data and return it. Note: In order to successfully retrieve the enclosed PKCS8EncodedKeySpec object, cipher needs to be initialized to either Cipher.DECRYPT_MODE or Cipher.UNWRAP_MODE, with the same key and parameters used for generating the encrypted data.", "history": "Added in API level 1", "FullName": "public PKCS8EncodedKeySpec getKeySpec (Cipher cipher)"}, "getKeySpec(java.security.Key,java.security.Provider)": {"Returns": [["@B_java#security#spec#PKCS8EncodedKeySpec_E@", "the PKCS8EncodedKeySpec object."]], "Parameters": [["@B_java#security#Key_E@", "Key: key used for decrypting the encrypted data."], ["@B_java#security#Provider_E@", "Provider: the name of provider whose Cipher implementation will be used."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if decryptKey or provider is null."], ["@B_java#security#NoSuchAlgorithmException_E@", "if cannot find appropriate cipher to decrypt the encrypted data in provider."], ["@B_java#security#InvalidKeyException_E@", "if decryptKey cannot be used to decrypt the encrypted data or the decryption result is not a valid PKCS8KeySpec."]], "SeeAlso": [], "Permissions": [], "Description": "Extract the enclosed PKCS8EncodedKeySpec object from the encrypted data and return it.", "history": "Added in API level 1", "FullName": "public PKCS8EncodedKeySpec getKeySpec (Key decryptKey, Provider provider)"}, "getKeySpec(java.security.Key)": {"Returns": [["@B_java#security#spec#PKCS8EncodedKeySpec_E@", "the PKCS8EncodedKeySpec object."]], "Parameters": [["@B_java#security#Key_E@", "Key: key used for decrypting the encrypted data."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if decryptKey is null."], ["@B_java#security#NoSuchAlgorithmException_E@", "if cannot find appropriate cipher to decrypt the encrypted data."], ["@B_java#security#InvalidKeyException_E@", "if decryptKey cannot be used to decrypt the encrypted data or the decryption result is not a valid PKCS8KeySpec."]], "SeeAlso": [], "Permissions": [], "Description": "Extract the enclosed PKCS8EncodedKeySpec object from the encrypted data and return it.", "history": "Added in API level 1", "FullName": "public PKCS8EncodedKeySpec getKeySpec (Key decryptKey)"}}, "Inheritance": [], "ClassName": "javax.crypto.EncryptedPrivateKeyInfo", "ClassDesc": "This class implements the EncryptedPrivateKeyInfo type as defined in PKCS #8. Its ASN.1 definition is as follows:"}