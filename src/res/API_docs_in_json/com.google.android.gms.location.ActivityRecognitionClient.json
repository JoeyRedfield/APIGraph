{"Functions": {"isConnected()": {"Returns": [["", "true if the client is connected to the service."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the client is currently connected to the service, so that requests to other methods will succeed. Applications should guard client actions caused by the user with a call to this method.", "history": "", "FullName": "public boolean isConnected ()"}, "connect()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Connects the client to Google Play services. This method returns immediately, and connects to the service in the background. If the connection is successful, @B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks#onConnected_E@ is called. On a failure, @B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener#onConnectionFailed_E@ is called.", "history": "", "FullName": "public void connect ()"}, "isConnecting()": {"Returns": [["", "true if the client is attempting to connect to the service."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the client is attempting to connect to the service.", "history": "", "FullName": "public boolean isConnecting ()"}, "removeActivityUpdates(android.app.PendingIntent)": {"Returns": [], "Parameters": [["PendingIntent", "pending intent object that no longer needs activity detection updates"]], "Throws": [["IllegalStateException", "if this method was called at an inappropriate time, such as before the LocationServiceClient has bound to the remote service."]], "SeeAlso": [], "Permissions": [], "Description": "Removes all activity updates for the specified PendingIntent. Calling this function requires the com.google.android.gms.permission.ACTIVITY_RECOGNITION permission.", "history": "", "FullName": "public void removeActivityUpdates (PendingIntent callbackIntent)"}, "requestActivityUpdates(long, android.app.PendingIntent)": {"Returns": [], "Parameters": [["long", "the desired time between activity detections. Larger values will result in fewer activity detections while improving battery life. A value of 0 will result in activity detections at the fastest possible rate."], ["PendingIntent", "a PendingIntent to be sent for each activity detection."]], "Throws": [["IllegalStateException", "if this method was called at an inappropriate time, such as before the LocationServiceClient has bound to the remote service."]], "SeeAlso": [], "Permissions": [], "Description": "Register for activity recognition updates. The activities are detected by periodically waking up the device and reading short bursts of sensor data. It only makes use of low power sensors in order to keep the power usage to a minimum. For example, it can detect if the user is currently on foot, in a car, on a bicycle or still. See @B_com#google#android#gms#location#DetectedActivity_E@ for more details. The activity detection update interval can be controlled with the detectionIntervalMillis parameter. Larger values will result in fewer activity detections while improving battery life. Smaller values will result in more frequent activity detections but will consume more power since the device must be woken up more frequently. Activities may be received more frequently than the detectionIntervalMillis parameter if another application has also requested activity updates at a faster rate. It may also receive updates faster when the activity detection service receives a signal that the current activity may change, such as if the device has been still for a long period of time and is then unplugged from a phone charger. Activities may arrive several seconds after the requested detectionIntervalMillis if the activity detection service requires more samples to make a more accurate prediction. To conserve battery, activity reporting may stop when the device is 'STILL' for an extended period of time. It will resume once the device moves again. This only happens on devices that support the Sensor.TYPE_SIGNIFICANT_MOTION hardware. Beginning in API 21, activities may be received less frequently than the detectionIntervalMillis parameter if the device is in power save mode and the screen is off. A common use case is that an application wants to monitor activities in the background and perform an action when a specific activity is detected. To do this without needing a service that is always on in the background consuming resources, detected activities are delivered via an intent. The application specifies a PendingIntent callback (typically an IntentService) which will be called when activities are detected. See the documentation of @B_android#app#PendingIntent_E@ for more details. Applications can call this function several times in a row with the same callbackIntent to change the desired activity detection interval. Calling this function requires the com.google.android.gms.permission.ACTIVITY_RECOGNITION permission.", "history": "", "FullName": "public void requestActivityUpdates (long detectionIntervalMillis, PendingIntent callbackIntent)"}, "unregisterConnectionCallbacks(com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks_E@", "the listener to unregister."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a connection listener from this GooglePlayServicesClient. Note that removing a listener does not generate any callbacks. If the specified listener is not currently registered to receive connection events, this method will have no effect.", "history": "", "FullName": "public void unregisterConnectionCallbacks (GooglePlayServicesClient.ConnectionCallbacks listener)"}, "isConnectionCallbacksRegistered(com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks)": {"Returns": [["", "true if the specified listener is currently registered to receive connection events."]], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks_E@", "The listener to check for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified listener is currently registered to receive connection events.", "history": "", "FullName": "public boolean isConnectionCallbacksRegistered (GooglePlayServicesClient.ConnectionCallbacks listener)"}, "registerConnectionFailedListener(com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener_E@", "the listener where the results of the asynchronous @B_com#google#android#gms#location#ActivityRecognitionClient#connect_E@ call are delivered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a listener to receive connection failed events from this GooglePlayServicesClient. Unlike @B_com#google#android#gms#common#GooglePlayServicesClient#registerConnectionCallbacks_E@, if the service is not already connected, the listener's @B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener#onConnectionFailed_E@ method will not be called immediately. Applications should balance calls to this method with calls to @B_com#google#android#gms#common#GooglePlayServicesClient#unregisterConnectionFailedListener_E@ to avoid leaking resources. If the specified listener is already registered to receive connection failed events, this method will not add a duplicate entry for the same listener. Note that the order of messages received here may not be stable, so clients should not rely on the order that multiple listeners receive events in.", "history": "", "FullName": "public void registerConnectionFailedListener (GooglePlayServicesClient.OnConnectionFailedListener listener)"}, "ActivityRecognitionClient(android.content.Context, com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks, com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener)": {"Returns": [], "Parameters": [["Context", "The context to use for the connection."], ["@B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks_E@", "The callbacks invoked when the client is connected."], ["@B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener_E@", "The listener which will be notified if the connection attempt fails."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_com#google#android#gms#location#ActivityRecognitionClient_E@.", "history": "", "FullName": "public ActivityRecognitionClient (Context context, GooglePlayServicesClient.ConnectionCallbacks connectedListener, GooglePlayServicesClient.OnConnectionFailedListener connectionFailedListener)"}, "unregisterConnectionFailedListener(com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener_E@", "the listener to unregister."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a connection failed listener from the GooglePlayServicesClient. Note that removing a listener does not generate any callbacks. If the specified listener is not currently registered to receive connection failed events, this method will have no effect.", "history": "", "FullName": "public void unregisterConnectionFailedListener (GooglePlayServicesClient.OnConnectionFailedListener listener)"}, "registerConnectionCallbacks(com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks_E@", "the listener where the results of the asynchronous @B_com#google#android#gms#location#ActivityRecognitionClient#connect_E@ call are delivered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a listener to receive connection events from this GooglePlayServicesClient. If the service is already connected, the listener's @B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks#onConnected_E@ method will be called immediately. Applications should balance calls to this method with calls to @B_com#google#android#gms#common#GooglePlayServicesClient#unregisterConnectionCallbacks_E@ to avoid leaking resources. If the specified listener is already registered to receive connection events, this method will not add a duplicate entry for the same listener, but @B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks#onConnected_E@ method if currently connected. Note that the order of messages received here may not be stable, so clients should not rely on the order that multiple listeners receive events in.", "history": "", "FullName": "public void registerConnectionCallbacks (GooglePlayServicesClient.ConnectionCallbacks listener)"}, "isConnectionFailedListenerRegistered(com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener)": {"Returns": [["", "true if the specified listener is currently registered to receive connection failed events."]], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener_E@", "The listener to check for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified listener is currently registered to receive connection failed events.", "history": "", "FullName": "public boolean isConnectionFailedListenerRegistered (GooglePlayServicesClient.OnConnectionFailedListener listener)"}, "disconnect()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the connection to Google Play services. No calls can be made on this object after calling this method.", "history": "", "FullName": "public void disconnect ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.location.ActivityRecognitionClient", "ClassDesc": "Use @B_com#google#android#gms#location#ActivityRecognition_E@. The main entry point for activity recognition integration. The activity recognition service is a low power mechanism that allows application to receive periodic updates of detected user activities. For example, it can detect if the user is currently on foot, in a car, on a bicycle or still. The activities are detected by periodically waking up the device and reading short bursts of sensor data. It only makes use of low power sensors in order to keep the power usage to a minimum. To request activity recognition, do the following in a class that implements @B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks_E@ and @B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener_E@: @B_android#app#IntentService_E@: Use of the @B_com#google#android#gms#location#ActivityRecognitionClient_E@ requires the com.google.android.gms.permission.ACTIVITY_RECOGNITION permission."}