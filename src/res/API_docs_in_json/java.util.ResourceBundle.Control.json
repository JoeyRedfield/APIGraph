{"Functions": {"newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)": {"Returns": [["@B_java#util#ResourceBundle_E@", "the resource bundle instance, or null if none could be found."]], "Parameters": [["@B_java#lang#String_E@", "String: the base bundle name of the resource bundle, a fully qualified class name"], ["@B_java#util#Locale_E@", "Locale: the locale for which the resource bundle should be instantiated"], ["@B_java#lang#String_E@", "String: the resource bundle format to be loaded"], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the ClassLoader to use to load the bundle"], ["boolean", "boolean: the flag to indicate bundle reloading; true if reloading an expired resource bundle, false otherwise"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if bundleName, locale, format, or loader is null, or if null is returned by @B_java#util#ResourceBundle#Control#toBundleName_E@"], ["@B_java#lang#IllegalArgumentException_E@", "if format is unknown, or if the resource found for the given parameters contains malformed data."], ["@B_java#lang#ClassCastException_E@", "if the loaded class cannot be cast to ResourceBundle"], ["@B_java#lang#IllegalAccessException_E@", "if the class or its nullary constructor is not accessible."], ["@B_java#lang#InstantiationException_E@", "if the instantiation of a class fails for some other reason."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."], ["@B_java#lang#SecurityException_E@", "If a security manager is present and creation of new instances is denied. See @B_java#lang#Class#newInstance_E@ for details."], ["@B_java#io#IOException_E@", "if an error occurred when reading resources using any I/O operations"]], "SeeAlso": [], "Permissions": [], "Description": "Instantiates a resource bundle for the given bundle name of the given format and locale, using the given class loader if necessary. This method returns null if there is no resource bundle available for the given parameters. If a resource bundle can't be instantiated due to an unexpected error, the error must be reported by throwing an Error or Exception rather than simply returning null. If the reload flag is true, it indicates that this method is being called because the previously loaded resource bundle has expired. The default implementation instantiates a ResourceBundle as follows. The bundle name is obtained by calling @B_java#util#ResourceBundle#Control#toBundleName_E@. If format is \"java.class\", the @B_java#lang#Class_E@ specified by the bundle name is loaded by calling @B_java#lang#ClassLoader#loadClass_E@. Then, a ResourceBundle is instantiated by calling @B_java#lang#Class#newInstance_E@. Note that the reload flag is ignored for loading class-based resource bundles in this default implementation. If format is \"java.properties\", @B_java#util#ResourceBundle#Control#toResourceName_E@ is called to get the resource name. If reload is true, @B_java#lang#ClassLoader#getResource_E@ is called to get a @B_java#net#URL_E@ for creating a @B_java#net#URLConnection_E@. This URLConnection is used to @B_java#lang#ClassLoader#getResourceAsStream_E@ is called to get an @B_java#io#InputStream_E@. Then, a @B_java#util#PropertyResourceBundle_E@ is constructed with the InputStream. If format is neither \"java.class\" nor \"java.properties\", an IllegalArgumentException is thrown.", "history": "Added in API level 9", "FullName": "public ResourceBundle newBundle (String baseName, Locale locale, String format, ClassLoader loader, boolean reload)"}, "needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)": {"Returns": [["boolean", "true if the expired bundle needs to be reloaded; false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: the base bundle name of the resource bundle, a fully qualified class name"], ["@B_java#util#Locale_E@", "Locale: the locale for which the resource bundle should be instantiated"], ["@B_java#lang#String_E@", "String: the resource bundle format to be loaded"], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the ClassLoader to use to load the bundle"], ["@B_java#util#ResourceBundle_E@", "ResourceBundle: the resource bundle instance that has been expired in the cache"], ["long", "long: the time when bundle was loaded and put in the cache"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if baseName, locale, format, loader, or bundle is null"]], "SeeAlso": [], "Permissions": [], "Description": "Determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadTime or some other criteria. The method returns true if reloading is required; false otherwise. loadTime is a millisecond offset since the ResourceBundle.getBundle factory method calls this method on the ResourceBundle.Control instance used for its current invocation, not on the instance used in the invocation that originally loaded the resource bundle. The default implementation compares loadTime and the last modified time of the source data of the resource bundle. If it's determined that the source data has been modified since loadTime, true is returned. Otherwise, false is returned. This implementation assumes that the given format is the same string as its file suffix if it's not one of the default formats, \"java.class\" or \"java.properties\".", "history": "Added in API level 9", "FullName": "public boolean needsReload (String baseName, Locale locale, String format, ClassLoader loader, ResourceBundle bundle, long loadTime)"}, "getNoFallbackControl(java.util.List<java.lang.String>)": {"Returns": [["@B_java#util#ResourceBundle#Control_E@", "a ResourceBundle.Control supporting the specified formats with no fallback Locale support"]], "Parameters": [["@B_java#util#List_E@", "List: the formats to be returned by the ResourceBundle.Control.getFormats method"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if formats is null"], ["@B_java#lang#IllegalArgumentException_E@", "if formats is unknown"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a ResourceBundle.Control in which the @B_java#util#ResourceBundle#Control#getFormats_E@ method returns the specified formats and the @B_java#util#ResourceBundle#Control#getFallbackLocale_E@ method returns null. The formats must be equal to one of @B_java#util#ResourceBundle#Control#FORMAT_PROPERTIES_E@, @B_java#util#ResourceBundle#Control#FORMAT_CLASS_E@ or @B_java#util#ResourceBundle#Control#FORMAT_DEFAULT_E@. ResourceBundle.Control instances returned by this method are singletons and thread-safe.", "history": "Added in API level 9", "FullName": "public static final ResourceBundle.Control getNoFallbackControl (List<String> formats)"}, "getTimeToLive(java.lang.String,java.util.Locale)": {"Returns": [["long", "the time (0 or a positive millisecond offset from the cached time) to get loaded bundles expired in the cache, @B_java#util#ResourceBundle#Control#TTL_NO_EXPIRATION_CONTROL_E@ to disable the expiration control, or @B_java#util#ResourceBundle#Control#TTL_DONT_CACHE_E@ to disable caching."]], "Parameters": [["@B_java#lang#String_E@", "String: the base name of the resource bundle for which the expiration value is specified."], ["@B_java#util#Locale_E@", "Locale: the locale of the resource bundle for which the expiration value is specified."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if baseName or locale is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the time-to-live (TTL) value for resource bundles that are loaded under this ResourceBundle.Control. Positive time-to-live values specify the number of milliseconds a bundle can remain in the cache without being validated against the source data from which it was constructed. The value 0 indicates that a bundle must be validated each time it is retrieved from the cache. @B_java#util#ResourceBundle#Control#TTL_DONT_CACHE_E@ specifies that loaded resource bundles are not put in the cache. @B_java#util#ResourceBundle#Control#TTL_NO_EXPIRATION_CONTROL_E@ specifies that loaded resource bundles are put in the cache with no expiration control. The expiration affects only the bundle loading process by the ResourceBundle.getBundle factory method. That is, if the factory method finds a resource bundle in the cache that has expired, the factory method calls the @B_java#util#ResourceBundle#Control#needsReload_E@ method to determine whether the resource bundle needs to be reloaded. If needsReload returns true, the cached resource bundle instance is removed from the cache. Otherwise, the instance stays in the cache, updated with the new TTL value returned by this method. All cached resource bundles are subject to removal from the cache due to memory constraints of the runtime environment. Returning a large positive value doesn't mean to lock loaded resource bundles in the cache. The default implementation returns @B_java#util#ResourceBundle#Control#TTL_NO_EXPIRATION_CONTROL_E@.", "history": "Added in API level 9", "FullName": "public long getTimeToLive (String baseName, Locale locale)"}, "toResourceName(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the converted resource name"]], "Parameters": [["@B_java#lang#String_E@", "String: the bundle name"], ["@B_java#lang#String_E@", "String: the file type suffix"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if bundleName or suffix is null"]], "SeeAlso": [], "Permissions": [], "Description": "Converts the given bundleName to the form required by the @B_java#lang#ClassLoader#getResource_E@ method by replacing all occurrences of '.' in bundleName with '/' and appending a '.' and the given file suffix. For example, if bundleName is \"foo.bar.MyResources_ja_JP\" and suffix is \"properties\", then \"foo/bar/MyResources_ja_JP.properties\" is returned.", "history": "Added in API level 9", "FullName": "public final String toResourceName (String bundleName, String suffix)"}, "toBundleName(java.lang.String,java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the bundle name for the resource bundle"]], "Parameters": [["@B_java#lang#String_E@", "String: the base name of the resource bundle, a fully qualified class name"], ["@B_java#util#Locale_E@", "Locale: the locale for which a resource bundle should be loaded"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if baseName or locale is null"]], "SeeAlso": [], "Permissions": [], "Description": "Converts the given baseName and locale to the bundle name. This method is called from the default implementation of the @B_java#util#ResourceBundle#Control#newBundle_E@ and @B_java#util#ResourceBundle#Control#needsReload_E@ methods. This implementation returns the following value: language, script, country, and variant are the language, script, country, and variant values of locale, respectively. Final component values that are empty Strings are omitted along with the preceding '_'. When the script is empty, the script value is omitted along with the preceding '_'. If all of the values are empty strings, then baseName is returned. For example, if baseName is \"baseName\" and locale is Locale(\"ja\", \"\", \"XX\"), then \"baseName_ja_ _XX\" is returned. If the given locale is Locale(\"en\"), then \"baseName_en\" is returned. Overriding this method allows applications to use different conventions in the organization and packaging of localized resources.", "history": "Added in API level 9", "FullName": "public String toBundleName (String baseName, Locale locale)"}, "ResourceBundle.Control()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sole constructor. (For invocation by subclass constructors, typically implicit.)", "history": "Added in API level 9", "FullName": "protected ResourceBundle.Control ()"}, "getControl(java.util.List<java.lang.String>)": {"Returns": [["@B_java#util#ResourceBundle#Control_E@", "a ResourceBundle.Control supporting the specified formats"]], "Parameters": [["@B_java#util#List_E@", "List: the formats to be returned by the ResourceBundle.Control.getFormats method"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if formats is null"], ["@B_java#lang#IllegalArgumentException_E@", "if formats is unknown"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a ResourceBundle.Control in which the @B_java#util#ResourceBundle#Control#getFormats_E@ method returns the specified formats. The formats must be equal to one of @B_java#util#ResourceBundle#Control#FORMAT_PROPERTIES_E@, @B_java#util#ResourceBundle#Control#FORMAT_CLASS_E@ or @B_java#util#ResourceBundle#Control#FORMAT_DEFAULT_E@. ResourceBundle.Control instances returned by this method are singletons and thread-safe. Specifying @B_java#util#ResourceBundle#Control#FORMAT_DEFAULT_E@ is equivalent to instantiating the ResourceBundle.Control class, except that this method returns a singleton.", "history": "Added in API level 9", "FullName": "public static final ResourceBundle.Control getControl (List<String> formats)"}, "getCandidateLocales(java.lang.String,java.util.Locale)": {"Returns": [["@B_java#util#List_E@", "a List of candidate Locales for the given locale"]], "Parameters": [["@B_java#lang#String_E@", "String: the base name of the resource bundle, a fully qualified class name"], ["@B_java#util#Locale_E@", "Locale: the locale for which a resource bundle is desired"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if baseName or locale is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a List of Locales as candidate locales for baseName and locale. This method is called by the ResourceBundle.getBundle factory method each time the factory method tries finding a resource bundle for a target Locale. The sequence of the candidate locales also corresponds to the runtime resource lookup path (also known as the If the given locale is equal to Locale.ROOT (the root locale), a List containing only the root Locale must be returned. In this case, the ResourceBundle.getBundle factory method loads only the base bundle as the resulting resource bundle. It is not a requirement to return an immutable (unmodifiable) List. However, the returned List must not be mutated after it has been returned by getCandidateLocales. The default implementation returns a List containing Locales using the rules described below. In the description below, L, S, C and V respectively represent non-empty language, script, country, and variant. For example, [L, C] represents a Locale that has non-empty values only for language and country. The form L(\"xx\") represents the (non-empty) language value is \"xx\". For all cases, Locales whose final component values are empty strings are omitted. The default implementation uses an @B_java#util#ArrayList_E@ that overriding implementations may modify before returning it to the caller. However, a subclass must not modify it after it has been returned by getCandidateLocales. For example, if the given baseName is \"Messages\" and the given locale is Locale(\"ja\", \"\", \"XX\"), then a List of Locales: Locales are found, then the runtime resource lookup path (parent chain) is:", "history": "Added in API level 9", "FullName": "public List<Locale> getCandidateLocales (String baseName, Locale locale)"}, "getFormats(java.lang.String)": {"Returns": [["@B_java#util#List_E@", "a List of Strings containing formats for loading resource bundles."]], "Parameters": [["@B_java#lang#String_E@", "String: the base name of the resource bundle, a fully qualified class name"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if baseName is null"]], "SeeAlso": ["@B_java#util#ResourceBundle#Control_E@"], "Permissions": [], "Description": "Returns a List of Strings containing formats to be used to load resource bundles for the given baseName. The ResourceBundle.getBundle factory method tries to load resource bundles with formats in the order specified by the list. The list returned by this method must have at least one String. The predefined formats are \"java.class\" for class-based resource bundles and \"java.properties\" for \"java.\" are reserved for future extensions and must not be used by application-defined formats. It is not a requirement to return an immutable (unmodifiable) List. However, the returned List must not be mutated after it has been returned by getFormats. The default implementation returns @B_java#util#ResourceBundle#Control#FORMAT_DEFAULT_E@ so that the ResourceBundle.getBundle factory method looks up first class-based resource bundles, then properties-based ones.", "history": "Added in API level 9", "FullName": "public List<String> getFormats (String baseName)"}, "getTimeToLive(java.lang.String, java.util.Locale)": {"Returns": [["long", "the time (0 or a positive millisecond offset from the cached time) to get loaded bundles expired in the cache, @B_java#util#ResourceBundle#Control#TTL_NO_EXPIRATION_CONTROL_E@ to disable the expiration control, or @B_java#util#ResourceBundle#Control#TTL_DONT_CACHE_E@ to disable caching."]], "Parameters": [["@B_java#lang#String_E@", "String: the base name of the resource bundle for which the expiration value is specified."], ["@B_java#util#Locale_E@", "Locale: the locale of the resource bundle for which the expiration value is specified."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if baseName or locale is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the time-to-live (TTL) value for resource bundles that are loaded under this ResourceBundle.Control. Positive time-to-live values specify the number of milliseconds a bundle can remain in the cache without being validated against the source data from which it was constructed. The value 0 indicates that a bundle must be validated each time it is retrieved from the cache. @B_java#util#ResourceBundle#Control#TTL_DONT_CACHE_E@ specifies that loaded resource bundles are not put in the cache. @B_java#util#ResourceBundle#Control#TTL_NO_EXPIRATION_CONTROL_E@ specifies that loaded resource bundles are put in the cache with no expiration control. The expiration affects only the bundle loading process by the ResourceBundle.getBundle factory method. That is, if the factory method finds a resource bundle in the cache that has expired, the factory method calls the @B_java#util#ResourceBundle#Control#needsReload_E@ method to determine whether the resource bundle needs to be reloaded. If needsReload returns true, the cached resource bundle instance is removed from the cache. Otherwise, the instance stays in the cache, updated with the new TTL value returned by this method. All cached resource bundles are subject to removal from the cache due to memory constraints of the runtime environment. Returning a large positive value doesn't mean to lock loaded resource bundles in the cache. The default implementation returns @B_java#util#ResourceBundle#Control#TTL_NO_EXPIRATION_CONTROL_E@.", "history": "added in API level 9", "FullName": "public long getTimeToLive (String baseName, Locale locale)"}, "toBundleName(java.lang.String, java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the bundle name for the resource bundle"]], "Parameters": [["@B_java#lang#String_E@", "String: the base name of the resource bundle, a fully qualified class name"], ["@B_java#util#Locale_E@", "Locale: the locale for which a resource bundle should be loaded"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if baseName or locale is null"]], "SeeAlso": [], "Permissions": [], "Description": "Converts the given baseName and locale to the bundle name. This method is called from the default implementation of the @B_java#util#ResourceBundle#Control#newBundle_E@ and @B_java#util#ResourceBundle#Control#needsReload_E@ methods. This implementation returns the following value: language, script, country, and variant are the language, script, country, and variant values of locale, respectively. Final component values that are empty Strings are omitted along with the preceding '_'. When the script is empty, the script value is omitted along with the preceding '_'. If all of the values are empty strings, then baseName is returned. For example, if baseName is \"baseName\" and locale is Locale(\"ja\", \"\", \"XX\"), then \"baseName_ja_ _XX\" is returned. If the given locale is Locale(\"en\"), then \"baseName_en\" is returned. Overriding this method allows applications to use different conventions in the organization and packaging of localized resources.", "history": "added in API level 9", "FullName": "public String toBundleName (String baseName, Locale locale)"}, "toResourceName(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the converted resource name"]], "Parameters": [["@B_java#lang#String_E@", "String: the bundle name"], ["@B_java#lang#String_E@", "String: the file type suffix"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if bundleName or suffix is null"]], "SeeAlso": [], "Permissions": [], "Description": "Converts the given bundleName to the form required by the @B_java#lang#ClassLoader#getResource_E@ method by replacing all occurrences of '.' in bundleName with '/' and appending a '.' and the given file suffix. For example, if bundleName is \"foo.bar.MyResources_ja_JP\" and suffix is \"properties\", then \"foo/bar/MyResources_ja_JP.properties\" is returned.", "history": "added in API level 9", "FullName": "public final String toResourceName (String bundleName, String suffix)"}, "getFallbackLocale(java.lang.String,java.util.Locale)": {"Returns": [["@B_java#util#Locale_E@", "a Locale for the fallback search, or null if no further fallback search is desired."]], "Parameters": [["@B_java#lang#String_E@", "String: the base name of the resource bundle, a fully qualified class name for which ResourceBundle.getBundle has been unable to find any resource bundles (except for the base bundle)"], ["@B_java#util#Locale_E@", "Locale: the Locale for which ResourceBundle.getBundle has been unable to find any resource bundles (except for the base bundle)"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if baseName or locale is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Locale to be used as a fallback locale for further resource bundle searches by the ResourceBundle.getBundle factory method. This method is called from the factory method every time when no resulting resource bundle has been found for baseName and locale, where locale is either the parameter for ResourceBundle.getBundle or the previous fallback locale returned by this method. The method returns null if no further fallback search is desired. The default implementation returns the locale isn't the default one. Otherwise, null is returned.", "history": "Added in API level 9", "FullName": "public Locale getFallbackLocale (String baseName, Locale locale)"}}, "Inheritance": [], "ClassName": "java.util.ResourceBundle.Control", "ClassDesc": "ResourceBundle.Control defines a set of callback methods that are invoked by the @B_java#util#ResourceBundle#getBundle_E@ factory methods during the bundle loading process. In other words, a ResourceBundle.Control collaborates with the factory methods for loading resource bundles. The default implementation of the callback methods provides the information necessary for the factory methods to perform the In addition to the callback methods, the @B_java#util#ResourceBundle#Control#toBundleName_E@ and @B_java#util#ResourceBundle#Control#toResourceName_E@ methods are defined primarily for convenience in implementing the callback methods. However, the toBundleName method could be overridden to provide different conventions in the organization and packaging of localized resources. The toResourceName method is final to avoid use of wrong resource and class name separators. Two factory methods, @B_java#util#ResourceBundle#Control#getControl_E@ and @B_java#util#ResourceBundle#Control#getNoFallbackControl_E@, provide ResourceBundle.Control instances that implement common variations of the default bundle loading process. The formats returned by the @B_java#util#ResourceBundle#Control#getFormats_E@ method and candidate locales returned by the @B_java#util#ResourceBundle#Control#getCandidateLocales_E@ method must be consistent in all ResourceBundle.getBundle invocations for the same base bundle. Otherwise, the ResourceBundle.getBundle methods may return unintended bundles. For example, if only \"java.class\" is returned by the getFormats method for the first call to ResourceBundle.getBundle and only \"java.properties\" for the second call, then the second call will return the class-based one that has been cached during the first call. A ResourceBundle.Control instance must be thread-safe if it's simultaneously used by multiple threads. ResourceBundle.getBundle does not synchronize to call the ResourceBundle.Control methods. The default implementations of the methods are thread-safe. Applications can specify ResourceBundle.Control instances returned by the getControl factory methods or created from a subclass of ResourceBundle.Control to customize the bundle loading process. The following are examples of changing the default bundle loading process. The following code lets ResourceBundle.getBundle look up only properties-based resources. ResourceBundle.getBundle description, this ResourceBundle.getBundle call loads MyResources_fr_CH.properties whose parent is MyResources_fr.properties whose parent is MyResources.properties. (MyResources_fr_CH.properties is not hidden, but MyResources_fr_CH.class is.) The following is an example of loading XML-based bundles using @B_java#util#Properties#loadFromXML_E@."}