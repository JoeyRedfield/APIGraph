{"Functions": {"AppWidgetProviderInfo()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public AppWidgetProviderInfo ()"}, "getProfile()": {"Returns": [["@B_android#os#UserHandle_E@", "The hosting user profile."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the user profile in which the provider resides.", "history": "Added in API level 21", "FullName": "public final UserHandle getProfile ()"}, "loadLabel(android.content.pm.PackageManager)": {"Returns": [["@B_java#lang#String_E@", "The label for the current locale."]], "Parameters": [["@B_android#content#pm#PackageManager_E@", "PackageManager: Package manager instance for loading resources."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the localized label to display to the user in the AppWidget picker.", "history": "Added in API level 21", "FullName": "public final String loadLabel (PackageManager packageManager)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 3", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "AppWidgetProviderInfo(android.os.Parcel)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unflatten the AppWidgetProviderInfo from a parcel.", "history": "Added in API level 3", "FullName": "public AppWidgetProviderInfo (Parcel in)"}, "loadPreviewImage(android.content.Context, int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The widget preview image or null if preview image is not available."]], "Parameters": [["@B_android#content#Context_E@", "Context: Context for accessing resources.This value must never be null."], ["int", "int: The optional desired density as per @B_android#util#DisplayMetrics#densityDpi_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads a preview of what the AppWidget will look like after it's configured. A client can optionally provide a desired density such as @B_android#util#DisplayMetrics#DENSITY_LOW_E@ @B_android#util#DisplayMetrics#DENSITY_MEDIUM_E@, etc. If no density is provided, the density of the current display will be used. The loaded image corresponds to the android:previewImage attribute in the <receiver> element in the AndroidManifest.xml file.", "history": "added in API level 21", "FullName": "public final Drawable loadPreviewImage (Context context, int density)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 3", "FullName": "public int describeContents ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 3", "FullName": "public String toString ()"}, "loadPreviewImage(android.content.Context,int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The widget preview image or null if preview image is not available."]], "Parameters": [["@B_android#content#Context_E@", "Context: Context for accessing resources. This value must never be null."], ["int", "int: The optional desired density as per @B_android#util#DisplayMetrics#densityDpi_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads a preview of what the AppWidget will look like after it's configured. A client can optionally provide a desired density such as @B_android#util#DisplayMetrics#DENSITY_LOW_E@ @B_android#util#DisplayMetrics#DENSITY_MEDIUM_E@, etc. If no density is provided, the density of the current display will be used. The loaded image corresponds to the android:previewImage attribute in the <receiver> element in the AndroidManifest.xml file.", "history": "Added in API level 21", "FullName": "public final Drawable loadPreviewImage (Context context, int density)"}, "loadIcon(android.content.Context,int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The provider icon."]], "Parameters": [["@B_android#content#Context_E@", "Context: Context for accessing resources. This value must never be null."], ["int", "int: The optional desired density as per @B_android#util#DisplayMetrics#densityDpi_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the icon to display for this AppWidget in the AppWidget picker. If not supplied in the xml, the application icon will be used. A client can optionally provide a desired density such as @B_android#util#DisplayMetrics#DENSITY_LOW_E@ @B_android#util#DisplayMetrics#DENSITY_MEDIUM_E@, etc. If no density is provided, the density of the current display will be used. The loaded icon corresponds to the android:icon attribute in the <receiver> element in the AndroidManifest.xml file.", "history": "Added in API level 21", "FullName": "public final Drawable loadIcon (Context context, int density)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 3", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "clone()": {"Returns": [["@B_android#appwidget#AppWidgetProviderInfo_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 3", "FullName": "public AppWidgetProviderInfo clone ()"}, "loadIcon(android.content.Context, int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The provider icon."]], "Parameters": [["@B_android#content#Context_E@", "Context: Context for accessing resources.This value must never be null."], ["int", "int: The optional desired density as per @B_android#util#DisplayMetrics#densityDpi_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the icon to display for this AppWidget in the AppWidget picker. If not supplied in the xml, the application icon will be used. A client can optionally provide a desired density such as @B_android#util#DisplayMetrics#DENSITY_LOW_E@ @B_android#util#DisplayMetrics#DENSITY_MEDIUM_E@, etc. If no density is provided, the density of the current display will be used. The loaded icon corresponds to the android:icon attribute in the <receiver> element in the AndroidManifest.xml file.", "history": "added in API level 21", "FullName": "public final Drawable loadIcon (Context context, int density)"}}, "Inheritance": [], "ClassName": "android.appwidget.AppWidgetProviderInfo", "ClassDesc": "Describes the meta data for an installed AppWidget provider. The fields in this class correspond to the fields in the <appwidget-provider> xml tag."}