{"Functions": {"close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes this formatter. If the destination implements the @B_java#io#Closeable_E@ interface, its close method will be invoked. Closing a formatter allows it to release resources it may be holding (such as open files). If the formatter is already closed, then invoking this method has no effect. Attempting to invoke any methods except @B_java#util#Formatter#ioException_E@ in this formatter after it has been closed will result in a @B_java#util#FormatterClosedException_E@.", "history": "Added in API level 1", "FullName": "public void close ()"}, "Formatter(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#FileNotFoundException_E@", "If the given file name does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified file name. The charset used is the The locale used is the", "history": "Added in API level 1", "FullName": "public Formatter (String fileName)"}, "format(java.lang.String,java.lang.Object...)": {"Returns": [["@B_java#util#Formatter_E@", "This formatter"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax."], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#util#FormatterClosedException_E@", "If this formatter has been closed by invoking its @B_java#util#Formatter#close_E@ method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a formatted string to this object's destination using the specified format string and arguments. The locale used is the one defined during the construction of this formatter.", "history": "Added in API level 1", "FullName": "public Formatter format (String format, Object... args)"}, "out()": {"Returns": [["@B_java#lang#Appendable_E@", "The destination for the output"]], "Parameters": [], "Throws": [["@B_java#util#FormatterClosedException_E@", "If this formatter has been closed by invoking its @B_java#util#Formatter#close_E@ method"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the destination for the output.", "history": "Added in API level 1", "FullName": "public Appendable out ()"}, "Formatter(java.io.OutputStream, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: The output stream to use as the destination of this formatter. The output will be buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified output stream and charset. The locale used is the", "history": "added in API level 1", "FullName": "public Formatter (OutputStream os, String csn)"}, "Formatter(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given file name does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified file name and charset. The locale used is the", "history": "added in API level 1", "FullName": "public Formatter (String fileName, String csn)"}, "locale()": {"Returns": [["@B_java#util#Locale_E@", "null if no localization is applied, otherwise a locale"]], "Parameters": [], "Throws": [["@B_java#util#FormatterClosedException_E@", "If this formatter has been closed by invoking its @B_java#util#Formatter#close_E@ method"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the locale set by the construction of this formatter. The @B_java#util#Formatter#format_E@ method for this object which has a locale argument does not change this value.", "history": "Added in API level 1", "FullName": "public Locale locale ()"}, "Formatter()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter. The destination of the formatted output is a @B_java#lang#StringBuilder_E@ which may be retrieved by invoking @B_java#util#Formatter#out_E@ and whose current content may be converted into a string by invoking @B_java#util#Formatter#toString_E@. The locale used is the", "history": "Added in API level 1", "FullName": "public Formatter ()"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#util#FormatterClosedException_E@", "If this formatter has been closed by invoking its @B_java#util#Formatter#close_E@ method"]], "SeeAlso": [], "Permissions": [], "Description": "Flushes this formatter. If the destination implements the @B_java#io#Flushable_E@ interface, its flush method will be invoked. Flushing a formatter writes any buffered output in the destination to the underlying stream.", "history": "Added in API level 1", "FullName": "public void flush ()"}, "Formatter(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: The output stream to use as the destination of this formatter. The output will be buffered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified output stream. The charset used is the The locale used is the", "history": "Added in API level 1", "FullName": "public Formatter (OutputStream os)"}, "Formatter(java.io.File, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: The file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified file and charset. The locale used is the", "history": "added in API level 1", "FullName": "public Formatter (File file, String csn)"}, "Formatter(java.io.OutputStream,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: The output stream to use as the destination of this formatter. The output will be buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified output stream and charset. The locale used is the", "history": "Added in API level 1", "FullName": "public Formatter (OutputStream os, String csn)"}, "Formatter(java.io.File)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: The file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#FileNotFoundException_E@", "If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified file. The charset used is the The locale used is the", "history": "Added in API level 1", "FullName": "public Formatter (File file)"}, "Formatter(java.lang.String,java.lang.String,java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"], ["@B_java#util#Locale_E@", "Locale: The locale to apply during formatting. If l is null then no localization is applied."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given file name does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified file name, charset, and locale.", "history": "Added in API level 1", "FullName": "public Formatter (String fileName, String csn, Locale l)"}, "Formatter(java.io.PrintStream)": {"Returns": [], "Parameters": [["@B_java#io#PrintStream_E@", "PrintStream: The stream to use as the destination of this formatter."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified print stream. The locale used is the Characters are written to the given @B_java#io#PrintStream_E@ object and are therefore encoded using that object's charset.", "history": "Added in API level 1", "FullName": "public Formatter (PrintStream ps)"}, "Formatter(java.lang.Appendable,java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#lang#Appendable_E@", "Appendable: Destination for the formatted output. If a is null then a @B_java#lang#StringBuilder_E@ will be created."], ["@B_java#util#Locale_E@", "Locale: The locale to apply during formatting. If l is null then no localization is applied."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified destination and locale.", "history": "Added in API level 1", "FullName": "public Formatter (Appendable a, Locale l)"}, "Formatter(java.lang.Appendable)": {"Returns": [], "Parameters": [["@B_java#lang#Appendable_E@", "Appendable: Destination for the formatted output. If a is null then a @B_java#lang#StringBuilder_E@ will be created."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified destination. The locale used is the", "history": "Added in API level 1", "FullName": "public Formatter (Appendable a)"}, "Formatter(java.io.File,java.lang.String,java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: The file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"], ["@B_java#util#Locale_E@", "Locale: The locale to apply during formatting. If l is null then no localization is applied."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified file, charset, and locale.", "history": "Added in API level 1", "FullName": "public Formatter (File file, String csn, Locale l)"}, "ioException()": {"Returns": [["@B_java#io#IOException_E@", "The last exception thrown by the Appendable or null if no such exception exists."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the IOException last thrown by this formatter's @B_java#lang#Appendable_E@. If the destination's append() method never throws IOException, then this method will always return null.", "history": "Added in API level 1", "FullName": "public IOException ioException ()"}, "format(java.util.Locale,java.lang.String,java.lang.Object...)": {"Returns": [["@B_java#util#Formatter_E@", "This formatter"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale to apply during formatting. If l is null then no localization is applied. This does not change this object's locale that was set during construction."], ["@B_java#lang#String_E@", "String: A format string as described in Format string syntax"], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#util#FormatterClosedException_E@", "If this formatter has been closed by invoking its @B_java#util#Formatter#close_E@ method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a formatted string to this object's destination using the specified locale, format string, and arguments.", "history": "Added in API level 1", "FullName": "public Formatter format (Locale l, String format, Object... args)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "The result of invoking toString() on the destination for the output"]], "Parameters": [], "Throws": [["@B_java#util#FormatterClosedException_E@", "If this formatter has been closed by invoking its @B_java#util#Formatter#close_E@ method"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of invoking toString() on the destination for the output. For example, the following code formats text into a @B_java#lang#StringBuilder_E@ then retrieves the resultant string: An invocation of this method behaves in exactly the same way as the invocation Depending on the specification of toString for the @B_java#lang#Appendable_E@, the returned string may or may not contain the characters written to the destination. For instance, buffers typically return their contents in toString(), but streams cannot since the data is discarded.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "Formatter(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given file name does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified file name and charset. The locale used is the", "history": "Added in API level 1", "FullName": "public Formatter (String fileName, String csn)"}, "format(java.lang.String, java.lang.Object...)": {"Returns": [["@B_java#util#Formatter_E@", "This formatter"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax."], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#util#FormatterClosedException_E@", "If this formatter has been closed by invoking its @B_java#util#Formatter#close_E@ method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a formatted string to this object's destination using the specified format string and arguments. The locale used is the one defined during the construction of this formatter.", "history": "added in API level 1", "FullName": "public Formatter format (String format, Object... args)"}, "Formatter(java.io.OutputStream,java.lang.String,java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: The output stream to use as the destination of this formatter. The output will be buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"], ["@B_java#util#Locale_E@", "Locale: The locale to apply during formatting. If l is null then no localization is applied."]], "Throws": [["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified output stream, charset, and locale.", "history": "Added in API level 1", "FullName": "public Formatter (OutputStream os, String csn, Locale l)"}, "Formatter(java.lang.Appendable, java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#lang#Appendable_E@", "Appendable: Destination for the formatted output. If a is null then a @B_java#lang#StringBuilder_E@ will be created."], ["@B_java#util#Locale_E@", "Locale: The locale to apply during formatting. If l is null then no localization is applied."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified destination and locale.", "history": "added in API level 1", "FullName": "public Formatter (Appendable a, Locale l)"}, "Formatter(java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale to apply during formatting. If l is null then no localization is applied."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified locale. The destination of the formatted output is a @B_java#lang#StringBuilder_E@ which may be retrieved by invoking @B_java#util#Formatter#out_E@ and whose current content may be converted into a string by invoking @B_java#util#Formatter#toString_E@.", "history": "Added in API level 1", "FullName": "public Formatter (Locale l)"}, "Formatter(java.io.File,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: The file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new formatter with the specified file and charset. The locale used is the", "history": "Added in API level 1", "FullName": "public Formatter (File file, String csn)"}}, "Inheritance": [], "ClassName": "java.util.Formatter", "ClassDesc": "An interpreter for printf-style format strings. This class provides support for layout justification and alignment, common formats for numeric, string, and date/time data, and locale-specific output. Common Java types such as byte, @B_java#math#BigDecimal_E@, and @B_java#util#Calendar_E@ are supported. Limited formatting customization for arbitrary user types is provided through the @B_java#util#Formattable_E@ interface. Formatters are not necessarily safe for multithreaded access. Thread safety is optional and is the responsibility of users of methods in this class. Formatted printing for the Java language is heavily inspired by C's printf. Although the format strings are similar to C, some customizations have been made to accommodate the Java language and exploit some of its features. Also, Java formatting is more strict than C's; for example, if a conversion is incompatible with a flag, an exception will be thrown. In C inapplicable flags are silently ignored. The format strings are thus intended to be recognizable to C programmers but not necessarily completely compatible with those in C. Examples of expected usage: Convenience methods for common formatting requests exist as illustrated by the following invocations: Like C's sprintf(3), Strings may be formatted using the static method @B_java#lang#String#format_E@: This specification is divided into two sections. The first section, This section is intended to provide a brief overview of formatting concepts. For precise behavioral details, refer to the Every method which produces formatted output requires a @B_java#lang#String_E@ which may contain fixed text and one or more embedded format method. It contains three format specifiers \"%1$tm\", \"%1$te\", and \"%1$tY\" which indicate how the arguments should be processed and where they should be inserted in the text. The remaining portions of the format string are fixed text including \"Dukes Birthday: \" and any other spaces or punctuation. The argument list consists of all arguments passed to the method after the format string. In the above example, the argument list is of size one and consists of the @B_java#util#Calendar_E@ object c. The format specifiers for general, character, and numeric types have the following syntax: The optional 1$\", the second by \"2$\", etc. The optional The optional The optional The required The format specifiers for types which are used to represents dates and times have the following syntax: The optional The required 't' or 'T'. The second character indicates the format to be used. These characters are similar to but not completely identical to those defined by GNU date and POSIX strftime(3c). The format specifiers which do not correspond to arguments have the following syntax: The optional The required Conversions are divided into the following categories: The following table summarizes the supported conversions. Conversions denoted by an upper-case character (i.e. 'B', 'H', 'S', 'C', 'X', 'E', 'G', 'A', and 'T') are the same as those for the corresponding lower-case conversion characters except that the result is converted to upper case according to the rules of the prevailing @B_java#util#Locale_E@. The result is equivalent to the following invocation of @B_java#lang#String#toUpperCase_E@ Any characters not explicitly defined as conversions are illegal and are reserved for future extensions. The following date and time conversion suffix characters are defined for the 't' and 'T' conversions. The types are similar to but not completely identical to those defined by GNU date and POSIX strftime(3c). Additional conversion types are provided to access Java-specific functionality (e.g. 'L' for milliseconds within the second). The following conversion characters are used for formatting times: The following conversion characters are used for formatting dates: The following conversion characters are used for formatting common date/time compositions. Any characters not explicitly defined as date/time conversion suffixes are illegal and are reserved for future extensions. The following table summarizes the supported flags. @B_java#util#Formattable_E@. 'd' conversion only. 'o', 'x', and 'X' conversions only. 'd', 'o', 'x', and 'X' conversions applied to @B_java#math#BigInteger_E@ or 'd' applied to byte, @B_java#lang#Byte_E@, short, @B_java#lang#Short_E@, int and @B_java#lang#Integer_E@, long, and @B_java#lang#Long_E@. 'e', 'E', 'f', 'g', and 'G' conversions only. Any characters not explicitly defined as flags are illegal and are reserved for future extensions. The width is the minimum number of characters to be written to the output. For the line separator conversion, width is not applicable; if it is provided, an exception will be thrown. For general argument types, the precision is the maximum number of characters to be written to the output. For the floating-point conversions 'a', 'A', 'e', 'E', and 'f' the precision is the number of digits after the radix point. If the conversion is 'g' or 'G', then the precision is the total number of digits in the resulting magnitude after rounding. For character, integral, and date/time argument types and the percent and line separator conversions, the precision is not applicable; if a precision is provided, an exception will be thrown. The argument index is a decimal integer indicating the position of the argument in the argument list. The first argument is referenced by \"1$\", the second by \"2$\", etc. Another way to reference arguments by position is to use the '<' ( This section is intended to provide behavioral details for formatting, including conditions and exceptions, supported data types, localization, and interactions between flags, conversions, and data types. For an overview of formatting concepts, refer to the Any characters not explicitly defined as conversions, date/time conversion suffixes, or flags are illegal and are reserved for future extensions. Use of such a character in a format string will cause an @B_java#util#UnknownFormatConversionException_E@ or @B_java#util#UnknownFormatFlagsException_E@ to be thrown. If the format specifier contains a width or precision with an invalid value or which is otherwise unsupported, then a @B_java#util#IllegalFormatWidthException_E@ or @B_java#util#IllegalFormatPrecisionException_E@ respectively will be thrown. If a format specifier contains a conversion character that is not applicable to the corresponding argument, then an @B_java#util#IllegalFormatConversionException_E@ will be thrown. All specified exceptions may be thrown by any of the format methods of Formatter as well as by any format convenience methods such as @B_java#lang#String#format_E@ and @B_java#io#PrintStream#printf_E@. Conversions denoted by an upper-case character (i.e. 'B', 'H', 'S', 'C', 'X', 'E', 'G', 'A', and 'T') are the same as those for the corresponding lower-case conversion characters except that the result is converted to upper case according to the rules of the prevailing @B_java#util#Locale_E@. The result is equivalent to the following invocation of @B_java#lang#String#toUpperCase_E@ The following general conversions may be applied to any argument type: The following The '-' flag is given, then the padding will be on the right. If the width is not specified then there is no minimum. The precision is the maximum number of characters to be written to the output. The precision is applied before the width, thus the output will be truncated to precision characters even if the width is greater than the precision. If the precision is not specified then there is no explicit limit on the number of characters. char and @B_java#lang#Character_E@. It may also be applied to the types byte, @B_java#lang#Byte_E@, short, and @B_java#lang#Short_E@, int and @B_java#lang#Integer_E@ when @B_java#lang#Character#isValidCodePoint_E@ returns true. If it returns false then an @B_java#util#IllegalFormatCodePointException_E@ will be thrown. The '-' flag defined for '#' flag is given, then a @B_java#util#FormatFlagsConversionMismatchException_E@ will be thrown. The width is defined as for The precision is not applicable. If the precision is specified then an @B_java#util#IllegalFormatPrecisionException_E@ will be thrown. Numeric conversions are divided into the following categories: Numeric types will be formatted according to the following algorithm: After digits are obtained for the integer part, fractional part, and exponent (as appropriate for the data type), the following transformation is applied: If the value is NaN or positive infinity the literal strings \"NaN\" or \"Infinity\" respectively, will be output. If the value is negative infinity, then the output will be \"(Infinity)\" if the '(' flag is given otherwise the output will be \"-Infinity\". These values are not localized. The following conversions may be applied to byte, @B_java#lang#Byte_E@, short, @B_java#lang#Short_E@, int and @B_java#lang#Integer_E@, long, and @B_java#lang#Long_E@. If the conversion is 'o', 'x', or 'X' and both the '#' and the '0' flags are given, then result will contain the radix indicator ('0' for octal and \"0x\" or \"0X\" for hexadecimal), some number of zeros (based on the width), and the value. If the '-' flag is not given, then the space padding will occur before the sign. The following If no The output is right-justified within the width Negative numbers begin with a '-' ( Positive numbers and zero do not include a sign or extra leading space No grouping separators are included The '-' flag is given then the padding will be on the right. If width is not specified then there is no minimum. The precision is not applicable. If precision is specified then an @B_java#util#IllegalFormatPrecisionException_E@ will be thrown. The following conversions may be applied to @B_java#math#BigInteger_E@. If the conversion is 'o', 'x', or 'X' and both the '#' and the '0' flags are given, then result will contain the base indicator ('0' for octal and \"0x\" or \"0X\" for hexadecimal), some number of zeros (based on the width), and the value. If the '0' flag is given and the value is negative, then the zero padding will occur after the sign. If the '-' flag is not given, then the space padding will occur before the sign. All The specification of The precision is not applicable. If precision is specified then an @B_java#util#IllegalFormatPrecisionException_E@ will be thrown. The following conversions may be applied to float, @B_java#lang#Float_E@, double and @B_java#lang#Double_E@. All If the '#' flag is given, then the decimal separator will always be present. If no The output is right-justified within the width Negative numbers begin with a '-' Positive numbers and positive zero do not include a sign or extra leading space No grouping separators are included The decimal separator will only appear if a digit follows it The '-' flag is given then the padding will be on the right. If width is not specified then there is no minimum. If the 'e', 'E' or 'f', then the precision is the number of digits after the decimal separator. If the precision is not specified, then it is assumed to be 6. If the conversion is 'g' or 'G', then the precision is the total number of significant digits in the resulting magnitude after rounding. If the precision is not specified, then the default value is 6. If the precision is 0, then it is taken to be 1. If the conversion is 'a' or 'A', then the precision is the number of hexadecimal digits after the radix point. If the precision is not provided, then all of the digits as returned by @B_java#lang#Double#toHexString_E@ will be output. The following conversions may be applied @B_java#math#BigDecimal_E@. All If the '#' flag is given, then the decimal separator will always be present. The The specification of This conversion may be applied to long, @B_java#lang#Long_E@, @B_java#util#Calendar_E@, @B_java#util#Date_E@ and @B_java#time#temporal#TemporalAccessor_E@ The following date and time conversion character suffixes are defined for the 't' and 'T' conversions. The types are similar to but not completely identical to those defined by GNU date and POSIX strftime(3c). Additional conversion types are provided to access Java-specific functionality (e.g. 'L' for milliseconds within the second). The following conversion characters are used for formatting times: The following conversion characters are used for formatting dates: The following conversion characters are used for formatting common date/time compositions. The '-' flag defined for '#' flag is given, then a @B_java#util#FormatFlagsConversionMismatchException_E@ will be thrown. The width is the minimum number of characters to be written to the output. If the length of the converted value is less than the width then the output will be padded by spaces ('-' flag is given then the padding will be on the right. If width is not specified then there is no minimum. The precision is not applicable. If the precision is specified then an @B_java#util#IllegalFormatPrecisionException_E@ will be thrown. The conversion does not correspond to any argument. The conversion does not correspond to any argument. Flags, width, and precision are not applicable. If any are provided an @B_java#util#IllegalFormatFlagsException_E@, @B_java#util#IllegalFormatWidthException_E@, and @B_java#util#IllegalFormatPrecisionException_E@, respectively will be thrown. Format specifiers can reference arguments in three ways: 1$\", the second by \"2$\", etc. An argument may be referenced more than once. For example: '<' (@B_java#util#MissingFormatArgumentException_E@ is thrown. '<' flag. Each format specifier which uses ordinary indexing is assigned a sequential implicit index into argument list which is independent of the indices used by explicit or relative indexing. It is possible to have a format string which uses all forms of indexing, for example: The maximum number of arguments is limited by the maximum dimension of a Java array as defined by @B_java#util#MissingFormatArgumentException_E@ is thrown. If there are more arguments than format specifiers, the extra arguments are ignored. Unless otherwise specified, passing a null argument to any method or constructor in this class will cause a @B_java#lang#NullPointerException_E@ to be thrown."}