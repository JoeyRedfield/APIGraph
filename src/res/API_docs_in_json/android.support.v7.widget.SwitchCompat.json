{"Functions": {"toggle()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the checked state of the view to the inverse of its current state", "history": "", "FullName": "void toggle ()"}, "setTextOn(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text displayed when the button is in the checked state.", "history": "added in version 24.2.0", "FullName": "void setTextOn (CharSequence textOn)"}, "getSwitchPadding()": {"Returns": [["int", "Amount of padding in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the amount of horizontal padding between the switch and the associated text.", "history": "added in version 24.2.0", "FullName": "int getSwitchPadding ()"}, "SwitchCompat(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context that will determine this widget's theming."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a new Switch with default styling.", "history": "added in version 24.2.0", "FullName": "SwitchCompat (Context context)"}, "setSplitTrack(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether the track should be split by the thumb"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies whether the track should be split by the thumb. When true, the thumb's optical bounds will be clipped out of the track drawable, then the thumb will be drawn into the resulting gap.", "history": "added in version 24.2.0", "FullName": "void setSplitTrack (boolean splitTrack)"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas to which the View is rendered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called. When implementing a view, implement @B_android#view#View#onDraw_E@ instead of overriding this method. If you do need to override this method, call the superclass version.", "history": "", "FullName": "void draw (Canvas c)"}, "setTrackResource(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a track drawable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the drawable used for the track that the switch slides within.", "history": "added in version 24.2.0", "FullName": "void setTrackResource (int resId)"}, "getThumbDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Thumb drawable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the drawable used for the switch \"thumb\" - the piece that the user can physically touch and drag along the track.", "history": "added in version 24.2.0", "FullName": "Drawable getThumbDrawable ()"}, "getThumbTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to the thumb drawable"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#SwitchCompat#setThumbTintList_E@"], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "ColorStateList getThumbTintList ()"}, "getTextOff()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the text displayed when the button is not in the checked state.", "history": "added in version 24.2.0", "FullName": "CharSequence getTextOff ()"}, "setThumbResource(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a thumb drawable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the drawable used for the switch \"thumb\" - the piece that the user can physically touch and drag along the track.", "history": "added in version 24.2.0", "FullName": "void setThumbResource (int resId)"}, "getTextOn()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the text displayed when the button is in the checked state.", "history": "added in version 24.2.0", "FullName": "CharSequence getTextOn ()"}, "setSwitchTypeface(android.graphics.Typeface, int)": {"Returns": [], "Parameters": [["@B_android#graphics#Typeface_E@", "Typeface no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the typeface and style in which the text should be displayed on the switch, and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified.", "history": "added in version 24.2.0", "FullName": "void setSwitchTypeface (Typeface tf, int style)"}, "setThumbTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the blending mode used to apply the tint, may be null to clear tint"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#SwitchCompat#getThumbTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#support#v7#widget#SwitchCompat#setThumbTintList_E@} to the thumb drawable. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "added in version 24.2.0", "FullName": "void setThumbTintMode (PorterDuff.Mode tintMode)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "", "FullName": "void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "getThumbTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to the thumb drawable"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#SwitchCompat#setThumbTintMode_E@"], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "PorterDuff.Mode getThumbTintMode ()"}, "getShowText()": {"Returns": [["boolean", "whether the on/off text should be displayed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "boolean getShowText ()"}, "setThumbTextPadding(int)": {"Returns": [], "Parameters": [["int", "int: Horizontal padding for switch thumb text in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the horizontal padding around the text drawn on the switch itself.", "history": "added in version 24.2.0", "FullName": "void setThumbTextPadding (int pixels)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in version 24.2.0", "FullName": "void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "getCompoundPaddingLeft()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the left padding of the view, plus space for the left Drawable if any.", "history": "", "FullName": "int getCompoundPaddingLeft ()"}, "setChecked(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to check the button, false to uncheck it"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the checked state of this button.", "history": "", "FullName": "void setChecked (boolean checked)"}, "getTrackDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Track drawable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the drawable used for the track that the switch slides within.", "history": "added in version 24.2.0", "FullName": "Drawable getTrackDrawable ()"}, "getThumbTextPadding()": {"Returns": [["int", "Horizontal padding for switch thumb text in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the horizontal padding around the text drawn on the switch itself.", "history": "added in version 24.2.0", "FullName": "int getThumbTextPadding ()"}, "verifyDrawable(android.graphics.drawable.Drawable)": {"Returns": [["boolean", "boolean If true than the Drawable is being displayed in the view; else false and it is not allowed to animate."]], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: The Drawable to verify. Return true if it is one you are displaying, else return the result of calling through to the super class."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. This allows animations for those drawables to be scheduled. Be sure to call through to the super class when overriding this function.", "history": "", "FullName": "boolean verifyDrawable (Drawable who)"}, "getCompoundPaddingRight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the right padding of the view, plus space for the right Drawable if any.", "history": "", "FullName": "int getCompoundPaddingRight ()"}, "getTrackTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to the track drawable"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#SwitchCompat#setTrackTintMode_E@"], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "PorterDuff.Mode getTrackTintMode ()"}, "setShowText(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to display on/off text"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the on/off text should be displayed.", "history": "added in version 24.2.0", "FullName": "void setShowText (boolean showText)"}, "jumpDrawablesToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#graphics#drawable#Drawable#jumpToCurrentState_E@ on all Drawable objects associated with this view. Also calls @B_android#animation#StateListAnimator#jumpToCurrentState_E@ if there is a StateListAnimator attached to this view.", "history": "", "FullName": "void jumpDrawablesToCurrentState ()"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function.", "history": "", "FullName": "void drawableStateChanged ()"}, "getSplitTrack()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the track should be split by the thumb.", "history": "added in version 24.2.0", "FullName": "boolean getSplitTrack ()"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "", "FullName": "void onDraw (Canvas canvas)"}, "setSwitchMinWidth(int)": {"Returns": [], "Parameters": [["int", "int: Minimum width of the switch in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the minimum width of the switch in pixels. The switch's width will be the maximum of this value and its measured width as determined by the switch drawables and text used.", "history": "added in version 24.2.0", "FullName": "void setSwitchMinWidth (int pixels)"}, "setTrackTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the blending mode used to apply the tint, may be null to clear tint"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#SwitchCompat#getTrackTintMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#support#v7#widget#SwitchCompat#setTrackTintList_E@} to the track drawable. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "added in version 24.2.0", "FullName": "void setTrackTintMode (PorterDuff.Mode tintMode)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "", "FullName": "boolean onTouchEvent (MotionEvent ev)"}, "setTextOff(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text displayed when the button is not in the checked state.", "history": "added in version 24.2.0", "FullName": "void setTextOff (CharSequence textOff)"}, "getTrackTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to the track drawable"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#SwitchCompat#setTrackTintList_E@"], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "ColorStateList getTrackTintList ()"}, "setSwitchTypeface(android.graphics.Typeface)": {"Returns": [], "Parameters": [["@B_android#graphics#Typeface_E@", "Typeface no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the typeface in which the text should be displayed on the switch. Note that not all Typeface families actually have bold and italic variants, so you may need to use @B_android#support#v7#widget#SwitchCompat#setSwitchTypeface_E@ to get the appearance that you actually want.", "history": "added in version 24.2.0", "FullName": "void setSwitchTypeface (Typeface typeface)"}, "onCreateDrawableState(int)": {"Returns": [["int[]", "Returns an array holding the current @B_android#graphics#drawable#Drawable_E@ state of the view."]], "Parameters": [["int", "int: if non-zero, this is the number of extra entries you would like in the returned array in which you can place your own states."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generate the new @B_android#graphics#drawable#Drawable_E@ state for this view. This is called by the view system when the cached Drawable state is determined to be invalid. To retrieve the current state, you should use @B_android#view#View#getDrawableState_E@.", "history": "", "FullName": "int[] onCreateDrawableState (int extraSpace)"}, "getSwitchMinWidth()": {"Returns": [["int", "Minimum width of the switch in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the minimum width of the switch in pixels. The switch's width will be the maximum of this value and its measured width as determined by the switch drawables and text used.", "history": "added in version 24.2.0", "FullName": "int getSwitchMinWidth ()"}, "setSwitchPadding(int)": {"Returns": [], "Parameters": [["int", "int: Amount of padding in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the amount of horizontal padding between the switch and the associated text.", "history": "added in version 24.2.0", "FullName": "void setSwitchPadding (int pixels)"}, "drawableHotspotChanged(float, float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function.", "history": "", "FullName": "void drawableHotspotChanged (float x, float y)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#widget#TextView_E@", "https:##developer#android#com@B_android#widget#Button_E@", "https:##developer#android#com@B_android#widget#CompoundButton_E@"], "ClassName": "android.support.v7.widget.SwitchCompat", "ClassDesc": "SwitchCompat is a version of the Switch widget which on devices back to API v7. It does not make any attempt to use the platform provided widget on those devices which it is available normally. A Switch is a two-state toggle switch widget that can select between two options. The user may drag the \"thumb\" back and forth to choose the selected option, or simply tap to toggle as if it were a checkbox. The https:##developer#android#com@B_android#widget#TextView#setText_E@ property controls the text displayed in the label for the switch, whereas the @B_android#support#v7#widget#SwitchCompat#setTextOff_E@ and @B_android#support#v7#widget#SwitchCompat#setTextOn_E@ text controls the text on the thumb. Similarly, the https:##developer#android#com@B_android#widget#TextView#setTextAppearance_E@ and the related setTypeface() methods control the typeface and style of label text, whereas the @B_android#support#v7#widget#SwitchCompat#setSwitchTextAppearance_E@ and the related setSwitchTypeface() methods control that of the thumb. See the"}