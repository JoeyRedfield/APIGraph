{"Functions": {"isInPictureInPictureMode()": {"Returns": [["boolean", "true if the window is in picture-in-picture mode, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if the window is in picture-in-picture mode.", "history": "Added in API level 26", "FullName": "public boolean isInPictureInPictureMode ()"}, "isAccessibilityFocused()": {"Returns": [["boolean", "Whether has accessibility focus."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if this window has accessibility focus.", "history": "Added in API level 21", "FullName": "public boolean isAccessibilityFocused ()"}, "recycle()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the info is already recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Return an instance back to be reused.", "history": "Added in API level 21", "FullName": "public void recycle ()"}, "getLayer()": {"Returns": [["int", "The window layer."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the layer which determines the Z-order of the window. Windows with greater layer appear on top of windows with lesser layer.", "history": "Added in API level 21", "FullName": "public int getLayer ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 21", "FullName": "public int describeContents ()"}, "isFocused()": {"Returns": [["boolean", "Whether has input focus."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if this window has input focus.", "history": "Added in API level 21", "FullName": "public boolean isFocused ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 21", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 21", "FullName": "public boolean equals (Object obj)"}, "getId()": {"Returns": [["int", "windowId The window id."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the unique window id.", "history": "Added in API level 21", "FullName": "public int getId ()"}, "getChildCount()": {"Returns": [["int", "The child count."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the number of child windows.", "history": "Added in API level 21", "FullName": "public int getChildCount ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}, "getBoundsInScreen(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The out window bounds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the bounds of this window in the screen.", "history": "Added in API level 21", "FullName": "public void getBoundsInScreen (Rect outBounds)"}, "obtain(android.view.accessibility.AccessibilityWindowInfo)": {"Returns": [["@B_android#view#accessibility#AccessibilityWindowInfo_E@", "An instance."]], "Parameters": [["@B_android#view#accessibility#AccessibilityWindowInfo_E@", "AccessibilityWindowInfo: The other info."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a cached instance if such is available or a new one is created. The returned instance is initialized from the given info.", "history": "Added in API level 21", "FullName": "public static AccessibilityWindowInfo obtain (AccessibilityWindowInfo info)"}, "getRoot()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The root node."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the root node in the window's hierarchy.", "history": "Added in API level 21", "FullName": "public AccessibilityNodeInfo getRoot ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 21", "FullName": "public String toString ()"}, "getTitle()": {"Returns": [["@B_java#lang#CharSequence_E@", "The title of the window, or null if none is available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the title of the window.", "history": "Added in API level 24", "FullName": "public CharSequence getTitle ()"}, "getAnchor()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The anchor node, or null if none exists."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the node that anchors this window to another.", "history": "Added in API level 24", "FullName": "public AccessibilityNodeInfo getAnchor ()"}, "getChild(int)": {"Returns": [["@B_android#view#accessibility#AccessibilityWindowInfo_E@", "The child."]], "Parameters": [["int", "int: The index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the child window at a given index.", "history": "Added in API level 21", "FullName": "public AccessibilityWindowInfo getChild (int index)"}, "getType()": {"Returns": [["int", "The type."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityWindowInfo_E@"], "Permissions": [], "Description": "Gets the type of the window.", "history": "Added in API level 21", "FullName": "public int getType ()"}, "obtain()": {"Returns": [["@B_android#view#accessibility#AccessibilityWindowInfo_E@", "An instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a cached instance if such is available or a new one is created.", "history": "Added in API level 21", "FullName": "public static AccessibilityWindowInfo obtain ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 21", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "getParent()": {"Returns": [["@B_android#view#accessibility#AccessibilityWindowInfo_E@", "The parent window, or null if none exists."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the parent window.", "history": "Added in API level 21", "FullName": "public AccessibilityWindowInfo getParent ()"}, "isActive()": {"Returns": [["boolean", "Whether this is the active window."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if this window is active. An active window is the one the user is currently touching or the window has input focus and the user is not touching any window.", "history": "Added in API level 21", "FullName": "public boolean isActive ()"}}, "Inheritance": [], "ClassName": "android.view.accessibility.AccessibilityWindowInfo", "ClassDesc": "This class represents a state snapshot of a window for accessibility purposes. The screen content contains one or more windows where some windows can be descendants of other windows, which is the windows are hierarchically ordered. Note that there is no root window. Hence, the screen content can be seen as a collection of window trees."}