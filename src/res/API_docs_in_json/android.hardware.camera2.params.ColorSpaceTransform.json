{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "string representation of color space transform"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the color space transform as a string representation. Example: \"ColorSpaceTransform([1/1, 0/1, 0/1], [0/1, 1/1, 0/1], [0/1, 0/1, 1/1])\" is an identity transform. Elements are printed in row major order.", "history": "Added in API level 21", "FullName": "public String toString ()"}, "copyElements(android.util.Rational[], int)": {"Returns": [], "Parameters": [["@B_android#util#Rational_E@", "Rational: an array big enough to hold at least 9 elements after the offset"], ["int", "int: a non-negative offset into the array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If destination was null"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "If there's not enough room to write the elements at the specified destination and offset."]], "SeeAlso": [], "Permissions": [], "Description": "Copy the @B_android#util#Rational_E@ elements in row-major order from this matrix into the destination.", "history": "added in API level 21", "FullName": "public void copyElements (Rational[] destination, int offset)"}, "ColorSpaceTransform(android.util.Rational[])": {"Returns": [], "Parameters": [["@B_android#util#Rational_E@", "Rational: An array of 9 elements"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the count of elements is not 9"], ["@B_java#lang#NullPointerException_E@", "if elements or any sub-element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Create a new immutable @B_android#hardware#camera2#params#ColorSpaceTransform_E@ instance from a @B_android#util#Rational_E@ array. The elements must be stored in a row-major order.", "history": "Added in API level 21", "FullName": "public ColorSpaceTransform (Rational[] elements)"}, "getElement(int, int)": {"Returns": [["@B_android#util#Rational_E@", "element (non-null)"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if column or row was out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Get an element of this matrix by its row and column. The rows must be within the range [0, 3), and the column must be within the range [0, 3).", "history": "added in API level 21", "FullName": "public Rational getElement (int column, int row)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects were equal, false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if this @B_android#hardware#camera2#params#ColorSpaceTransform_E@ is equal to another @B_android#hardware#camera2#params#ColorSpaceTransform_E@. Two color space transforms are equal if and only if all of their elements are @B_java#lang#Object#equals_E@.", "history": "Added in API level 21", "FullName": "public boolean equals (Object obj)"}, "getElement(int,int)": {"Returns": [["@B_android#util#Rational_E@", "element (non-null)"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if column or row was out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Get an element of this matrix by its row and column. The rows must be within the range [0, 3), and the column must be within the range [0, 3).", "history": "Added in API level 21", "FullName": "public Rational getElement (int column, int row)"}, "ColorSpaceTransform(int[])": {"Returns": [], "Parameters": [["int[]", "int: An array of 18 elements"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the count of elements is not 18"], ["@B_java#lang#NullPointerException_E@", "if elements is null"]], "SeeAlso": [], "Permissions": [], "Description": "Create a new immutable @B_android#hardware#camera2#params#ColorSpaceTransform_E@ instance from an int array. The elements must be stored in a row-major order. Each rational is stored contiguously as a (numerator, denominator) pair. In particular:Nij and Dij is the numerator and denominator for row i and column j.", "history": "Added in API level 21", "FullName": "public ColorSpaceTransform (int[] elements)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}, "copyElements(int[], int)": {"Returns": [], "Parameters": [["int[]", "int: an array big enough to hold at least 18 elements after the offset"], ["int", "int: a non-negative offset into the array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If destination was null"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "If there's not enough room to write the elements at the specified destination and offset."]], "SeeAlso": ["@B_android#hardware#camera2#params#ColorSpaceTransform#ColorSpaceTransform_E@"], "Permissions": [], "Description": "Copy the @B_android#util#Rational_E@ elements in row-major order from this matrix into the destination. Each element is stored as a contiguous rational packed as a (numerator, denominator) pair of ints, identical to the @B_android#hardware#camera2#params#ColorSpaceTransform#ColorSpaceTransform_E@.", "history": "added in API level 21", "FullName": "public void copyElements (int[] destination, int offset)"}, "copyElements(int[],int)": {"Returns": [], "Parameters": [["int[]", "int: an array big enough to hold at least 18 elements after the offset"], ["int", "int: a non-negative offset into the array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If destination was null"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "If there's not enough room to write the elements at the specified destination and offset."]], "SeeAlso": ["@B_android#hardware#camera2#params#ColorSpaceTransform#ColorSpaceTransform_E@"], "Permissions": [], "Description": "Copy the @B_android#util#Rational_E@ elements in row-major order from this matrix into the destination. Each element is stored as a contiguous rational packed as a (numerator, denominator) pair of ints, identical to the @B_android#hardware#camera2#params#ColorSpaceTransform#ColorSpaceTransform_E@.", "history": "Added in API level 21", "FullName": "public void copyElements (int[] destination, int offset)"}, "copyElements(android.util.Rational[],int)": {"Returns": [], "Parameters": [["@B_android#util#Rational_E@", "Rational: an array big enough to hold at least 9 elements after the offset"], ["int", "int: a non-negative offset into the array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If destination was null"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "If there's not enough room to write the elements at the specified destination and offset."]], "SeeAlso": [], "Permissions": [], "Description": "Copy the @B_android#util#Rational_E@ elements in row-major order from this matrix into the destination.", "history": "Added in API level 21", "FullName": "public void copyElements (Rational[] destination, int offset)"}}, "Inheritance": [], "ClassName": "android.hardware.camera2.params.ColorSpaceTransform", "ClassDesc": "Immutable class for describing a 3x3 matrix of @B_android#util#Rational_E@ values in row-major order. This matrix maps a transform from one color space to another. For the particular color space source and target, see the appropriate camera metadata documentation for the key that provides this value."}