{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "string representation of @B_android#hardware#camera2#params#TonemapCurve_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the TonemapCurve as a string representation. \"TonemapCurve{R:[(%f, %f), (%f, %f) ... (%f, %f)], G:[(%f, %f), (%f, %f) ... (%f, %f)], B:[(%f, %f), (%f, %f) ... (%f, %f)]}\", where each (%f, %f) respectively represents one point of the corresponding tonemap curve.", "history": "Added in API level 21", "FullName": "public String toString ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects were equal, false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if this TonemapCurve is equal to another TonemapCurve. Two matrices are equal if and only if all of their elements are @B_java#lang#Object#equals_E@.", "history": "Added in API level 21", "FullName": "public boolean equals (Object obj)"}, "getPoint(int, int)": {"Returns": [["@B_android#graphics#PointF_E@", "the (Pin, Pout) pair mapping the tone for that index"]], "Parameters": [["int", "int: @B_android#hardware#camera2#params#TonemapCurve#CHANNEL_RED_E@, @B_android#hardware#camera2#params#TonemapCurve#CHANNEL_GREEN_E@, or @B_android#hardware#camera2#params#TonemapCurve#CHANNEL_BLUE_E@"], ["int", "int: at least 0 but no greater than getPointCount(colorChannel)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if colorChannel or index was out of range"]], "SeeAlso": ["@B_android#hardware#camera2#params#TonemapCurve_E@"], "Permissions": [], "Description": "Get the point for a color channel at a specified index. The index must be at least 0 but no greater than @B_android#hardware#camera2#params#TonemapCurve#getPointCount_E@ for that colorChannel. All returned coordinates in the point are between the range of [@B_android#hardware#camera2#params#TonemapCurve#LEVEL_BLACK_E@, @B_android#hardware#camera2#params#TonemapCurve#LEVEL_WHITE_E@].", "history": "added in API level 21", "FullName": "public PointF getPoint (int colorChannel, int index)"}, "getPointCount(int)": {"Returns": [["int", "number of points stored in this tonemap for that color's curve (>= 0)"]], "Parameters": [["int", "int: one of @B_android#hardware#camera2#params#TonemapCurve#CHANNEL_RED_E@, @B_android#hardware#camera2#params#TonemapCurve#CHANNEL_GREEN_E@, @B_android#hardware#camera2#params#TonemapCurve#CHANNEL_BLUE_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if colorChannel was out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Get the number of points stored in this tonemap curve for the specified color channel.", "history": "Added in API level 21", "FullName": "public int getPointCount (int colorChannel)"}, "TonemapCurve(float[], float[], float[])": {"Returns": [], "Parameters": [["float[]", "float: An array of elements whose length is divisible by @B_android#hardware#camera2#params#TonemapCurve#POINT_SIZE_E@"], ["float[]", "float: An array of elements whose length is divisible by @B_android#hardware#camera2#params#TonemapCurve#POINT_SIZE_E@"], ["float[]", "float: An array of elements whose length is divisible by @B_android#hardware#camera2#params#TonemapCurve#POINT_SIZE_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of input array length is invalid, or if any of the elements in the array are not in the range of [@B_android#hardware#camera2#params#TonemapCurve#LEVEL_BLACK_E@, @B_android#hardware#camera2#params#TonemapCurve#LEVEL_WHITE_E@]"], ["@B_java#lang#NullPointerException_E@", "if any of the parameters are null"]], "SeeAlso": [], "Permissions": [], "Description": "Create a new immutable TonemapCurve instance. Values are stored as a contiguous array of (Pin, Pout) points. All parameters may have independent length but should have at most @B_android#hardware#camera2#CameraCharacteristics#TONEMAP_MAX_CURVE_POINTS_E@ * @B_android#hardware#camera2#params#TonemapCurve#POINT_SIZE_E@ elements and at least 2 * @B_android#hardware#camera2#params#TonemapCurve#POINT_SIZE_E@ elements. All sub-elements must be in the inclusive range of [@B_android#hardware#camera2#params#TonemapCurve#LEVEL_BLACK_E@, @B_android#hardware#camera2#params#TonemapCurve#LEVEL_WHITE_E@]. This constructor copies the array contents and does not retain ownership of the array.", "history": "added in API level 21", "FullName": "public TonemapCurve (float[] red, float[] green, float[] blue)"}, "getPoint(int,int)": {"Returns": [["@B_android#graphics#PointF_E@", "the (Pin, Pout) pair mapping the tone for that index"]], "Parameters": [["int", "int: @B_android#hardware#camera2#params#TonemapCurve#CHANNEL_RED_E@, @B_android#hardware#camera2#params#TonemapCurve#CHANNEL_GREEN_E@, or @B_android#hardware#camera2#params#TonemapCurve#CHANNEL_BLUE_E@"], ["int", "int: at least 0 but no greater than getPointCount(colorChannel)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if colorChannel or index was out of range"]], "SeeAlso": ["@B_android#hardware#camera2#params#TonemapCurve_E@"], "Permissions": [], "Description": "Get the point for a color channel at a specified index. The index must be at least 0 but no greater than @B_android#hardware#camera2#params#TonemapCurve#getPointCount_E@ for that colorChannel. All returned coordinates in the point are between the range of [@B_android#hardware#camera2#params#TonemapCurve#LEVEL_BLACK_E@, @B_android#hardware#camera2#params#TonemapCurve#LEVEL_WHITE_E@].", "history": "Added in API level 21", "FullName": "public PointF getPoint (int colorChannel, int index)"}, "copyColorCurve(int,float[],int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["float[]", "float: an array big enough to hold at least @B_android#hardware#camera2#params#TonemapCurve#getPointCount_E@ * @B_android#hardware#camera2#params#TonemapCurve#POINT_SIZE_E@ elements after the offset"], ["int", "int: a non-negative offset into the array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If destination was null"], ["@B_java#lang#IllegalArgumentException_E@", "If offset was negative"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "If there's not enough room to write the elements at the specified destination and offset."]], "SeeAlso": ["@B_android#hardware#camera2#params#TonemapCurve_E@"], "Permissions": [], "Description": "Copy the color curve for a single color channel from this tonemap curve into the destination. (Pin, Pout) points, and there are a total of @B_android#hardware#camera2#params#TonemapCurve#getPointCount_E@ points for that respective channel. All returned coordinates are between the range of [@B_android#hardware#camera2#params#TonemapCurve#LEVEL_BLACK_E@, @B_android#hardware#camera2#params#TonemapCurve#LEVEL_WHITE_E@].", "history": "Added in API level 21", "FullName": "public void copyColorCurve (int colorChannel, float[] destination, int offset)"}, "TonemapCurve(float[],float[],float[])": {"Returns": [], "Parameters": [["float[]", "float: An array of elements whose length is divisible by @B_android#hardware#camera2#params#TonemapCurve#POINT_SIZE_E@"], ["float[]", "float: An array of elements whose length is divisible by @B_android#hardware#camera2#params#TonemapCurve#POINT_SIZE_E@"], ["float[]", "float: An array of elements whose length is divisible by @B_android#hardware#camera2#params#TonemapCurve#POINT_SIZE_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of input array length is invalid, or if any of the elements in the array are not in the range of [@B_android#hardware#camera2#params#TonemapCurve#LEVEL_BLACK_E@, @B_android#hardware#camera2#params#TonemapCurve#LEVEL_WHITE_E@]"], ["@B_java#lang#NullPointerException_E@", "if any of the parameters are null"]], "SeeAlso": [], "Permissions": [], "Description": "Create a new immutable TonemapCurve instance. Values are stored as a contiguous array of (Pin, Pout) points. All parameters may have independent length but should have at most @B_android#hardware#camera2#CameraCharacteristics#TONEMAP_MAX_CURVE_POINTS_E@ * @B_android#hardware#camera2#params#TonemapCurve#POINT_SIZE_E@ elements and at least 2 * @B_android#hardware#camera2#params#TonemapCurve#POINT_SIZE_E@ elements. All sub-elements must be in the inclusive range of [@B_android#hardware#camera2#params#TonemapCurve#LEVEL_BLACK_E@, @B_android#hardware#camera2#params#TonemapCurve#LEVEL_WHITE_E@]. This constructor copies the array contents and does not retain ownership of the array.", "history": "Added in API level 21", "FullName": "public TonemapCurve (float[] red, float[] green, float[] blue)"}, "copyColorCurve(int, float[], int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["float[]", "float: an array big enough to hold at least @B_android#hardware#camera2#params#TonemapCurve#getPointCount_E@ * @B_android#hardware#camera2#params#TonemapCurve#POINT_SIZE_E@ elements after the offset"], ["int", "int: a non-negative offset into the array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If destination was null"], ["@B_java#lang#IllegalArgumentException_E@", "If offset was negative"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "If there's not enough room to write the elements at the specified destination and offset."]], "SeeAlso": ["_E@", "@B_android#hardware#camera2#params#TonemapCurve_E@"], "Permissions": [], "Description": "Copy the color curve for a single color channel from this tonemap curve into the destination. (Pin, Pout) points, and there are a total of @B_android#hardware#camera2#params#TonemapCurve#getPointCount_E@ points for that respective channel. All returned coordinates are between the range of [@B_android#hardware#camera2#params#TonemapCurve#LEVEL_BLACK_E@, @B_android#hardware#camera2#params#TonemapCurve#LEVEL_WHITE_E@].", "history": "added in API level 21", "FullName": "public void copyColorCurve (int colorChannel, float[] destination, int offset)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.hardware.camera2.params.TonemapCurve", "ClassDesc": "Immutable class for describing a 2 x M x 3 tonemap curve of floats. This defines red, green, and blue curves that the @B_android#hardware#camera2#CameraDevice_E@ will use as the tonemapping/contrast/gamma curve when @B_android#hardware#camera2#CaptureRequest#TONEMAP_MODE_E@ is set to @B_android#hardware#camera2#CameraMetadata#TONEMAP_MODE_CONTRAST_CURVE_E@. For a camera device with @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME_E@ capability, all 3 channels will contain the same set of control points. The total number of points (Pin, Pout) for each color channel can be no more than @B_android#hardware#camera2#CameraCharacteristics#TONEMAP_MAX_CURVE_POINTS_E@. The coordinate system for each point is within the inclusive range [@B_android#hardware#camera2#params#TonemapCurve#LEVEL_BLACK_E@, @B_android#hardware#camera2#params#TonemapCurve#LEVEL_WHITE_E@]."}