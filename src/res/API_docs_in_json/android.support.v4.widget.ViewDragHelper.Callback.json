{"Functions": {"getOrderedChildIndex(int)": {"Returns": [["int", "index of the view that should be ordered at position index"]], "Parameters": [["int", "int: the ordered position to query for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to determine the Z-order of child views.", "history": "added in version 22.0.0", "FullName": "int getOrderedChildIndex (int index)"}, "getViewVerticalDragRange(android.view.View)": {"Returns": [["int", "range of vertical motion in pixels"]], "Parameters": [["@B_android#view#View_E@", "View: Child view to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the magnitude of a draggable child view's vertical range of motion in pixels. This method should return 0 for views that cannot move vertically.", "history": "added in version 22.0.0", "FullName": "int getViewVerticalDragRange (View child)"}, "onViewReleased(android.view.View, float, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The captured child view now being released"], ["float", "float: X velocity of the pointer as it left the screen in pixels per second."], ["float", "float: Y velocity of the pointer as it left the screen in pixels per second."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the child view is no longer being actively dragged. The fling velocity is also supplied, if relevant. The velocity values may be clamped to system minimums or maximums. Calling code may decide to fling or otherwise release the view to let it settle into place. It should do so using @B_android#support#v4#widget#ViewDragHelper#settleCapturedViewAt_E@ or @B_android#support#v4#widget#ViewDragHelper#flingCapturedView_E@. If the Callback invokes one of these methods, the ViewDragHelper will enter @B_android#support#v4#widget#ViewDragHelper#STATE_SETTLING_E@ and the view capture will not fully end until it comes to a complete stop. If neither of these methods is invoked before onViewReleased returns, the view will stop in place and the ViewDragHelper will return to @B_android#support#v4#widget#ViewDragHelper#STATE_IDLE_E@.", "history": "added in version 22.0.0", "FullName": "void onViewReleased (View releasedChild, float xvel, float yvel)"}, "onViewDragStateChanged(int)": {"Returns": [], "Parameters": [["int", "int: The new drag state"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#widget#ViewDragHelper_E@"], "Permissions": [], "Description": "Called when the drag state changes. See the STATE_* constants for more information.", "history": "added in version 22.0.0", "FullName": "void onViewDragStateChanged (int state)"}, "ViewDragHelper.Callback()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "ViewDragHelper.Callback ()"}, "onEdgeLock(int)": {"Returns": [["boolean", "true to lock the edge, false to leave it unlocked"]], "Parameters": [["int", "int: A combination of edge flags describing the edge(s) locked"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the given edge may become locked. This can happen if an edge drag was preliminarily rejected before beginning, but after @B_android#support#v4#widget#ViewDragHelper#Callback#onEdgeTouched_E@ was called. This method should return true to lock this edge or false to leave it unlocked. The default behavior is to leave edges unlocked.", "history": "added in version 22.0.0", "FullName": "boolean onEdgeLock (int edgeFlags)"}, "tryCaptureView(android.view.View, int)": {"Returns": [["boolean", "true if capture should be allowed, false otherwise"]], "Parameters": [["@B_android#view#View_E@", "View: Child the user is attempting to capture"], ["int", "int: ID of the pointer attempting the capture"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the user's input indicates that they want to capture the given child view with the pointer indicated by pointerId. The callback should return true if the user is permitted to drag the given view with the indicated pointer. ViewDragHelper may call this method multiple times for the same view even if the view is already captured; this indicates that a new pointer is trying to take control of the view. If this method returns true, a call to @B_android#support#v4#widget#ViewDragHelper#Callback#onViewCaptured_E@ will follow if the capture is successful.", "history": "added in version 22.0.0", "FullName": "boolean tryCaptureView (View child, int pointerId)"}, "getViewHorizontalDragRange(android.view.View)": {"Returns": [["int", "range of horizontal motion in pixels"]], "Parameters": [["@B_android#view#View_E@", "View: Child view to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the magnitude of a draggable child view's horizontal range of motion in pixels. This method should return 0 for views that cannot move horizontally.", "history": "added in version 22.0.0", "FullName": "int getViewHorizontalDragRange (View child)"}, "onEdgeTouched(int, int)": {"Returns": [], "Parameters": [["int", "int: A combination of edge flags describing the edge(s) currently touched"], ["int", "int: ID of the pointer touching the described edge(s)"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#widget#ViewDragHelper_E@"], "Permissions": [], "Description": "Called when one of the subscribed edges in the parent view has been touched by the user while no child view is currently captured.", "history": "added in version 22.0.0", "FullName": "void onEdgeTouched (int edgeFlags, int pointerId)"}, "onViewCaptured(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Child view that was captured"], ["int", "int: Pointer id tracking the child capture"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a child view is captured for dragging or settling. The ID of the pointer currently dragging the captured view is supplied. If activePointerId is identified as @B_android#support#v4#widget#ViewDragHelper#INVALID_POINTER_E@ the capture is programmatic instead of pointer-initiated.", "history": "added in version 22.0.0", "FullName": "void onViewCaptured (View capturedChild, int activePointerId)"}, "onEdgeDragStarted(int, int)": {"Returns": [], "Parameters": [["int", "int: A combination of edge flags describing the edge(s) dragged"], ["int", "int: ID of the pointer touching the described edge(s)"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#widget#ViewDragHelper_E@"], "Permissions": [], "Description": "Called when the user has started a deliberate drag away from one of the subscribed edges in the parent view while no child view is currently captured.", "history": "added in version 22.0.0", "FullName": "void onEdgeDragStarted (int edgeFlags, int pointerId)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v4.widget.ViewDragHelper.Callback", "ClassDesc": "A Callback is used as a communication channel with the ViewDragHelper back to the parent view using it. on*methods are invoked on siginficant events and several accessor methods are expected to provide the ViewDragHelper with more information about the state of the parent view upon request. The callback also makes decisions governing the range and draggability of child views."}