{"Functions": {"obtain(java.lang.CharSequence,int,int,android.text.TextPaint,int)": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "a builder object used for constructing the StaticLayout This value will never be null."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text to be laid out, optionally with spans This value must never be null."], ["int", "int: The index of the start of the text Value is 0 or greater"], ["int", "int: The index + 1 of the end of the text Value is 0 or greater"], ["@B_android#text#TextPaint_E@", "TextPaint: The base paint used for layout This value must never be null."], ["int", "int: The width in pixels Value is 0 or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtain a builder for constructing StaticLayout objects.", "history": "Added in API level 23", "FullName": "public static StaticLayout.Builder obtain (CharSequence source, int start, int end, TextPaint paint, int width)"}, "setUseLineSpacingFromFallbacks(boolean)": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["boolean", "boolean: whether to expand linespacing based on fallback fonts"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether to respect the ascent and descent of the fallback fonts that are used in displaying the text (which is needed to avoid text from consecutive lines running into each other). If set, fallback fonts that end up getting used can increase the ascent and descent of the lines that they are used on. For backward compatibility reasons, the default is false, but setting this to true is strongly recommended. It is required to be true if text could be in languages like Burmese or Tibetan where text is typically much taller or deeper than Latin text.", "history": "Added in API level 28", "FullName": "public StaticLayout.Builder setUseLineSpacingFromFallbacks (boolean useLineSpacingFromFallbacks)"}, "setAlignment(android.text.Layout.Alignment)": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["@B_android#text#Layout#Alignment_E@", "Layout.Alignment: Alignment for the resulting @B_android#text#StaticLayout_E@ This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the alignment. The default is @B_android#text#Layout#Alignment#ALIGN_NORMAL_E@.", "history": "Added in API level 23", "FullName": "public StaticLayout.Builder setAlignment (Layout.Alignment alignment)"}, "setMaxLines(int)": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["int", "int: maximum number of lines in the layout Value is 0 or greater"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setMaxLines_E@"], "Permissions": [], "Description": "Set maximum number of lines. This is particularly useful in the case of ellipsizing, where it changes the layout of the last line. The default is unlimited.", "history": "Added in API level 23", "FullName": "public StaticLayout.Builder setMaxLines (int maxLines)"}, "setEllipsizedWidth(int)": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["int", "int: width used for ellipsizing, in pixels Value is 0 or greater"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setEllipsize_E@"], "Permissions": [], "Description": "Set the width as used for ellipsizing purposes, if it differs from the normal layout width. The default is the width passed to @B_android#text#StaticLayout#Builder#obtain_E@.", "history": "Added in API level 23", "FullName": "public StaticLayout.Builder setEllipsizedWidth (int ellipsizedWidth)"}, "setEllipsize(android.text.TextUtils.TruncateAt)": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "this builder, useful for chaining"]], "Parameters": [["@B_android#text#TextUtils#TruncateAt_E@", "TextUtils.TruncateAt: type of ellipsis behavior This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setEllipsize_E@"], "Permissions": [], "Description": "Set ellipsizing on the layout. Causes words that are longer than the view is wide, or exceeding the number of lines (see #setMaxLines) in the case of @B_android#text#TextUtils#TruncateAt#END_E@ or @B_android#text#TextUtils#TruncateAt#MARQUEE_E@, to be ellipsized instead of broken. The default is null, indicating no ellipsis is to be applied.", "history": "Added in API level 23", "FullName": "public StaticLayout.Builder setEllipsize (TextUtils.TruncateAt ellipsize)"}, "setJustificationMode(int)": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "this builder, useful for chaining. This value will never be null."]], "Parameters": [["int", "int: justification mode for the paragraph. Value is @B_android#graphics#text#LineBreaker#JUSTIFICATION_MODE_NONE_E@, or @B_android#graphics#text#LineBreaker#JUSTIFICATION_MODE_INTER_WORD_E@"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setWordSpacing_E@"], "Permissions": [], "Description": "Set paragraph justification mode. The default value is @B_android#text#Layout#JUSTIFICATION_MODE_NONE_E@. If the last line is too short for justification, the last line will be displayed with the alignment set by @B_android#text#StaticLayout#Builder#setAlignment_E@. When Justification mode is JUSTIFICATION_MODE_INTER_WORD, wordSpacing on the given @B_android#graphics#Paint_E@ will be ignored. This behavior also affects Spans which change the wordSpacing.", "history": "Added in API level 26", "FullName": "public StaticLayout.Builder setJustificationMode (int justificationMode)"}, "setIncludePad(boolean)": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["boolean", "boolean: whether to include padding"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setIncludeFontPadding_E@"], "Permissions": [], "Description": "Set whether to include extra space beyond font ascent and descent (which is needed to avoid clipping in some languages, such as Arabic and Kannada). The default is true.", "history": "Added in API level 23", "FullName": "public StaticLayout.Builder setIncludePad (boolean includePad)"}, "setBreakStrategy(int)": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["int", "int: break strategy for paragraph layout Value is @B_android#graphics#text#LineBreaker#BREAK_STRATEGY_SIMPLE_E@, @B_android#graphics#text#LineBreaker#BREAK_STRATEGY_HIGH_QUALITY_E@, or @B_android#graphics#text#LineBreaker#BREAK_STRATEGY_BALANCED_E@"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setBreakStrategy_E@", "@B_android#text#StaticLayout#Builder#setHyphenationFrequency_E@"], "Permissions": [], "Description": "Set break strategy, useful for selecting high quality or balanced paragraph layout options. The default is @B_android#text#Layout#BREAK_STRATEGY_SIMPLE_E@. Enabling hyphenation with either using @B_android#text#Layout#HYPHENATION_FREQUENCY_NORMAL_E@ or @B_android#text#Layout#HYPHENATION_FREQUENCY_FULL_E@ while line breaking is set to one of @B_android#text#Layout#BREAK_STRATEGY_BALANCED_E@, @B_android#text#Layout#BREAK_STRATEGY_HIGH_QUALITY_E@ improves the structure of text layout however has performance impact and requires more time to do the text layout.", "history": "Added in API level 23", "FullName": "public StaticLayout.Builder setBreakStrategy (int breakStrategy)"}, "setTextDirection(android.text.TextDirectionHeuristic)": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["@B_android#text#TextDirectionHeuristic_E@", "TextDirectionHeuristic: text direction heuristic for resolving bidi behavior. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the text direction heuristic. The text direction heuristic is used to resolve text direction per-paragraph based on the input text. The default is @B_android#text#TextDirectionHeuristics#FIRSTSTRONG_LTR_E@.", "history": "Added in API level 23", "FullName": "public StaticLayout.Builder setTextDirection (TextDirectionHeuristic textDir)"}, "setIndents(int[],int[])": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["int[]", "int: array of indent values for left margin, in pixels This value may be null."], ["int[]", "int: array of indent values for right margin, in pixels This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set indents. Arguments are arrays holding an indent amount, one per line, measured in pixels. For lines past the last element in the array, the last element repeats.", "history": "Added in API level 23", "FullName": "public StaticLayout.Builder setIndents (int[] leftIndents, int[] rightIndents)"}, "setIndents(int[], int[])": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["int[]", "int: array of indent values for left margin, in pixelsThis value may be null."], ["int[]", "int: array of indent values for right margin, in pixelsThis value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set indents. Arguments are arrays holding an indent amount, one per line, measured in pixels. For lines past the last element in the array, the last element repeats.", "history": "added in API level 23", "FullName": "public StaticLayout.Builder setIndents (int[] leftIndents, int[] rightIndents)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "added in API level 23", "FullName": "void finalize ()"}, "setLineSpacing(float,float)": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["float", "float: the amount of line spacing addition"], ["float", "float: the line spacing multiplier Value is 0.0 or greater"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setLineSpacing_E@"], "Permissions": [], "Description": "Set line spacing parameters. Each line will have its line spacing multiplied by spacingMult and then increased by spacingAdd. The default is 0.0 for spacingAdd and 1.0 for spacingMult.", "history": "Added in API level 23", "FullName": "public StaticLayout.Builder setLineSpacing (float spacingAdd, float spacingMult)"}, "setText(java.lang.CharSequence)": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public StaticLayout.Builder setText (CharSequence source)"}, "setHyphenationFrequency(int)": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["int", "int: hyphenation frequency for the paragraph Value is @B_android#text#Layout#HYPHENATION_FREQUENCY_NORMAL_E@, @B_android#text#Layout#HYPHENATION_FREQUENCY_FULL_E@, or @B_android#text#Layout#HYPHENATION_FREQUENCY_NONE_E@"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setHyphenationFrequency_E@", "@B_android#text#StaticLayout#Builder#setBreakStrategy_E@"], "Permissions": [], "Description": "Set hyphenation frequency, to control the amount of automatic hyphenation used. The possible values are defined in @B_android#text#Layout_E@, by constants named with the pattern HYPHENATION_FREQUENCY_*. The default is @B_android#text#Layout#HYPHENATION_FREQUENCY_NONE_E@. Enabling hyphenation with either using @B_android#text#Layout#HYPHENATION_FREQUENCY_NORMAL_E@ or @B_android#text#Layout#HYPHENATION_FREQUENCY_FULL_E@ while line breaking is set to one of @B_android#text#Layout#BREAK_STRATEGY_BALANCED_E@, @B_android#text#Layout#BREAK_STRATEGY_HIGH_QUALITY_E@ improves the structure of text layout however has performance impact and requires more time to do the text layout.", "history": "Added in API level 23", "FullName": "public StaticLayout.Builder setHyphenationFrequency (int hyphenationFrequency)"}, "build()": {"Returns": [["@B_android#text#StaticLayout_E@", "the newly constructed @B_android#text#StaticLayout_E@ object This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Build the @B_android#text#StaticLayout_E@ after options have been set. Note: the builder object must not be reused in any way after calling this method. Setting parameters after calling this method, or calling it a second time on the same builder object, will likely lead to unexpected results.", "history": "Added in API level 23", "FullName": "public StaticLayout build ()"}, "setLineSpacing(float, float)": {"Returns": [["@B_android#text#StaticLayout#Builder_E@", "this builder, useful for chainingThis value will never be null."]], "Parameters": [["float", "float: the amount of line spacing addition"], ["float", "float: the line spacing multiplierValue is 0.0 or greater."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setLineSpacing_E@"], "Permissions": [], "Description": "Set line spacing parameters. Each line will have its line spacing multiplied by spacingMult and then increased by spacingAdd. The default is 0.0 for spacingAdd and 1.0 for spacingMult.", "history": "added in API level 23", "FullName": "public StaticLayout.Builder setLineSpacing (float spacingAdd, float spacingMult)"}}, "Inheritance": [], "ClassName": "android.text.StaticLayout.Builder", "ClassDesc": "Builder for static layouts. The builder is the preferred pattern for constructing StaticLayout objects and should be preferred over the constructors, particularly to access newer features. To build a static layout, first call @B_android#text#StaticLayout#Builder#obtain_E@ with the required arguments (text, paint, and width), then call setters for optional parameters, and finally @B_android#text#StaticLayout#Builder#build_E@ to build the StaticLayout object. Parameters not explicitly set will get default values."}