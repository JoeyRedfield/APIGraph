{"Functions": {"getSystemId()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The system identifier, a URI reference [ If the system ID is a relative URI reference (see section 5 in [", "history": "Added in API level 8", "FullName": "public abstract String getSystemId ()"}, "setSystemId(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The system identifier, a URI reference [ If the system ID is a relative URI reference (see section 5 in [", "history": "Added in API level 8", "FullName": "public abstract void setSystemId (String systemId)"}, "getEncoding()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The character encoding to use for the output. The encoding must be a string acceptable for an XML encoding declaration ([", "history": "Added in API level 8", "FullName": "public abstract String getEncoding ()"}, "setByteStream(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "An attribute of a language and binding dependent type that represents a writable stream of bytes.", "history": "Added in API level 8", "FullName": "public abstract void setByteStream (OutputStream byteStream)"}, "getCharacterStream()": {"Returns": [["@B_java#io#Writer_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "An attribute of a language and binding dependent type that represents a writable stream to which 16-bit units can be output.", "history": "Added in API level 8", "FullName": "public abstract Writer getCharacterStream ()"}, "setEncoding(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The character encoding to use for the output. The encoding must be a string acceptable for an XML encoding declaration ([", "history": "Added in API level 8", "FullName": "public abstract void setEncoding (String encoding)"}, "getByteStream()": {"Returns": [["@B_java#io#OutputStream_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "An attribute of a language and binding dependent type that represents a writable stream of bytes.", "history": "Added in API level 8", "FullName": "public abstract OutputStream getByteStream ()"}, "setCharacterStream(java.io.Writer)": {"Returns": [], "Parameters": [["@B_java#io#Writer_E@", "Writer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "An attribute of a language and binding dependent type that represents a writable stream to which 16-bit units can be output.", "history": "Added in API level 8", "FullName": "public abstract void setCharacterStream (Writer characterStream)"}}, "Inheritance": [], "ClassName": "org.w3c.dom.ls.LSOutput", "ClassDesc": "This interface represents an output destination for data. This interface allows an application to encapsulate information about an output destination in a single object, which may include a URI, a byte stream (possibly with a specified encoding), a base URI, and/or a character stream. The exact definitions of a byte stream and a character stream are binding dependent. The application is expected to provide objects that implement this interface whenever such objects are needed. The application can either provide its own objects that implement this interface, or it can use the generic factory method DOMImplementationLS.createLSOutput() to create objects that implement this interface. The LSSerializer will use the LSOutput object to determine where to serialize the output to. The LSSerializer will look at the different outputs specified in the LSOutput in the following order to know which one to output to, the first one that is not null and not an empty string will be used: LSOutput objects belong to the application. The DOM implementation will never modify them (though it may make copies and modify the copies, if necessary). See also the"}