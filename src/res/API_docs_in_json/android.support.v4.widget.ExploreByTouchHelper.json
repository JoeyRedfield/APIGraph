{"Functions": {"onVirtualViewKeyboardFocusChanged(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the virtual view identifier"], ["boolean", "boolean: true if the view has focus, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the focus state of a virtual view changes.", "history": "added in version 24.0.0", "FullName": "void onVirtualViewKeyboardFocusChanged (int virtualViewId, boolean hasFocus)"}, "dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Delegates key events from the host view. This method should be called by overriding the host view's @B_android#view#View#dispatchKeyEvent_E@ method:", "history": "added in version 24.0.0", "FullName": "boolean dispatchKeyEvent (KeyEvent event)"}, "getAccessibilityFocusedVirtualViewId()": {"Returns": [["int", "the identifier of the virtual view that has accessibility focus or @B_android#support#v4#widget#ExploreByTouchHelper#INVALID_ID_E@ if no virtual view has accessibility focus"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.0.0", "FullName": "int getAccessibilityFocusedVirtualViewId ()"}, "requestKeyboardFocusForVirtualView(int)": {"Returns": [["boolean", "whether this virtual view actually took keyboard focus"]], "Parameters": [["int", "int: the identifier of the virtual view on which to place keyboard focus"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to give keyboard focus to a virtual view.", "history": "added in version 24.0.0", "FullName": "boolean requestKeyboardFocusForVirtualView (int virtualViewId)"}, "invalidateRoot()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies the accessibility framework that the properties of the parent view have changed. You", "history": "added in version 22.0.0", "FullName": "void invalidateRoot ()"}, "getVirtualViewAt(float, float)": {"Returns": [["int", "virtual view identifier for the logical item under coordinates (x,y) or @B_android#support#v4#widget#ExploreByTouchHelper#HOST_ID_E@ if there is no item at the given coordinates"]], "Parameters": [["float", "float: The view-relative x coordinate"], ["float", "float: The view-relative y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides a mapping between view-relative coordinates and logical items.", "history": "added in version 22.0.0", "FullName": "int getVirtualViewAt (float x, float y)"}, "sendEventForVirtualView(int, int)": {"Returns": [["boolean", "true if the event was sent successfully, false otherwise"]], "Parameters": [["int", "int: the identifier of the virtual view for which to send an event"], ["int", "int: the type of event to send"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Populates an event of the specified type with information about an item and attempts to send it up through the view hierarchy. You should call this method after performing a user action that normally fires an accessibility event, such as clicking on an item.", "history": "added in version 22.0.0", "FullName": "boolean sendEventForVirtualView (int virtualViewId, int eventType)"}, "dispatchHoverEvent(android.view.MotionEvent)": {"Returns": [["boolean", "Whether the hover event was handled."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The hover event to dispatch to the virtual view hierarchy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Delegates hover events from the host view. Dispatches hover @B_android#view#MotionEvent_E@s to the virtual view hierarchy when the Explore by Touch feature is enabled. This method should be called by overriding the host view's @B_android#view#View#dispatchHoverEvent_E@ method:", "history": "added in version 22.0.0", "FullName": "boolean dispatchHoverEvent (MotionEvent event)"}, "clearKeyboardFocusForVirtualView(int)": {"Returns": [["boolean", "whether this virtual view actually cleared keyboard focus"]], "Parameters": [["int", "int: the identifier of the virtual view from which to clear keyboard focus"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to clear keyboard focus from a virtual view.", "history": "added in version 24.0.0", "FullName": "boolean clearKeyboardFocusForVirtualView (int virtualViewId)"}, "invalidateVirtualView(int, int)": {"Returns": [], "Parameters": [["int", "int: the virtual view id to invalidate, or @B_android#support#v4#widget#ExploreByTouchHelper#HOST_ID_E@ to invalidate the root view"], ["int", "int: the bit mask of change types. May be 0 for the default (undefined) change type or one or more of: CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION CONTENT_CHANGE_TYPE_SUBTREE CONTENT_CHANGE_TYPE_TEXT CONTENT_CHANGE_TYPE_UNDEFINED"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies the accessibility framework that the properties of a particular item have changed. You @B_android#support#v4#widget#ExploreByTouchHelper#onPopulateNodeForVirtualView_E@.", "history": "added in version 24.0.0", "FullName": "void invalidateVirtualView (int virtualViewId, int changeTypes)"}, "getFocusedVirtualView()": {"Returns": [["int", "the identifier of the virtual view that has accessibility focus or @B_android#support#v4#widget#ExploreByTouchHelper#INVALID_ID_E@ if no virtual view has accessibility focus"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v4#widget#ExploreByTouchHelper#getAccessibilityFocusedVirtualViewId_E@. Returns the virtual view ID for the currently accessibility focused item.", "history": "added in version 22.0.0", "FullName": "int getFocusedVirtualView ()"}, "ExploreByTouchHelper(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: view whose virtual view hierarchy is exposed by this helper"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new helper that can expose a virtual view hierarchy for the specified host view.", "history": "added in version 22.0.0", "FullName": "ExploreByTouchHelper (View host)"}, "invalidateVirtualView(int)": {"Returns": [], "Parameters": [["int", "int: the virtual view id to invalidate, or @B_android#support#v4#widget#ExploreByTouchHelper#HOST_ID_E@ to invalidate the root view"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#widget#ExploreByTouchHelper#invalidateVirtualView_E@"], "Permissions": [], "Description": "Notifies the accessibility framework that the properties of a particular item have changed. You @B_android#support#v4#widget#ExploreByTouchHelper#onPopulateNodeForVirtualView_E@.", "history": "added in version 22.0.0", "FullName": "void invalidateVirtualView (int virtualViewId)"}, "getKeyboardFocusedVirtualViewId()": {"Returns": [["int", "the identifier of the virtual view that has keyboard focus or @B_android#support#v4#widget#ExploreByTouchHelper#INVALID_ID_E@ if no virtual view has keyboard focus"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.0.0", "FullName": "int getKeyboardFocusedVirtualViewId ()"}, "getAccessibilityNodeProvider(android.view.View)": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeProviderCompat_E@", "The provider."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the provider for managing a virtual view hierarchy rooted at this View and reported to @B_android#accessibilityservice#AccessibilityService_E@s that explore the window content. The default implementation behaves as @B_android#support#v4#view#ViewCompat#getAccessibilityNodeProvider_E@ for the case of no accessibility delegate been set.", "history": "added in version 22.0.0", "FullName": "AccessibilityNodeProviderCompat getAccessibilityNodeProvider (View host)"}}, "Inheritance": ["java.lang.Object", "@B_android#support#v4#view#AccessibilityDelegateCompat_E@"], "ClassName": "android.support.v4.widget.ExploreByTouchHelper", "ClassDesc": "ExploreByTouchHelper is a utility class for implementing accessibility support in custom https:##developer#android#com@B_android#view#View_E@s that represent a collection of View-like logical items. It extends @B_android#support#v4#view#accessibility#AccessibilityNodeProviderCompat_E@ and simplifies many aspects of providing information to accessibility services and managing accessibility focus. Clients should override abstract methods on this class and attach it to the host view using @B_android#support#v4#view#ViewCompat#setAccessibilityDelegate_E@:"}