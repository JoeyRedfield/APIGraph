{"Functions": {"isChunked()": {"Returns": [["", "true if chunked encoding is preferred for this entity, or false if it is not"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells about chunked encoding for this entity. The primary purpose of this method is to indicate whether chunked encoding should be used when the entity is sent. For entities that are received, it can also indicate whether the entity was received with chunked encoding. The behavior of wrapping entities is implementation dependent, but should respect the primary purpose.", "history": "Added in API level 1", "FullName": "public boolean isChunked ()"}, "getContent()": {"Returns": [["", "a new input stream that returns the entity data."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new InputStream object of the entity. It is a programming error to return the same InputStream object more than once. Entities that are not @B_org#apache#http#HttpEntity#isRepeatable_E@ will throw an exception if this method is called multiple times.", "history": "Added in API level 1", "FullName": "public InputStream getContent ()"}, "HttpEntityWrapper(org.apache.http.HttpEntity)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpEntity_E@", "the entity to wrap"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new entity wrapper.", "history": "Added in API level 1", "FullName": "public HttpEntityWrapper (HttpEntity wrapped)"}, "getContentType()": {"Returns": [["", "the Content-Type header for this entity, or null if the content type is unknown"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the Content-Type header, if known. This is the header that should be used when sending the entity, or the one that was received with the entity. It can include a charset attribute.", "history": "Added in API level 1", "FullName": "public Header getContentType ()"}, "isStreaming()": {"Returns": [["", "true if the entity content is streamed and not yet consumed, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this entity depends on an underlying stream. Streamed entities should return true until the content has been consumed, false afterwards. Self-contained entities should return false. Wrapping entities should delegate this call to the wrapped entity. The content of a streamed entity is consumed when the stream returned by @B_org#apache#http#HttpEntity#getContent_E@ has been read to EOF, or after @B_org#apache#http#HttpEntity#consumeContent_E@ has been called. If a streamed entity can not detect whether the stream has been read to EOF, it should return true until @B_org#apache#http#HttpEntity#consumeContent_E@ is called.", "history": "Added in API level 1", "FullName": "public boolean isStreaming ()"}, "consumeContent()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "TODO: The name of this method is misnomer. It will be renamed to #finish() in the next major release. This method is called to indicate that the content of this entity is no longer required. All entity implementations are expected to release all allocated resources as a result of this method invocation. Content streaming entities are also expected to dispose of the remaining content, if any. Wrapping entities should delegate this call to the wrapped entity. This method is of particular importance for entities being received from a @B_org#apache#http#HttpConnection_E@. The entity needs to be consumed completely in order to re-use the connection with keep-alive.", "history": "Added in API level 1", "FullName": "public void consumeContent ()"}, "getContentEncoding()": {"Returns": [["", "the Content-Encoding header for this entity, or null if the content encoding is unknown"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the Content-Encoding header, if known. This is the header that should be used when sending the entity, or the one that was received with the entity. Wrapping entities that modify the content encoding should adjust this header accordingly.", "history": "Added in API level 1", "FullName": "public Header getContentEncoding ()"}, "isRepeatable()": {"Returns": [["", "true if the entity is repeatable, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells if the entity is capable to produce its data more than once. A repeatable entity's getContent() and writeTo(OutputStream) methods can be called more than once whereas a non-repeatable entity's can not.", "history": "Added in API level 1", "FullName": "public boolean isRepeatable ()"}, "writeTo(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "the output stream to write entity content to"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes the entity content to the output stream.", "history": "Added in API level 1", "FullName": "public void writeTo (OutputStream outstream)"}, "getContentLength()": {"Returns": [["", "the number of bytes of the content, or a negative number if unknown. If the content length is known but exceeds @B_java#lang#Long#MAX_VALUE_E@, a negative number is returned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells the length of the content, if known.", "history": "Added in API level 1", "FullName": "public long getContentLength ()"}}, "Inheritance": [], "ClassName": "org.apache.http.entity.HttpEntityWrapper", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Base class for wrapping entities. Keeps a @B_org#apache#http#entity#HttpEntityWrapper#wrappedEntity_E@ and delegates all calls to it. Implementations of wrapping entities can derive from this class and need to override only those methods that should not be delegated to the wrapped entity."}