{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "setMultiPackage()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set this session to be the parent of a multi-package install. A multi-package install session contains no APKs and only references other install sessions via ID. When a multi-package session is committed, all of its children are committed to the system in an atomic manner. If any children fail to install, all of them do, including the multi-package session.", "history": "Added in API level 29", "FullName": "public void setMultiPackage ()"}, "setWhitelistedRestrictedPermissions(java.util.Set<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#util#Set_E@", "Set: This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager#addWhitelistedRestrictedPermission_E@", "@B_android#content#pm#PackageManager#removeWhitelistedRestrictedPermission_E@"], "Permissions": [], "Description": "Sets which restricted permissions to be whitelisted for the app. Whitelisting is not granting the permissions, rather it allows the app to hold permissions which are otherwise restricted. Whitelisting a non restricted permission has no effect. Permissions can be hard restricted which means that the app cannot hold them or soft restricted where the app can hold the permission but in a weaker form. Whether a permission is @B_android#content#pm#PermissionInfo#FLAG_HARD_RESTRICTED_E@ or @B_android#content#pm#PermissionInfo#FLAG_SOFT_RESTRICTED_E@ depends on the permission declaration. Whitelisting a hard restricted permission allows the app to hold that permission and whitelisting a soft restricted permission allows the app to hold the permission in its full, unrestricted form. Permissions can also be immutably restricted which means that the whitelist state of the permission can be determined only at install time and cannot be changed on updated or at a later point via the package manager APIs. Initially, all restricted permissions are whitelisted but you can change which ones are whitelisted by calling this method or the corresponding ones on the @B_android#content#pm#PackageManager_E@.", "history": "Added in API level 29", "FullName": "public void setWhitelistedRestrictedPermissions (Set<String> permissions)"}, "setOriginatingUri(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent_E@"], "Permissions": [], "Description": "Optionally set the URI where this package was downloaded from. This is informational and may be used as a signal for anti-malware purposes.", "history": "Added in API level 21", "FullName": "public void setOriginatingUri (Uri originatingUri)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 21", "FullName": "public int describeContents ()"}, "PackageInstaller.SessionParams(int)": {"Returns": [], "Parameters": [["int", "int: one of @B_android#content#pm#PackageInstaller#SessionParams#MODE_FULL_INSTALL_E@ or @B_android#content#pm#PackageInstaller#SessionParams#MODE_INHERIT_EXISTING_E@ describing how the session should interact with an existing app."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct parameters for a new package install session.", "history": "Added in API level 21", "FullName": "public PackageInstaller.SessionParams (int mode)"}, "setOriginatingUid(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the UID that initiated the package installation. This is informational and may be used as a signal for anti-malware purposes.", "history": "Added in API level 24", "FullName": "public void setOriginatingUid (int originatingUid)"}, "setInstallLocation(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provide value of @B_android#content#pm#PackageInfo#installLocation_E@, which may be used to determine where the app will be staged. Defaults to @B_android#content#pm#PackageInfo#INSTALL_LOCATION_INTERNAL_ONLY_E@.", "history": "Added in API level 21", "FullName": "public void setInstallLocation (int installLocation)"}, "setSize(long)": {"Returns": [], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageInfo_E@"], "Permissions": [], "Description": "Optionally indicate the total size (in bytes) of all APKs that will be delivered in this session. The system may use this to ensure enough disk space exists before proceeding, or to estimate container size for installations living on external storage.", "history": "Added in API level 21", "FullName": "public void setSize (long sizeBytes)"}, "setInstallReason(int)": {"Returns": [], "Parameters": [["int", "int: Value is @B_android#content#pm#PackageManager#INSTALL_REASON_UNKNOWN_E@, @B_android#content#pm#PackageManager#INSTALL_REASON_POLICY_E@, @B_android#content#pm#PackageManager#INSTALL_REASON_DEVICE_RESTORE_E@, @B_android#content#pm#PackageManager#INSTALL_REASON_DEVICE_SETUP_E@, or @B_android#content#pm#PackageManager#INSTALL_REASON_USER_E@"]], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager_E@"], "Permissions": [], "Description": "Set the reason for installing this package. The install reason should be a pre-defined integer. The behavior is undefined if other values are used.", "history": "Added in API level 26", "FullName": "public void setInstallReason (int installReason)"}, "setAppLabel(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Optionally set a label representing the app being installed.", "history": "Added in API level 21", "FullName": "public void setAppLabel (CharSequence appLabel)"}, "setReferrerUri(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent_E@"], "Permissions": [], "Description": "Optionally set the URI that referred you to install this package. This is informational and may be used as a signal for anti-malware purposes.", "history": "Added in API level 21", "FullName": "public void setReferrerUri (Uri referrerUri)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "setAppPackageName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Optionally set the package name of the app being installed. It's strongly recommended that you provide this value when known, so that observers can communicate installing apps to users. If the APKs staged in the session aren't consistent with this package name, the install will fail. Regardless of this value, all APKs in the app must have the same package name.", "history": "Added in API level 21", "FullName": "public void setAppPackageName (String appPackageName)"}, "setAppIcon(android.graphics.Bitmap)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Optionally set an icon representing the app being installed. This should be roughly @B_android#app#ActivityManager#getLauncherLargeIconSize_E@ in both dimensions.", "history": "Added in API level 21", "FullName": "public void setAppIcon (Bitmap appIcon)"}}, "Inheritance": [], "ClassName": "android.content.pm.PackageInstaller.SessionParams", "ClassDesc": "Parameters for creating a new @B_android#content#pm#PackageInstaller#Session_E@."}