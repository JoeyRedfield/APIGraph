{"Functions": {"submit(java.lang.Runnable,T)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"], ["T", "T: the result to return"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. The Future's get method will return the given result upon successful completion.", "history": "Added in API level 1", "FullName": "public Future<T> submit (Runnable task, T result)"}, "submit(java.lang.Runnable, T)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"], ["T", "T: the result to return"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. The Future's get method will return the given result upon successful completion.", "history": "added in API level 1", "FullName": "public Future<T> submit (Runnable task, T result)"}, "setRemoveOnCancelPolicy(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: if true, remove on cancellation, else don't"]], "Throws": [], "SeeAlso": ["@B_java#util#concurrent#ScheduledThreadPoolExecutor#getRemoveOnCancelPolicy_E@"], "Permissions": [], "Description": "Sets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation. This value is by default false.", "history": "Added in API level 21", "FullName": "public void setRemoveOnCancelPolicy (boolean value)"}, "setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: if true, execute after shutdown, else don't"]], "Throws": [], "SeeAlso": ["@B_java#util#concurrent#ScheduledThreadPoolExecutor#getExecuteExistingDelayedTasksAfterShutdownPolicy_E@"], "Permissions": [], "Description": "Sets the policy on whether to execute existing delayed tasks even when this executor has been shutdown. In this case, these tasks will only terminate upon shutdownNow, or after setting the policy to false when already shutdown. This value is by default true.", "history": "Added in API level 1", "FullName": "public void setExecuteExistingDelayedTasksAfterShutdownPolicy (boolean value)"}, "shutdownNow()": {"Returns": [["@B_java#util#List_E@", "list of tasks that never commenced execution. Each element of this list is a @B_java#util#concurrent#ScheduledFuture_E@. For tasks submitted via one of the schedule methods, the element will be identical to the returned ScheduledFuture. For tasks submitted using @B_java#util#concurrent#ScheduledThreadPoolExecutor#execute_E@, the element will be a zero-delay ScheduledFuture."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution. These tasks are drained (removed) from the task queue upon return from this method. This method does not wait for actively executing tasks to terminate. Use @B_java#util#concurrent#ThreadPoolExecutor#awaitTermination_E@ to do that. There are no guarantees beyond best-effort attempts to stop processing actively executing tasks. This implementation interrupts tasks via @B_java#lang#Thread#interrupt_E@; any task that fails to respond to interrupts may never terminate.", "history": "Added in API level 1", "FullName": "public List<Runnable> shutdownNow ()"}, "scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#util#concurrent#ScheduledFuture_E@", "a ScheduledFuture representing pending completion of the series of repeated tasks. The future's @B_java#util#concurrent#Future#get_E@ method will never return normally, and will throw an exception upon task cancellation or abnormal termination of a task execution."]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to execute"], ["long", "long: the time to delay first execution"], ["long", "long: the period between successive executions"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the initialDelay and period parameters"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is, executions will commence after initialDelay, then initialDelay + period, then initialDelay + 2 * period, and so on. The sequence of task executions continues indefinitely until one of the following exceptional completions occur: The task is The executor terminates, also resulting in task cancellation. An execution of the task throws an exception. In this case calling @B_java#util#concurrent#Future#get_E@ on the returned future will throw @B_java#util#concurrent#ExecutionException_E@. Subsequent executions are suppressed. Subsequent calls to @B_java#util#concurrent#Future#isDone_E@ on the returned future will return true. If any execution of this task takes longer than its period, then subsequent executions may start late, but will not concurrently execute.", "history": "Added in API level 1", "FullName": "public ScheduledFuture<?> scheduleAtFixedRate (Runnable command, long initialDelay, long period, TimeUnit unit)"}, "submit(java.lang.Runnable)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. The Future's get method will return null upon successful completion.", "history": "Added in API level 1", "FullName": "public Future<?> submit (Runnable task)"}, "getRemoveOnCancelPolicy()": {"Returns": [["boolean", "true if cancelled tasks are immediately removed from the queue"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#concurrent#ScheduledThreadPoolExecutor#setRemoveOnCancelPolicy_E@"], "Permissions": [], "Description": "Gets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation. This value is by default false.", "history": "Added in API level 21", "FullName": "public boolean getRemoveOnCancelPolicy ()"}, "ScheduledThreadPoolExecutor(int,java.util.concurrent.ThreadFactory)": {"Returns": [], "Parameters": [["int", "int: the number of threads to keep in the pool, even if they are idle, unless allowCoreThreadTimeOut is set"], ["@B_java#util#concurrent#ThreadFactory_E@", "ThreadFactory: the factory to use when the executor creates a new thread"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if corePoolSize < 0"], ["@B_java#lang#NullPointerException_E@", "if threadFactory is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new ScheduledThreadPoolExecutor with the given initial parameters.", "history": "Added in API level 1", "FullName": "public ScheduledThreadPoolExecutor (int corePoolSize, ThreadFactory threadFactory)"}, "shutdown()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no additional effect if already shut down. This method does not wait for previously submitted tasks to complete execution. Use @B_java#util#concurrent#ThreadPoolExecutor#awaitTermination_E@ to do that. If the ExecuteExistingDelayedTasksAfterShutdownPolicy has been set false, existing delayed tasks whose delays have not yet elapsed are cancelled. And unless the ContinueExistingPeriodicTasksAfterShutdownPolicy has been set true, future executions of existing periodic tasks will be cancelled.", "history": "Added in API level 1", "FullName": "public void shutdown ()"}, "scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#util#concurrent#ScheduledFuture_E@", "a ScheduledFuture representing pending completion of the series of repeated tasks. The future's @B_java#util#concurrent#Future#get_E@ method will never return normally, and will throw an exception upon task cancellation or abnormal termination of a task execution."]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to execute"], ["long", "long: the time to delay first execution"], ["long", "long: the delay between the termination of one execution and the commencement of the next"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the initialDelay and delay parameters"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next. The sequence of task executions continues indefinitely until one of the following exceptional completions occur: The task is The executor terminates, also resulting in task cancellation. An execution of the task throws an exception. In this case calling @B_java#util#concurrent#Future#get_E@ on the returned future will throw @B_java#util#concurrent#ExecutionException_E@. Subsequent executions are suppressed. Subsequent calls to @B_java#util#concurrent#Future#isDone_E@ on the returned future will return true.", "history": "Added in API level 1", "FullName": "public ScheduledFuture<?> scheduleWithFixedDelay (Runnable command, long initialDelay, long delay, TimeUnit unit)"}, "setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: if true, continue after shutdown, else don't"]], "Throws": [], "SeeAlso": ["@B_java#util#concurrent#ScheduledThreadPoolExecutor#getContinueExistingPeriodicTasksAfterShutdownPolicy_E@"], "Permissions": [], "Description": "Sets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown. In this case, these tasks will only terminate upon shutdownNow or after setting the policy to false when already shutdown. This value is by default false.", "history": "Added in API level 1", "FullName": "public void setContinueExistingPeriodicTasksAfterShutdownPolicy (boolean value)"}, "schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#util#concurrent#ScheduledFuture_E@", "a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to execute"], ["long", "long: the time from now to delay execution"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the delay parameter"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates and executes a one-shot action that becomes enabled after the given delay.", "history": "Added in API level 1", "FullName": "public ScheduledFuture<?> schedule (Runnable command, long delay, TimeUnit unit)"}, "ScheduledThreadPoolExecutor(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)": {"Returns": [], "Parameters": [["int", "int: the number of threads to keep in the pool, even if they are idle, unless allowCoreThreadTimeOut is set"], ["@B_java#util#concurrent#ThreadFactory_E@", "ThreadFactory: the factory to use when the executor creates a new thread"], ["@B_java#util#concurrent#RejectedExecutionHandler_E@", "RejectedExecutionHandler: the handler to use when execution is blocked because the thread bounds and queue capacities are reached"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if corePoolSize < 0"], ["@B_java#lang#NullPointerException_E@", "if threadFactory or handler is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new ScheduledThreadPoolExecutor with the given initial parameters.", "history": "Added in API level 1", "FullName": "public ScheduledThreadPoolExecutor (int corePoolSize, ThreadFactory threadFactory, RejectedExecutionHandler handler)"}, "getContinueExistingPeriodicTasksAfterShutdownPolicy()": {"Returns": [["boolean", "true if will continue after shutdown"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#concurrent#ScheduledThreadPoolExecutor#setContinueExistingPeriodicTasksAfterShutdownPolicy_E@"], "Permissions": [], "Description": "Gets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown. In this case, these tasks will only terminate upon shutdownNow or after setting the policy to false when already shutdown. This value is by default false.", "history": "Added in API level 1", "FullName": "public boolean getContinueExistingPeriodicTasksAfterShutdownPolicy ()"}, "getQueue()": {"Returns": [["@B_java#util#concurrent#BlockingQueue_E@", "the task queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the task queue used by this executor. Access to the task queue is intended primarily for debugging and monitoring. This queue may be in active use. Retrieving the task queue does not prevent queued tasks from executing. Each element of this queue is a @B_java#util#concurrent#ScheduledFuture_E@. For tasks submitted via one of the schedule methods, the element will be identical to the returned ScheduledFuture. For tasks submitted using @B_java#util#concurrent#ScheduledThreadPoolExecutor#execute_E@, the element will be a zero-delay ScheduledFuture. Iteration over this queue is not guaranteed to traverse tasks in the order in which they will execute.", "history": "Added in API level 1", "FullName": "public BlockingQueue<Runnable> getQueue ()"}, "decorateTask(java.lang.Runnable,java.util.concurrent.RunnableScheduledFuture<V>)": {"Returns": [["@B_java#util#concurrent#RunnableScheduledFuture_E@", "a task that can execute the runnable"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the submitted Runnable"], ["@B_java#util#concurrent#RunnableScheduledFuture_E@", "RunnableScheduledFuture: the task created to execute the runnable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Modifies or replaces the task used to execute a runnable. This method can be used to override the concrete class used for managing internal tasks. The default implementation simply returns the given task.", "history": "Added in API level 9", "FullName": "protected RunnableScheduledFuture<V> decorateTask (Runnable runnable, RunnableScheduledFuture<V> task)"}, "ScheduledThreadPoolExecutor(int)": {"Returns": [], "Parameters": [["int", "int: the number of threads to keep in the pool, even if they are idle, unless allowCoreThreadTimeOut is set"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if corePoolSize < 0"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new ScheduledThreadPoolExecutor with the given core pool size.", "history": "Added in API level 1", "FullName": "public ScheduledThreadPoolExecutor (int corePoolSize)"}, "decorateTask(java.util.concurrent.Callable<V>,java.util.concurrent.RunnableScheduledFuture<V>)": {"Returns": [["@B_java#util#concurrent#RunnableScheduledFuture_E@", "a task that can execute the callable"]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable: the submitted Callable"], ["@B_java#util#concurrent#RunnableScheduledFuture_E@", "RunnableScheduledFuture: the task created to execute the callable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Modifies or replaces the task used to execute a callable. This method can be used to override the concrete class used for managing internal tasks. The default implementation simply returns the given task.", "history": "Added in API level 9", "FullName": "protected RunnableScheduledFuture<V> decorateTask (Callable<V> callable, RunnableScheduledFuture<V> task)"}, "schedule(java.util.concurrent.Callable<V>,long,java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#util#concurrent#ScheduledFuture_E@", "a ScheduledFuture that can be used to extract result or cancel"]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable: the function to execute"], ["long", "long: the time from now to delay execution"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the delay parameter"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates and executes a ScheduledFuture that becomes enabled after the given delay.", "history": "Added in API level 1", "FullName": "public ScheduledFuture<V> schedule (Callable<V> callable, long delay, TimeUnit unit)"}, "execute(java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to execute"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", "at discretion of RejectedExecutionHandler, if the task cannot be accepted for execution because the executor has been shut down"], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Executes command with zero required delay. This has effect equivalent to @B_java#util#concurrent#ScheduledThreadPoolExecutor#schedule_E@. Note that inspections of the queue and of the list returned by shutdownNow will access the zero-delayed @B_java#util#concurrent#ScheduledFuture_E@, not the command itself. A consequence of the use of ScheduledFuture objects is that @B_java#util#concurrent#ThreadPoolExecutor#afterExecute_E@ is always called with a null second Throwable argument, even if the command terminated abruptly. Instead, the Throwable thrown by such a task can be obtained via @B_java#util#concurrent#Future#get_E@.", "history": "Added in API level 1", "FullName": "public void execute (Runnable command)"}, "getExecuteExistingDelayedTasksAfterShutdownPolicy()": {"Returns": [["boolean", "true if will execute after shutdown"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#concurrent#ScheduledThreadPoolExecutor#setExecuteExistingDelayedTasksAfterShutdownPolicy_E@"], "Permissions": [], "Description": "Gets the policy on whether to execute existing delayed tasks even when this executor has been shutdown. In this case, these tasks will only terminate upon shutdownNow, or after setting the policy to false when already shutdown. This value is by default true.", "history": "Added in API level 1", "FullName": "public boolean getExecuteExistingDelayedTasksAfterShutdownPolicy ()"}, "ScheduledThreadPoolExecutor(int,java.util.concurrent.RejectedExecutionHandler)": {"Returns": [], "Parameters": [["int", "int: the number of threads to keep in the pool, even if they are idle, unless allowCoreThreadTimeOut is set"], ["@B_java#util#concurrent#RejectedExecutionHandler_E@", "RejectedExecutionHandler: the handler to use when execution is blocked because the thread bounds and queue capacities are reached"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if corePoolSize < 0"], ["@B_java#lang#NullPointerException_E@", "if handler is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new ScheduledThreadPoolExecutor with the given initial parameters.", "history": "Added in API level 1", "FullName": "public ScheduledThreadPoolExecutor (int corePoolSize, RejectedExecutionHandler handler)"}, "submit(java.util.concurrent.Callable<T>)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable: the task to submit"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Submits a value-returning task for execution and returns a Future representing the pending results of the task. The Future's get method will return the task's result upon successful completion. If you would like to immediately block waiting for a task, you can use constructions of the form result = exec.submit(aCallable).get(); Note: The @B_java#util#concurrent#Executors_E@ class includes a set of methods that can convert some other common closure-like objects, for example, @B_java#security#PrivilegedAction_E@ to @B_java#util#concurrent#Callable_E@ form so they can be submitted.", "history": "Added in API level 1", "FullName": "public Future<T> submit (Callable<T> task)"}}, "Inheritance": ["@B_java#util#concurrent#AbstractExecutorService_E@", "@B_java#util#concurrent#ThreadPoolExecutor_E@"], "ClassName": "java.util.concurrent.ScheduledThreadPoolExecutor", "ClassDesc": "A @B_java#util#concurrent#ThreadPoolExecutor_E@ that can additionally schedule commands to run after a given delay, or to execute periodically. This class is preferable to @B_java#util#Timer_E@ when multiple worker threads are needed, or when the additional flexibility or capabilities of @B_java#util#concurrent#ThreadPoolExecutor_E@ (which this class extends) are required. Delayed tasks execute no sooner than they are enabled, but without any real-time guarantees about when, after they are enabled, they will commence. Tasks scheduled for exactly the same execution time are enabled in first-in-first-out (FIFO) order of submission. When a submitted task is cancelled before it is run, execution is suppressed. By default, such a cancelled task is not automatically removed from the work queue until its delay elapses. While this enables further inspection and monitoring, it may also cause unbounded retention of cancelled tasks. Successive executions of a periodic task scheduled via @B_java#util#concurrent#ScheduledThreadPoolExecutor#scheduleAtFixedRate_E@ or @B_java#util#concurrent#ScheduledThreadPoolExecutor#scheduleWithFixedDelay_E@ do not overlap. While different executions may be performed by different threads, the effects of prior executions While this class inherits from @B_java#util#concurrent#ThreadPoolExecutor_E@, a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using corePoolSize threads and an unbounded queue, adjustments to maximumPoolSize have no useful effect. Additionally, it is almost never a good idea to set corePoolSize to zero or use allowCoreThreadTimeOut because this may leave the pool without threads to handle tasks once they become eligible to run. @B_java#util#concurrent#ThreadPoolExecutor#execute_E@ and @B_java#util#concurrent#AbstractExecutorService#submit_E@ methods to generate internal @B_java#util#concurrent#ScheduledFuture_E@ objects to control per-task delays and scheduling. To preserve functionality, any further overrides of these methods in subclasses must invoke superclass versions, which effectively disables additional task customization. However, this class provides alternative protected extension method decorateTask (one version each for Runnable and Callable) that can be used to customize the concrete task types used to execute commands entered via execute, submit, schedule, scheduleAtFixedRate, and scheduleWithFixedDelay. By default, a ScheduledThreadPoolExecutor uses a task type extending @B_java#util#concurrent#FutureTask_E@. However, this may be modified or replaced using subclasses of the form:"}