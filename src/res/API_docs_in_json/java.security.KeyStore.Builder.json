{"Functions": {"KeyStore.Builder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a new Builder.", "history": "Added in API level 1", "FullName": "protected KeyStore.Builder ()"}, "getKeyStore()": {"Returns": [["@B_java#security#KeyStore_E@", "the KeyStore described by this object"]], "Parameters": [], "Throws": [["@B_java#security#KeyStoreException_E@", "if an error occurred during the operation, for example if the KeyStore could not be instantiated or loaded"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the KeyStore described by this object.", "history": "Added in API level 1", "FullName": "public abstract KeyStore getKeyStore ()"}, "getProtectionParameter(java.lang.String)": {"Returns": [["@B_java#security#KeyStore#ProtectionParameter_E@", "the ProtectionParameters that should be used to obtain the @B_java#security#KeyStore#Entry_E@ with the given alias."]], "Parameters": [["@B_java#lang#String_E@", "String: the alias of the KeyStore entry"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if alias is null"], ["@B_java#security#KeyStoreException_E@", "if an error occurred during the operation"], ["@B_java#lang#IllegalStateException_E@", "if the getKeyStore method has not been invoked prior to calling this method"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the ProtectionParameters that should be used to obtain the @B_java#security#KeyStore#Entry_E@ with the given alias. The getKeyStore method must be invoked before this method may be called.", "history": "Added in API level 1", "FullName": "public abstract KeyStore.ProtectionParameter getProtectionParameter (String alias)"}, "newInstance(java.security.KeyStore,java.security.KeyStore.ProtectionParameter)": {"Returns": [["@B_java#security#KeyStore#Builder_E@", "a new Builder object"]], "Parameters": [["@B_java#security#KeyStore_E@", "KeyStore: the KeyStore to be encapsulated"], ["@B_java#security#KeyStore#ProtectionParameter_E@", "KeyStore.ProtectionParameter: the ProtectionParameter used to protect the KeyStore entries"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if keyStore or protectionParameters is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the keyStore has not been initialized"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new Builder that encapsulates the given KeyStore. The keyStore, the protectionParameters. This is useful if an existing KeyStore object needs to be used with Builder-based APIs.", "history": "Added in API level 1", "FullName": "public static KeyStore.Builder newInstance (KeyStore keyStore, KeyStore.ProtectionParameter protectionParameter)"}, "newInstance(java.lang.String,java.security.Provider,java.io.File,java.security.KeyStore.ProtectionParameter)": {"Returns": [["@B_java#security#KeyStore#Builder_E@", "a new Builder object"]], "Parameters": [["@B_java#lang#String_E@", "String: the type of KeyStore to be constructed"], ["@B_java#security#Provider_E@", "Provider: the provider from which the KeyStore is to be instantiated (or null)"], ["@B_java#io#File_E@", "File: the File that contains the KeyStore data"], ["@B_java#security#KeyStore#ProtectionParameter_E@", "KeyStore.ProtectionParameter: the ProtectionParameter securing the KeyStore data"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if type, file or protection is null"], ["@B_java#lang#IllegalArgumentException_E@", "if protection is not an instance of either PasswordProtection or CallbackHandlerProtection; or if file does not exist or does not refer to a normal file"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new Builder object. The first call to the @B_java#security#KeyStore#Builder#getKeyStore_E@ method on the returned builder will create a KeyStore of type type and call its @B_java#security#KeyStore#load_E@ method. The inputStream argument is constructed from file. If protection is a PasswordProtection, the password is obtained by calling the getPassword method. Otherwise, if protection is a CallbackHandlerProtection, the password is obtained by invoking the CallbackHandler. Subsequent calls to @B_java#security#KeyStore#Builder#getKeyStore_E@ return the same object as the initial call. If the initial call to failed with a KeyStoreException, subsequent calls also throw a KeyStoreException. The KeyStore is instantiated from provider if non-null. Otherwise, all installed providers are searched. Calls to @B_java#security#KeyStore#Builder#getProtectionParameter_E@ will return a @B_java#security#KeyStore#PasswordProtection_E@ object encapsulating the password that was used to invoke the load method. Note that the @B_java#security#KeyStore#Builder#getKeyStore_E@ method is executed within the @B_java#security#AccessControlContext_E@ of the code invoking this method.", "history": "Added in API level 1", "FullName": "public static KeyStore.Builder newInstance (String type, Provider provider, File file, KeyStore.ProtectionParameter protection)"}, "newInstance(java.lang.String,java.security.Provider,java.security.KeyStore.ProtectionParameter)": {"Returns": [["@B_java#security#KeyStore#Builder_E@", "a new Builder object"]], "Parameters": [["@B_java#lang#String_E@", "String: the type of KeyStore to be constructed"], ["@B_java#security#Provider_E@", "Provider: the provider from which the KeyStore is to be instantiated (or null)"], ["@B_java#security#KeyStore#ProtectionParameter_E@", "KeyStore.ProtectionParameter: the ProtectionParameter securing the Keystore"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if type or protection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new Builder object. Each call to the @B_java#security#KeyStore#Builder#getKeyStore_E@ method on the returned builder will return a new KeyStore object of type type. Its @B_java#security#KeyStore#load_E@ method is invoked using a LoadStoreParameter that encapsulates protection. The KeyStore is instantiated from provider if non-null. Otherwise, all installed providers are searched. Calls to @B_java#security#KeyStore#Builder#getProtectionParameter_E@ will return protection. Note that the @B_java#security#KeyStore#Builder#getKeyStore_E@ method is executed within the @B_java#security#AccessControlContext_E@ of the code invoking this method.", "history": "Added in API level 1", "FullName": "public static KeyStore.Builder newInstance (String type, Provider provider, KeyStore.ProtectionParameter protection)"}}, "Inheritance": [], "ClassName": "java.security.KeyStore.Builder", "ClassDesc": "A description of a to-be-instantiated KeyStore object. An instance of this class encapsulates the information needed to instantiate and initialize a KeyStore object. That process is triggered when the This makes it possible to decouple configuration from KeyStore object creation and e.g. delay a password prompt until it is needed."}