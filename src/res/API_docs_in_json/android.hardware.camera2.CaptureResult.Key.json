{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "string representation of @B_android#hardware#camera2#CaptureResult#Key_E@ This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return this @B_android#hardware#camera2#CaptureResult#Key_E@ as a string representation. \"CaptureResult.Key(%s)\", where %s represents the name of this key as returned by @B_android#hardware#camera2#CaptureResult#Key#getName_E@.", "history": "Added in API level 21", "FullName": "public String toString ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 21", "FullName": "public boolean equals (Object o)"}, "CaptureResult.Key(java.lang.String,java.lang.Class<T>)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."], ["@B_java#lang#Class_E@", "Class: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a new Key with a given name and type. Normally, applications should use the existing Key definitions in @B_android#hardware#camera2#CaptureResult_E@, and not need to construct their own Key objects. However, they may be useful for testing purposes and for defining custom capture result fields.", "history": "Added in API level 29", "FullName": "public CaptureResult.Key (String name, Class<T> type)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "String representation of the key name This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a camelCase, period separated name formatted like: \"root.section[.subsections].name\". Built-in keys exposed by the Android SDK are always prefixed with \"android.\"; keys that are device/platform-specific are prefixed with \"com.\". For example, CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP would have a name of \"android.scaler.streamConfigurationMap\"; whereas a device specific key might look like \"com.google.nexus.data.private\".", "history": "Added in API level 21", "FullName": "public String getName ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.hardware.camera2.CaptureResult.Key<T>", "ClassDesc": "A Key is used to do capture result field lookups with @B_android#hardware#camera2#CaptureResult#get_E@. For example, to get the timestamp corresponding to the exposure of the first row: long timestamp = captureResult.get(CaptureResult.SENSOR_TIMESTAMP); To enumerate over all possible keys for @B_android#hardware#camera2#CaptureResult_E@, see @B_android#hardware#camera2#CameraCharacteristics#getAvailableCaptureResultKeys_E@."}