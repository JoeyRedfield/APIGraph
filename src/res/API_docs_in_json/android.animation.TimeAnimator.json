{"Functions": {"start()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts this animation. If the animation has a nonzero startDelay, the animation will start running after that delay elapses. A non-delayed animation will have its initial value(s) set immediately, followed by calls to @B_android#animation#Animator#AnimatorListener#onAnimationStart_E@ for any listeners of this animator. The animation started by calling this method will be run on the thread that called this method. This thread should have a Looper on it (a runtime exception will be thrown if this is not the case). Also, if the animation will animate properties of objects in the view hierarchy, then the calling thread should be the UI thread for that view hierarchy.", "history": "Added in API level 16", "FullName": "public void start ()"}, "TimeAnimator()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 16", "FullName": "public TimeAnimator ()"}, "setTimeListener(android.animation.TimeAnimator.TimeListener)": {"Returns": [], "Parameters": [["@B_android#animation#TimeAnimator#TimeListener_E@", "TimeAnimator.TimeListener: the listener to be set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a listener that is sent update events throughout the life of an animation.", "history": "Added in API level 16", "FullName": "public void setTimeListener (TimeAnimator.TimeListener listener)"}, "setCurrentPlayTime(long)": {"Returns": [], "Parameters": [["long", "long: The time, in milliseconds, to which the animation is advanced or rewound."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the position of the animation to the specified point in time. This time should be between 0 and the total duration of the animation, including any repetition. If the animation has not yet been started, then it will not advance forward after it is set to this time; it will simply set the time to this value and perform any appropriate actions based on that time. If the animation is already running, then setCurrentPlayTime() will set the current playing time to this value and continue playing from that point.", "history": "Added in API level 16", "FullName": "public void setCurrentPlayTime (long playTime)"}}, "Inheritance": ["@B_android#animation#Animator_E@", "@B_android#animation#ValueAnimator_E@"], "ClassName": "android.animation.TimeAnimator", "ClassDesc": "This class provides a simple callback mechanism to listeners that is synchronized with all other animators in the system. There is no duration, interpolation, or object value-setting with this Animator. Instead, it is simply started, after which it proceeds to send out events on every animation frame to its TimeListener (if set), with information about this animator, the total elapsed time, and the elapsed time since the previous animation frame."}