{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 3", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "LeadingMarginSpan.Standard(int)": {"Returns": [], "Parameters": [["int", "int: the indent of each line"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor taking an indent for all lines.", "history": "Added in API level 1", "FullName": "public LeadingMarginSpan.Standard (int every)"}, "drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas"], ["@B_android#graphics#Paint_E@", "Paint: the paint. The this should be left unchanged on exit."], ["int", "int: the current position of the margin"], ["int", "int: the base direction of the paragraph; if negative, the margin is to the right of the text, otherwise it is to the left."], ["int", "int: the top of the line"], ["int", "int: the baseline of the line"], ["int", "int: the bottom of the line"], ["@B_java#lang#CharSequence_E@", "CharSequence: the text"], ["int", "int: the start of the line"], ["int", "int: the end of the line"], ["boolean", "boolean: true if this is the first line of its paragraph"], ["@B_android#text#Layout_E@", "Layout: the layout containing this line"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Renders the leading margin. This is called before the margin has been adjusted by the value returned by @B_android#text#style#LeadingMarginSpan#getLeadingMargin_E@.", "history": "Added in API level 1", "FullName": "public void drawLeadingMargin (Canvas c, Paint p, int x, int dir, int top, int baseline, int bottom, CharSequence text, int start, int end, boolean first, Layout layout)"}, "LeadingMarginSpan.Standard(int,int)": {"Returns": [], "Parameters": [["int", "int: the indent for the first line of the paragraph"], ["int", "int: the indent for the remaining lines of the paragraph"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor taking separate indents for the first and subsequent lines.", "history": "Added in API level 1", "FullName": "public LeadingMarginSpan.Standard (int first, int rest)"}, "LeadingMarginSpan.Standard(int, int)": {"Returns": [], "Parameters": [["int", "int: the indent for the first line of the paragraph"], ["int", "int: the indent for the remaining lines of the paragraph"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor taking separate indents for the first and subsequent lines.", "history": "added in API level 1", "FullName": "public LeadingMarginSpan.Standard (int first, int rest)"}, "LeadingMarginSpan.Standard(android.os.Parcel)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public LeadingMarginSpan.Standard (Parcel src)"}, "getSpanTypeId()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a special type identifier for this span class.", "history": "Added in API level 3", "FullName": "public int getSpanTypeId ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 3", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 3", "FullName": "public int describeContents ()"}, "getLeadingMargin(boolean)": {"Returns": [["int", "the offset for the margin."]], "Parameters": [["boolean", "boolean: true if the request is for the first line of a paragraph, false for subsequent lines"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the amount by which to adjust the leading margin. Positive values move away from the leading edge of the paragraph, negative values move towards it.", "history": "Added in API level 1", "FullName": "public int getLeadingMargin (boolean first)"}}, "Inheritance": [], "ClassName": "android.text.style.LeadingMarginSpan.Standard", "ClassDesc": "The standard implementation of LeadingMarginSpan, which adjusts the margin but does not do any rendering."}