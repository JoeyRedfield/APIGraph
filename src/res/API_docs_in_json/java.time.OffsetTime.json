{"Functions": {"minusSeconds(long)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the seconds subtracted, not null"]], "Parameters": [["long", "long: the seconds to subtract, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetTime with the specified number of seconds subtracted. This subtracts the specified number of seconds from this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime minusSeconds (long seconds)"}, "withMinute(int)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the requested minute, not null"]], "Parameters": [["int", "int: the minute-of-hour to set in the result, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the minute value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetTime with the minute-of-hour altered. The offset does not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime withMinute (int minute)"}, "truncatedTo(java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the time truncated, not null"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to truncate to, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to truncate"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetTime with the time truncated. Truncation returns a copy of the original time with fields smaller than the specified unit set to zero. For example, truncating with the @B_java#time#temporal#ChronoUnit#MINUTES_E@ unit will set the second-of-minute and nano-of-second field to zero. The unit must have a @B_java#time#temporal#ChronoUnit_E@ and @B_java#time#temporal#ChronoUnit#DAYS_E@. Other units throw an exception. The offset does not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime truncatedTo (TemporalUnit unit)"}, "plus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the specified amount added, not null"]], "Parameters": [["long", "long: the amount of the unit to add to the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified amount added. This returns an OffsetTime, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoUnit_E@ then the addition is implemented by @B_java#time#LocalTime#plus_E@. The offset is not part of the calculation and will be unchanged in the result. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime plus (long amountToAdd, TemporalUnit unit)"}, "toLocalTime()": {"Returns": [["@B_java#time#LocalTime_E@", "the time part of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the LocalTime part of this date-time. This returns a LocalTime with the same hour, minute, second and nanosecond as this date-time.", "history": "Added in API level 26", "FullName": "public LocalTime toLocalTime ()"}, "of(int,int,int,int,java.time.ZoneOffset)": {"Returns": [["@B_java#time#OffsetTime_E@", "the offset time, not null"]], "Parameters": [["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"], ["int", "int: the nano-of-second to represent, from 0 to 999,999,999"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetTime from an hour, minute, second and nanosecond. This creates an offset time with the four specified fields. This method exists primarily for writing test cases. Non test-code will typically use other methods to create an offset time. LocalTime has two additional convenience variants of the equivalent factory method taking fewer arguments. They are not provided here to reduce the footprint of the API.", "history": "Added in API level 26", "FullName": "public static OffsetTime of (int hour, int minute, int second, int nanoOfSecond, ZoneOffset offset)"}, "plusSeconds(long)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the seconds added, not null"]], "Parameters": [["long", "long: the seconds to add, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetTime with the specified number of seconds added. This adds the specified number of seconds to this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime plusSeconds (long seconds)"}, "getLong(java.time.temporal.TemporalField)": {"Returns": [["long", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this time as a long. This queries this time for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#OffsetTime#isSupported_E@ will return valid values based on this time. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public long getLong (TemporalField field)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other time"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this time is equal to another time. The comparison is based on the local-time and the offset. To compare for the same instant on the time-line, use @B_java#time#OffsetTime#isEqual_E@. Only objects of type OffsetTime are compared, other types return false. To compare the underlying local time of two TemporalAccessor instances, use @B_java#time#temporal#ChronoField#NANO_OF_DAY_E@ as a comparator.", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "minusNanos(long)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the nanoseconds subtracted, not null"]], "Parameters": [["long", "long: the nanos to subtract, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetTime with the specified number of nanoseconds subtracted. This subtracts the specified number of nanoseconds from this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime minusNanos (long nanos)"}, "with(java.time.temporal.TemporalField,long)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the field cannot be set"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified field set to a new value. This returns an OffsetTime, based on this one, with the value for the specified field changed. This can be used to change any supported field, such as the hour, minute or second. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the adjustment is implemented here. The OFFSET_SECONDS field will return a time with the specified offset. The local time is unaltered. If the new offset value is outside the valid range then a DateTimeException will be thrown. The other @B_java#time#OffsetTime#isSupported_E@ will behave as per the matching method on @B_java#time#LocalTime#with_E@ LocalTime}. In this case, the offset is not part of the calculation and will be unchanged. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime with (TemporalField field, long newValue)"}, "minus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the subtraction made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified amount subtracted. This returns an OffsetTime, based on this one, with the specified amount subtracted. The amount is typically @B_java#time#Duration_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface. The calculation is delegated to the amount object by calling @B_java#time#temporal#TemporalAmount#subtractFrom_E@. The amount implementation is free to implement the subtraction in any way it wishes, however it typically calls back to @B_java#time#OffsetTime#minus_E@. Consult the documentation of the amount implementation to determine if it can be successfully subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime minus (TemporalAmount amountToSubtract)"}, "now()": {"Returns": [["@B_java#time#OffsetTime_E@", "the current time using the system clock and default time-zone, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current time from the system clock in the default time-zone. This will query the @B_java#time#Clock#systemDefaultZone_E@ in the default time-zone to obtain the current time. The offset will be calculated from the time-zone in the clock. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static OffsetTime now ()"}, "getOffset()": {"Returns": [["@B_java#time#ZoneOffset_E@", "the zone offset, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the zone offset, such as '+01:00'. This is the offset of the local time from UTC/Greenwich.", "history": "Added in API level 26", "FullName": "public ZoneOffset getOffset ()"}, "range(java.time.temporal.TemporalField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to query the range for, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the range for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This time is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#OffsetTime#isSupported_E@ will return appropriate range instances. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.", "history": "Added in API level 26", "FullName": "public ValueRange range (TemporalField field)"}, "withHour(int)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the requested hour, not null"]], "Parameters": [["int", "int: the hour-of-day to set in the result, from 0 to 23"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the hour value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetTime with the hour-of-day altered. The offset does not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime withHour (int hour)"}, "withSecond(int)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the requested second, not null"]], "Parameters": [["int", "int: the second-of-minute to set in the result, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the second value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetTime with the second-of-minute altered. The offset does not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime withSecond (int second)"}, "query(java.time.temporal.TemporalQuery<R>)": {"Returns": [["R", "the query result, null may be returned (defined by the query)"]], "Parameters": [["@B_java#time#temporal#TemporalQuery_E@", "TemporalQuery: the query to invoke, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query (defined by the query)"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs (defined by the query)"]], "SeeAlso": [], "Permissions": [], "Description": "Queries this time using the specified query. This queries this time using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalQuery#queryFrom_E@ method on the specified query passing this as the argument.", "history": "Added in API level 26", "FullName": "public R query (TemporalQuery<R> query)"}, "withOffsetSameInstant(java.time.ZoneOffset)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the requested offset, not null"]], "Parameters": [["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset to change to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetTime with the specified offset ensuring that the result is at the same instant on an implied day. This method returns an object with the specified ZoneOffset and a LocalTime adjusted by the difference between the two offsets. This will result in the old and new objects representing the same instant on an implied day. This is useful for finding the local time in a different offset. For example, if this time represents 10:30+02:00 and the offset specified is +03:00, then this method will return 11:30+03:00. To change the offset without adjusting the local time use @B_java#time#OffsetTime#withOffsetSameLocal_E@. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime withOffsetSameInstant (ZoneOffset offset)"}, "isEqual(java.time.OffsetTime)": {"Returns": [["boolean", "true if this is equal to the instant of the specified time"]], "Parameters": [["@B_java#time#OffsetTime_E@", "OffsetTime: the other time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the instant of this OffsetTime is equal to that of the specified time applying both times to a common date. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ and @B_java#time#OffsetTime#equals_E@ in that it only compares the instant of the time. This is equivalent to converting both times to an instant using the same date and comparing the instants.", "history": "Added in API level 26", "FullName": "public boolean isEqual (OffsetTime other)"}, "minusMinutes(long)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the minutes subtracted, not null"]], "Parameters": [["long", "long: the minutes to subtract, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetTime with the specified number of minutes subtracted. This subtracts the specified number of minutes from this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime minusMinutes (long minutes)"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this time.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}, "isAfter(java.time.OffsetTime)": {"Returns": [["boolean", "true if this is after the instant of the specified time"]], "Parameters": [["@B_java#time#OffsetTime_E@", "OffsetTime: the other time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the instant of this OffsetTime is after that of the specified time applying both times to a common date. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ in that it only compares the instant of the time. This is equivalent to converting both times to an instant using the same date and comparing the instants.", "history": "Added in API level 26", "FullName": "public boolean isAfter (OffsetTime other)"}, "minusHours(long)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the hours subtracted, not null"]], "Parameters": [["long", "long: the hours to subtract, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetTime with the specified number of hours subtracted. This subtracts the specified number of hours from this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime minusHours (long hours)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this time as a String, such as 10:15:30+01:00. The output will be one of the following ISO-8601 formats: HH:mmXXXXX HH:mm:ssXXXXX HH:mm:ss.SSSXXXXX HH:mm:ss.SSSSSSXXXXX HH:mm:ss.SSSSSSSSSXXXXX The format used will be the shortest that outputs the full value of the time where the omitted parts are implied to be zero.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "with(java.time.temporal.TemporalField, long)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the field cannot be set"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified field set to a new value. This returns an OffsetTime, based on this one, with the value for the specified field changed. This can be used to change any supported field, such as the hour, minute or second. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the adjustment is implemented here. The OFFSET_SECONDS field will return a time with the specified offset. The local time is unaltered. If the new offset value is outside the valid range then a DateTimeException will be thrown. The other @B_java#time#OffsetTime#isSupported_E@ will behave as per the matching method on @B_java#time#LocalTime#with_E@ LocalTime}. In this case, the offset is not part of the calculation and will be unchanged. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.", "history": "added in API level 26", "FullName": "public OffsetTime with (TemporalField field, long newValue)"}, "plus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the specified amount added, not null"]], "Parameters": [["long", "long: the amount of the unit to add to the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified amount added. This returns an OffsetTime, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoUnit_E@ then the addition is implemented by @B_java#time#LocalTime#plus_E@. The offset is not part of the calculation and will be unchanged in the result. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.", "history": "added in API level 26", "FullName": "public OffsetTime plus (long amountToAdd, TemporalUnit unit)"}, "atDate(java.time.LocalDate)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "the offset date-time formed from this time and the specified date, not null"]], "Parameters": [["@B_java#time#LocalDate_E@", "LocalDate: the date to combine with, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Combines this time with a date to create an OffsetDateTime. This returns an OffsetDateTime formed from this time and the specified date. All possible combinations of date and time are valid.", "history": "Added in API level 26", "FullName": "public OffsetDateTime atDate (LocalDate date)"}, "of(int, int, int, int, java.time.ZoneOffset)": {"Returns": [["@B_java#time#OffsetTime_E@", "the offset time, not null"]], "Parameters": [["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"], ["int", "int: the nano-of-second to represent, from 0 to 999,999,999"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetTime from an hour, minute, second and nanosecond. This creates an offset time with the four specified fields. This method exists primarily for writing test cases. Non test-code will typically use other methods to create an offset time. LocalTime has two additional convenience variants of the equivalent factory method taking fewer arguments. They are not provided here to reduce the footprint of the API.", "history": "added in API level 26", "FullName": "public static OffsetTime of (int hour, int minute, int second, int nanoOfSecond, ZoneOffset offset)"}, "format(java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#lang#String_E@", "the formatted time string, not null"]], "Parameters": [["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if an error occurs during printing"]], "SeeAlso": [], "Permissions": [], "Description": "Formats this time using the specified formatter. This time will be passed to the formatter to produce a string.", "history": "Added in API level 26", "FullName": "public String format (DateTimeFormatter formatter)"}, "getHour()": {"Returns": [["int", "the hour-of-day, from 0 to 23"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the hour-of-day field.", "history": "Added in API level 26", "FullName": "public int getHour ()"}, "isBefore(java.time.OffsetTime)": {"Returns": [["boolean", "true if this is before the instant of the specified time"]], "Parameters": [["@B_java#time#OffsetTime_E@", "OffsetTime: the other time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the instant of this OffsetTime is before that of the specified time applying both times to a common date. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ in that it only compares the instant of the time. This is equivalent to converting both times to an instant using the same date and comparing the instants.", "history": "Added in API level 26", "FullName": "public boolean isBefore (OffsetTime other)"}, "getSecond()": {"Returns": [["int", "the second-of-minute, from 0 to 59"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the second-of-minute field.", "history": "Added in API level 26", "FullName": "public int getSecond ()"}, "plusNanos(long)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the nanoseconds added, not null"]], "Parameters": [["long", "long: the nanos to add, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetTime with the specified number of nanoseconds added. This adds the specified number of nanoseconds to this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime plusNanos (long nanos)"}, "of(java.time.LocalTime,java.time.ZoneOffset)": {"Returns": [["@B_java#time#OffsetTime_E@", "the offset time, not null"]], "Parameters": [["@B_java#time#LocalTime_E@", "LocalTime: the local time, not null"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetTime from a local time and an offset.", "history": "Added in API level 26", "FullName": "public static OffsetTime of (LocalTime time, ZoneOffset offset)"}, "adjustInto(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "the adjusted object, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the target object to be adjusted, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to make the adjustment"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts the specified temporal object to have the same offset and time as this object. This returns a temporal object of the same observable type as the input with the offset and time changed to be the same as this. The adjustment is equivalent to using @B_java#time#temporal#Temporal#with_E@ twice, passing @B_java#time#temporal#ChronoField#NANO_OF_DAY_E@ and @B_java#time#temporal#ChronoField#OFFSET_SECONDS_E@ as the fields. In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#with_E@: This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Temporal adjustInto (Temporal temporal)"}, "plusMinutes(long)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the minutes added, not null"]], "Parameters": [["long", "long: the minutes to add, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetTime with the specified number of minutes added. This adds the specified number of minutes to this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime plusMinutes (long minutes)"}, "ofInstant(java.time.Instant,java.time.ZoneId)": {"Returns": [["@B_java#time#OffsetTime_E@", "the offset time, not null"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to create the time from, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, which may be an offset, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetTime from an Instant and zone ID. This creates an offset time with the same instant as that specified. Finding the offset from UTC/Greenwich is simple as there is only one valid offset for each instant. The date component of the instant is dropped during the conversion. This means that the conversion can never fail due to the instant being out of the valid range of dates.", "history": "Added in API level 26", "FullName": "public static OffsetTime ofInstant (Instant instant, ZoneId zone)"}, "isSupported(java.time.temporal.TemporalField)": {"Returns": [["boolean", "true if the field is supported on this time, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified field is supported. This checks if this time can be queried for the specified field. If false, then calling the @B_java#time#OffsetTime#range_E@, @B_java#time#OffsetTime#get_E@ and @B_java#time#OffsetTime#with_E@ methods will throw an exception. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The supported fields are: NANO_OF_SECOND NANO_OF_DAY MICRO_OF_SECOND MICRO_OF_DAY MILLI_OF_SECOND MILLI_OF_DAY SECOND_OF_MINUTE SECOND_OF_DAY MINUTE_OF_HOUR MINUTE_OF_DAY HOUR_OF_AMPM CLOCK_HOUR_OF_AMPM HOUR_OF_DAY CLOCK_HOUR_OF_DAY AMPM_OF_DAY OFFSET_SECONDS All other ChronoField instances will return false. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalField field)"}, "plus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the addition made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified amount added. This returns an OffsetTime, based on this one, with the specified amount added. The amount is typically @B_java#time#Duration_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface. The calculation is delegated to the amount object by calling @B_java#time#temporal#TemporalAmount#addTo_E@. The amount implementation is free to implement the addition in any way it wishes, however it typically calls back to @B_java#time#OffsetTime#plus_E@. Consult the documentation of the amount implementation to determine if it can be successfully added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime plus (TemporalAmount amountToAdd)"}, "of(java.time.LocalTime, java.time.ZoneOffset)": {"Returns": [["@B_java#time#OffsetTime_E@", "the offset time, not null"]], "Parameters": [["@B_java#time#LocalTime_E@", "LocalTime: the local time, not null"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetTime from a local time and an offset.", "history": "added in API level 26", "FullName": "public static OffsetTime of (LocalTime time, ZoneOffset offset)"}, "parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#time#OffsetTime_E@", "the parsed offset time, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse, not null"], ["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetTime from a text string using a specific formatter. The text is parsed using the formatter, returning a time.", "history": "Added in API level 26", "FullName": "public static OffsetTime parse (CharSequence text, DateTimeFormatter formatter)"}, "minus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the specified amount subtracted, not null"]], "Parameters": [["long", "long: the amount of the unit to subtract from the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified amount subtracted. This returns an OffsetTime, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. This method is equivalent to @B_java#time#OffsetTime#plus_E@ with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.", "history": "added in API level 27", "FullName": "public OffsetTime minus (long amountToSubtract, TemporalUnit unit)"}, "until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)": {"Returns": [["long", "the amount of time between this time and the end time"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the end time, exclusive, which is converted to an OffsetTime, not null"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to measure the amount in, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the amount cannot be calculated, or the end temporal cannot be converted to an OffsetTime"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Calculates the amount of time until another time in terms of the specified unit. This calculates the amount of time between two OffsetTime objects in terms of a single TemporalUnit. The start and end points are this and the specified time. The result will be negative if the end is before the start. For example, the amount in hours between two times can be calculated using startTime.until(endTime, HOURS). The Temporal passed to this method is converted to a OffsetTime using @B_java#time#OffsetTime#from_E@. If the offset differs between the two times, then the specified end time is normalized to have the same offset as this time. The calculation returns a whole number, representing the number of complete units between the two times. For example, the amount in hours between 11:30Z and 13:29Z will only be one hour as it is one minute short of two hours. There are two equivalent ways of using this method. The first is to invoke this method. The second is to use @B_java#time#temporal#TemporalUnit#between_E@: The calculation is implemented in this method for @B_java#time#temporal#ChronoUnit_E@. The units NANOS, MICROS, MILLIS, SECONDS, MINUTES, HOURS and HALF_DAYS are supported. Other ChronoUnit values will throw an exception. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.between(Temporal, Temporal) passing this as the first argument and the converted input temporal as the second argument. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public long until (Temporal endExclusive, TemporalUnit unit)"}, "isSupported(java.time.temporal.TemporalUnit)": {"Returns": [["boolean", "true if the unit can be added/subtracted, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified unit is supported. This checks if the specified unit can be added to, or subtracted from, this offset-time. If false, then calling the @B_java#time#OffsetTime#plus_E@ and @B_java#time#OffsetTime#minus_E@ methods will throw an exception. If the unit is a @B_java#time#temporal#ChronoUnit_E@ then the query is implemented here. The supported units are: NANOS MICROS MILLIS SECONDS MINUTES HOURS HALF_DAYS All other ChronoUnit instances will return false. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument. Whether the unit is supported is determined by the unit.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalUnit unit)"}, "withNano(int)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the requested nanosecond, not null"]], "Parameters": [["int", "int: the nano-of-second to set in the result, from 0 to 999,999,999"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the nanos value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetTime with the nano-of-second altered. The offset does not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime withNano (int nanoOfSecond)"}, "withOffsetSameLocal(java.time.ZoneOffset)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the requested offset, not null"]], "Parameters": [["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset to change to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetTime with the specified offset ensuring that the result has the same local time. This method returns an object with the same LocalTime and the specified ZoneOffset. No calculation is needed or performed. For example, if this time represents 10:30+02:00 and the offset specified is +03:00, then this method will return 10:30+03:00. To take into account the difference between the offsets, and adjust the time fields, use @B_java#time#OffsetTime#withOffsetSameInstant_E@. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime withOffsetSameLocal (ZoneOffset offset)"}, "now(java.time.Clock)": {"Returns": [["@B_java#time#OffsetTime_E@", "the current time, not null"]], "Parameters": [["@B_java#time#Clock_E@", "Clock: the clock to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current time from the specified clock. This will query the specified clock to obtain the current time. The offset will be calculated from the time-zone in the clock. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using @B_java#time#Clock_E@.", "history": "Added in API level 26", "FullName": "public static OffsetTime now (Clock clock)"}, "ofInstant(java.time.Instant, java.time.ZoneId)": {"Returns": [["@B_java#time#OffsetTime_E@", "the offset time, not null"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to create the time from, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, which may be an offset, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetTime from an Instant and zone ID. This creates an offset time with the same instant as that specified. Finding the offset from UTC/Greenwich is simple as there is only one valid offset for each instant. The date component of the instant is dropped during the conversion. This means that the conversion can never fail due to the instant being out of the valid range of dates.", "history": "added in API level 26", "FullName": "public static OffsetTime ofInstant (Instant instant, ZoneId zone)"}, "minus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the specified amount subtracted, not null"]], "Parameters": [["long", "long: the amount of the unit to subtract from the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified amount subtracted. This returns an OffsetTime, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. This method is equivalent to @B_java#time#OffsetTime#plus_E@ with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime minus (long amountToSubtract, TemporalUnit unit)"}, "plusHours(long)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this time with the hours added, not null"]], "Parameters": [["long", "long: the hours to add, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetTime with the specified number of hours added. This adds the specified number of hours to this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime plusHours (long hours)"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#OffsetTime_E@", "the offset time, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to an OffsetTime"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetTime from a temporal object. This obtains an offset time based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of OffsetTime. The conversion extracts and combines the ZoneOffset and the LocalTime from the temporal object. Implementations are permitted to perform optimizations such as accessing those fields that are equivalent to the relevant objects. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, OffsetTime::from.", "history": "Added in API level 26", "FullName": "public static OffsetTime from (TemporalAccessor temporal)"}, "get(java.time.temporal.TemporalField)": {"Returns": [["int", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained or the value is outside the range of valid values for the field"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported or the range of values exceeds an int"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this time as an int. This queries this time for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#OffsetTime#isSupported_E@ will return valid values based on this time, except NANO_OF_DAY and MICRO_OF_DAY which are too large to fit in an int and throw a DateTimeException. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public int get (TemporalField field)"}, "compareTo(java.time.OffsetTime)": {"Returns": [["int", "the comparator value, negative if less, positive if greater"]], "Parameters": [["@B_java#time#OffsetTime_E@", "OffsetTime: the other time to compare to, not null"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if other is null"]], "SeeAlso": [], "Permissions": [], "Description": "Compares this OffsetTime to another time. The comparison is based first on the UTC equivalent instant, then on the local time. It is \"consistent with equals\", as defined by @B_java#lang#Comparable_E@. For example, the following is the comparator order: equals(). To compare the underlying local time of two TemporalAccessor instances, use @B_java#time#temporal#ChronoField#NANO_OF_DAY_E@ as a comparator.", "history": "Added in API level 26", "FullName": "public int compareTo (OffsetTime other)"}, "parse(java.lang.CharSequence)": {"Returns": [["@B_java#time#OffsetTime_E@", "the parsed local time, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse such as \"10:15:30+01:00\", not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetTime from a text string such as 10:15:30+01:00. The string must represent a valid time and is parsed using @B_java#time#format#DateTimeFormatter#ISO_OFFSET_TIME_E@.", "history": "Added in API level 26", "FullName": "public static OffsetTime parse (CharSequence text)"}, "now(java.time.ZoneId)": {"Returns": [["@B_java#time#OffsetTime_E@", "the current time using the system clock, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the zone ID to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current time from the system clock in the specified time-zone. This will query the @B_java#time#Clock#system_E@ to obtain the current time. Specifying the time-zone avoids dependence on the default time-zone. The offset will be calculated from the specified time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static OffsetTime now (ZoneId zone)"}, "with(java.time.temporal.TemporalAdjuster)": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime based on this with the adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAdjuster_E@", "TemporalAdjuster: the adjuster to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the adjustment cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an adjusted copy of this time. This returns an OffsetTime, based on this one, with the time adjusted. The adjustment takes place using the specified adjuster strategy object. Read the documentation of the adjuster to understand what adjustment will be made. A simple adjuster might simply set the one of the fields, such as the hour field. A more complex adjuster might set the time to the last hour of the day. The classes @B_java#time#LocalTime_E@ and @B_java#time#ZoneOffset_E@ implement TemporalAdjuster, thus this method can be used to change the time or offset: The result of this method is obtained by invoking the @B_java#time#temporal#TemporalAdjuster#adjustInto_E@ method on the specified adjuster passing this as the argument. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetTime with (TemporalAdjuster adjuster)"}, "getNano()": {"Returns": [["int", "the nano-of-second, from 0 to 999,999,999"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the nano-of-second field.", "history": "Added in API level 26", "FullName": "public int getNano ()"}, "getMinute()": {"Returns": [["int", "the minute-of-hour, from 0 to 59"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the minute-of-hour field.", "history": "Added in API level 26", "FullName": "public int getMinute ()"}}, "Inheritance": [], "ClassName": "java.time.OffsetTime", "ClassDesc": "A time with an offset from UTC/Greenwich in the ISO-8601 calendar system, such as 10:15:30+01:00. OffsetTime is an immutable date-time object that represents a time, often viewed as hour-minute-second-offset. This class stores all time fields, to a precision of nanoseconds, as well as a zone offset. For example, the value \"13:45.30.123456789+02:00\" can be stored in an OffsetTime."}