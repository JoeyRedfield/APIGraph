{"Functions": {"keyFor(java.nio.channels.Selector)": {"Returns": [["@B_java#nio#channels#SelectionKey_E@", "The key returned when this channel was last registered with the given selector, or null if this channel is not currently registered with that selector"]], "Parameters": [["@B_java#nio#channels#Selector_E@", "Selector: The selector"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the key representing the channel's registration with the given selector.", "history": "Added in API level 1", "FullName": "public final SelectionKey keyFor (Selector sel)"}, "AbstractSelectableChannel(java.nio.channels.spi.SelectorProvider)": {"Returns": [], "Parameters": [["@B_java#nio#channels#spi#SelectorProvider_E@", "SelectorProvider: The provider that created this channel"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 1", "FullName": "protected AbstractSelectableChannel (SelectorProvider provider)"}, "isBlocking()": {"Returns": [["boolean", "true if, and only if, this channel is in blocking mode"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not every I/O operation on this channel will block until it completes. A newly-created channel is always in blocking mode. If this channel is closed then the value returned by this method is not specified.", "history": "Added in API level 1", "FullName": "public final boolean isBlocking ()"}, "blockingLock()": {"Returns": [["@B_java#lang#Object_E@", "The blocking-mode lock object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the object upon which the @B_java#nio#channels#SelectableChannel#configureBlocking_E@ and @B_java#nio#channels#SelectableChannel#register_E@ methods synchronize. This is often useful in the implementation of adaptors that require a specific blocking mode to be maintained for a short period of time.", "history": "Added in API level 1", "FullName": "public final Object blockingLock ()"}, "implCloseSelectableChannel()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Closes this selectable channel. This method is invoked by the @B_java#nio#channels#Channel#close_E@ method in order to perform the actual work of closing the channel. This method is only invoked if the channel has not yet been closed, and it is never invoked more than once. An implementation of this method must arrange for any other thread that is blocked in an I/O operation upon this channel to return immediately, either by throwing an exception or by returning normally.", "history": "Added in API level 1", "FullName": "protected abstract void implCloseSelectableChannel ()"}, "implConfigureBlocking(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true then this channel will be placed in blocking mode; if false then it will be placed non-blocking mode"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts this channel's blocking mode. This method is invoked by the @B_java#nio#channels#spi#AbstractSelectableChannel#configureBlocking_E@ method in order to perform the actual work of changing the blocking mode. This method is only invoked if the new mode is different from the current mode.", "history": "Added in API level 1", "FullName": "protected abstract void implConfigureBlocking (boolean block)"}, "implCloseChannel()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closes this channel. This method, which is specified in the @B_java#nio#channels#spi#AbstractInterruptibleChannel_E@ class and is invoked by the @B_java#nio#channels#Channel#close_E@ method, in turn invokes the @B_java#nio#channels#spi#AbstractSelectableChannel#implCloseSelectableChannel_E@ method in order to perform the actual work of closing this channel. It then cancels all of this channel's keys.", "history": "Added in API level 1", "FullName": "protected final void implCloseChannel ()"}, "configureBlocking(boolean)": {"Returns": [["@B_java#nio#channels#SelectableChannel_E@", "This selectable channel"]], "Parameters": [["boolean", "boolean: If true then this channel will be placed in blocking mode; if false then it will be placed non-blocking mode"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts this channel's blocking mode. If the given blocking mode is different from the current blocking mode then this method invokes the @B_java#nio#channels#spi#AbstractSelectableChannel#implConfigureBlocking_E@ method, while holding the appropriate locks, in order to change the mode.", "history": "Added in API level 1", "FullName": "public final SelectableChannel configureBlocking (boolean block)"}, "isRegistered()": {"Returns": [["boolean", "true if, and only if, this channel is registered"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this channel is currently registered with any selectors. A newly-created channel is not registered. Due to the inherent delay between key cancellation and channel deregistration, a channel may remain registered for some time after all of its keys have been cancelled. A channel may also remain registered for some time after it is closed.", "history": "Added in API level 1", "FullName": "public final boolean isRegistered ()"}, "register(java.nio.channels.Selector,int,java.lang.Object)": {"Returns": [["@B_java#nio#channels#SelectionKey_E@", "A key representing the registration of this channel with the given selector"]], "Parameters": [["@B_java#nio#channels#Selector_E@", "Selector: The selector with which this channel is to be registered"], ["int", "int: The interest set for the resulting key"], ["@B_java#lang#Object_E@", "Object: The attachment for the resulting key; may be null"]], "Throws": [["@B_java#nio#channels#ClosedSelectorException_E@", ""], ["@B_java#nio#channels#IllegalBlockingModeException_E@", ""], ["@B_java#nio#channels#IllegalSelectorException_E@", ""], ["@B_java#nio#channels#CancelledKeyException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Registers this channel with the given selector, returning a selection key. This method first verifies that this channel is open and that the given initial interest set is valid. If this channel is already registered with the given selector then the selection key representing that registration is returned after setting its interest set to the given value. Otherwise this channel has not yet been registered with the given selector, so the @B_java#nio#channels#spi#AbstractSelector#register_E@ method of the selector is invoked while holding the appropriate locks. The resulting key is added to this channel's key set before being returned.", "history": "Added in API level 1", "FullName": "public final SelectionKey register (Selector sel, int ops, Object att)"}, "provider()": {"Returns": [["@B_java#nio#channels#spi#SelectorProvider_E@", "The provider that created this channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider that created this channel.", "history": "Added in API level 1", "FullName": "public final SelectorProvider provider ()"}}, "Inheritance": ["@B_java#nio#channels#spi#AbstractInterruptibleChannel_E@", "@B_java#nio#channels#SelectableChannel_E@"], "ClassName": "java.nio.channels.spi.AbstractSelectableChannel", "ClassDesc": "Base implementation class for selectable channels. This class defines methods that handle the mechanics of channel registration, deregistration, and closing. It maintains the current blocking mode of this channel as well as its current set of selection keys. It performs all of the synchronization required to implement the @B_java#nio#channels#SelectableChannel_E@ specification. Implementations of the abstract protected methods defined in this class need not synchronize against other threads that might be engaged in the same operations."}