{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 23", "FullName": "public String toString ()"}, "getFreezePeriods()": {"Returns": [["@B_java#util#List_E@", "the list of freeze periods, or an empty list if none was set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of freeze periods previously set on this system update policy object.", "history": "Added in API level 28", "FullName": "public List<FreezePeriod> getFreezePeriods ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 23", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getPolicyType()": {"Returns": [["int", "The policy type or -1 if the type isn't set. Value is @B_android#app#admin#SystemUpdatePolicy#TYPE_INSTALL_AUTOMATIC_E@, @B_android#app#admin#SystemUpdatePolicy#TYPE_INSTALL_WINDOWED_E@, or @B_android#app#admin#SystemUpdatePolicy#TYPE_POSTPONE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of system update policy, or -1 if no policy has been set.", "history": "Added in API level 23", "FullName": "public int getPolicyType ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 23", "FullName": "public int describeContents ()"}, "createWindowedInstallPolicy(int, int)": {"Returns": [["@B_android#app#admin#SystemUpdatePolicy_E@", "The configured policy."]], "Parameters": [["int", "int: the start of the maintenance window, measured as the number of minutes from midnight in the device's local time. Must be in the range of [0, 1440)."], ["int", "int: the end of the maintenance window, measured as the number of minutes from midnight in the device's local time. Must be in the range of [0, 1440)."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the startTime or endTime isn't in the accepted range."]], "SeeAlso": ["@B_android#app#admin#SystemUpdatePolicy_E@"], "Permissions": [], "Description": "Create a policy object and set it to: new system update will only be installed automatically when the system clock is inside a daily maintenance window. If the start and end times are the same, the window is considered to include the @B_android#app#admin#SystemUpdatePolicy#TYPE_INSTALL_WINDOWED_E@ for the details of this policy's behavior.", "history": "added in API level 23", "FullName": "public static SystemUpdatePolicy createWindowedInstallPolicy (int startTime, int endTime)"}, "createPostponeInstallPolicy()": {"Returns": [["@B_android#app#admin#SystemUpdatePolicy_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#admin#SystemUpdatePolicy_E@"], "Permissions": [], "Description": "Create a policy object and set it to block installation for a maximum period of 30 days. To learn more about this policy's behavior, see @B_android#app#admin#SystemUpdatePolicy#TYPE_POSTPONE_E@.", "history": "Added in API level 23", "FullName": "public static SystemUpdatePolicy createPostponeInstallPolicy ()"}, "getInstallWindowEnd()": {"Returns": [["int", "the end of the maintenance window measured as the number of minutes from midnight, or -1 if the policy does not have a maintenance window."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the end of the maintenance window.", "history": "Added in API level 23", "FullName": "public int getInstallWindowEnd ()"}, "createWindowedInstallPolicy(int,int)": {"Returns": [["@B_android#app#admin#SystemUpdatePolicy_E@", "The configured policy."]], "Parameters": [["int", "int: the start of the maintenance window, measured as the number of minutes from midnight in the device's local time. Must be in the range of [0, 1440)."], ["int", "int: the end of the maintenance window, measured as the number of minutes from midnight in the device's local time. Must be in the range of [0, 1440)."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the startTime or endTime isn't in the accepted range."]], "SeeAlso": ["@B_android#app#admin#SystemUpdatePolicy_E@"], "Permissions": [], "Description": "Create a policy object and set it to: new system update will only be installed automatically when the system clock is inside a daily maintenance window. If the start and end times are the same, the window is considered to include the @B_android#app#admin#SystemUpdatePolicy#TYPE_INSTALL_WINDOWED_E@ for the details of this policy's behavior.", "history": "Added in API level 23", "FullName": "public static SystemUpdatePolicy createWindowedInstallPolicy (int startTime, int endTime)"}, "setFreezePeriods(java.util.List<android.app.admin.FreezePeriod>)": {"Returns": [["@B_android#app#admin#SystemUpdatePolicy_E@", "this instance"]], "Parameters": [["@B_java#util#List_E@", "List: the list of freeze periods"]], "Throws": [["@B_android#app#admin#SystemUpdatePolicy#ValidationFailedException_E@", "if the supplied freeze periods do not meet the requirement set above"]], "SeeAlso": [], "Permissions": [], "Description": "Configure a list of freeze periods on top of the current policy. When the device's clock is within any of the freeze periods, all incoming system updates including security patches will be blocked and cannot be installed. When the device is outside the freeze periods, the normal policy behavior will apply. Each individual freeze period is allowed to be at most 90 days long, and adjacent freeze periods need to be at least 60 days apart. Also, the list of freeze periods should not contain duplicates or overlap with each other. If any of these conditions is not met, a @B_android#app#admin#SystemUpdatePolicy#ValidationFailedException_E@ will be thrown. Handling of leap year: we ignore leap years in freeze period calculations, in particular, When a freeze period is defined, February 29th is disregarded so even though a freeze period can be specified to start or end on February 29th, it will be treated as if the period started or ended on February 28th. When applying freeze period behavior to the device, a system clock of February 29th is treated as if it were February 28th When calculating the number of days of a freeze period or separation between two freeze periods, February 29th is also ignored and not counted as one day.", "history": "Added in API level 28", "FullName": "public SystemUpdatePolicy setFreezePeriods (List<FreezePeriod> freezePeriods)"}, "createAutomaticInstallPolicy()": {"Returns": [["@B_android#app#admin#SystemUpdatePolicy_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#admin#SystemUpdatePolicy_E@"], "Permissions": [], "Description": "Create a policy object and set it to install update automatically as soon as one is available.", "history": "Added in API level 23", "FullName": "public static SystemUpdatePolicy createAutomaticInstallPolicy ()"}, "getInstallWindowStart()": {"Returns": [["int", "the start of the maintenance window measured as the number of minutes from midnight, or -1 if the policy does not have a maintenance window."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the start of the maintenance window.", "history": "Added in API level 23", "FullName": "public int getInstallWindowStart ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 23", "FullName": "public void writeToParcel (Parcel dest, int flags)"}}, "Inheritance": [], "ClassName": "android.app.admin.SystemUpdatePolicy", "ClassDesc": "Determines when over-the-air system updates are installed on a device. Only a device policy controller (DPC) running in device owner mode can set an update policy for the device\u2014by calling the DevicePolicyManager method @B_android#app#admin#DevicePolicyManager#setSystemUpdatePolicy_E@. An update policy affects the pending system update (if there is one) and any future updates for the device. If a policy is set on a device, the system doesn't notify the user about updates. The example below shows how a DPC might set a maintenance window for system updates:"}