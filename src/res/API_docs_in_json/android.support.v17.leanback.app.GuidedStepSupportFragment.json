{"Functions": {"onProvideFragmentTransitions()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by Constructor to provide fragment transitions. The default implementation assigns transitions based on @B_android#support#v17#leanback#app#GuidedStepSupportFragment#getUiStyle_E@: @B_android#support#v17#leanback#app#GuidedStepSupportFragment#UI_STYLE_REPLACE_E@ Slide from/to end(right) for enter transition, slide from/to start(left) for exit transition, shared element enter transition is set to ChangeBounds. @B_android#support#v17#leanback#app#GuidedStepSupportFragment#UI_STYLE_ENTRANCE_E@ Enter transition is set to slide from both sides, exit transition is same as @B_android#support#v17#leanback#app#GuidedStepSupportFragment#UI_STYLE_REPLACE_E@, no shared element enter transition. @B_android#support#v17#leanback#app#GuidedStepSupportFragment#UI_STYLE_ACTIVITY_ROOT_E@ Enter transition is set to null and app should rely on activity transition, exit transition is same as @B_android#support#v17#leanback#app#GuidedStepSupportFragment#UI_STYLE_REPLACE_E@, no shared element enter transition. The default implementation heavily relies on @B_android#support#v17#leanback#widget#GuidedActionsStylist_E@ and @B_android#support#v17#leanback#widget#GuidanceStylist_E@ layout, app may override this method when modifying the default layout of @B_android#support#v17#leanback#widget#GuidedActionsStylist_E@ or @B_android#support#v17#leanback#widget#GuidanceStylist_E@. TIP: because the fragment view is removed during fragment transition, in general app cannot use two Visibility transition together. Workaround is to create your own Visibility transition that controls multiple animators (e.g. slide and fade animation in one Transition class).", "history": "added in version 23.1.0", "FullName": "void onProvideFragmentTransitions ()"}, "isFocusOutEndAllowed()": {"Returns": [["boolean", "True if allows focus out of end edge of GuidedStepSupportFragment."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if allows focus out of end edge of GuidedStepSupportFragment, false otherwise. Default value is false, the reason is to disable FocusFinder to find focusable views beneath content of GuidedStepSupportFragment. Subclass may override.", "history": "added in version 23.2.0", "FullName": "boolean isFocusOutEndAllowed ()"}, "finishGuidedStepSupportFragments()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenient method to close GuidedStepSupportFragments on top of other content or finish Activity if GuidedStepSupportFragments were started in a separate activity. Pops all stack entries including @B_android#support#v17#leanback#app#GuidedStepSupportFragment#UI_STYLE_ENTRANCE_E@; if @B_android#support#v17#leanback#app#GuidedStepSupportFragment#UI_STYLE_ENTRANCE_E@ is not found, finish the activity. Note that this method must be paired with @B_android#support#v17#leanback#app#GuidedStepSupportFragment#add_E@ which sets up the stack entry name for finding which fragment we need to pop back to.", "history": "added in version 23.2.0", "FullName": "void finishGuidedStepSupportFragments ()"}, "collapseAction(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to run transition animation, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Collapse action which either has a sub actions list or action with @B_android#support#v17#leanback#widget#GuidedAction#hasEditableActivatorView_E@ is true.", "history": "added in version 25.1.0", "FullName": "void collapseAction (boolean withTransition)"}, "findButtonActionPositionById(long)": {"Returns": [["int", "position of GuidedAction object in array or -1 if not found."]], "Parameters": [["long", "long: Id of the button action to search."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Find button GuidedAction position in array by Id.", "history": "added in version 23.2.0", "FullName": "int findButtonActionPositionById (long id)"}, "findActionById(long)": {"Returns": [["@B_android#support#v17#leanback#widget#GuidedAction_E@", "GuidedAction object or null if not found."]], "Parameters": [["long", "long: Id of the action to search."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Find GuidedAction by Id.", "history": "added in version 23.2.0", "FullName": "GuidedAction findActionById (long id)"}, "notifyActionChanged(int)": {"Returns": [], "Parameters": [["int", "int: Position of the GuidedAction in array."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify an action has changed and update its UI.", "history": "added in version 23.2.0", "FullName": "void notifyActionChanged (int position)"}, "getUiStyle()": {"Returns": [["int", "@B_android#support#v17#leanback#app#GuidedStepSupportFragment#UI_STYLE_ACTIVITY_ROOT_E@ @B_android#support#v17#leanback#app#GuidedStepSupportFragment#UI_STYLE_REPLACE_E@ or @B_android#support#v17#leanback#app#GuidedStepSupportFragment#UI_STYLE_ENTRANCE_E@."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v17#leanback#app#GuidedStepSupportFragment#onProvideFragmentTransitions_E@"], "Permissions": [], "Description": "Read UI style from fragment arguments. Default value is @B_android#support#v17#leanback#app#GuidedStepSupportFragment#UI_STYLE_ENTRANCE_E@ when fragment is first initialized. UI style is used to choose different fragment transition animations and determine if this is the first GuidedStepSupportFragment on backstack.", "history": "added in version 23.1.0", "FullName": "int getUiStyle ()"}, "getSelectedButtonActionPosition()": {"Returns": [["int", "position The integer position of the currently selected button action."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the position if the currently selected button GuidedAction.", "history": "added in version 23.2.0", "FullName": "int getSelectedButtonActionPosition ()"}, "setUiStyle(int)": {"Returns": [], "Parameters": [["int", "int: @B_android#support#v17#leanback#app#GuidedStepSupportFragment#UI_STYLE_ACTIVITY_ROOT_E@ @B_android#support#v17#leanback#app#GuidedStepSupportFragment#UI_STYLE_REPLACE_E@ or @B_android#support#v17#leanback#app#GuidedStepSupportFragment#UI_STYLE_ENTRANCE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set UI style to fragment arguments. Default value is @B_android#support#v17#leanback#app#GuidedStepSupportFragment#UI_STYLE_ENTRANCE_E@ when fragment is first initialized. UI style is used to choose different fragment transition animations and determine if this is the first GuidedStepSupportFragment on backstack. In most cases app does not directly call this method, app calls helper function @B_android#support#v17#leanback#app#GuidedStepSupportFragment#add_E@. However if the app creates Fragment transaction and controls backstack by itself, it would need call setUiStyle() to select the fragment transition to use.", "history": "added in version 23.1.0", "FullName": "void setUiStyle (int style)"}, "isSubActionsExpanded()": {"Returns": [["boolean", "True if the sub actions list is expanded, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.2.0", "FullName": "boolean isSubActionsExpanded ()"}, "getSelectedActionPosition()": {"Returns": [["int", "position The integer position of the currently selected action."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the position if the currently selected GuidedAction.", "history": "added in version 23.1.0", "FullName": "int getSelectedActionPosition ()"}, "notifyButtonActionChanged(int)": {"Returns": [], "Parameters": [["int", "int: Position of the button GuidedAction in array."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify an button action has changed and update its UI.", "history": "added in version 23.2.0", "FullName": "void notifyButtonActionChanged (int position)"}, "onDestroyView()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the view previously created by @B_android#support#v4#app#Fragment#onCreateView_E@ has been detached from the fragment. The next time the fragment needs to be displayed, a new view will be created. This is called after @B_android#support#v4#app#Fragment#onStop_E@ and before @B_android#support#v4#app#Fragment#onDestroy_E@. It is called regardless of whether @B_android#support#v4#app#Fragment#onCreateView_E@ returned a non-null view. Internally it is called after the view's state has been saved but before it has been removed from its parent.", "history": "added in version 23.1.0", "FullName": "void onDestroyView ()"}, "getActions()": {"Returns": [["@B_java#util#List_E@", "The list of GuidedActions for this fragment."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of GuidedActions that the user may take in this fragment.", "history": "added in version 23.1.0", "FullName": "List<GuidedAction> getActions ()"}, "setSelectedButtonActionPosition(int)": {"Returns": [], "Parameters": [["int", "int: The integer position of the button action of interest."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Scrolls the action list to the position indicated, selecting that button action's view.", "history": "added in version 23.2.0", "FullName": "void setSelectedButtonActionPosition (int position)"}, "collapseSubActions()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v17#leanback#widget#GuidedAction#getSubActions_E@"], "Permissions": [], "Description": "Collapse sub actions list.", "history": "added in version 23.2.0", "FullName": "void collapseSubActions ()"}, "findActionPositionById(long)": {"Returns": [["int", "position of GuidedAction object in array or -1 if not found."]], "Parameters": [["long", "long: Id of the action to search."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Find GuidedAction position in array by Id.", "history": "added in version 23.2.0", "FullName": "int findActionPositionById (long id)"}, "setSelectedActionPosition(int)": {"Returns": [], "Parameters": [["int", "int: The integer position of the action of interest."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Scrolls the action list to the position indicated, selecting that action's view.", "history": "added in version 23.1.0", "FullName": "void setSelectedActionPosition (int position)"}, "onCreateGuidanceStylist()": {"Returns": [["@B_android#support#v17#leanback#widget#GuidanceStylist_E@", "The GuidanceStylist used in this fragment."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates the presenter used to style the guidance panel. The default implementation returns a basic GuidanceStylist.", "history": "added in version 23.1.0", "FullName": "GuidanceStylist onCreateGuidanceStylist ()"}, "getActionItemView(int)": {"Returns": [["@B_android#view#View_E@", "The View corresponding to the action at the indicated position, or null if that action is not currently onscreen."]], "Parameters": [["int", "int: The integer position of the action of interest."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the view corresponding to the action at the indicated position in the list of actions for this fragment.", "history": "added in version 23.1.0", "FullName": "View getActionItemView (int position)"}, "onResume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment is visible to the user and actively running. This is generally tied to @B_android#app#Activity#onResume_E@ of the containing Activity's lifecycle.", "history": "added in version 23.1.0", "FullName": "void onResume ()"}, "getGuidedButtonActionsStylist()": {"Returns": [["@B_android#support#v17#leanback#widget#GuidedActionsStylist_E@", "The GuidedActionsStylist for this fragment."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the GuidedActionsStylist that displays the button actions the user may take.", "history": "added in version 23.2.0", "FullName": "GuidedActionsStylist getGuidedButtonActionsStylist ()"}, "findButtonActionById(long)": {"Returns": [["@B_android#support#v17#leanback#widget#GuidedAction_E@", "GuidedAction object or null if not found."]], "Parameters": [["long", "long: Id of the button action to search."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Find button GuidedAction by Id.", "history": "added in version 23.2.0", "FullName": "GuidedAction findButtonActionById (long id)"}, "onCreateGuidance(android.os.Bundle)": {"Returns": [["@B_android#support#v17#leanback#widget#GuidanceStylist#Guidance_E@", "The Guidance object representing the information used to guide the user."]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The saved instance state from onCreateView."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the information required to provide guidance to the user. This hook is called during @B_android#support#v17#leanback#app#GuidedStepSupportFragment#onCreateView_E@. May be overridden to return a custom subclass of @B_android#support#v17#leanback#widget#GuidanceStylist#Guidance_E@ for use in a subclass of @B_android#support#v17#leanback#widget#GuidanceStylist_E@. The default returns a Guidance object with empty fields; subclasses should override.", "history": "added in version 23.1.0", "FullName": "GuidanceStylist.Guidance onCreateGuidance (Bundle savedInstanceState)"}, "getButtonActions()": {"Returns": [["@B_java#util#List_E@", "The list of button GuidedActions for this fragment."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of button GuidedActions that the user may take in this fragment.", "history": "added in version 23.2.0", "FullName": "List<GuidedAction> getButtonActions ()"}, "onCreateButtonActionsStylist()": {"Returns": [["@B_android#support#v17#leanback#widget#GuidedActionsStylist_E@", "The GuidedActionsStylist used in this fragment."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates the presenter used to style a sided actions panel for button only. The default implementation returns a basic GuidedActionsStylist.", "history": "added in version 23.2.0", "FullName": "GuidedActionsStylist onCreateButtonActionsStylist ()"}, "getButtonActionItemView(int)": {"Returns": [["@B_android#view#View_E@", "The View corresponding to the button action at the indicated position, or null if that action is not currently onscreen."]], "Parameters": [["int", "int: The integer position of the button action of interest."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the view corresponding to the button action at the indicated position in the list of actions for this fragment.", "history": "added in version 23.2.0", "FullName": "View getButtonActionItemView (int position)"}, "isFocusOutStartAllowed()": {"Returns": [["boolean", "True if allows focus out of start edge of GuidedStepSupportFragment."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if allows focus out of start edge of GuidedStepSupportFragment, false otherwise. Default value is false, the reason is to disable FocusFinder to find focusable views beneath content of GuidedStepSupportFragment. Subclass may override.", "history": "added in version 23.2.0", "FullName": "boolean isFocusOutStartAllowed ()"}, "GuidedStepSupportFragment()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.1.0", "FullName": "GuidedStepSupportFragment ()"}, "getGuidanceStylist()": {"Returns": [["@B_android#support#v17#leanback#widget#GuidanceStylist_E@", "The GuidanceStylist for this fragment."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the GuidanceStylist that displays guidance information for the user.", "history": "added in version 23.1.0", "FullName": "GuidanceStylist getGuidanceStylist ()"}, "onSaveInstanceState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Bundle in which to place your saved state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted. If a new instance of the fragment later needs to be created, the data you place in the Bundle here will be available in the Bundle given to @B_android#support#v4#app#Fragment#onCreate_E@, @B_android#support#v4#app#Fragment#onCreateView_E@, and @B_android#support#v4#app#Fragment#onActivityCreated_E@. This corresponds to @B_android#app#Activity#onSaveInstanceState_E@ and most of the discussion there applies here as well. Note however: this method may be called at any time before @B_android#support#v4#app#Fragment#onDestroy_E@. There are many situations where a fragment may be mostly torn down (such as when placed on the back stack with no UI showing), but its state will not be saved until its owning activity actually needs to save its state.", "history": "added in version 23.1.0", "FullName": "void onSaveInstanceState (Bundle outState)"}, "isExpanded()": {"Returns": [["boolean", "True if is current expanded including subactions list or action with @B_android#support#v17#leanback#widget#GuidedAction#hasEditableActivatorView_E@ is true."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 25.1.0", "FullName": "boolean isExpanded ()"}, "getGuidedActionsStylist()": {"Returns": [["@B_android#support#v17#leanback#widget#GuidedActionsStylist_E@", "The GuidedActionsStylist for this fragment."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the GuidedActionsStylist that displays the actions the user may take.", "history": "added in version 23.1.0", "FullName": "GuidedActionsStylist getGuidedActionsStylist ()"}, "onCreateActionsStylist()": {"Returns": [["@B_android#support#v17#leanback#widget#GuidedActionsStylist_E@", "The GuidedActionsStylist used in this fragment."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates the presenter used to style the guided actions panel. The default implementation returns a basic GuidedActionsStylist.", "history": "added in version 23.1.0", "FullName": "GuidedActionsStylist onCreateActionsStylist ()"}, "onProvideTheme()": {"Returns": [["int", "The theme resource ID of the theme to use in this fragment, or -1 to use the host Activity's theme."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the theme used for styling the fragment. The default returns -1, indicating that the host Activity's theme should be used.", "history": "added in version 23.1.0", "FullName": "int onProvideTheme ()"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to do initial creation of a fragment. This is called after @B_android#support#v4#app#Fragment#onAttach_E@ and before @B_android#support#v4#app#Fragment#onCreateView_E@. Note that this can be called while the fragment's activity is still in the process of being created. As such, you can not rely on things like the activity's content view hierarchy being initialized at this point. If you want to do work once the activity itself is created, see @B_android#support#v4#app#Fragment#onActivityCreated_E@. Any restored child fragments will be created before the base Fragment.onCreate method returns.", "history": "added in version 23.1.0", "FullName": "void onCreate (Bundle savedInstanceState)"}}, "Inheritance": ["java.lang.Object", "@B_android#support#v4#app#Fragment_E@"], "ClassName": "android.support.v17.leanback.app.GuidedStepSupportFragment", "ClassDesc": "A GuidedStepSupportFragment is used to guide the user through a decision or series of decisions. It is composed of a guidance view on the left and a view on the right containing a list of possible actions. Clients of GuidedStepSupportFragment must create a custom subclass to attach to their Activities. This custom subclass provides the information necessary to construct the user interface and respond to user actions. At a minimum, subclasses should override: @B_android#support#v17#leanback#app#GuidedStepSupportFragment#onCreateGuidance_E@, to provide instructions to the user @B_android#support#v17#leanback#app#GuidedStepSupportFragment#onCreateActions_E@, to provide a set of @B_android#support#v17#leanback#widget#GuidedAction_E@s the user can take @B_android#support#v17#leanback#app#GuidedStepSupportFragment#onGuidedActionClicked_E@, to respond to those actions Clients use following helper functions to add GuidedStepSupportFragment to Activity or FragmentManager: @B_android#support#v17#leanback#app#GuidedStepSupportFragment#addAsRoot_E@, to be called during Activity onCreate, adds GuidedStepSupportFragment as the first Fragment in activity. @B_android#support#v17#leanback#app#GuidedStepSupportFragment#add_E@ or @B_android#support#v17#leanback#app#GuidedStepSupportFragment#add_E@, to add GuidedStepSupportFragment on top of existing Fragments or replacing existing GuidedStepSupportFragment when moving forward to next step. @B_android#support#v17#leanback#app#GuidedStepSupportFragment#finishGuidedStepSupportFragments_E@ can either finish the activity or pop all GuidedStepSupportFragment from stack. If app chooses not to use the helper function, it is the app's responsibility to call @B_android#support#v17#leanback#app#GuidedStepSupportFragment#setUiStyle_E@ to select fragment transition and remember the stack entry where it need pops to. GuidedStepSupportFragment delegates its visual styling to classes called stylists. The @B_android#support#v17#leanback#widget#GuidanceStylist_E@ is responsible for the left guidance view, while the @B_android#support#v17#leanback#widget#GuidedActionsStylist_E@ is responsible for the right actions view. The stylists use theme attributes to derive values associated with the presentation, such as colors, animations, etc. Most simple visual aspects of GuidanceStylist and GuidedActionsStylist can be customized via theming; see their documentation for more information. GuidedStepSupportFragments must have access to an appropriate theme in order for the stylists to function properly. Specifically, the fragment must receive @B_android#support#v17#leanback#R#style#Theme_Leanback_GuidedStep_E@, or a theme whose parent is is set to that theme. Themes can be provided in one of three ways: The simplest way is to set the theme for the host Activity to the GuidedStep theme or a theme that derives from it. If the Activity already has a theme and setting its parent theme is inconvenient, the existing Activity theme can have an entry added for the attribute @B_android#support#v17#leanback#R#styleable#LeanbackGuidedStepTheme_guidedStepTheme_E@. If present, this theme will be used by GuidedStepSupportFragment as an overlay to the Activity's theme. Finally, custom subclasses of GuidedStepSupportFragment may provide a theme through the @B_android#support#v17#leanback#app#GuidedStepSupportFragment#onProvideTheme_E@ method. This can be useful if a subclass is used across multiple Activities. If the theme is provided in multiple ways, the onProvideTheme override has priority, followed by the Activity's theme. (Themes whose parent theme is already set to the guided step theme do not need to set the guidedStepTheme attribute; if set, it will be ignored.) If themes do not provide enough customizability, the stylists themselves may be subclassed and provided to the GuidedStepSupportFragment through the @B_android#support#v17#leanback#app#GuidedStepSupportFragment#onCreateGuidanceStylist_E@ and @B_android#support#v17#leanback#app#GuidedStepSupportFragment#onCreateActionsStylist_E@ methods. The stylists have simple hooks so that subclasses may override layout files; subclasses may also have more complex logic to determine styling. GuidedStepSupportFragments can be grouped together to provide a guided sequence. GuidedStepSupportFragments grouped as a sequence use custom animations provided by @B_android#support#v17#leanback#widget#GuidanceStylist_E@ and @B_android#support#v17#leanback#widget#GuidedActionsStylist_E@ (or subclasses) during transitions between steps. Clients should use @B_android#support#v17#leanback#app#GuidedStepSupportFragment#add_E@ to place subsequent GuidedFragments onto the fragment stack so that custom animations are properly configured. (Custom animations are triggered automatically when the fragment stack is subsequently popped by any normal mechanism.)"}