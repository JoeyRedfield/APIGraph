{"Functions": {"getParameter(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "The current object associated with the specified parameter or null if no object has been associated or if the parameter is not supported."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the parameter."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_FOUND_ERR: Raised when the parameter name is not recognized."]], "SeeAlso": [], "Permissions": [], "Description": "Return the value of a parameter if known.", "history": "Added in API level 8", "FullName": "public abstract Object getParameter (String name)"}, "setParameter(java.lang.String,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the parameter to set."], ["@B_java#lang#Object_E@", "Object: The new value or null if the user wishes to unset the parameter. While the type of the value parameter is defined as DOMUserData, the object type must match the type defined by the definition of the parameter. For example, if the parameter is \"error-handler\", the value must be of type DOMErrorHandler."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_FOUND_ERR: Raised when the parameter name is not recognized. NOT_SUPPORTED_ERR: Raised when the parameter name is recognized but the requested value cannot be set. TYPE_MISMATCH_ERR: Raised if the value type for this parameter name is incompatible with the expected value type."]], "SeeAlso": [], "Permissions": [], "Description": "Set the value of a parameter.", "history": "Added in API level 8", "FullName": "public abstract void setParameter (String name, Object value)"}, "getParameterNames()": {"Returns": [["@B_org#w3c#dom#DOMStringList_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The list of the parameters supported by this DOMConfiguration object and for which at least one value can be set by the application. Note that this list can also contain parameter names defined outside this specification.", "history": "Added in API level 8", "FullName": "public abstract DOMStringList getParameterNames ()"}, "canSetParameter(java.lang.String,java.lang.Object)": {"Returns": [["boolean", "true if the parameter could be successfully set to the specified value, or false if the parameter is not recognized or the requested value is not supported. This does not change the current value of the parameter itself."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the parameter to check."], ["@B_java#lang#Object_E@", "Object: An object. if null, the returned value is true."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if setting a parameter to a specific value is supported.", "history": "Added in API level 8", "FullName": "public abstract boolean canSetParameter (String name, Object value)"}, "setParameter(java.lang.String, java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the parameter to set."], ["@B_java#lang#Object_E@", "Object: The new value or null if the user wishes to unset the parameter. While the type of the value parameter is defined as DOMUserData, the object type must match the type defined by the definition of the parameter. For example, if the parameter is \"error-handler\", the value must be of type DOMErrorHandler."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_FOUND_ERR: Raised when the parameter name is not recognized. NOT_SUPPORTED_ERR: Raised when the parameter name is recognized but the requested value cannot be set. TYPE_MISMATCH_ERR: Raised if the value type for this parameter name is incompatible with the expected value type."]], "SeeAlso": [], "Permissions": [], "Description": "Set the value of a parameter.", "history": "added in API level 8", "FullName": "public abstract void setParameter (String name, Object value)"}}, "Inheritance": [], "ClassName": "org.w3c.dom.DOMConfiguration", "ClassDesc": "The DOMConfiguration interface represents the configuration of a document and maintains a table of recognized parameters. Using the configuration, it is possible to change Document.normalizeDocument() behavior, such as replacing the CDATASection nodes with Text nodes or specifying the type of the schema that must be used when the validation of the Document is requested. DOMConfiguration objects are also used in [DOMParser and DOMSerializer interfaces. The parameter names used by the DOMConfiguration object are defined throughout the DOM Level 3 specifications. Names are case-insensitive. To avoid possible conflicts, as a convention, names referring to parameters defined outside the DOM specification should be made unique. Because parameters are exposed as properties in the , names are recommended to follow the section 5.16 Identifiers of [Unicode] with the addition of the character '-' (HYPHEN-MINUS) but it is not enforced by the DOM implementation. DOM Level 3 Core Implementations are required to recognize all parameters defined in this specification. Some parameter values may also be required to be supported by the implementation. Refer to the definition of the parameter to know if a value must be supported or not. The following list of parameters defined in the DOM: The resolution of the system identifiers associated with entities is done using Document.documentURI. However, when the feature \"LS\" defined in [DOMConfiguration objects attached to Document nodes. If this parameter is set, Document.normalizeDocument() will invoke the resource resolver instead of using Document.documentURI. See also the"}