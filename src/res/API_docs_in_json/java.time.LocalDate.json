{"Functions": {"getDayOfWeek()": {"Returns": [["@B_java#time#DayOfWeek_E@", "the day-of-week, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the day-of-week field, which is an enum DayOfWeek. This method returns the enum @B_java#time#DayOfWeek_E@ for the day-of-week. This avoids confusion as to what int values mean. If you need access to the primitive int value then the enum provides the @B_java#time#DayOfWeek#getValue_E@. Additional information can be obtained from the DayOfWeek. This includes textual names of the values.", "history": "Added in API level 26", "FullName": "public DayOfWeek getDayOfWeek ()"}, "atTime(int, int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time formed from this date and the specified time, not null"]], "Parameters": [["int", "int: the hour-of-day to use, from 0 to 23"], ["int", "int: the minute-of-hour to use, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Combines this date with a time to create a LocalDateTime. This returns a LocalDateTime formed from this date at the specified hour and minute. The seconds and nanosecond fields will be set to zero. The individual time fields must be within their valid range. All possible combinations of date and time are valid.", "history": "added in API level 26", "FullName": "public LocalDateTime atTime (int hour, int minute)"}, "getYear()": {"Returns": [["int", "the year, from MIN_YEAR to MAX_YEAR"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the year field. This method returns the primitive int value for the year. The year returned by this method is proleptic as per get(YEAR). To obtain the year-of-era, use get(YEAR_OF_ERA).", "history": "Added in API level 26", "FullName": "public int getYear ()"}, "plus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the specified amount added, not null"]], "Parameters": [["long", "long: the amount of the unit to add to the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date with the specified amount added. This returns a LocalDate, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. In some cases, adding the amount can cause the resulting date to become invalid. For example, adding one month to 31st January would result in 31st February. In cases like this, the unit is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example. If the field is a @B_java#time#temporal#ChronoUnit_E@ then the addition is implemented here. The supported fields behave as follows: DAYS - Returns a LocalDate with the specified number of days added. This is equivalent to @B_java#time#LocalDate#plusDays_E@. WEEKS - Returns a LocalDate with the specified number of weeks added. This is equivalent to @B_java#time#LocalDate#plusWeeks_E@ and uses a 7 day week. MONTHS - Returns a LocalDate with the specified number of months added. This is equivalent to @B_java#time#LocalDate#plusMonths_E@. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. YEARS - Returns a LocalDate with the specified number of years added. This is equivalent to @B_java#time#LocalDate#plusYears_E@. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. DECADES - Returns a LocalDate with the specified number of decades added. This is equivalent to calling @B_java#time#LocalDate#plusYears_E@ with the amount multiplied by 10. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. CENTURIES - Returns a LocalDate with the specified number of centuries added. This is equivalent to calling @B_java#time#LocalDate#plusYears_E@ with the amount multiplied by 100. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. MILLENNIA - Returns a LocalDate with the specified number of millennia added. This is equivalent to calling @B_java#time#LocalDate#plusYears_E@ with the amount multiplied by 1,000. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. ERAS - Returns a LocalDate with the specified number of eras added. Only two eras are supported so the amount must be one, zero or minus one. If the amount is non-zero then the year is changed such that the year-of-era is unchanged. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. All other ChronoUnit instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate plus (long amountToAdd, TemporalUnit unit)"}, "of(int, java.time.Month, int)": {"Returns": [["@B_java#time#LocalDate_E@", "the local date, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["@B_java#time#Month_E@", "Month: the month-of-year to represent, not null"], ["int", "int: the day-of-month to represent, from 1 to 31"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDate from a year, month and day. This returns a LocalDate with the specified year, month and day-of-month. The day must be valid for the year and month, otherwise an exception will be thrown.", "history": "added in API level 26", "FullName": "public static LocalDate of (int year, Month month, int dayOfMonth)"}, "getMonth()": {"Returns": [["@B_java#time#Month_E@", "the month-of-year, not null"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#LocalDate#getMonthValue_E@"], "Permissions": [], "Description": "Gets the month-of-year field using the Month enum. This method returns the enum @B_java#time#Month_E@ for the month. This avoids confusion as to what int values mean. If you need access to the primitive int value then the enum provides the @B_java#time#Month#getValue_E@.", "history": "Added in API level 26", "FullName": "public Month getMonth ()"}, "getChronology()": {"Returns": [["@B_java#time#chrono#IsoChronology_E@", "the ISO chronology, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the chronology of this date, which is the ISO calendar system. The Chronology represents the calendar system in use. The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. It is equivalent to the proleptic Gregorian calendar system, in which today's rules for leap years are applied for all time.", "history": "Added in API level 26", "FullName": "public IsoChronology getChronology ()"}, "atTime(int, int, int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time formed from this date and the specified time, not null"]], "Parameters": [["int", "int: the hour-of-day to use, from 0 to 23"], ["int", "int: the minute-of-hour to use, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Combines this date with a time to create a LocalDateTime. This returns a LocalDateTime formed from this date at the specified hour, minute and second. The nanosecond field will be set to zero. The individual time fields must be within their valid range. All possible combinations of date and time are valid.", "history": "added in API level 26", "FullName": "public LocalDateTime atTime (int hour, int minute, int second)"}, "minus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the specified amount subtracted, not null"]], "Parameters": [["long", "long: the amount of the unit to subtract from the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date with the specified amount subtracted. This returns a LocalDate, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. This method is equivalent to @B_java#time#LocalDate#plus_E@ with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.", "history": "added in API level 27", "FullName": "public LocalDate minus (long amountToSubtract, TemporalUnit unit)"}, "compareTo(java.time.chrono.ChronoLocalDate)": {"Returns": [["int", "the comparator value, negative if less, positive if greater"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDate_E@", "ChronoLocalDate: the other date to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this date to another date. The comparison is primarily based on the date, from earliest to latest. It is \"consistent with equals\", as defined by @B_java#lang#Comparable_E@. If all the dates being compared are instances of LocalDate, then the comparison will be entirely based on the date. If some dates being compared are in different chronologies, then the chronology is also considered, see @B_java#lang#Comparable#compareTo_E@.", "history": "Added in API level 26", "FullName": "public int compareTo (ChronoLocalDate other)"}, "atStartOfDay()": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time of midnight at the start of this date, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Combines this date with the time of midnight to create a LocalDateTime at the start of this date. This returns a LocalDateTime formed from this date at the time of midnight, 00:00, at the start of this date.", "history": "Added in API level 26", "FullName": "public LocalDateTime atStartOfDay ()"}, "getLong(java.time.temporal.TemporalField)": {"Returns": [["long", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this date as a long. This queries this date for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#LocalDate#isSupported_E@ will return valid values based on this date. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public long getLong (TemporalField field)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other date"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date is equal to another date. Compares this LocalDate with another ensuring that the date is the same. Only objects of type LocalDate are compared, other types return false. To compare the dates of two TemporalAccessor instances, including dates in two different chronologies, use @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ as a comparator.", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "plusYears(long)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the years added, not null"]], "Parameters": [["long", "long: the years to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDate with the specified number of years added. This method adds the specified amount to the years field in three steps: For example, 2008-02-29 (leap year) plus one year would result in the invalid date 2009-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2009-02-28, is selected instead. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate plusYears (long yearsToAdd)"}, "getDayOfMonth()": {"Returns": [["int", "the day-of-month, from 1 to 31"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the day-of-month field. This method returns the primitive int value for the day-of-month.", "history": "Added in API level 26", "FullName": "public int getDayOfMonth ()"}, "now()": {"Returns": [["@B_java#time#LocalDate_E@", "the current date using the system clock and default time-zone, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current date from the system clock in the default time-zone. This will query the @B_java#time#Clock#systemDefaultZone_E@ in the default time-zone to obtain the current date. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static LocalDate now ()"}, "with(java.time.temporal.TemporalField,long)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the field cannot be set"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date with the specified field set to a new value. This returns a LocalDate, based on this one, with the value for the specified field changed. This can be used to change any supported field, such as the year, month or day-of-month. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. In some cases, changing the specified field can cause the resulting date to become invalid, such as changing the month from 31st January to February would make the day-of-month invalid. In cases like this, the field is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example. If the field is a @B_java#time#temporal#ChronoField_E@ then the adjustment is implemented here. The supported fields behave as follows: DAY_OF_WEEK - Returns a LocalDate with the specified day-of-week. The date is adjusted up to 6 days forward or backward within the boundary of a Monday to Sunday week. ALIGNED_DAY_OF_WEEK_IN_MONTH - Returns a LocalDate with the specified aligned-day-of-week. The date is adjusted to the specified month-based aligned-day-of-week. Aligned weeks are counted such that the first week of a given month starts on the first day of that month. This may cause the date to be moved up to 6 days into the following month. ALIGNED_DAY_OF_WEEK_IN_YEAR - Returns a LocalDate with the specified aligned-day-of-week. The date is adjusted to the specified year-based aligned-day-of-week. Aligned weeks are counted such that the first week of a given year starts on the first day of that year. This may cause the date to be moved up to 6 days into the following year. DAY_OF_MONTH - Returns a LocalDate with the specified day-of-month. The month and year will be unchanged. If the day-of-month is invalid for the year and month, then a DateTimeException is thrown. DAY_OF_YEAR - Returns a LocalDate with the specified day-of-year. The year will be unchanged. If the day-of-year is invalid for the year, then a DateTimeException is thrown. EPOCH_DAY - Returns a LocalDate with the specified epoch-day. This completely replaces the date and is equivalent to @B_java#time#LocalDate#ofEpochDay_E@. ALIGNED_WEEK_OF_MONTH - Returns a LocalDate with the specified aligned-week-of-month. Aligned weeks are counted such that the first week of a given month starts on the first day of that month. This adjustment moves the date in whole week chunks to match the specified week. The result will have the same day-of-week as this date. This may cause the date to be moved into the following month. ALIGNED_WEEK_OF_YEAR - Returns a LocalDate with the specified aligned-week-of-year. Aligned weeks are counted such that the first week of a given year starts on the first day of that year. This adjustment moves the date in whole week chunks to match the specified week. The result will have the same day-of-week as this date. This may cause the date to be moved into the following year. MONTH_OF_YEAR - Returns a LocalDate with the specified month-of-year. The year will be unchanged. The day-of-month will also be unchanged, unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. PROLEPTIC_MONTH - Returns a LocalDate with the specified proleptic-month. The day-of-month will be unchanged, unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. YEAR_OF_ERA - Returns a LocalDate with the specified year-of-era. The era and month will be unchanged. The day-of-month will also be unchanged, unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. YEAR - Returns a LocalDate with the specified year. The month will be unchanged. The day-of-month will also be unchanged, unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. ERA - Returns a LocalDate with the specified era. The year-of-era and month will be unchanged. The day-of-month will also be unchanged, unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. In all cases, if the new value is outside the valid range of values for the field then a DateTimeException will be thrown. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate with (TemporalField field, long newValue)"}, "withDayOfYear(int)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the requested day, not null"]], "Parameters": [["int", "int: the day-of-year to set in the result, from 1 to 365-366"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the day-of-year value is invalid, or if the day-of-year is invalid for the year"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDate with the day-of-year altered. If the resulting date is invalid, an exception is thrown. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate withDayOfYear (int dayOfYear)"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this date.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}, "of(int, int, int)": {"Returns": [["@B_java#time#LocalDate_E@", "the local date, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["int", "int: the month-of-year to represent, from 1 (January) to 12 (December)"], ["int", "int: the day-of-month to represent, from 1 to 31"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDate from a year, month and day. This returns a LocalDate with the specified year, month and day-of-month. The day must be valid for the year and month, otherwise an exception will be thrown.", "history": "added in API level 26", "FullName": "public static LocalDate of (int year, int month, int dayOfMonth)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this date, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this date as a String, such as 2007-12-03. The output will be in the ISO-8601 format uuuu-MM-dd.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "query(java.time.temporal.TemporalQuery<R>)": {"Returns": [["R", "the query result, null may be returned (defined by the query)"]], "Parameters": [["@B_java#time#temporal#TemporalQuery_E@", "TemporalQuery: the query to invoke, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query (defined by the query)"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs (defined by the query)"]], "SeeAlso": [], "Permissions": [], "Description": "Queries this date using the specified query. This queries this date using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalQuery#queryFrom_E@ method on the specified query passing this as the argument.", "history": "Added in API level 26", "FullName": "public R query (TemporalQuery<R> query)"}, "minusYears(long)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the years subtracted, not null"]], "Parameters": [["long", "long: the years to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDate with the specified number of years subtracted. This method subtracts the specified amount from the years field in three steps: For example, 2008-02-29 (leap year) minus one year would result in the invalid date 2007-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2007-02-28, is selected instead. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate minusYears (long yearsToSubtract)"}, "ofYearDay(int,int)": {"Returns": [["@B_java#time#LocalDate_E@", "the local date, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["int", "int: the day-of-year to represent, from 1 to 366"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-year is invalid for the year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDate from a year and day-of-year. This returns a LocalDate with the specified year and day-of-year. The day-of-year must be valid for the year, otherwise an exception will be thrown.", "history": "Added in API level 26", "FullName": "public static LocalDate ofYearDay (int year, int dayOfYear)"}, "getMonthValue()": {"Returns": [["int", "the month-of-year, from 1 to 12"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#LocalDate#getMonth_E@"], "Permissions": [], "Description": "Gets the month-of-year field from 1 to 12. This method returns the month as an int from 1 to 12. Application code is frequently clearer if the enum @B_java#time#Month_E@ is used by calling @B_java#time#LocalDate#getMonth_E@.", "history": "Added in API level 26", "FullName": "public int getMonthValue ()"}, "withYear(int)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the requested year, not null"]], "Parameters": [["int", "int: the year to set in the result, from MIN_YEAR to MAX_YEAR"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the year value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDate with the year altered. If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate withYear (int year)"}, "minus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the subtraction made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date with the specified amount subtracted. This returns a LocalDate, based on this one, with the specified amount subtracted. The amount is typically @B_java#time#Period_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface. The calculation is delegated to the amount object by calling @B_java#time#temporal#TemporalAmount#subtractFrom_E@. The amount implementation is free to implement the subtraction in any way it wishes, however it typically calls back to @B_java#time#LocalDate#minus_E@. Consult the documentation of the amount implementation to determine if it can be successfully subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate minus (TemporalAmount amountToSubtract)"}, "minusMonths(long)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the months subtracted, not null"]], "Parameters": [["long", "long: the months to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDate with the specified number of months subtracted. This method subtracts the specified amount from the months field in three steps: For example, 2007-03-31 minus one month would result in the invalid date 2007-02-31. Instead of returning an invalid result, the last valid day of the month, 2007-02-28, is selected instead. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate minusMonths (long monthsToSubtract)"}, "with(java.time.temporal.TemporalField, long)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the field cannot be set"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date with the specified field set to a new value. This returns a LocalDate, based on this one, with the value for the specified field changed. This can be used to change any supported field, such as the year, month or day-of-month. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. In some cases, changing the specified field can cause the resulting date to become invalid, such as changing the month from 31st January to February would make the day-of-month invalid. In cases like this, the field is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example. If the field is a @B_java#time#temporal#ChronoField_E@ then the adjustment is implemented here. The supported fields behave as follows: DAY_OF_WEEK - Returns a LocalDate with the specified day-of-week. The date is adjusted up to 6 days forward or backward within the boundary of a Monday to Sunday week. ALIGNED_DAY_OF_WEEK_IN_MONTH - Returns a LocalDate with the specified aligned-day-of-week. The date is adjusted to the specified month-based aligned-day-of-week. Aligned weeks are counted such that the first week of a given month starts on the first day of that month. This may cause the date to be moved up to 6 days into the following month. ALIGNED_DAY_OF_WEEK_IN_YEAR - Returns a LocalDate with the specified aligned-day-of-week. The date is adjusted to the specified year-based aligned-day-of-week. Aligned weeks are counted such that the first week of a given year starts on the first day of that year. This may cause the date to be moved up to 6 days into the following year. DAY_OF_MONTH - Returns a LocalDate with the specified day-of-month. The month and year will be unchanged. If the day-of-month is invalid for the year and month, then a DateTimeException is thrown. DAY_OF_YEAR - Returns a LocalDate with the specified day-of-year. The year will be unchanged. If the day-of-year is invalid for the year, then a DateTimeException is thrown. EPOCH_DAY - Returns a LocalDate with the specified epoch-day. This completely replaces the date and is equivalent to @B_java#time#LocalDate#ofEpochDay_E@. ALIGNED_WEEK_OF_MONTH - Returns a LocalDate with the specified aligned-week-of-month. Aligned weeks are counted such that the first week of a given month starts on the first day of that month. This adjustment moves the date in whole week chunks to match the specified week. The result will have the same day-of-week as this date. This may cause the date to be moved into the following month. ALIGNED_WEEK_OF_YEAR - Returns a LocalDate with the specified aligned-week-of-year. Aligned weeks are counted such that the first week of a given year starts on the first day of that year. This adjustment moves the date in whole week chunks to match the specified week. The result will have the same day-of-week as this date. This may cause the date to be moved into the following year. MONTH_OF_YEAR - Returns a LocalDate with the specified month-of-year. The year will be unchanged. The day-of-month will also be unchanged, unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. PROLEPTIC_MONTH - Returns a LocalDate with the specified proleptic-month. The day-of-month will be unchanged, unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. YEAR_OF_ERA - Returns a LocalDate with the specified year-of-era. The era and month will be unchanged. The day-of-month will also be unchanged, unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. YEAR - Returns a LocalDate with the specified year. The month will be unchanged. The day-of-month will also be unchanged, unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. ERA - Returns a LocalDate with the specified era. The year-of-era and month will be unchanged. The day-of-month will also be unchanged, unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. In all cases, if the new value is outside the valid range of values for the field then a DateTimeException will be thrown. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.", "history": "added in API level 27", "FullName": "public LocalDate with (TemporalField field, long newValue)"}, "atTime(int,int,int,int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time formed from this date and the specified time, not null"]], "Parameters": [["int", "int: the hour-of-day to use, from 0 to 23"], ["int", "int: the minute-of-hour to use, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"], ["int", "int: the nano-of-second to represent, from 0 to 999,999,999"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Combines this date with a time to create a LocalDateTime. This returns a LocalDateTime formed from this date at the specified hour, minute, second and nanosecond. The individual time fields must be within their valid range. All possible combinations of date and time are valid.", "history": "Added in API level 26", "FullName": "public LocalDateTime atTime (int hour, int minute, int second, int nanoOfSecond)"}, "atTime(int, int, int, int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time formed from this date and the specified time, not null"]], "Parameters": [["int", "int: the hour-of-day to use, from 0 to 23"], ["int", "int: the minute-of-hour to use, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"], ["int", "int: the nano-of-second to represent, from 0 to 999,999,999"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Combines this date with a time to create a LocalDateTime. This returns a LocalDateTime formed from this date at the specified hour, minute, second and nanosecond. The individual time fields must be within their valid range. All possible combinations of date and time are valid.", "history": "added in API level 26", "FullName": "public LocalDateTime atTime (int hour, int minute, int second, int nanoOfSecond)"}, "plus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the specified amount added, not null"]], "Parameters": [["long", "long: the amount of the unit to add to the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date with the specified amount added. This returns a LocalDate, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. In some cases, adding the amount can cause the resulting date to become invalid. For example, adding one month to 31st January would result in 31st February. In cases like this, the unit is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example. If the field is a @B_java#time#temporal#ChronoUnit_E@ then the addition is implemented here. The supported fields behave as follows: DAYS - Returns a LocalDate with the specified number of days added. This is equivalent to @B_java#time#LocalDate#plusDays_E@. WEEKS - Returns a LocalDate with the specified number of weeks added. This is equivalent to @B_java#time#LocalDate#plusWeeks_E@ and uses a 7 day week. MONTHS - Returns a LocalDate with the specified number of months added. This is equivalent to @B_java#time#LocalDate#plusMonths_E@. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. YEARS - Returns a LocalDate with the specified number of years added. This is equivalent to @B_java#time#LocalDate#plusYears_E@. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. DECADES - Returns a LocalDate with the specified number of decades added. This is equivalent to calling @B_java#time#LocalDate#plusYears_E@ with the amount multiplied by 10. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. CENTURIES - Returns a LocalDate with the specified number of centuries added. This is equivalent to calling @B_java#time#LocalDate#plusYears_E@ with the amount multiplied by 100. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. MILLENNIA - Returns a LocalDate with the specified number of millennia added. This is equivalent to calling @B_java#time#LocalDate#plusYears_E@ with the amount multiplied by 1,000. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. ERAS - Returns a LocalDate with the specified number of eras added. Only two eras are supported so the amount must be one, zero or minus one. If the amount is non-zero then the year is changed such that the year-of-era is unchanged. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. All other ChronoUnit instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.", "history": "added in API level 27", "FullName": "public LocalDate plus (long amountToAdd, TemporalUnit unit)"}, "parse(java.lang.CharSequence)": {"Returns": [["@B_java#time#LocalDate_E@", "the parsed local date, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse such as \"2007-12-03\", not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDate from a text string such as 2007-12-03. The string must represent a valid date and is parsed using @B_java#time#format#DateTimeFormatter#ISO_LOCAL_DATE_E@.", "history": "Added in API level 26", "FullName": "public static LocalDate parse (CharSequence text)"}, "lengthOfYear()": {"Returns": [["int", "366 if the year is leap, 365 otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the year represented by this date. This returns the length of the year in days, either 365 or 366.", "history": "Added in API level 26", "FullName": "public int lengthOfYear ()"}, "ofEpochDay(long)": {"Returns": [["@B_java#time#LocalDate_E@", "the local date, not null"]], "Parameters": [["long", "long: the Epoch Day to convert, based on the epoch 1970-01-01"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the epoch day exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDate from the epoch day count. This returns a LocalDate with the specified epoch-day. The @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ is a simple incrementing count of days where day 0 is 1970-01-01. Negative numbers represent earlier days.", "history": "Added in API level 26", "FullName": "public static LocalDate ofEpochDay (long epochDay)"}, "format(java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#lang#String_E@", "the formatted date string, not null"]], "Parameters": [["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if an error occurs during printing"]], "SeeAlso": [], "Permissions": [], "Description": "Formats this date using the specified formatter. This date will be passed to the formatter to produce a string.", "history": "Added in API level 26", "FullName": "public String format (DateTimeFormatter formatter)"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#LocalDate_E@", "the local date, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to a LocalDate"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDate from a temporal object. This obtains a local date based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of LocalDate. The conversion uses the @B_java#time#temporal#TemporalQueries#localDate_E@ query, which relies on extracting the @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ field. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, LocalDate::from.", "history": "Added in API level 26", "FullName": "public static LocalDate from (TemporalAccessor temporal)"}, "parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#time#LocalDate_E@", "the parsed local date, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse, not null"], ["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDate from a text string using a specific formatter. The text is parsed using the formatter, returning a date.", "history": "Added in API level 26", "FullName": "public static LocalDate parse (CharSequence text, DateTimeFormatter formatter)"}, "range(java.time.temporal.TemporalField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to query the range for, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the range for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This date is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#LocalDate#isSupported_E@ will return appropriate range instances. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.", "history": "Added in API level 26", "FullName": "public ValueRange range (TemporalField field)"}, "isSupported(java.time.temporal.TemporalUnit)": {"Returns": [["boolean", "true if the unit can be added/subtracted, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified unit is supported. This checks if the specified unit can be added to, or subtracted from, this date. If false, then calling the @B_java#time#LocalDate#plus_E@ and @B_java#time#LocalDate#minus_E@ methods will throw an exception. If the unit is a @B_java#time#temporal#ChronoUnit_E@ then the query is implemented here. The supported units are: DAYS WEEKS MONTHS YEARS DECADES CENTURIES MILLENNIA ERAS All other ChronoUnit instances will return false. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument. Whether the unit is supported is determined by the unit.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalUnit unit)"}, "of(int,java.time.Month,int)": {"Returns": [["@B_java#time#LocalDate_E@", "the local date, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["@B_java#time#Month_E@", "Month: the month-of-year to represent, not null"], ["int", "int: the day-of-month to represent, from 1 to 31"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDate from a year, month and day. This returns a LocalDate with the specified year, month and day-of-month. The day must be valid for the year and month, otherwise an exception will be thrown.", "history": "Added in API level 26", "FullName": "public static LocalDate of (int year, Month month, int dayOfMonth)"}, "get(java.time.temporal.TemporalField)": {"Returns": [["int", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained or the value is outside the range of valid values for the field"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported or the range of values exceeds an int"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this date as an int. This queries this date for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#LocalDate#isSupported_E@ will return valid values based on this date, except EPOCH_DAY and PROLEPTIC_MONTH which are too large to fit in an int and throw a DateTimeException. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public int get (TemporalField field)"}, "adjustInto(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "the adjusted object, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the target object to be adjusted, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to make the adjustment"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts the specified temporal object to have the same date as this object. This returns a temporal object of the same observable type as the input with the date changed to be the same as this. The adjustment is equivalent to using @B_java#time#temporal#Temporal#with_E@ passing @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ as the field. In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#with_E@: This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Temporal adjustInto (Temporal temporal)"}, "isSupported(java.time.temporal.TemporalField)": {"Returns": [["boolean", "true if the field is supported on this date, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified field is supported. This checks if this date can be queried for the specified field. If false, then calling the @B_java#time#LocalDate#range_E@, @B_java#time#LocalDate#get_E@ and @B_java#time#LocalDate#with_E@ methods will throw an exception. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The supported fields are: DAY_OF_WEEK ALIGNED_DAY_OF_WEEK_IN_MONTH ALIGNED_DAY_OF_WEEK_IN_YEAR DAY_OF_MONTH DAY_OF_YEAR EPOCH_DAY ALIGNED_WEEK_OF_MONTH ALIGNED_WEEK_OF_YEAR MONTH_OF_YEAR PROLEPTIC_MONTH YEAR_OF_ERA YEAR ERA All other ChronoField instances will return false. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalField field)"}, "atTime(java.time.OffsetTime)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "the offset date-time formed from this date and the specified time, not null"]], "Parameters": [["@B_java#time#OffsetTime_E@", "OffsetTime: the time to combine with, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Combines this date with an offset time to create an OffsetDateTime. This returns an OffsetDateTime formed from this date at the specified time. All possible combinations of date and time are valid.", "history": "Added in API level 26", "FullName": "public OffsetDateTime atTime (OffsetTime time)"}, "lengthOfMonth()": {"Returns": [["int", "the length of the month in days"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the month represented by this date. This returns the length of the month in days. For example, a date in January would return 31.", "history": "Added in API level 26", "FullName": "public int lengthOfMonth ()"}, "getDayOfYear()": {"Returns": [["int", "the day-of-year, from 1 to 365, or 366 in a leap year"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the day-of-year field. This method returns the primitive int value for the day-of-year.", "history": "Added in API level 26", "FullName": "public int getDayOfYear ()"}, "now(java.time.Clock)": {"Returns": [["@B_java#time#LocalDate_E@", "the current date, not null"]], "Parameters": [["@B_java#time#Clock_E@", "Clock: the clock to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current date from the specified clock. This will query the specified clock to obtain the current date - today. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using @B_java#time#Clock_E@.", "history": "Added in API level 26", "FullName": "public static LocalDate now (Clock clock)"}, "atTime(int,int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time formed from this date and the specified time, not null"]], "Parameters": [["int", "int: the hour-of-day to use, from 0 to 23"], ["int", "int: the minute-of-hour to use, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Combines this date with a time to create a LocalDateTime. This returns a LocalDateTime formed from this date at the specified hour and minute. The seconds and nanosecond fields will be set to zero. The individual time fields must be within their valid range. All possible combinations of date and time are valid.", "history": "Added in API level 26", "FullName": "public LocalDateTime atTime (int hour, int minute)"}, "plusDays(long)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the days added, not null"]], "Parameters": [["long", "long: the days to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDate with the specified number of days added. This method adds the specified amount to the days field incrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2008-12-31 plus one day would result in 2009-01-01. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate plusDays (long daysToAdd)"}, "until(java.time.chrono.ChronoLocalDate)": {"Returns": [["@B_java#time#Period_E@", "the period between this date and the end date, not null"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDate_E@", "ChronoLocalDate: the end date, exclusive, which may be in any chronology, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calculates the period between this date and another date as a Period. This calculates the period between two dates in terms of years, months and days. The start and end points are this and the specified date. The result will be negative if the end is before the start. The negative sign will be the same in each of year, month and day. The calculation is performed using the ISO calendar system. If necessary, the input date will be converted to ISO. The start date is included, but the end date is not. The period is calculated by removing complete months, then calculating the remaining number of days, adjusting to ensure that both have the same sign. The number of months is then normalized into years and months based on a 12 month year. A month is considered to be complete if the end day-of-month is greater than or equal to the start day-of-month. For example, from 2010-01-15 to 2011-03-18 is \"1 year, 2 months and 3 days\". There are two equivalent ways of using this method. The first is to invoke this method. The second is to use @B_java#time#Period#between_E@:", "history": "Added in API level 26", "FullName": "public Period until (ChronoLocalDate endDateExclusive)"}, "isBefore(java.time.chrono.ChronoLocalDate)": {"Returns": [["boolean", "true if this date is before the specified date"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDate_E@", "ChronoLocalDate: the other date to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date is before the specified date. This checks to see if this date represents a point on the local time-line before the other date. This method only considers the position of the two dates on the local time-line. It does not take into account the chronology, or calendar system. This is different from the comparison in @B_java#time#LocalDate#compareTo_E@, but is the same approach as @B_java#time#chrono#ChronoLocalDate#timeLineOrder_E@.", "history": "Added in API level 26", "FullName": "public boolean isBefore (ChronoLocalDate other)"}, "minusWeeks(long)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the weeks subtracted, not null"]], "Parameters": [["long", "long: the weeks to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDate with the specified number of weeks subtracted. This method subtracts the specified amount in weeks from the days field decrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2009-01-07 minus one week would result in 2008-12-31. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate minusWeeks (long weeksToSubtract)"}, "plusMonths(long)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the months added, not null"]], "Parameters": [["long", "long: the months to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDate with the specified number of months added. This method adds the specified amount to the months field in three steps: For example, 2007-03-31 plus one month would result in the invalid date 2007-04-31. Instead of returning an invalid result, the last valid day of the month, 2007-04-30, is selected instead. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate plusMonths (long monthsToAdd)"}, "plus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the addition made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date with the specified amount added. This returns a LocalDate, based on this one, with the specified amount added. The amount is typically @B_java#time#Period_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface. The calculation is delegated to the amount object by calling @B_java#time#temporal#TemporalAmount#addTo_E@. The amount implementation is free to implement the addition in any way it wishes, however it typically calls back to @B_java#time#LocalDate#plus_E@. Consult the documentation of the amount implementation to determine if it can be successfully added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate plus (TemporalAmount amountToAdd)"}, "minusDays(long)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the days subtracted, not null"]], "Parameters": [["long", "long: the days to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDate with the specified number of days subtracted. This method subtracts the specified amount from the days field decrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2009-01-01 minus one day would result in 2008-12-31. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate minusDays (long daysToSubtract)"}, "isLeapYear()": {"Returns": [["boolean", "true if the year is leap, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the year is a leap year, according to the ISO proleptic calendar system rules. This method applies the current rules for leap years across the whole time-line. In general, a year is a leap year if it is divisible by four without remainder. However, years divisible by 100, are not leap years, with the exception of years divisible by 400 which are. For example, 1904 is a leap year it is divisible by 4. 1900 was not a leap year as it is divisible by 100, however 2000 was a leap year as it is divisible by 400. The calculation is proleptic - applying the same rules into the far future and far past. This is historically inaccurate, but is correct for the ISO-8601 standard.", "history": "Added in API level 26", "FullName": "public boolean isLeapYear ()"}, "isAfter(java.time.chrono.ChronoLocalDate)": {"Returns": [["boolean", "true if this date is after the specified date"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDate_E@", "ChronoLocalDate: the other date to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date is after the specified date. This checks to see if this date represents a point on the local time-line after the other date. This method only considers the position of the two dates on the local time-line. It does not take into account the chronology, or calendar system. This is different from the comparison in @B_java#time#LocalDate#compareTo_E@, but is the same approach as @B_java#time#chrono#ChronoLocalDate#timeLineOrder_E@.", "history": "Added in API level 26", "FullName": "public boolean isAfter (ChronoLocalDate other)"}, "atTime(java.time.LocalTime)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time formed from this date and the specified time, not null"]], "Parameters": [["@B_java#time#LocalTime_E@", "LocalTime: the time to combine with, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Combines this date with a time to create a LocalDateTime. This returns a LocalDateTime formed from this date at the specified time. All possible combinations of date and time are valid.", "history": "Added in API level 26", "FullName": "public LocalDateTime atTime (LocalTime time)"}, "minus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the specified amount subtracted, not null"]], "Parameters": [["long", "long: the amount of the unit to subtract from the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date with the specified amount subtracted. This returns a LocalDate, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. This method is equivalent to @B_java#time#LocalDate#plus_E@ with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate minus (long amountToSubtract, TemporalUnit unit)"}, "atTime(int,int,int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time formed from this date and the specified time, not null"]], "Parameters": [["int", "int: the hour-of-day to use, from 0 to 23"], ["int", "int: the minute-of-hour to use, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Combines this date with a time to create a LocalDateTime. This returns a LocalDateTime formed from this date at the specified hour, minute and second. The nanosecond field will be set to zero. The individual time fields must be within their valid range. All possible combinations of date and time are valid.", "history": "Added in API level 26", "FullName": "public LocalDateTime atTime (int hour, int minute, int second)"}, "until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)": {"Returns": [["long", "the amount of time between this date and the end date"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the end date, exclusive, which is converted to a LocalDate, not null"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to measure the amount in, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the amount cannot be calculated, or the end temporal cannot be converted to a LocalDate"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Calculates the amount of time until another date in terms of the specified unit. This calculates the amount of time between two LocalDate objects in terms of a single TemporalUnit. The start and end points are this and the specified date. The result will be negative if the end is before the start. The Temporal passed to this method is converted to a LocalDate using @B_java#time#LocalDate#from_E@. For example, the amount in days between two dates can be calculated using startDate.until(endDate, DAYS). The calculation returns a whole number, representing the number of complete units between the two dates. For example, the amount in months between 2012-06-15 and 2012-08-14 will only be one month as it is one day short of two months. There are two equivalent ways of using this method. The first is to invoke this method. The second is to use @B_java#time#temporal#TemporalUnit#between_E@: The calculation is implemented in this method for @B_java#time#temporal#ChronoUnit_E@. The units DAYS, WEEKS, MONTHS, YEARS, DECADES, CENTURIES, MILLENNIA and ERAS are supported. Other ChronoUnit values will throw an exception. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.between(Temporal, Temporal) passing this as the first argument and the converted input temporal as the second argument. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public long until (Temporal endExclusive, TemporalUnit unit)"}, "withMonth(int)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the requested month, not null"]], "Parameters": [["int", "int: the month-of-year to set in the result, from 1 (January) to 12 (December)"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the month-of-year value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDate with the month-of-year altered. If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate withMonth (int month)"}, "withDayOfMonth(int)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the requested day, not null"]], "Parameters": [["int", "int: the day-of-month to set in the result, from 1 to 28-31"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the day-of-month value is invalid, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDate with the day-of-month altered. If the resulting date is invalid, an exception is thrown. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate withDayOfMonth (int dayOfMonth)"}, "plusWeeks(long)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this date with the weeks added, not null"]], "Parameters": [["long", "long: the weeks to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDate with the specified number of weeks added. This method adds the specified amount in weeks to the days field incrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2008-12-31 plus one week would result in 2009-01-07. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate plusWeeks (long weeksToAdd)"}, "toEpochDay()": {"Returns": [["long", "the Epoch Day equivalent to this date"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this date to the Epoch Day. The @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ is a simple incrementing count of days where day 0 is 1970-01-01 (ISO). This definition is the same for all chronologies, enabling conversion. This default implementation queries the EPOCH_DAY field.", "history": "Added in API level 26", "FullName": "public long toEpochDay ()"}, "isEqual(java.time.chrono.ChronoLocalDate)": {"Returns": [["boolean", "true if this date is equal to the specified date"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDate_E@", "ChronoLocalDate: the other date to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date is equal to the specified date. This checks to see if this date represents the same point on the local time-line as the other date. This method only considers the position of the two dates on the local time-line. It does not take into account the chronology, or calendar system. This is different from the comparison in @B_java#time#LocalDate#compareTo_E@ but is the same approach as @B_java#time#chrono#ChronoLocalDate#timeLineOrder_E@.", "history": "Added in API level 26", "FullName": "public boolean isEqual (ChronoLocalDate other)"}, "atStartOfDay(java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the zoned date-time formed from this date and the earliest valid time for the zone, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the zone ID to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a zoned date-time from this date at the earliest valid time according to the rules in the time-zone. Time-zone rules, such as daylight savings, mean that not every local date-time is valid for the specified zone, thus the local date-time may not be midnight. In most cases, there is only one valid offset for a local date-time. In the case of an overlap, there are two valid offsets, and the earlier one is used, corresponding to the first occurrence of midnight on the date. In the case of a gap, the zoned date-time will represent the instant just after the gap. If the zone ID is a @B_java#time#ZoneOffset_E@, then the result always has a time of midnight. To convert to a specific time in a given time-zone call @B_java#time#LocalDate#atTime_E@ followed by @B_java#time#LocalDateTime#atZone_E@.", "history": "Added in API level 26", "FullName": "public ZonedDateTime atStartOfDay (ZoneId zone)"}, "of(int,int,int)": {"Returns": [["@B_java#time#LocalDate_E@", "the local date, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["int", "int: the month-of-year to represent, from 1 (January) to 12 (December)"], ["int", "int: the day-of-month to represent, from 1 to 31"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDate from a year, month and day. This returns a LocalDate with the specified year, month and day-of-month. The day must be valid for the year and month, otherwise an exception will be thrown.", "history": "Added in API level 26", "FullName": "public static LocalDate of (int year, int month, int dayOfMonth)"}, "ofYearDay(int, int)": {"Returns": [["@B_java#time#LocalDate_E@", "the local date, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["int", "int: the day-of-year to represent, from 1 to 366"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-year is invalid for the year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDate from a year and day-of-year. This returns a LocalDate with the specified year and day-of-year. The day-of-year must be valid for the year, otherwise an exception will be thrown.", "history": "added in API level 26", "FullName": "public static LocalDate ofYearDay (int year, int dayOfYear)"}, "now(java.time.ZoneId)": {"Returns": [["@B_java#time#LocalDate_E@", "the current date using the system clock, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the zone ID to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current date from the system clock in the specified time-zone. This will query the @B_java#time#Clock#system_E@ to obtain the current date. Specifying the time-zone avoids dependence on the default time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static LocalDate now (ZoneId zone)"}, "with(java.time.temporal.TemporalAdjuster)": {"Returns": [["@B_java#time#LocalDate_E@", "a LocalDate based on this with the adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAdjuster_E@", "TemporalAdjuster: the adjuster to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the adjustment cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an adjusted copy of this date. This returns a LocalDate, based on this one, with the date adjusted. The adjustment takes place using the specified adjuster strategy object. Read the documentation of the adjuster to understand what adjustment will be made. A simple adjuster might simply set the one of the fields, such as the year field. A more complex adjuster might set the date to the last day of the month. A selection of common adjustments is provided in @B_java#time#temporal#TemporalAdjusters_E@. These include finding the \"last day of the month\" and \"next Wednesday\". Key date-time classes also implement the TemporalAdjuster interface, such as @B_java#time#Month_E@ and @B_java#time#MonthDay_E@. The adjuster is responsible for handling special cases, such as the varying lengths of month and leap years. For example this code returns a date on the last day of July: The result of this method is obtained by invoking the @B_java#time#temporal#TemporalAdjuster#adjustInto_E@ method on the specified adjuster passing this as the argument. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate with (TemporalAdjuster adjuster)"}, "getEra()": {"Returns": [["@B_java#time#chrono#Era_E@", "the IsoChronology era constant applicable at this date, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the era applicable at this date. The official ISO-8601 standard does not define eras, however IsoChronology does. It defines two eras, 'CE' from year one onwards and 'BCE' from year zero backwards. Since dates before the Julian-Gregorian cutover are not in line with history, the cutover between 'BCE' and 'CE' is also not aligned with the commonly used eras, often referred to using 'BC' and 'AD'. Users of this class should typically ignore this method as it exists primarily to fulfill the @B_java#time#chrono#ChronoLocalDate_E@ contract where it is necessary to support the Japanese calendar system. The returned era will be a singleton capable of being compared with the constants in @B_java#time#chrono#IsoChronology_E@ using the == operator.", "history": "Added in API level 26", "FullName": "public Era getEra ()"}}, "Inheritance": [], "ClassName": "java.time.LocalDate", "ClassDesc": "A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03. LocalDate is an immutable date-time object that represents a date, often viewed as year-month-day. Other date fields, such as day-of-year, day-of-week and week-of-year, can also be accessed. For example, the value \"2nd October 2007\" can be stored in a LocalDate. This class does not store or represent a time or time-zone. Instead, it is a description of the date, as used for birthdays. It cannot represent an instant on the time-line without additional information such as an offset or time-zone. The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. It is equivalent to the proleptic Gregorian calendar system, in which today's rules for leap years are applied for all time. For most applications written today, the ISO-8601 rules are entirely suitable. However, any application that makes use of historical dates, and requires them to be accurate will find the ISO-8601 approach unsuitable."}