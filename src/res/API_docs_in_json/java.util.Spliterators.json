{"Functions": {"iterator(java.util.Spliterator.OfDouble)": {"Returns": [["@B_java#util#PrimitiveIterator#OfDouble_E@", "An iterator"]], "Parameters": [["@B_java#util#Spliterator#OfDouble_E@", "Spliterator.OfDouble: The spliterator"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given spliterator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an PrimitiveIterator.OfDouble from a Spliterator.OfDouble. Traversal of elements should be accomplished through the iterator. The behaviour of traversal is undefined if the spliterator is operated after the iterator is returned.", "history": "Added in API level 24", "FullName": "public static PrimitiveIterator.OfDouble iterator (Spliterator.OfDouble spliterator)"}, "spliteratorUnknownSize(java.util.Iterator<?extendsT>,int)": {"Returns": [["@B_java#util#Spliterator_E@", "A spliterator from an iterator"]], "Parameters": [["@B_java#util#Iterator_E@", "Iterator: The iterator for the source"], ["int", "int: Characteristics of this spliterator's source or elements (SIZED and SUBSIZED, if supplied, are ignored and are not reported.)"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given iterator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a Spliterator using a given Iterator as the source of elements, with no initial size estimate. The spliterator is not , inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned.", "history": "Added in API level 24", "FullName": "public static Spliterator<T> spliteratorUnknownSize (Iterator<? extends T> iterator, int characteristics)"}, "spliterator(long[], int)": {"Returns": [["@B_java#util#Spliterator#OfLong_E@", "A spliterator for an array"]], "Parameters": [["long[]", "long: The array, assumed to be unmodified during use"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator.OfLong covering the elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.", "history": "added in API level 24", "FullName": "public static Spliterator.OfLong spliterator (long[] array, int additionalCharacteristics)"}, "iterator(java.util.Spliterator.OfLong)": {"Returns": [["@B_java#util#PrimitiveIterator#OfLong_E@", "An iterator"]], "Parameters": [["@B_java#util#Spliterator#OfLong_E@", "Spliterator.OfLong: The spliterator"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given spliterator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an PrimitiveIterator.OfLong from a Spliterator.OfLong. Traversal of elements should be accomplished through the iterator. The behaviour of traversal is undefined if the spliterator is operated after the iterator is returned.", "history": "Added in API level 24", "FullName": "public static PrimitiveIterator.OfLong iterator (Spliterator.OfLong spliterator)"}, "spliterator(double[], int)": {"Returns": [["@B_java#util#Spliterator#OfDouble_E@", "A spliterator for an array"]], "Parameters": [["double[]", "double: The array, assumed to be unmodified during use"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator.OfDouble covering the elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.", "history": "added in API level 24", "FullName": "public static Spliterator.OfDouble spliterator (double[] array, int additionalCharacteristics)"}, "spliterator(long[],int)": {"Returns": [["@B_java#util#Spliterator#OfLong_E@", "A spliterator for an array"]], "Parameters": [["long[]", "long: The array, assumed to be unmodified during use"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator.OfLong covering the elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfLong spliterator (long[] array, int additionalCharacteristics)"}, "spliterator(int[], int)": {"Returns": [["@B_java#util#Spliterator#OfInt_E@", "A spliterator for an array"]], "Parameters": [["int[]", "int: The array, assumed to be unmodified during use"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator.OfInt covering the elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.", "history": "added in API level 24", "FullName": "public static Spliterator.OfInt spliterator (int[] array, int additionalCharacteristics)"}, "spliterator(java.util.Collection<?extendsT>,int)": {"Returns": [["@B_java#util#Spliterator_E@", "A spliterator from an iterator"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: The collection"], ["int", "int: Characteristics of this spliterator's source or elements. The characteristics SIZED and SUBSIZED are additionally reported unless CONCURRENT is supplied."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a Spliterator using the given collection's @B_java#util#Collection#iterator_E@ as the source of elements, and reporting its @B_java#util#Collection#size_E@ as its initial size. The spliterator is , inherits the fail-fast properties of the collection's iterator, and implements trySplit to permit limited parallelism.", "history": "Added in API level 24", "FullName": "public static Spliterator<T> spliterator (Collection<? extends T> c, int characteristics)"}, "iterator(java.util.Spliterator.OfInt)": {"Returns": [["@B_java#util#PrimitiveIterator#OfInt_E@", "An iterator"]], "Parameters": [["@B_java#util#Spliterator#OfInt_E@", "Spliterator.OfInt: The spliterator"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given spliterator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an PrimitiveIterator.OfInt from a Spliterator.OfInt. Traversal of elements should be accomplished through the iterator. The behaviour of traversal is undefined if the spliterator is operated after the iterator is returned.", "history": "Added in API level 24", "FullName": "public static PrimitiveIterator.OfInt iterator (Spliterator.OfInt spliterator)"}, "spliterator(java.util.PrimitiveIterator.OfInt,long,int)": {"Returns": [["@B_java#util#Spliterator#OfInt_E@", "A spliterator from an iterator"]], "Parameters": [["@B_java#util#PrimitiveIterator#OfInt_E@", "PrimitiveIterator.OfInt: The iterator for the source"], ["long", "long: The number of elements in the source, to be reported as initial estimateSize."], ["int", "int: Characteristics of this spliterator's source or elements. The characteristics SIZED and SUBSIZED are additionally reported unless CONCURRENT is supplied."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given iterator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, and with a given initially reported size. The spliterator is not , inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned, or the initially reported size is not equal to the actual number of elements in the source.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfInt spliterator (PrimitiveIterator.OfInt iterator, long size, int characteristics)"}, "spliteratorUnknownSize(java.util.PrimitiveIterator.OfDouble,int)": {"Returns": [["@B_java#util#Spliterator#OfDouble_E@", "A spliterator from an iterator"]], "Parameters": [["@B_java#util#PrimitiveIterator#OfDouble_E@", "PrimitiveIterator.OfDouble: The iterator for the source"], ["int", "int: Characteristics of this spliterator's source or elements (SIZED and SUBSIZED, if supplied, are ignored and are not reported.)"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given iterator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, with no initial size estimate. The spliterator is not , inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfDouble spliteratorUnknownSize (PrimitiveIterator.OfDouble iterator, int characteristics)"}, "spliterator(java.util.PrimitiveIterator.OfDouble,long,int)": {"Returns": [["@B_java#util#Spliterator#OfDouble_E@", "A spliterator from an iterator"]], "Parameters": [["@B_java#util#PrimitiveIterator#OfDouble_E@", "PrimitiveIterator.OfDouble: The iterator for the source"], ["long", "long: The number of elements in the source, to be reported as initial estimateSize"], ["int", "int: Characteristics of this spliterator's source or elements. The characteristics SIZED and SUBSIZED are additionally reported unless CONCURRENT is supplied."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given iterator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, and with a given initially reported size. The spliterator is not , inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned, or the initially reported size is not equal to the actual number of elements in the source.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfDouble spliterator (PrimitiveIterator.OfDouble iterator, long size, int characteristics)"}, "spliterator(long[], int, int, int)": {"Returns": [["@B_java#util#Spliterator#OfLong_E@", "A spliterator for an array"]], "Parameters": [["long[]", "long: The array, assumed to be unmodified during use"], ["int", "int: The least index (inclusive) to cover"], ["int", "int: One past the greatest index to cover"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex is negative, toIndex is less than fromIndex, or toIndex is greater than the array size"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator.OfLong covering a range of elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report. (For example, if it is known the array will not be further modified, specify IMMUTABLE; if the array data is considered to have an an encounter order, specify ORDERED). The method @B_java#util#Arrays#spliterator_E@ can often be used instead, which returns a spliterator that reports SIZED, SUBSIZED, IMMUTABLE, and ORDERED.", "history": "added in API level 24", "FullName": "public static Spliterator.OfLong spliterator (long[] array, int fromIndex, int toIndex, int additionalCharacteristics)"}, "spliterator(java.lang.Object[],int,int,int)": {"Returns": [["@B_java#util#Spliterator_E@", "A spliterator for an array"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The array, assumed to be unmodified during use"], ["int", "int: The least index (inclusive) to cover"], ["int", "int: One past the greatest index to cover"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex is negative, toIndex is less than fromIndex, or toIndex is greater than the array size"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator covering a range of elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.", "history": "Added in API level 24", "FullName": "public static Spliterator<T> spliterator (Object[] array, int fromIndex, int toIndex, int additionalCharacteristics)"}, "spliterator(java.util.PrimitiveIterator.OfLong,long,int)": {"Returns": [["@B_java#util#Spliterator#OfLong_E@", "A spliterator from an iterator"]], "Parameters": [["@B_java#util#PrimitiveIterator#OfLong_E@", "PrimitiveIterator.OfLong: The iterator for the source"], ["long", "long: The number of elements in the source, to be reported as initial estimateSize."], ["int", "int: Characteristics of this spliterator's source or elements. The characteristics SIZED and SUBSIZED are additionally reported unless CONCURRENT is supplied."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given iterator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, and with a given initially reported size. The spliterator is not , inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned, or the initially reported size is not equal to the actual number of elements in the source.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfLong spliterator (PrimitiveIterator.OfLong iterator, long size, int characteristics)"}, "spliteratorUnknownSize(java.util.PrimitiveIterator.OfLong,int)": {"Returns": [["@B_java#util#Spliterator#OfLong_E@", "A spliterator from an iterator"]], "Parameters": [["@B_java#util#PrimitiveIterator#OfLong_E@", "PrimitiveIterator.OfLong: The iterator for the source"], ["int", "int: Characteristics of this spliterator's source or elements (SIZED and SUBSIZED, if supplied, are ignored and are not reported.)"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given iterator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, with no initial size estimate. The spliterator is not , inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfLong spliteratorUnknownSize (PrimitiveIterator.OfLong iterator, int characteristics)"}, "spliterator(java.lang.Object[], int)": {"Returns": [["@B_java#util#Spliterator_E@", "A spliterator for an array"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The array, assumed to be unmodified during use"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator covering the elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.", "history": "added in API level 24", "FullName": "public static Spliterator<T> spliterator (Object[] array, int additionalCharacteristics)"}, "spliterator(int[], int, int, int)": {"Returns": [["@B_java#util#Spliterator#OfInt_E@", "A spliterator for an array"]], "Parameters": [["int[]", "int: The array, assumed to be unmodified during use"], ["int", "int: The least index (inclusive) to cover"], ["int", "int: One past the greatest index to cover"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex is negative, toIndex is less than fromIndex, or toIndex is greater than the array size"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator.OfInt covering a range of elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.", "history": "added in API level 24", "FullName": "public static Spliterator.OfInt spliterator (int[] array, int fromIndex, int toIndex, int additionalCharacteristics)"}, "iterator(java.util.Spliterator<? extends T>)": {"Returns": [["@B_java#util#Iterator_E@", "An iterator"]], "Parameters": [["@B_java#util#Spliterator_E@", "Spliterator: The spliterator"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given spliterator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an Iterator from a Spliterator. Traversal of elements should be accomplished through the iterator. The behaviour of traversal is undefined if the spliterator is operated after the iterator is returned.", "history": "added in API level 24", "FullName": "public static Iterator<T> iterator (Spliterator<? extends T> spliterator)"}, "spliterator(int[],int)": {"Returns": [["@B_java#util#Spliterator#OfInt_E@", "A spliterator for an array"]], "Parameters": [["int[]", "int: The array, assumed to be unmodified during use"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator.OfInt covering the elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfInt spliterator (int[] array, int additionalCharacteristics)"}, "spliterator(long[],int,int,int)": {"Returns": [["@B_java#util#Spliterator#OfLong_E@", "A spliterator for an array"]], "Parameters": [["long[]", "long: The array, assumed to be unmodified during use"], ["int", "int: The least index (inclusive) to cover"], ["int", "int: One past the greatest index to cover"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex is negative, toIndex is less than fromIndex, or toIndex is greater than the array size"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator.OfLong covering a range of elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report. (For example, if it is known the array will not be further modified, specify IMMUTABLE; if the array data is considered to have an an encounter order, specify ORDERED). The method @B_java#util#Arrays#spliterator_E@ can often be used instead, which returns a spliterator that reports SIZED, SUBSIZED, IMMUTABLE, and ORDERED.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfLong spliterator (long[] array, int fromIndex, int toIndex, int additionalCharacteristics)"}, "spliteratorUnknownSize(java.util.PrimitiveIterator.OfInt,int)": {"Returns": [["@B_java#util#Spliterator#OfInt_E@", "A spliterator from an iterator"]], "Parameters": [["@B_java#util#PrimitiveIterator#OfInt_E@", "PrimitiveIterator.OfInt: The iterator for the source"], ["int", "int: Characteristics of this spliterator's source or elements (SIZED and SUBSIZED, if supplied, are ignored and are not reported.)"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given iterator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, with no initial size estimate. The spliterator is not , inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfInt spliteratorUnknownSize (PrimitiveIterator.OfInt iterator, int characteristics)"}, "spliterator(int[],int,int,int)": {"Returns": [["@B_java#util#Spliterator#OfInt_E@", "A spliterator for an array"]], "Parameters": [["int[]", "int: The array, assumed to be unmodified during use"], ["int", "int: The least index (inclusive) to cover"], ["int", "int: One past the greatest index to cover"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex is negative, toIndex is less than fromIndex, or toIndex is greater than the array size"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator.OfInt covering a range of elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfInt spliterator (int[] array, int fromIndex, int toIndex, int additionalCharacteristics)"}, "spliterator(java.lang.Object[],int)": {"Returns": [["@B_java#util#Spliterator_E@", "A spliterator for an array"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The array, assumed to be unmodified during use"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator covering the elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.", "history": "Added in API level 24", "FullName": "public static Spliterator<T> spliterator (Object[] array, int additionalCharacteristics)"}, "emptyIntSpliterator()": {"Returns": [["@B_java#util#Spliterator#OfInt_E@", "An empty spliterator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an empty Spliterator.OfInt The empty spliterator reports @B_java#util#Spliterator#SIZED_E@ and @B_java#util#Spliterator#SUBSIZED_E@. Calls to @B_java#util#Spliterator#trySplit_E@ always return null.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfInt emptyIntSpliterator ()"}, "spliterator(java.lang.Object[], int, int, int)": {"Returns": [["@B_java#util#Spliterator_E@", "A spliterator for an array"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The array, assumed to be unmodified during use"], ["int", "int: The least index (inclusive) to cover"], ["int", "int: One past the greatest index to cover"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex is negative, toIndex is less than fromIndex, or toIndex is greater than the array size"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator covering a range of elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.", "history": "added in API level 24", "FullName": "public static Spliterator<T> spliterator (Object[] array, int fromIndex, int toIndex, int additionalCharacteristics)"}, "iterator(java.util.Spliterator<?extendsT>)": {"Returns": [["@B_java#util#Iterator_E@", "An iterator"]], "Parameters": [["@B_java#util#Spliterator_E@", "Spliterator: The spliterator"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given spliterator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an Iterator from a Spliterator. Traversal of elements should be accomplished through the iterator. The behaviour of traversal is undefined if the spliterator is operated after the iterator is returned.", "history": "Added in API level 24", "FullName": "public static Iterator<T> iterator (Spliterator<? extends T> spliterator)"}, "emptyLongSpliterator()": {"Returns": [["@B_java#util#Spliterator#OfLong_E@", "An empty spliterator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an empty Spliterator.OfLong The empty spliterator reports @B_java#util#Spliterator#SIZED_E@ and @B_java#util#Spliterator#SUBSIZED_E@. Calls to @B_java#util#Spliterator#trySplit_E@ always return null.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfLong emptyLongSpliterator ()"}, "spliterator(double[],int,int,int)": {"Returns": [["@B_java#util#Spliterator#OfDouble_E@", "A spliterator for an array"]], "Parameters": [["double[]", "double: The array, assumed to be unmodified during use"], ["int", "int: The least index (inclusive) to cover"], ["int", "int: One past the greatest index to cover"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex is negative, toIndex is less than fromIndex, or toIndex is greater than the array size"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator.OfDouble covering a range of elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report. (For example, if it is known the array will not be further modified, specify IMMUTABLE; if the array data is considered to have an an encounter order, specify ORDERED). The method @B_java#util#Arrays#spliterator_E@ can often be used instead, which returns a spliterator that reports SIZED, SUBSIZED, IMMUTABLE, and ORDERED.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfDouble spliterator (double[] array, int fromIndex, int toIndex, int additionalCharacteristics)"}, "spliterator(java.util.Iterator<?extendsT>,long,int)": {"Returns": [["@B_java#util#Spliterator_E@", "A spliterator from an iterator"]], "Parameters": [["@B_java#util#Iterator_E@", "Iterator: The iterator for the source"], ["long", "long: The number of elements in the source, to be reported as initial estimateSize"], ["int", "int: Characteristics of this spliterator's source or elements. The characteristics SIZED and SUBSIZED are additionally reported unless CONCURRENT is supplied."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given iterator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a Spliterator using a given Iterator as the source of elements, and with a given initially reported size. The spliterator is not , inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned, or the initially reported size is not equal to the actual number of elements in the source.", "history": "Added in API level 24", "FullName": "public static Spliterator<T> spliterator (Iterator<? extends T> iterator, long size, int characteristics)"}, "spliterator(double[],int)": {"Returns": [["@B_java#util#Spliterator#OfDouble_E@", "A spliterator for an array"]], "Parameters": [["double[]", "double: The array, assumed to be unmodified during use"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator.OfDouble covering the elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfDouble spliterator (double[] array, int additionalCharacteristics)"}, "emptySpliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "An empty spliterator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an empty Spliterator The empty spliterator reports @B_java#util#Spliterator#SIZED_E@ and @B_java#util#Spliterator#SUBSIZED_E@. Calls to @B_java#util#Spliterator#trySplit_E@ always return null.", "history": "Added in API level 24", "FullName": "public static Spliterator<T> emptySpliterator ()"}, "spliterator(double[], int, int, int)": {"Returns": [["@B_java#util#Spliterator#OfDouble_E@", "A spliterator for an array"]], "Parameters": [["double[]", "double: The array, assumed to be unmodified during use"], ["int", "int: The least index (inclusive) to cover"], ["int", "int: One past the greatest index to cover"], ["int", "int: Additional spliterator characteristics of this spliterator's source or elements beyond SIZED and SUBSIZED which are are always reported"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex is negative, toIndex is less than fromIndex, or toIndex is greater than the array size"]], "SeeAlso": ["@B_java#util#Arrays#spliterator_E@"], "Permissions": [], "Description": "Creates a Spliterator.OfDouble covering a range of elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use @B_java#util#Arrays#spliterator_E@. The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report. (For example, if it is known the array will not be further modified, specify IMMUTABLE; if the array data is considered to have an an encounter order, specify ORDERED). The method @B_java#util#Arrays#spliterator_E@ can often be used instead, which returns a spliterator that reports SIZED, SUBSIZED, IMMUTABLE, and ORDERED.", "history": "added in API level 24", "FullName": "public static Spliterator.OfDouble spliterator (double[] array, int fromIndex, int toIndex, int additionalCharacteristics)"}, "emptyDoubleSpliterator()": {"Returns": [["@B_java#util#Spliterator#OfDouble_E@", "An empty spliterator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an empty Spliterator.OfDouble The empty spliterator reports @B_java#util#Spliterator#SIZED_E@ and @B_java#util#Spliterator#SUBSIZED_E@. Calls to @B_java#util#Spliterator#trySplit_E@ always return null.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfDouble emptyDoubleSpliterator ()"}}, "Inheritance": [], "ClassName": "java.util.Spliterators", "ClassDesc": "Static classes and methods for operating on or creating instances of @B_java#util#Spliterator_E@ and its primitive specializations @B_java#util#Spliterator#OfInt_E@, @B_java#util#Spliterator#OfLong_E@, and @B_java#util#Spliterator#OfDouble_E@."}