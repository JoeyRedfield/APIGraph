{"Functions": {"setComposingRegion(int, int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid. In @B_android#os#Build#VERSION_CODES#N_E@ and later, false is returned when the target application does not implement this method."]], "Parameters": [["int", "int: the position in the text at which the composing region begins"], ["int", "int: the position in the text at which the composing region ends"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Mark a certain region of text as composing text. If there was a composing region, the characters are left as they were and the composing span removed, as if @B_android#view#inputmethod#InputConnection#finishComposingText_E@ has been called. The default style for composing text is used. The passed indices are clipped to the contents bounds. If the resulting region is zero-sized, no region is marked and the effect is the same as that of calling @B_android#view#inputmethod#InputConnection#finishComposingText_E@. The order of start and end is not important. In effect, the region from start to end and the region from end to start is the same. Editor authors, be ready to accept a start that is greater than end. Since this does not change the contents of the text, editors should not call @B_android#view#inputmethod#InputMethodManager#updateSelection_E@ and IMEs should not receive @B_android#inputmethodservice#InputMethodService#onUpdateSelection_E@. This has no impact on the cursor/selection position. It may result in the cursor being anywhere inside or outside the composing region, including cases where the selection and the composing region overlap partially or entirely.", "history": "added in API level 9", "FullName": "public boolean setComposingRegion (int start, int end)"}, "commitText(java.lang.CharSequence,int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text to commit. This may include styles."], ["int", "int: The new cursor position around the text, in Java characters. If > 0, this is relative to the end of the text - 1; if <= 0, this is relative to the start of the text. So a value of 1 will always advance the cursor to the position after the full text being inserted. Note that this means you can't position the cursor within the text, because the editor can make modifications to the text you are providing so it is not possible to correctly specify locations there."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation replaces any existing composing text with the given text. In addition, only if dummy mode, a key event is sent for the new text and the current editable buffer cleared.", "history": "Added in API level 3", "FullName": "public boolean commitText (CharSequence text, int newCursorPosition)"}, "setComposingText(java.lang.CharSequence, int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The composing text with styles if necessary. If no style object attached to the text, the default style for composing text is used. See @B_android#text#Spanned_E@ for how to attach style object to the text. @B_android#text#SpannableString_E@ and @B_android#text#SpannableStringBuilder_E@ are two implementations of the interface @B_android#text#Spanned_E@."], ["int", "int: The new cursor position around the text. If > 0, this is relative to the end of the text - 1; if <= 0, this is relative to the start of the text. So a value of 1 will always advance you to the position after the full text being inserted. Note that this means you can't position the cursor within the text, because the editor can make modifications to the text you are providing so it is not possible to correctly specify locations there."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation places the given text into the editable, replacing any existing composing text. The new text is marked as in a composing state with the composing style.", "history": "added in API level 3", "FullName": "public boolean setComposingText (CharSequence text, int newCursorPosition)"}, "finishComposingText()": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation removes the composing state from the current editable text. In addition, only if dummy mode, a key event is sent for the new text and the current editable buffer cleared.", "history": "Added in API level 3", "FullName": "public boolean finishComposingText ()"}, "clearMetaKeyStates(int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["int", "int: The states to be cleared, may be one or more bits as per @B_android#view#KeyEvent#getMetaState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation uses @B_android#text#method#MetaKeyKeyListener#clearMetaKeyState_E@ to clear the state.", "history": "Added in API level 3", "FullName": "public boolean clearMetaKeyStates (int states)"}, "performPrivateCommand(java.lang.String,android.os.Bundle)": {"Returns": [["boolean", "true if the command was sent (whether or not the associated editor understood it), false if the input connection is no longer valid."]], "Parameters": [["@B_java#lang#String_E@", "String: Name of the command to be performed. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands."], ["@B_android#os#Bundle_E@", "Bundle: Any data to include with the command."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation does nothing.", "history": "Added in API level 3", "FullName": "public boolean performPrivateCommand (String action, Bundle data)"}, "getTextAfterCursor(int, int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the text after the cursor position; the length of the returned text might be less than n."]], "Parameters": [["int", "int: The expected length of the text."], ["int", "int: Supplies additional options controlling how the text is returned. May be either 0 or @B_android#view#inputmethod#InputConnection#GET_TEXT_WITH_STYLES_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation returns the given amount of text from the current cursor position in the buffer.", "history": "added in API level 3", "FullName": "public CharSequence getTextAfterCursor (int length, int flags)"}, "setComposingSpans(android.text.Spannable)": {"Returns": [], "Parameters": [["@B_android#text#Spannable_E@", "Spannable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public static void setComposingSpans (Spannable text)"}, "getComposingSpanEnd(android.text.Spannable)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#text#Spannable_E@", "Spannable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public static int getComposingSpanEnd (Spannable text)"}, "deleteSurroundingText(int,int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["int", "int: The number of characters before the cursor to be deleted, in code unit. If this is greater than the number of existing characters between the beginning of the text and the cursor, then this method does not fail but deletes all the characters in that range."], ["int", "int: The number of characters after the cursor to be deleted, in code unit. If this is greater than the number of existing characters between the cursor and the end of the text, then this method does not fail but deletes all the characters in that range."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation performs the deletion around the current selection position of the editable text.", "history": "Added in API level 3", "FullName": "public boolean deleteSurroundingText (int beforeLength, int afterLength)"}, "performContextMenuAction(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation does nothing.", "history": "Added in API level 3", "FullName": "public boolean performContextMenuAction (int id)"}, "sendKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides standard implementation for sending a key event to the window attached to the input connection's view.", "history": "Added in API level 3", "FullName": "public boolean sendKeyEvent (KeyEvent event)"}, "getTextBeforeCursor(int,int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the text before the cursor position; the length of the returned text might be less than n."]], "Parameters": [["int", "int: The expected length of the text."], ["int", "int: Supplies additional options controlling how the text is returned. May be either 0 or @B_android#view#inputmethod#InputConnection#GET_TEXT_WITH_STYLES_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation returns the given amount of text from the current cursor position in the buffer.", "history": "Added in API level 3", "FullName": "public CharSequence getTextBeforeCursor (int length, int flags)"}, "BaseInputConnection(android.view.View, boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 3", "FullName": "public BaseInputConnection (View targetView, boolean fullEditor)"}, "commitCompletion(android.view.inputmethod.CompletionInfo)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["@B_android#view#inputmethod#CompletionInfo_E@", "CompletionInfo: The committed completion."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation does nothing and returns false.", "history": "Added in API level 3", "FullName": "public boolean commitCompletion (CompletionInfo text)"}, "getCursorCapsMode(int)": {"Returns": [["int", "the caps mode flags that are in effect at the current cursor position. See TYPE_TEXT_FLAG_CAPS_* in @B_android#text#InputType_E@."]], "Parameters": [["int", "int: The desired modes to retrieve, as defined by @B_android#text#TextUtils#getCapsMode_E@. These constants are defined so that you can simply pass the current @B_android#view#inputmethod#EditorInfo#inputType_E@ value directly in to here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation uses TextUtils.getCapsMode to get the cursor caps mode for the current selection position in the editable text, unless in dummy mode in which case 0 is always returned.", "history": "Added in API level 3", "FullName": "public int getCursorCapsMode (int reqModes)"}, "commitCorrection(android.view.inputmethod.CorrectionInfo)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid. In @B_android#os#Build#VERSION_CODES#N_E@ and later, returns false when the target application does not implement this method."]], "Parameters": [["@B_android#view#inputmethod#CorrectionInfo_E@", "CorrectionInfo: Detailed information about the correction."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation does nothing and returns false.", "history": "Added in API level 11", "FullName": "public boolean commitCorrection (CorrectionInfo correctionInfo)"}, "commitText(java.lang.CharSequence, int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text to commit. This may include styles."], ["int", "int: The new cursor position around the text, in Java characters. If > 0, this is relative to the end of the text - 1; if <= 0, this is relative to the start of the text. So a value of 1 will always advance the cursor to the position after the full text being inserted. Note that this means you can't position the cursor within the text, because the editor can make modifications to the text you are providing so it is not possible to correctly specify locations there."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation replaces any existing composing text with the given text. In addition, only if dummy mode, a key event is sent for the new text and the current editable buffer cleared.", "history": "added in API level 3", "FullName": "public boolean commitText (CharSequence text, int newCursorPosition)"}, "getEditable()": {"Returns": [["@B_android#text#Editable_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the target of edit operations. The default implementation returns its own fake editable that is just used for composing text; subclasses that are real text editors should override this and supply their own.", "history": "Added in API level 3", "FullName": "public Editable getEditable ()"}, "closeConnection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation calls @B_android#view#inputmethod#BaseInputConnection#finishComposingText_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 24", "FullName": "public void closeConnection ()"}, "getComposingSpanStart(android.text.Spannable)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#text#Spannable_E@", "Spannable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public static int getComposingSpanStart (Spannable text)"}, "deleteSurroundingTextInCodePoints(int, int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid. Returns false when the target application does not implement this method."]], "Parameters": [["int", "int: The number of characters before the cursor to be deleted, in code points. If this is greater than the number of existing characters between the beginning of the text and the cursor, then this method does not fail but deletes all the characters in that range."], ["int", "int: The number of characters after the cursor to be deleted, in code points. If this is greater than the number of existing characters between the cursor and the end of the text, then this method does not fail but deletes all the characters in that range."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation performs the deletion around the current selection position of the editable text.", "history": "added in API level 24", "FullName": "public boolean deleteSurroundingTextInCodePoints (int beforeLength, int afterLength)"}, "deleteSurroundingTextInCodePoints(int,int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid. Returns false when the target application does not implement this method."]], "Parameters": [["int", "int: The number of characters before the cursor to be deleted, in code points. If this is greater than the number of existing characters between the beginning of the text and the cursor, then this method does not fail but deletes all the characters in that range."], ["int", "int: The number of characters after the cursor to be deleted, in code points. If this is greater than the number of existing characters between the cursor and the end of the text, then this method does not fail but deletes all the characters in that range."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation performs the deletion around the current selection position of the editable text.", "history": "Added in API level 24", "FullName": "public boolean deleteSurroundingTextInCodePoints (int beforeLength, int afterLength)"}, "getHandler()": {"Returns": [["@B_android#os#Handler_E@", "null to use the default @B_android#os#Handler_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the @B_android#view#inputmethod#InputMethodManager_E@ to enable application developers to specify a dedicated @B_android#os#Handler_E@ on which incoming IPC method calls from input methods will be dispatched. Note: This does nothing when called from input methods.", "history": "Added in API level 24", "FullName": "public Handler getHandler ()"}, "reportFullscreenMode(boolean)": {"Returns": [["boolean", "For editor authors, the return value will always be ignored. For IME authors, this always returns true on @B_android#os#Build#VERSION_CODES#N_MR1_E@ and prior devices and false on @B_android#os#Build#VERSION_CODES#O_E@ and later devices."]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates InputMethodManager with the current fullscreen mode.", "history": "Added in API level 3", "FullName": "public boolean reportFullscreenMode (boolean enabled)"}, "setComposingText(java.lang.CharSequence,int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The composing text with styles if necessary. If no style object attached to the text, the default style for composing text is used. See @B_android#text#Spanned_E@ for how to attach style object to the text. @B_android#text#SpannableString_E@ and @B_android#text#SpannableStringBuilder_E@ are two implementations of the interface @B_android#text#Spanned_E@."], ["int", "int: The new cursor position around the text. If > 0, this is relative to the end of the text - 1; if <= 0, this is relative to the start of the text. So a value of 1 will always advance you to the position after the full text being inserted. Note that this means you can't position the cursor within the text, because the editor can make modifications to the text you are providing so it is not possible to correctly specify locations there."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation places the given text into the editable, replacing any existing composing text. The new text is marked as in a composing state with the composing style.", "history": "Added in API level 3", "FullName": "public boolean setComposingText (CharSequence text, int newCursorPosition)"}, "setSelection(int,int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["int", "int: the character index where the selection should start."], ["int", "int: the character index where the selection should end."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation changes the selection position in the current editable text.", "history": "Added in API level 3", "FullName": "public boolean setSelection (int start, int end)"}, "BaseInputConnection(android.view.View,boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public BaseInputConnection (View targetView, boolean fullEditor)"}, "getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)": {"Returns": [["@B_android#view#inputmethod#ExtractedText_E@", "an @B_android#view#inputmethod#ExtractedText_E@ object describing the state of the text view and containing the extracted text itself, or null if the input connection is no longer valid of the editor can't comply with the request for some reason."]], "Parameters": [["@B_android#view#inputmethod#ExtractedTextRequest_E@", "ExtractedTextRequest: Description of how the text should be returned. @B_android#view#inputmethod#ExtractedTextRequest_E@"], ["int", "int: Additional options to control the client, either 0 or @B_android#view#inputmethod#InputConnection#GET_EXTRACTED_TEXT_MONITOR_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation always returns null.", "history": "Added in API level 3", "FullName": "public ExtractedText getExtractedText (ExtractedTextRequest request, int flags)"}, "commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)": {"Returns": [["boolean", "true if this request is accepted by the application, whether the request is already handled or still being handled in background, false otherwise."]], "Parameters": [["@B_android#view#inputmethod#InputContentInfo_E@", "InputContentInfo: Content to be inserted. This value must never be null."], ["int", "int: @B_android#view#inputmethod#InputConnection#INPUT_CONTENT_GRANT_READ_URI_PERMISSION_E@ if the content provider allows @B_android#R#styleable#AndroidManifestProvider_grantUriPermissions_E@ or 0 if the application does not need to call @B_android#view#inputmethod#InputContentInfo#requestPermission_E@."], ["@B_android#os#Bundle_E@", "Bundle: optional bundle data. This can be null. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation does nothing.", "history": "Added in API level 25", "FullName": "public boolean commitContent (InputContentInfo inputContentInfo, int flags, Bundle opts)"}, "setSelection(int, int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["int", "int: the character index where the selection should start."], ["int", "int: the character index where the selection should end."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation changes the selection position in the current editable text.", "history": "added in API level 3", "FullName": "public boolean setSelection (int start, int end)"}, "endBatchEdit()": {"Returns": [["boolean", "true if there is still a batch edit in progress after closing the latest one (in other words, if the nesting count is > 0), false otherwise or if the input connection is no longer valid."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation does nothing.", "history": "Added in API level 3", "FullName": "public boolean endBatchEdit ()"}, "beginBatchEdit()": {"Returns": [["boolean", "true if a batch edit is now in progress, false otherwise. Since this method starts a batch edit, that means it will always return true unless the input connection is no longer valid."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation does nothing.", "history": "Added in API level 3", "FullName": "public boolean beginBatchEdit ()"}, "setComposingRegion(int,int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid. In @B_android#os#Build#VERSION_CODES#N_E@ and later, false is returned when the target application does not implement this method."]], "Parameters": [["int", "int: the position in the text at which the composing region begins"], ["int", "int: the position in the text at which the composing region ends"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Mark a certain region of text as composing text. If there was a composing region, the characters are left as they were and the composing span removed, as if @B_android#view#inputmethod#InputConnection#finishComposingText_E@ has been called. The default style for composing text is used. The passed indices are clipped to the contents bounds. If the resulting region is zero-sized, no region is marked and the effect is the same as that of calling @B_android#view#inputmethod#InputConnection#finishComposingText_E@. The order of start and end is not important. In effect, the region from start to end and the region from end to start is the same. Editor authors, be ready to accept a start that is greater than end. Since this does not change the contents of the text, editors should not call @B_android#view#inputmethod#InputMethodManager#updateSelection_E@ and IMEs should not receive @B_android#inputmethodservice#InputMethodService#onUpdateSelection_E@. This has no impact on the cursor/selection position. It may result in the cursor being anywhere inside or outside the composing region, including cases where the selection and the composing region overlap partially or entirely.", "history": "Added in API level 9", "FullName": "public boolean setComposingRegion (int start, int end)"}, "requestCursorUpdates(int)": {"Returns": [["boolean", "true if the request is scheduled. false to indicate that when the application will not call @B_android#view#inputmethod#InputMethodManager#updateCursorAnchorInfo_E@. In @B_android#os#Build#VERSION_CODES#N_E@ and later, returns false also when the target application does not implement this method."]], "Parameters": [["int", "int: @B_android#view#inputmethod#InputConnection#CURSOR_UPDATE_IMMEDIATE_E@ and/or @B_android#view#inputmethod#InputConnection#CURSOR_UPDATE_MONITOR_E@. Pass 0 to disable the effect of @B_android#view#inputmethod#InputConnection#CURSOR_UPDATE_MONITOR_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation does nothing.", "history": "Added in API level 21", "FullName": "public boolean requestCursorUpdates (int cursorUpdateMode)"}, "performEditorAction(int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["int", "int: This must be one of the action constants for @B_android#view#inputmethod#EditorInfo#imeOptions_E@, such as @B_android#view#inputmethod#EditorInfo#IME_ACTION_GO_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation turns this into the enter key.", "history": "Added in API level 3", "FullName": "public boolean performEditorAction (int actionCode)"}, "deleteSurroundingText(int, int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["int", "int: The number of characters before the cursor to be deleted, in code unit. If this is greater than the number of existing characters between the beginning of the text and the cursor, then this method does not fail but deletes all the characters in that range."], ["int", "int: The number of characters after the cursor to be deleted, in code unit. If this is greater than the number of existing characters between the cursor and the end of the text, then this method does not fail but deletes all the characters in that range."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation performs the deletion around the current selection position of the editable text.", "history": "added in API level 3", "FullName": "public boolean deleteSurroundingText (int beforeLength, int afterLength)"}, "getTextAfterCursor(int,int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the text after the cursor position; the length of the returned text might be less than n."]], "Parameters": [["int", "int: The expected length of the text."], ["int", "int: Supplies additional options controlling how the text is returned. May be either 0 or @B_android#view#inputmethod#InputConnection#GET_TEXT_WITH_STYLES_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation returns the given amount of text from the current cursor position in the buffer.", "history": "Added in API level 3", "FullName": "public CharSequence getTextAfterCursor (int length, int flags)"}, "removeComposingSpans(android.text.Spannable)": {"Returns": [], "Parameters": [["@B_android#text#Spannable_E@", "Spannable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public static final void removeComposingSpans (Spannable text)"}, "getSelectedText(int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the text that is currently selected, if any, or null if no text is selected. In @B_android#os#Build#VERSION_CODES#N_E@ and later, returns false when the target application does not implement this method."]], "Parameters": [["int", "int: Supplies additional options controlling how the text is returned. May be either 0 or @B_android#view#inputmethod#InputConnection#GET_TEXT_WITH_STYLES_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation returns the text currently selected, or null if none is selected.", "history": "Added in API level 9", "FullName": "public CharSequence getSelectedText (int flags)"}, "getTextBeforeCursor(int, int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the text before the cursor position; the length of the returned text might be less than n."]], "Parameters": [["int", "int: The expected length of the text."], ["int", "int: Supplies additional options controlling how the text is returned. May be either 0 or @B_android#view#inputmethod#InputConnection#GET_TEXT_WITH_STYLES_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation returns the given amount of text from the current cursor position in the buffer.", "history": "added in API level 3", "FullName": "public CharSequence getTextBeforeCursor (int length, int flags)"}}, "Inheritance": [], "ClassName": "android.view.inputmethod.BaseInputConnection", "ClassDesc": "Base class for implementors of the InputConnection interface, taking care of most of the common behavior for providing a connection to an Editable. Implementors of this class will want to be sure to implement @B_android#view#inputmethod#BaseInputConnection#getEditable_E@ to provide access to their own editable object, and to refer to the documentation in @B_android#view#inputmethod#InputConnection_E@."}