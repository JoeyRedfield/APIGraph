{"Functions": {"getField()": {"Returns": [["@B_java#security#spec#ECField_E@", "the field field that this curve is over."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the finite field field that this elliptic curve is over.", "history": "Added in API level 1", "FullName": "public ECField getField ()"}, "EllipticCurve(java.security.spec.ECField,java.math.BigInteger,java.math.BigInteger,byte[])": {"Returns": [], "Parameters": [["@B_java#security#spec#ECField_E@", "ECField: the finite field that this elliptic curve is over."], ["@B_java#math#BigInteger_E@", "BigInteger: the first coefficient of this elliptic curve."], ["@B_java#math#BigInteger_E@", "BigInteger: the second coefficient of this elliptic curve."], ["byte[]", "byte: the bytes used during curve generation for later validation. Contents of this array are copied to protect against subsequent modification."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if field, a, or b is null."], ["@B_java#lang#IllegalArgumentException_E@", "if a or b is not null and not in field."]], "SeeAlso": [], "Permissions": [], "Description": "Creates an elliptic curve with the specified elliptic field field, the coefficients a and b, and the seed used for curve generation.", "history": "Added in API level 1", "FullName": "public EllipticCurve (ECField field, BigInteger a, BigInteger b, byte[] seed)"}, "getA()": {"Returns": [["@B_java#math#BigInteger_E@", "the first coefficient a."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the first coefficient a of the elliptic curve.", "history": "Added in API level 1", "FullName": "public BigInteger getA ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if obj is an instance of EllipticCurve and the field, A, and B match, false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to be compared."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this elliptic curve for equality with the specified object.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "getB()": {"Returns": [["@B_java#math#BigInteger_E@", "the second coefficient b."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the second coefficient b of the elliptic curve.", "history": "Added in API level 1", "FullName": "public BigInteger getB ()"}, "getSeed()": {"Returns": [["byte[]", "the seeding bytes seed. A new array is returned each time this method is called."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the seeding bytes seed used during curve generation. May be null if not specified.", "history": "Added in API level 1", "FullName": "public byte[] getSeed ()"}, "EllipticCurve(java.security.spec.ECField,java.math.BigInteger,java.math.BigInteger)": {"Returns": [], "Parameters": [["@B_java#security#spec#ECField_E@", "ECField: the finite field that this elliptic curve is over."], ["@B_java#math#BigInteger_E@", "BigInteger: the first coefficient of this elliptic curve."], ["@B_java#math#BigInteger_E@", "BigInteger: the second coefficient of this elliptic curve."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if field, a, or b is null."], ["@B_java#lang#IllegalArgumentException_E@", "if a or b is not null and not in field."]], "SeeAlso": [], "Permissions": [], "Description": "Creates an elliptic curve with the specified elliptic field field and the coefficients a and b.", "history": "Added in API level 1", "FullName": "public EllipticCurve (ECField field, BigInteger a, BigInteger b)"}, "hashCode()": {"Returns": [["int", "a hash code value computed from the hash codes of the field, A, and B, as follows: (field.hashCode() << 6) + (a.hashCode() << 4) + (b.hashCode() << 2)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for this elliptic curve.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.security.spec.EllipticCurve", "ClassDesc": "This immutable class holds the necessary values needed to represent an elliptic curve."}