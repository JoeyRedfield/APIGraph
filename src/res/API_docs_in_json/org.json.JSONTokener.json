{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current position and the entire input string.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "dehexchar(char)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["char", "char: a character in the ranges [0-9], [A-F] or [a-f]. Any other character will yield a -1 result."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the integer [0..15] value for the given hex character, or -1 for non-hex input.", "history": "Added in API level 1", "FullName": "public static int dehexchar (char hex)"}, "skipPast(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Advances past all input up to and including the next occurrence of thru. If the remaining input doesn't contain thru, the input is exhausted.", "history": "Added in API level 1", "FullName": "public void skipPast (String thru)"}, "next(char)": {"Returns": [["char", "no returns description in source"]], "Parameters": [["char", "char no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the next available character if it equals c. Otherwise an exception is thrown.", "history": "Added in API level 1", "FullName": "public char next (char c)"}, "more()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true until the input has been exhausted.", "history": "Added in API level 1", "FullName": "public boolean more ()"}, "next()": {"Returns": [["char", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the next available character, or the null character '\\0' if all input has been exhausted. The return value of this method is ambiguous for JSON strings that contain the character '\\0'.", "history": "Added in API level 1", "FullName": "public char next ()"}, "skipTo(char)": {"Returns": [["char", "no returns description in source"]], "Parameters": [["char", "char no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Advances past all input up to but not including the next occurrence of to. If the remaining input doesn't contain to, the input is unchanged.", "history": "Added in API level 1", "FullName": "public char skipTo (char to)"}, "nextString(char)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["char", "char: either ' or \"."]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the string up to but not including quote, unescaping any character escape sequences encountered along the way. The opening quote should have already been read. This consumes the closing quote, but does not include it in the returned string.", "history": "Added in API level 1", "FullName": "public String nextString (char quote)"}, "JSONTokener(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: JSON encoded string. Null is not permitted and will yield a tokener that throws NullPointerExceptions when methods are called."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public JSONTokener (String in)"}, "next(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", "if the remaining input is not long enough to satisfy this request."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the next length characters of the input. The returned string shares its backing character array with this tokener's input string. If a reference to the returned string may be held indefinitely, you should use new String(result) to copy it first to avoid memory leaks.", "history": "Added in API level 1", "FullName": "public String next (int length)"}, "nextClean()": {"Returns": [["char", "no returns description in source"]], "Parameters": [], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the next character that is not whitespace and does not belong to a comment. If the input is exhausted before such a character can be found, the null character '\\0' is returned. The return value of this method is ambiguous for JSON strings that contain the character '\\0'.", "history": "Added in API level 1", "FullName": "public char nextClean ()"}, "syntaxError(java.lang.String)": {"Returns": [["@B_org#json#JSONException_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an exception containing the given message plus the current position and the entire input string.", "history": "Added in API level 1", "FullName": "public JSONException syntaxError (String message)"}, "nextTo(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "a possibly-empty string"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_java#lang#String#trim_E@ string holding the characters up to but not including the first of: any character in excluded a newline character '\\n' a carriage return '\\r' The returned string shares its backing character array with this tokener's input string. If a reference to the returned string may be held indefinitely, you should use new String(result) to copy it first to avoid memory leaks.", "history": "Added in API level 1", "FullName": "public String nextTo (String excluded)"}, "nextTo(char)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["char", "char no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to nextTo(String.valueOf(excluded)).", "history": "Added in API level 1", "FullName": "public String nextTo (char excluded)"}, "back()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unreads the most recent character of input. If no input characters have been read, the input is unchanged.", "history": "Added in API level 1", "FullName": "public void back ()"}, "nextValue()": {"Returns": [["@B_java#lang#Object_E@", "a @B_org#json#JSONObject_E@, @B_org#json#JSONArray_E@, String, Boolean, Integer, Long, Double or @B_org#json#JSONObject#NULL_E@."]], "Parameters": [], "Throws": [["@B_org#json#JSONException_E@", "if the input is malformed."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the next value from the input.", "history": "Added in API level 1", "FullName": "public Object nextValue ()"}}, "Inheritance": [], "ClassName": "org.json.JSONTokener", "ClassDesc": "Parses a JSON (@B_org#json#JSONTokener#JSONTokener_E@ and @B_org#json#JSONTokener#nextValue_E@ method. Example usage: For best interoperability and performance use JSON that complies with RFC 4627, such as that generated by @B_org#json#JSONStringer_E@. For legacy reasons this parser is lenient, so a successful parse does not indicate that the input string was valid JSON. All of the following syntax errors will be ignored: End of line comments starting with // or # and ending with a newline character. C-style comments starting with /* and ending with */. Such comments may not be nested. Strings that are unquoted or 'single quoted'. Hexadecimal integers prefixed with 0x or 0X. Octal integers prefixed with 0. Array elements separated by ;. Unnecessary array separators. These are interpreted as if null was the omitted value. Key-value pairs separated by = or =>. Key-value pairs separated by ;. Each tokener may be used to parse a single JSON string. Instances of this class are not thread safe. Although this class is nonfinal, it was not designed for inheritance and should not be subclassed. In particular, self-use by overrideable methods is not specified. See"}