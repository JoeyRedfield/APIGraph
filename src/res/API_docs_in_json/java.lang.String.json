{"Functions": {"regionMatches(int,java.lang.String,int,int)": {"Returns": [["boolean", "true if the specified subregion of this string exactly matches the specified subregion of the string argument; false otherwise."]], "Parameters": [["int", "int: the starting offset of the subregion in this string."], ["@B_java#lang#String_E@", "String: the string argument."], ["int", "int: the starting offset of the subregion in the string argument."], ["int", "int: the number of characters to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if two string regions are equal. A substring of this String object is compared to a substring of the argument other. The result is true if these substrings represent identical character sequences. The substring of this String object to be compared begins at index toffset and has length len. The substring of other to be compared begins at index ooffset and has length len. The result is false if and only if at least one of the following is true: toffset is negative. ooffset is negative. toffset+len is greater than the length of this String object. ooffset+len is greater than the length of the other argument. There is some nonnegative integer len such that: this.charAt(toffset + ) != other.charAt(ooffset + )", "history": "Added in API level 1", "FullName": "public boolean regionMatches (int toffset, String other, int ooffset, int len)"}, "contentEquals(java.lang.StringBuffer)": {"Returns": [["boolean", "true if this String represents the same sequence of characters as the specified StringBuffer, false otherwise"]], "Parameters": [["@B_java#lang#StringBuffer_E@", "StringBuffer: The StringBuffer to compare this String against"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this string to the specified StringBuffer. The result is true if and only if this String represents the same sequence of characters as the specified StringBuffer. This method synchronizes on the StringBuffer.", "history": "Added in API level 1", "FullName": "public boolean contentEquals (StringBuffer sb)"}, "format(java.lang.String,java.lang.Object...)": {"Returns": [["@B_java#lang#String_E@", "A formatted string"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string"], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."]], "SeeAlso": ["@B_java#util#Formatter_E@"], "Permissions": [], "Description": "Returns a formatted string using the specified format string and arguments. The locale always used is the one returned by @B_java#util#Locale#getDefault_E@.", "history": "Added in API level 1", "FullName": "public static String format (String format, Object... args)"}, "String(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: A String"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a newly created String object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string. Unless an explicit copy of original is needed, use of this constructor is unnecessary since Strings are immutable.", "history": "Added in API level 1", "FullName": "public String (String original)"}, "String(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: The bytes to be decoded into characters"], ["int", "int: The index of the first byte to decode"], ["int", "int: The number of bytes to decode"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the offset and the length arguments index characters outside the bounds of the bytes array"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new String by decoding the specified subarray of bytes using the platform's default charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the subarray. The behavior of this constructor when the given bytes are not valid in the default charset is unspecified. The @B_java#nio#charset#CharsetDecoder_E@ class should be used when more control over the decoding process is required.", "history": "added in API level 1", "FullName": "public String (byte[] bytes, int offset, int length)"}, "substring(int)": {"Returns": [["@B_java#lang#String_E@", "the specified substring."]], "Parameters": [["int", "int: the beginning index, inclusive."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if beginIndex is negative or larger than the length of this String object."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a string that is a substring of this string. The substring begins with the character at the specified index and extends to the end of this string. Examples:", "history": "Added in API level 1", "FullName": "public String substring (int beginIndex)"}, "regionMatches(int, java.lang.String, int, int)": {"Returns": [["boolean", "true if the specified subregion of this string exactly matches the specified subregion of the string argument; false otherwise."]], "Parameters": [["int", "int: the starting offset of the subregion in this string."], ["@B_java#lang#String_E@", "String: the string argument."], ["int", "int: the starting offset of the subregion in the string argument."], ["int", "int: the number of characters to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if two string regions are equal. A substring of this String object is compared to a substring of the argument other. The result is true if these substrings represent identical character sequences. The substring of this String object to be compared begins at index toffset and has length len. The substring of other to be compared begins at index ooffset and has length len. The result is false if and only if at least one of the following is true: toffset is negative. ooffset is negative. toffset+len is greater than the length of this String object. ooffset+len is greater than the length of the other argument. There is some nonnegative integer len such that: this.charAt(toffset + ) != other.charAt(ooffset + )", "history": "added in API level 1", "FullName": "public boolean regionMatches (int toffset, String other, int ooffset, int len)"}, "toUpperCase(java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the String, converted to uppercase."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: use the case transformation rules for this locale"]], "Throws": [], "SeeAlso": ["@B_java#lang#String#toUpperCase_E@", "@B_java#lang#String#toLowerCase_E@"], "Permissions": [], "Description": "Converts all of the characters in this String to upper case using the rules of the given Locale. Case mapping is based on the Unicode Standard version specified by the @B_java#lang#Character_E@ class. Since case mappings are not always 1:1 char mappings, the resulting String may be a different length than the original String. Examples of locale-sensitive and 1:M case mappings are in the following table.", "history": "Added in API level 1", "FullName": "public String toUpperCase (Locale locale)"}, "contentEquals(java.lang.CharSequence)": {"Returns": [["boolean", "true if this String represents the same sequence of char values as the specified sequence, false otherwise"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The sequence to compare this String against"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this string to the specified CharSequence. The result is true if and only if this String represents the same sequence of char values as the specified sequence. Note that if the CharSequence is a StringBuffer then the method synchronizes on it.", "history": "Added in API level 1", "FullName": "public boolean contentEquals (CharSequence cs)"}, "startsWith(java.lang.String, int)": {"Returns": [["boolean", "true if the character sequence represented by the argument is a prefix of the substring of this object starting at index toffset; false otherwise. The result is false if toffset is negative or greater than the length of this String object; otherwise the result is the same as the result of the expression this.substring(toffset).startsWith(prefix)"]], "Parameters": [["@B_java#lang#String_E@", "String: the prefix."], ["int", "int: where to begin looking in this string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if the substring of this string beginning at the specified index starts with the specified prefix.", "history": "added in API level 1", "FullName": "public boolean startsWith (String prefix, int toffset)"}, "String(byte[], int, int, java.nio.charset.Charset)": {"Returns": [], "Parameters": [["byte[]", "byte: The bytes to be decoded into characters"], ["int", "int: The index of the first byte to decode"], ["int", "int: The number of bytes to decode"], ["@B_java#nio#charset#Charset_E@", "Charset: The charset to be used to decode the bytes"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the offset and length arguments index characters outside the bounds of the bytes array"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new String by decoding the specified subarray of bytes using the specified String is a function of the charset, and hence may not be equal to the length of the subarray. This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string. The @B_java#nio#charset#CharsetDecoder_E@ class should be used when more control over the decoding process is required.", "history": "added in API level 9", "FullName": "public String (byte[] bytes, int offset, int length, Charset charset)"}, "String(byte[],int)": {"Returns": [], "Parameters": [["byte[]", "byte: The bytes to be converted to characters"], ["int", "int: The top 8 bits of each 16-bit Unicode code unit"]], "Throws": [], "SeeAlso": ["@B_java#lang#String#String_E@"], "Permissions": [], "Description": "This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the String constructors that take a @B_java#nio#charset#Charset_E@, charset name, or that use the platform's default charset. Allocates a new String containing characters constructed from an array of 8-bit integer values. Each character", "history": "Added in API level 1", "FullName": "public String (byte[] ascii, int hibyte)"}, "replace(char, char)": {"Returns": [["@B_java#lang#String_E@", "a string derived from this string by replacing every occurrence of oldChar with newChar."]], "Parameters": [["char", "char: the old character."], ["char", "char: the new character."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string resulting from replacing all occurrences of oldChar in this string with newChar. If the character oldChar does not occur in the character sequence represented by this String object, then a reference to this String object is returned. Otherwise, a String object is returned that represents a character sequence identical to the character sequence represented by this String object, except that every occurrence of oldChar is replaced by an occurrence of newChar. Examples:", "history": "added in API level 1", "FullName": "public String replace (char oldChar, char newChar)"}, "valueOf(char[],int,int)": {"Returns": [["@B_java#lang#String_E@", "a String that contains the characters of the specified subarray of the character array."]], "Parameters": [["char[]", "char: the character array."], ["int", "int: initial offset of the subarray."], ["int", "int: length of the subarray."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if offset is negative, or count is negative, or offset+count is larger than data.length."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the string representation of a specific subarray of the char array argument. The offset argument is the index of the first character of the subarray. The count argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the returned string.", "history": "Added in API level 1", "FullName": "public static String valueOf (char[] data, int offset, int count)"}, "substring(int,int)": {"Returns": [["@B_java#lang#String_E@", "the specified substring."]], "Parameters": [["int", "int: the beginning index, inclusive."], ["int", "int: the ending index, exclusive."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the beginIndex is negative, or endIndex is larger than the length of this String object, or beginIndex is larger than endIndex."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a string that is a substring of this string. The substring begins at the specified beginIndex and extends to the character at index endIndex - 1. Thus the length of the substring is endIndex-beginIndex. Examples:", "history": "Added in API level 1", "FullName": "public String substring (int beginIndex, int endIndex)"}, "format(java.util.Locale,java.lang.String,java.lang.Object...)": {"Returns": [["@B_java#lang#String_E@", "A formatted string"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale to apply during formatting. If l is null then no localization is applied."], ["@B_java#lang#String_E@", "String: A format string"], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification"]], "SeeAlso": ["@B_java#util#Formatter_E@"], "Permissions": [], "Description": "Returns a formatted string using the specified locale, format string, and arguments.", "history": "Added in API level 1", "FullName": "public static String format (Locale l, String format, Object... args)"}, "replaceFirst(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The resulting String"]], "Parameters": [["@B_java#lang#String_E@", "String: the regular expression to which this string is to be matched"], ["@B_java#lang#String_E@", "String: the string to be substituted for the first match"]], "Throws": [["@B_java#util#regex#PatternSyntaxException_E@", "if the regular expression's syntax is invalid"]], "SeeAlso": ["@B_java#util#regex#Pattern_E@"], "Permissions": [], "Description": "Replaces the first substring of this string that matches the given An invocation of this method of the form .replaceFirst(, ) yields exactly the same result as the expression Note that backslashes (\\) and dollar signs ($) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see @B_java#util#regex#Matcher#replaceFirst_E@. Use @B_java#util#regex#Matcher#quoteReplacement_E@ to suppress the special meaning of these characters, if desired.", "history": "added in API level 1", "FullName": "public String replaceFirst (String regex, String replacement)"}, "valueOf(char[], int, int)": {"Returns": [["@B_java#lang#String_E@", "a String that contains the characters of the specified subarray of the character array."]], "Parameters": [["char[]", "char: the character array."], ["int", "int: initial offset of the subarray."], ["int", "int: length of the subarray."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if offset is negative, or count is negative, or offset+count is larger than data.length."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the string representation of a specific subarray of the char array argument. The offset argument is the index of the first character of the subarray. The count argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the returned string.", "history": "added in API level 1", "FullName": "public static String valueOf (char[] data, int offset, int count)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the string itself."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This object (which is already a string!) is itself returned.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "equalsIgnoreCase(java.lang.String)": {"Returns": [["boolean", "true if the argument is not null and it represents an equivalent String ignoring case; false otherwise"]], "Parameters": [["@B_java#lang#String_E@", "String: The String to compare this String against"]], "Throws": [], "SeeAlso": ["@B_java#lang#String#equals_E@"], "Permissions": [], "Description": "Compares this String to another String, ignoring case considerations. Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. Two characters c1 and c2 are considered the same ignoring case if at least one of the following is true: The two characters are the same (as compared by the == operator) Applying the method @B_java#lang#Character#toUpperCase_E@ to each character produces the same result Applying the method @B_java#lang#Character#toLowerCase_E@ to each character produces the same result", "history": "Added in API level 1", "FullName": "public boolean equalsIgnoreCase (String anotherString)"}, "format(java.lang.String, java.lang.Object...)": {"Returns": [["@B_java#lang#String_E@", "A formatted string"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string"], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."]], "SeeAlso": ["@B_java#util#Formatter_E@"], "Permissions": [], "Description": "Returns a formatted string using the specified format string and arguments. The locale always used is the one returned by @B_java#util#Locale#getDefault_E@.", "history": "added in API level 1", "FullName": "public static String format (String format, Object... args)"}, "indexOf(int)": {"Returns": [["int", "the index of the first occurrence of the character in the character sequence represented by this object, or -1 if the character does not occur."]], "Parameters": [["int", "int: a character (Unicode code point)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the first occurrence of the specified character. If a character with value ch occurs in the character sequence represented by this String object, then the index (in Unicode code units) of the first such occurrence is returned. For values of ch in the range from 0 to 0xFFFF (inclusive), this is the smallest value ch, it is the smallest value -1 is returned.", "history": "Added in API level 1", "FullName": "public int indexOf (int ch)"}, "contains(java.lang.CharSequence)": {"Returns": [["boolean", "true if this string contains s, false otherwise"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the sequence to search for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if and only if this string contains the specified sequence of char values.", "history": "Added in API level 1", "FullName": "public boolean contains (CharSequence s)"}, "length()": {"Returns": [["int", "the length of the sequence of characters represented by this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of this string. The length is equal to the number of", "history": "Added in API level 1", "FullName": "public int length ()"}, "toUpperCase()": {"Returns": [["@B_java#lang#String_E@", "the String, converted to uppercase."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#String#toUpperCase_E@"], "Permissions": [], "Description": "Converts all of the characters in this String to upper case using the rules of the default locale. This method is equivalent to toUpperCase(Locale.getDefault()). \"title\".toUpperCase() in a Turkish locale returns \"T\\u0130TLE\", where '\\u0130' is the LATIN CAPITAL LETTER I WITH DOT ABOVE character. To obtain correct results for locale insensitive strings, use toUpperCase(Locale.ROOT).", "history": "Added in API level 1", "FullName": "public String toUpperCase ()"}, "String(byte[], int, int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: The bytes to be converted to characters"], ["int", "int: The top 8 bits of each 16-bit Unicode code unit"], ["int", "int: The initial offset"], ["int", "int: The length"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the offset or count argument is invalid"]], "SeeAlso": ["@B_java#lang#String#String_E@"], "Permissions": [], "Description": "This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the String constructors that take a @B_java#nio#charset#Charset_E@, charset name, or that use the platform's default charset. Allocates a new String constructed from a subarray of an array of 8-bit integer values. The offset argument is the index of the first byte of the subarray, and the count argument specifies the length of the subarray. Each byte in the subarray is converted to a char as specified in the method above.", "history": "added in API level 1", "FullName": "public String (byte[] ascii, int hibyte, int offset, int count)"}, "String(char[])": {"Returns": [], "Parameters": [["char[]", "char: The initial value of the string"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new String so that it represents the sequence of characters currently contained in the character array argument. The contents of the character array are copied; subsequent modification of the character array does not affect the newly created string.", "history": "Added in API level 1", "FullName": "public String (char[] value)"}, "trim()": {"Returns": [["@B_java#lang#String_E@", "A string whose value is this string, with any leading and trailing white space removed, or this string if it has no leading or trailing white space."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string whose value is this string, with any leading and trailing whitespace removed. If this String object represents an empty character sequence, or the first and last characters of character sequence represented by this String object both have codes greater than '\\u0020' (the space character), then a reference to this String object is returned. Otherwise, if there is no character with a code greater than '\\u0020' in the string, then a String object representing an empty string is returned. Otherwise, let '\\u0020', and let '\\u0020'. A String object is returned, representing the substring of this string that begins with the character at index this.substring(k, m + 1). This method may be used to trim whitespace (as defined above) from the beginning and end of a string.", "history": "Added in API level 1", "FullName": "public String trim ()"}, "split(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the array of strings computed by splitting this string around matches of the given regular expression"]], "Parameters": [["@B_java#lang#String_E@", "String: the delimiting regular expression"]], "Throws": [["@B_java#util#regex#PatternSyntaxException_E@", "if the regular expression's syntax is invalid"]], "SeeAlso": ["@B_java#util#regex#Pattern_E@"], "Permissions": [], "Description": "Splits this string around matches of the given This method works as if by invoking the two-argument @B_java#lang#String#split_E@ method with the given expression and a limit argument of zero. Trailing empty strings are therefore not included in the resulting array. The string \"boo:and:foo\", for example, yields the following results with these expressions:", "history": "Added in API level 1", "FullName": "public String[] split (String regex)"}, "String(char[],int,int)": {"Returns": [], "Parameters": [["char[]", "char: Array that is the source of characters"], ["int", "int: The initial offset"], ["int", "int: The length"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the offset and count arguments index characters outside the bounds of the value array"]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new String that contains characters from a subarray of the character array argument. The offset argument is the index of the first character of the subarray and the count argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the newly created string.", "history": "Added in API level 1", "FullName": "public String (char[] value, int offset, int count)"}, "String(java.lang.StringBuffer)": {"Returns": [], "Parameters": [["@B_java#lang#StringBuffer_E@", "StringBuffer: A StringBuffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new string that contains the sequence of characters currently contained in the string buffer argument. The contents of the string buffer are copied; subsequent modification of the string buffer does not affect the newly created string.", "history": "Added in API level 1", "FullName": "public String (StringBuffer buffer)"}, "String(byte[],java.lang.String)": {"Returns": [], "Parameters": [["byte[]", "byte: The bytes to be decoded into characters"], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new String by decoding the specified array of bytes using the specified String is a function of the charset, and hence may not be equal to the length of the byte array. The behavior of this constructor when the given bytes are not valid in the given charset is unspecified. The @B_java#nio#charset#CharsetDecoder_E@ class should be used when more control over the decoding process is required.", "history": "Added in API level 1", "FullName": "public String (byte[] bytes, String charsetName)"}, "join(java.lang.CharSequence,java.lang.Iterable<?extendsjava.lang.CharSequence>)": {"Returns": [["@B_java#lang#String_E@", "a new String that is composed from the elements argument"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: a sequence of characters that is used to separate each of the elements in the resulting String"], ["@B_java#lang#Iterable_E@", "Iterable: an Iterable that will have its elements joined together."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If delimiter or elements is null"]], "SeeAlso": ["@B_java#lang#String#join_E@", "@B_java#util#StringJoiner_E@"], "Permissions": [], "Description": "Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter. null, then \"null\" is added.", "history": "Added in API level 26", "FullName": "public static String join (CharSequence delimiter, Iterable<? extends CharSequence> elements)"}, "valueOf(char[])": {"Returns": [["@B_java#lang#String_E@", "a String that contains the characters of the character array."]], "Parameters": [["char[]", "char: the character array."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the string representation of the char array argument. The contents of the character array are copied; subsequent modification of the character array does not affect the returned string.", "history": "Added in API level 1", "FullName": "public static String valueOf (char[] data)"}, "replaceAll(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The resulting String"]], "Parameters": [["@B_java#lang#String_E@", "String: the regular expression to which this string is to be matched"], ["@B_java#lang#String_E@", "String: the string to be substituted for each match"]], "Throws": [["@B_java#util#regex#PatternSyntaxException_E@", "if the regular expression's syntax is invalid"]], "SeeAlso": ["@B_java#util#regex#Pattern_E@"], "Permissions": [], "Description": "Replaces each substring of this string that matches the given An invocation of this method of the form .replaceAll(, ) yields exactly the same result as the expression Note that backslashes (\\) and dollar signs ($) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see @B_java#util#regex#Matcher#replaceAll_E@. Use @B_java#util#regex#Matcher#quoteReplacement_E@ to suppress the special meaning of these characters, if desired.", "history": "added in API level 1", "FullName": "public String replaceAll (String regex, String replacement)"}, "String(byte[], int)": {"Returns": [], "Parameters": [["byte[]", "byte: The bytes to be converted to characters"], ["int", "int: The top 8 bits of each 16-bit Unicode code unit"]], "Throws": [], "SeeAlso": ["@B_java#lang#String#String_E@"], "Permissions": [], "Description": "This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the String constructors that take a @B_java#nio#charset#Charset_E@, charset name, or that use the platform's default charset. Allocates a new String containing characters constructed from an array of 8-bit integer values. Each character", "history": "added in API level 1", "FullName": "public String (byte[] ascii, int hibyte)"}, "replace(char,char)": {"Returns": [["@B_java#lang#String_E@", "a string derived from this string by replacing every occurrence of oldChar with newChar."]], "Parameters": [["char", "char: the old character."], ["char", "char: the new character."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string resulting from replacing all occurrences of oldChar in this string with newChar. If the character oldChar does not occur in the character sequence represented by this String object, then a reference to this String object is returned. Otherwise, a String object is returned that represents a character sequence identical to the character sequence represented by this String object, except that every occurrence of oldChar is replaced by an occurrence of newChar. Examples:", "history": "Added in API level 1", "FullName": "public String replace (char oldChar, char newChar)"}, "getBytes()": {"Returns": [["byte[]", "The resultant byte array"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Encodes this String into a sequence of bytes using the platform's default charset, storing the result into a new byte array. The behavior of this method when this string cannot be encoded in the default charset is unspecified. The @B_java#nio#charset#CharsetEncoder_E@ class should be used when more control over the encoding process is required.", "history": "Added in API level 1", "FullName": "public byte[] getBytes ()"}, "valueOf(char)": {"Returns": [["@B_java#lang#String_E@", "a string of length 1 containing as its single character the argument c."]], "Parameters": [["char", "char: a char."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the string representation of the char argument.", "history": "Added in API level 1", "FullName": "public static String valueOf (char c)"}, "String(byte[], java.nio.charset.Charset)": {"Returns": [], "Parameters": [["byte[]", "byte: The bytes to be decoded into characters"], ["@B_java#nio#charset#Charset_E@", "Charset: The charset to be used to decode the bytes"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new String by decoding the specified array of bytes using the specified String is a function of the charset, and hence may not be equal to the length of the byte array. This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string. The @B_java#nio#charset#CharsetDecoder_E@ class should be used when more control over the decoding process is required.", "history": "added in API level 9", "FullName": "public String (byte[] bytes, Charset charset)"}, "split(java.lang.String, int)": {"Returns": [["@B_java#lang#String_E@", "the array of strings computed by splitting this string around matches of the given regular expression"]], "Parameters": [["@B_java#lang#String_E@", "String: the delimiting regular expression"], ["int", "int: the result threshold, as described above"]], "Throws": [["@B_java#util#regex#PatternSyntaxException_E@", "if the regular expression's syntax is invalid"]], "SeeAlso": ["@B_java#util#regex#Pattern_E@"], "Permissions": [], "Description": "Splits this string around matches of the given The array returned by this method contains each substring of this string that is terminated by another substring that matches the given expression or is terminated by the end of the string. The substrings in the array are in the order in which they occur in this string. If the expression does not match any part of the input then the resulting array has just one element, namely this string. When there is a positive-width match at the beginning of this string then an empty leading substring is included at the beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring. The limit parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit The string \"boo:and:foo\", for example, yields the following results with these parameters: An invocation of this method of the form split(, ) yields the same result as the expression", "history": "added in API level 1", "FullName": "public String[] split (String regex, int limit)"}, "String(char[], int, int)": {"Returns": [], "Parameters": [["char[]", "char: Array that is the source of characters"], ["int", "int: The initial offset"], ["int", "int: The length"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the offset and count arguments index characters outside the bounds of the value array"]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new String that contains characters from a subarray of the character array argument. The offset argument is the index of the first character of the subarray and the count argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the newly created string.", "history": "added in API level 1", "FullName": "public String (char[] value, int offset, int count)"}, "valueOf(java.lang.Object)": {"Returns": [["@B_java#lang#String_E@", "if the argument is null, then a string equal to \"null\"; otherwise, the value of obj.toString() is returned."]], "Parameters": [["@B_java#lang#Object_E@", "Object: an Object."]], "Throws": [], "SeeAlso": ["@B_java#lang#Object#toString_E@"], "Permissions": [], "Description": "Returns the string representation of the Object argument.", "history": "Added in API level 1", "FullName": "public static String valueOf (Object obj)"}, "replaceFirst(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The resulting String"]], "Parameters": [["@B_java#lang#String_E@", "String: the regular expression to which this string is to be matched"], ["@B_java#lang#String_E@", "String: the string to be substituted for the first match"]], "Throws": [["@B_java#util#regex#PatternSyntaxException_E@", "if the regular expression's syntax is invalid"]], "SeeAlso": ["@B_java#util#regex#Pattern_E@"], "Permissions": [], "Description": "Replaces the first substring of this string that matches the given An invocation of this method of the form .replaceFirst(, ) yields exactly the same result as the expression Note that backslashes (\\) and dollar signs ($) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see @B_java#util#regex#Matcher#replaceFirst_E@. Use @B_java#util#regex#Matcher#quoteReplacement_E@ to suppress the special meaning of these characters, if desired.", "history": "Added in API level 1", "FullName": "public String replaceFirst (String regex, String replacement)"}, "String(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: The bytes to be decoded into characters"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new String by decoding the specified array of bytes using the platform's default charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the byte array. The behavior of this constructor when the given bytes are not valid in the default charset is unspecified. The @B_java#nio#charset#CharsetDecoder_E@ class should be used when more control over the decoding process is required.", "history": "Added in API level 1", "FullName": "public String (byte[] bytes)"}, "isEmpty()": {"Returns": [["boolean", "true if @B_java#lang#String#length_E@ is 0, otherwise false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if, and only if, @B_java#lang#String#length_E@ is 0.", "history": "Added in API level 9", "FullName": "public boolean isEmpty ()"}, "getChars(int,int,char[],int)": {"Returns": [], "Parameters": [["int", "int: index of the first character in the string to copy."], ["int", "int: index after the last character in the string to copy."], ["char[]", "char: the destination array."], ["int", "int: the start offset in the destination array."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If any of the following is true: srcBegin is negative. srcBegin is greater than srcEnd srcEnd is greater than the length of this string dstBegin is negative dstBegin+(srcEnd-srcBegin) is larger than dst.length"]], "SeeAlso": [], "Permissions": [], "Description": "Copies characters from this string into the destination character array. The first character to be copied is at index srcBegin; the last character to be copied is at index srcEnd-1 (thus the total number of characters to be copied is srcEnd-srcBegin). The characters are copied into the subarray of dst starting at index dstBegin and ending at index:", "history": "Added in API level 1", "FullName": "public void getChars (int srcBegin, int srcEnd, char[] dst, int dstBegin)"}, "getChars(int, int, char[], int)": {"Returns": [], "Parameters": [["int", "int: index of the first character in the string to copy."], ["int", "int: index after the last character in the string to copy."], ["char[]", "char: the destination array."], ["int", "int: the start offset in the destination array."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If any of the following is true: srcBegin is negative. srcBegin is greater than srcEnd srcEnd is greater than the length of this string dstBegin is negative dstBegin+(srcEnd-srcBegin) is larger than dst.length"]], "SeeAlso": [], "Permissions": [], "Description": "Copies characters from this string into the destination character array. The first character to be copied is at index srcBegin; the last character to be copied is at index srcEnd-1 (thus the total number of characters to be copied is srcEnd-srcBegin). The characters are copied into the subarray of dst starting at index dstBegin and ending at index:", "history": "added in API level 1", "FullName": "public void getChars (int srcBegin, int srcEnd, char[] dst, int dstBegin)"}, "copyValueOf(char[], int, int)": {"Returns": [["@B_java#lang#String_E@", "a String that contains the characters of the specified subarray of the character array."]], "Parameters": [["char[]", "char: the character array."], ["int", "int: initial offset of the subarray."], ["int", "int: length of the subarray."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if offset is negative, or count is negative, or offset+count is larger than data.length."]], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to @B_java#lang#String#valueOf_E@.", "history": "added in API level 1", "FullName": "public static String copyValueOf (char[] data, int offset, int count)"}, "String(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: The bytes to be decoded into characters"], ["int", "int: The index of the first byte to decode"], ["int", "int: The number of bytes to decode"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the offset and the length arguments index characters outside the bounds of the bytes array"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new String by decoding the specified subarray of bytes using the platform's default charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the subarray. The behavior of this constructor when the given bytes are not valid in the default charset is unspecified. The @B_java#nio#charset#CharsetDecoder_E@ class should be used when more control over the decoding process is required.", "history": "Added in API level 1", "FullName": "public String (byte[] bytes, int offset, int length)"}, "join(java.lang.CharSequence,java.lang.CharSequence...)": {"Returns": [["@B_java#lang#String_E@", "a new String that is composed of the elements separated by the delimiter"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the delimiter that separates each element"], ["@B_java#lang#CharSequence_E@", "CharSequence: the elements to join together."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If delimiter or elements is null"]], "SeeAlso": ["@B_java#util#StringJoiner_E@"], "Permissions": [], "Description": "Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter. \"null\" is added.", "history": "Added in API level 26", "FullName": "public static String join (CharSequence delimiter, CharSequence... elements)"}, "startsWith(java.lang.String)": {"Returns": [["boolean", "true if the character sequence represented by the argument is a prefix of the character sequence represented by this string; false otherwise. Note also that true will be returned if the argument is an empty string or is equal to this String object as determined by the @B_java#lang#String#equals_E@ method."]], "Parameters": [["@B_java#lang#String_E@", "String: the prefix."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if this string starts with the specified prefix.", "history": "Added in API level 1", "FullName": "public boolean startsWith (String prefix)"}, "getBytes(int,int,byte[],int)": {"Returns": [], "Parameters": [["int", "int: Index of the first character in the string to copy"], ["int", "int: Index after the last character in the string to copy"], ["byte[]", "byte: The destination array"], ["int", "int: The start offset in the destination array"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If any of the following is true: srcBegin is negative srcBegin is greater than srcEnd srcEnd is greater than the length of this String dstBegin is negative dstBegin+(srcEnd-srcBegin) is larger than dst.length"]], "SeeAlso": [], "Permissions": [], "Description": "This method does not properly convert characters into bytes. As of JDK 1.1, the preferred way to do this is via the @B_java#lang#String#getBytes_E@ method, which uses the platform's default charset. Copies characters from this string into the destination byte array. Each byte receives the 8 low-order bits of the corresponding character. The eight high-order bits of each character are not copied and do not participate in the transfer in any way. The first character to be copied is at index srcBegin; the last character to be copied is at index srcEnd-1. The total number of characters to be copied is srcEnd-srcBegin. The characters, converted to bytes, are copied into the subarray of dst starting at index dstBegin and ending at index:", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void getBytes (int srcBegin, int srcEnd, byte[] dst, int dstBegin)"}, "indexOf(java.lang.String, int)": {"Returns": [["int", "the index of the first occurrence of the specified substring, starting at the specified index, or -1 if there is no such occurrence."]], "Parameters": [["@B_java#lang#String_E@", "String: the substring to search for."], ["int", "int: the index from which to start the search."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the first occurrence of the specified substring, starting at the specified index. The returned index is the smallest value -1 is returned.", "history": "added in API level 1", "FullName": "public int indexOf (String str, int fromIndex)"}, "lastIndexOf(java.lang.String)": {"Returns": [["int", "the index of the last occurrence of the specified substring, or -1 if there is no such occurrence."]], "Parameters": [["@B_java#lang#String_E@", "String: the substring to search for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the last occurrence of the specified substring. The last occurrence of the empty string \"\" is considered to occur at the index value this.length(). The returned index is the largest value -1 is returned.", "history": "Added in API level 1", "FullName": "public int lastIndexOf (String str)"}, "lastIndexOf(int,int)": {"Returns": [["int", "the index of the last occurrence of the character in the character sequence represented by this object that is less than or equal to fromIndex, or -1 if the character does not occur before that point."]], "Parameters": [["int", "int: a character (Unicode code point)."], ["int", "int: the index to start the search from. There is no restriction on the value of fromIndex. If it is greater than or equal to the length of this string, it has the same effect as if it were equal to one less than the length of this string: this entire string may be searched. If it is negative, it has the same effect as if it were -1: -1 is returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index. For values of ch in the range from 0 to 0xFFFF (inclusive), the index returned is the largest value ch, it is the largest value fromIndex, then -1 is returned. All indices are specified in char values (Unicode code units).", "history": "Added in API level 1", "FullName": "public int lastIndexOf (int ch, int fromIndex)"}, "split(java.lang.String,int)": {"Returns": [["@B_java#lang#String_E@", "the array of strings computed by splitting this string around matches of the given regular expression"]], "Parameters": [["@B_java#lang#String_E@", "String: the delimiting regular expression"], ["int", "int: the result threshold, as described above"]], "Throws": [["@B_java#util#regex#PatternSyntaxException_E@", "if the regular expression's syntax is invalid"]], "SeeAlso": ["@B_java#util#regex#Pattern_E@"], "Permissions": [], "Description": "Splits this string around matches of the given The array returned by this method contains each substring of this string that is terminated by another substring that matches the given expression or is terminated by the end of the string. The substrings in the array are in the order in which they occur in this string. If the expression does not match any part of the input then the resulting array has just one element, namely this string. When there is a positive-width match at the beginning of this string then an empty leading substring is included at the beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring. The limit parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit The string \"boo:and:foo\", for example, yields the following results with these parameters: An invocation of this method of the form split(, ) yields the same result as the expression", "history": "Added in API level 1", "FullName": "public String[] split (String regex, int limit)"}, "subSequence(int, int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the specified subsequence."]], "Parameters": [["int", "int: the begin index, inclusive."], ["int", "int: the end index, exclusive."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if beginIndex or endIndex is negative, if endIndex is greater than length(), or if beginIndex is greater than endIndex"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a character sequence that is a subsequence of this sequence. An invocation of this method of the form", "history": "added in API level 1", "FullName": "public CharSequence subSequence (int beginIndex, int endIndex)"}, "String(byte[], java.lang.String)": {"Returns": [], "Parameters": [["byte[]", "byte: The bytes to be decoded into characters"], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new String by decoding the specified array of bytes using the specified String is a function of the charset, and hence may not be equal to the length of the byte array. The behavior of this constructor when the given bytes are not valid in the given charset is unspecified. The @B_java#nio#charset#CharsetDecoder_E@ class should be used when more control over the decoding process is required.", "history": "added in API level 1", "FullName": "public String (byte[] bytes, String charsetName)"}, "String(byte[],java.nio.charset.Charset)": {"Returns": [], "Parameters": [["byte[]", "byte: The bytes to be decoded into characters"], ["@B_java#nio#charset#Charset_E@", "Charset: The charset to be used to decode the bytes"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new String by decoding the specified array of bytes using the specified String is a function of the charset, and hence may not be equal to the length of the byte array. This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string. The @B_java#nio#charset#CharsetDecoder_E@ class should be used when more control over the decoding process is required.", "history": "Added in API level 9", "FullName": "public String (byte[] bytes, Charset charset)"}, "valueOf(boolean)": {"Returns": [["@B_java#lang#String_E@", "if the argument is true, a string equal to \"true\" is returned; otherwise, a string equal to \"false\" is returned."]], "Parameters": [["boolean", "boolean: a boolean."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the string representation of the boolean argument.", "history": "Added in API level 1", "FullName": "public static String valueOf (boolean b)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the given object represents a String equivalent to this string, false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to compare this String against"]], "Throws": [], "SeeAlso": ["@B_java#lang#String#compareTo_E@", "@B_java#lang#String#equalsIgnoreCase_E@"], "Permissions": [], "Description": "Compares this string to the specified object. The result is true if and only if the argument is not null and is a String object that represents the same sequence of characters as this object.", "history": "Added in API level 1", "FullName": "public boolean equals (Object anObject)"}, "regionMatches(boolean,int,java.lang.String,int,int)": {"Returns": [["boolean", "true if the specified subregion of this string matches the specified subregion of the string argument; false otherwise. Whether the matching is exact or case insensitive depends on the ignoreCase argument."]], "Parameters": [["boolean", "boolean: if true, ignore case when comparing characters."], ["int", "int: the starting offset of the subregion in this string."], ["@B_java#lang#String_E@", "String: the string argument."], ["int", "int: the starting offset of the subregion in the string argument."], ["int", "int: the number of characters to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if two string regions are equal. A substring of this String object is compared to a substring of the argument other. The result is true if these substrings represent character sequences that are the same, ignoring case if and only if ignoreCase is true. The substring of this String object to be compared begins at index toffset and has length len. The substring of other to be compared begins at index ooffset and has length len. The result is false if and only if at least one of the following is true: toffset is negative. ooffset is negative. toffset+len is greater than the length of this String object. ooffset+len is greater than the length of the other argument. ignoreCase is false and there is some nonnegative integer len such that: ignoreCase is true and there is some nonnegative integer len such that:", "history": "Added in API level 1", "FullName": "public boolean regionMatches (boolean ignoreCase, int toffset, String other, int ooffset, int len)"}, "lastIndexOf(java.lang.String, int)": {"Returns": [["int", "the index of the last occurrence of the specified substring, searching backward from the specified index, or -1 if there is no such occurrence."]], "Parameters": [["@B_java#lang#String_E@", "String: the substring to search for."], ["int", "int: the index to start the search from."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index. The returned index is the largest value -1 is returned.", "history": "added in API level 1", "FullName": "public int lastIndexOf (String str, int fromIndex)"}, "toLowerCase()": {"Returns": [["@B_java#lang#String_E@", "the String, converted to lowercase."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#String#toLowerCase_E@"], "Permissions": [], "Description": "Converts all of the characters in this String to lower case using the rules of the default locale. This is equivalent to calling toLowerCase(Locale.getDefault()). \"TITLE\".toLowerCase() in a Turkish locale returns \"t\\u0131tle\", where '\\u0131' is the LATIN SMALL LETTER DOTLESS I character. To obtain correct results for locale insensitive strings, use toLowerCase(Locale.ROOT).", "history": "Added in API level 1", "FullName": "public String toLowerCase ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for this string. The hash code for a String object is computed as int arithmetic, where s[i] is the n is the length of the string, and ^ indicates exponentiation. (The hash value of the empty string is zero.)", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "String(byte[],int,int,java.lang.String)": {"Returns": [], "Parameters": [["byte[]", "byte: The bytes to be decoded into characters"], ["int", "int: The index of the first byte to decode"], ["int", "int: The number of bytes to decode"], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the offset and length arguments index characters outside the bounds of the bytes array"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new String by decoding the specified subarray of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the subarray. The behavior of this constructor when the given bytes are not valid in the given charset is unspecified. The @B_java#nio#charset#CharsetDecoder_E@ class should be used when more control over the decoding process is required.", "history": "Added in API level 1", "FullName": "public String (byte[] bytes, int offset, int length, String charsetName)"}, "indexOf(java.lang.String,int)": {"Returns": [["int", "the index of the first occurrence of the specified substring, starting at the specified index, or -1 if there is no such occurrence."]], "Parameters": [["@B_java#lang#String_E@", "String: the substring to search for."], ["int", "int: the index from which to start the search."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the first occurrence of the specified substring, starting at the specified index. The returned index is the smallest value -1 is returned.", "history": "Added in API level 1", "FullName": "public int indexOf (String str, int fromIndex)"}, "concat(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "a string that represents the concatenation of this object's characters followed by the string argument's characters."]], "Parameters": [["@B_java#lang#String_E@", "String: the String that is concatenated to the end of this String."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Concatenates the specified string to the end of this string. If the length of the argument string is 0, then this String object is returned. Otherwise, a String object is returned that represents a character sequence that is the concatenation of the character sequence represented by this String object and the character sequence represented by the argument string. Examples:", "history": "Added in API level 1", "FullName": "public String concat (String str)"}, "getBytes(int, int, byte[], int)": {"Returns": [], "Parameters": [["int", "int: Index of the first character in the string to copy"], ["int", "int: Index after the last character in the string to copy"], ["byte[]", "byte: The destination array"], ["int", "int: The start offset in the destination array"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If any of the following is true: srcBegin is negative srcBegin is greater than srcEnd srcEnd is greater than the length of this String dstBegin is negative dstBegin+(srcEnd-srcBegin) is larger than dst.length"]], "SeeAlso": [], "Permissions": [], "Description": "This method does not properly convert characters into bytes. As of JDK 1.1, the preferred way to do this is via the @B_java#lang#String#getBytes_E@ method, which uses the platform's default charset. Copies characters from this string into the destination byte array. Each byte receives the 8 low-order bits of the corresponding character. The eight high-order bits of each character are not copied and do not participate in the transfer in any way. The first character to be copied is at index srcBegin; the last character to be copied is at index srcEnd-1. The total number of characters to be copied is srcEnd-srcBegin. The characters, converted to bytes, are copied into the subarray of dst starting at index dstBegin and ending at index:", "history": "added in API level 1", "FullName": "public void getBytes (int srcBegin, int srcEnd, byte[] dst, int dstBegin)"}, "codePointCount(int, int)": {"Returns": [["int", "the number of Unicode code points in the specified text range"]], "Parameters": [["int", "int: the index to the first char of the text range."], ["int", "int: the index after the last char of the text range."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the beginIndex is negative, or endIndex is larger than the length of this String, or beginIndex is larger than endIndex."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of Unicode code points in the specified text range of this String. The text range begins at the specified beginIndex and extends to the char at index endIndex - 1. Thus the length (in chars) of the text range is endIndex-beginIndex. Unpaired surrogates within the text range count as one code point each.", "history": "added in API level 1", "FullName": "public int codePointCount (int beginIndex, int endIndex)"}, "offsetByCodePoints(int,int)": {"Returns": [["int", "the index within this String"]], "Parameters": [["int", "int: the index to be offset"], ["int", "int: the offset in code points"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if index is negative or larger then the length of this String, or if codePointOffset is positive and the substring starting with index has fewer than codePointOffset code points, or if codePointOffset is negative and the substring before index has fewer than the absolute value of codePointOffset code points."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this String that is offset from the given index by codePointOffset code points. Unpaired surrogates within the text range given by index and codePointOffset count as one code point each.", "history": "Added in API level 1", "FullName": "public int offsetByCodePoints (int index, int codePointOffset)"}, "valueOf(long)": {"Returns": [["@B_java#lang#String_E@", "a string representation of the long argument."]], "Parameters": [["long", "long: a long."]], "Throws": [], "SeeAlso": ["@B_java#lang#Long#toString_E@"], "Permissions": [], "Description": "Returns the string representation of the long argument. The representation is exactly the one returned by the Long.toString method of one argument.", "history": "Added in API level 1", "FullName": "public static String valueOf (long l)"}, "toCharArray()": {"Returns": [["char[]", "a newly allocated character array whose length is the length of this string and whose contents are initialized to contain the character sequence represented by this string."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this string to a new character array.", "history": "Added in API level 1", "FullName": "public char[] toCharArray ()"}, "endsWith(java.lang.String)": {"Returns": [["boolean", "true if the character sequence represented by the argument is a suffix of the character sequence represented by this object; false otherwise. Note that the result will be true if the argument is the empty string or is equal to this String object as determined by the @B_java#lang#String#equals_E@ method."]], "Parameters": [["@B_java#lang#String_E@", "String: the suffix."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if this string ends with the specified suffix.", "history": "Added in API level 1", "FullName": "public boolean endsWith (String suffix)"}, "String(byte[], int, int, java.lang.String)": {"Returns": [], "Parameters": [["byte[]", "byte: The bytes to be decoded into characters"], ["int", "int: The index of the first byte to decode"], ["int", "int: The number of bytes to decode"], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the offset and length arguments index characters outside the bounds of the bytes array"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new String by decoding the specified subarray of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the subarray. The behavior of this constructor when the given bytes are not valid in the given charset is unspecified. The @B_java#nio#charset#CharsetDecoder_E@ class should be used when more control over the decoding process is required.", "history": "added in API level 1", "FullName": "public String (byte[] bytes, int offset, int length, String charsetName)"}, "substring(int, int)": {"Returns": [["@B_java#lang#String_E@", "the specified substring."]], "Parameters": [["int", "int: the beginning index, inclusive."], ["int", "int: the ending index, exclusive."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the beginIndex is negative, or endIndex is larger than the length of this String object, or beginIndex is larger than endIndex."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a string that is a substring of this string. The substring begins at the specified beginIndex and extends to the character at index endIndex - 1. Thus the length of the substring is endIndex-beginIndex. Examples:", "history": "added in API level 1", "FullName": "public String substring (int beginIndex, int endIndex)"}, "valueOf(double)": {"Returns": [["@B_java#lang#String_E@", "a string representation of the double argument."]], "Parameters": [["double", "double: a double."]], "Throws": [], "SeeAlso": ["@B_java#lang#Double#toString_E@"], "Permissions": [], "Description": "Returns the string representation of the double argument. The representation is exactly the one returned by the Double.toString method of one argument.", "history": "Added in API level 1", "FullName": "public static String valueOf (double d)"}, "replace(java.lang.CharSequence,java.lang.CharSequence)": {"Returns": [["@B_java#lang#String_E@", "The resulting string"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The sequence of char values to be replaced"], ["@B_java#lang#CharSequence_E@", "CharSequence: The replacement sequence of char values"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence. The replacement proceeds from the beginning of the string to the end, for example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in \"ba\" rather than \"ab\".", "history": "Added in API level 1", "FullName": "public String replace (CharSequence target, CharSequence replacement)"}, "compareToIgnoreCase(java.lang.String)": {"Returns": [["int", "a negative integer, zero, or a positive integer as the specified String is greater than, equal to, or less than this String, ignoring case considerations."]], "Parameters": [["@B_java#lang#String_E@", "String: the String to be compared."]], "Throws": [], "SeeAlso": ["@B_java#text#Collator#compare_E@"], "Permissions": [], "Description": "Compares two strings lexicographically, ignoring case differences. This method returns an integer whose sign is that of calling compareTo with normalized versions of the strings where case differences have been eliminated by calling Character.toLowerCase(Character.toUpperCase(character)) on each character. Note that this method does not take locale into account, and will result in an unsatisfactory ordering for certain locales. The java.text package provides collators to allow locale-sensitive ordering.", "history": "Added in API level 1", "FullName": "public int compareToIgnoreCase (String str)"}, "String(int[],int,int)": {"Returns": [], "Parameters": [["int[]", "int: Array that is the source of Unicode code points"], ["int", "int: The initial offset"], ["int", "int: The length"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If any invalid Unicode code point is found in codePoints"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the offset and count arguments index characters outside the bounds of the codePoints array"]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new String that contains characters from a subarray of the offset argument is the index of the first code point of the subarray and the count argument specifies the length of the subarray. The contents of the subarray are converted to chars; subsequent modification of the int array does not affect the newly created string.", "history": "Added in API level 1", "FullName": "public String (int[] codePoints, int offset, int count)"}, "codePointAt(int)": {"Returns": [["int", "the code point value of the character at the index"]], "Parameters": [["int", "int: the index to the char values"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the index argument is negative or not less than the length of this string."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the character (Unicode code point) at the specified index. The index refers to char values (Unicode code units) and ranges from 0 to @B_java#lang#String#length_E@- 1. If the char value specified at the given index is in the high-surrogate range, the following index is less than the length of this String, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.", "history": "Added in API level 1", "FullName": "public int codePointAt (int index)"}, "valueOf(float)": {"Returns": [["@B_java#lang#String_E@", "a string representation of the float argument."]], "Parameters": [["float", "float: a float."]], "Throws": [], "SeeAlso": ["@B_java#lang#Float#toString_E@"], "Permissions": [], "Description": "Returns the string representation of the float argument. The representation is exactly the one returned by the Float.toString method of one argument.", "history": "Added in API level 1", "FullName": "public static String valueOf (float f)"}, "String(byte[],int,int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: The bytes to be converted to characters"], ["int", "int: The top 8 bits of each 16-bit Unicode code unit"], ["int", "int: The initial offset"], ["int", "int: The length"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the offset or count argument is invalid"]], "SeeAlso": ["@B_java#lang#String#String_E@"], "Permissions": [], "Description": "This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the String constructors that take a @B_java#nio#charset#Charset_E@, charset name, or that use the platform's default charset. Allocates a new String constructed from a subarray of an array of 8-bit integer values. The offset argument is the index of the first byte of the subarray, and the count argument specifies the length of the subarray. Each byte in the subarray is converted to a char as specified in the method above.", "history": "Added in API level 1", "FullName": "public String (byte[] ascii, int hibyte, int offset, int count)"}, "intern()": {"Returns": [["@B_java#lang#String_E@", "a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a canonical representation for the string object. A pool of strings, initially empty, is maintained privately by the class String. When the intern method is invoked, if the pool already contains a string equal to this String object as determined by the @B_java#lang#String#equals_E@ method, then the string from the pool is returned. Otherwise, this String object is added to the pool and a reference to this String object is returned. It follows that for any two strings s and t, s.intern() == t.intern() is true if and only if s.equals(t) is true. All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the", "history": "Added in API level 1", "FullName": "public String intern ()"}, "String(byte[],int,int,java.nio.charset.Charset)": {"Returns": [], "Parameters": [["byte[]", "byte: The bytes to be decoded into characters"], ["int", "int: The index of the first byte to decode"], ["int", "int: The number of bytes to decode"], ["@B_java#nio#charset#Charset_E@", "Charset: The charset to be used to decode the bytes"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the offset and length arguments index characters outside the bounds of the bytes array"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new String by decoding the specified subarray of bytes using the specified String is a function of the charset, and hence may not be equal to the length of the subarray. This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string. The @B_java#nio#charset#CharsetDecoder_E@ class should be used when more control over the decoding process is required.", "history": "Added in API level 9", "FullName": "public String (byte[] bytes, int offset, int length, Charset charset)"}, "getBytes(java.nio.charset.Charset)": {"Returns": [["byte[]", "The resultant byte array"]], "Parameters": [["@B_java#nio#charset#Charset_E@", "Charset: The Charset to be used to encode the String"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Encodes this String into a sequence of bytes using the given This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement byte array. The @B_java#nio#charset#CharsetEncoder_E@ class should be used when more control over the encoding process is required.", "history": "Added in API level 9", "FullName": "public byte[] getBytes (Charset charset)"}, "lastIndexOf(int)": {"Returns": [["int", "the index of the last occurrence of the character in the character sequence represented by this object, or -1 if the character does not occur."]], "Parameters": [["int", "int: a character (Unicode code point)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the last occurrence of the specified character. For values of ch in the range from 0 to 0xFFFF (inclusive), the index (in Unicode code units) returned is the largest value ch, it is the largest value -1 is returned. The String is searched backwards starting at the last character.", "history": "Added in API level 1", "FullName": "public int lastIndexOf (int ch)"}, "replaceAll(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The resulting String"]], "Parameters": [["@B_java#lang#String_E@", "String: the regular expression to which this string is to be matched"], ["@B_java#lang#String_E@", "String: the string to be substituted for each match"]], "Throws": [["@B_java#util#regex#PatternSyntaxException_E@", "if the regular expression's syntax is invalid"]], "SeeAlso": ["@B_java#util#regex#Pattern_E@"], "Permissions": [], "Description": "Replaces each substring of this string that matches the given An invocation of this method of the form .replaceAll(, ) yields exactly the same result as the expression Note that backslashes (\\) and dollar signs ($) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see @B_java#util#regex#Matcher#replaceAll_E@. Use @B_java#util#regex#Matcher#quoteReplacement_E@ to suppress the special meaning of these characters, if desired.", "history": "Added in API level 1", "FullName": "public String replaceAll (String regex, String replacement)"}, "String(java.lang.StringBuilder)": {"Returns": [], "Parameters": [["@B_java#lang#StringBuilder_E@", "StringBuilder: A StringBuilder"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new string that contains the sequence of characters currently contained in the string builder argument. The contents of the string builder are copied; subsequent modification of the string builder does not affect the newly created string. This constructor is provided to ease migration to StringBuilder. Obtaining a string from a string builder via the toString method is likely to run faster and is generally preferred.", "history": "Added in API level 1", "FullName": "public String (StringBuilder builder)"}, "startsWith(java.lang.String,int)": {"Returns": [["boolean", "true if the character sequence represented by the argument is a prefix of the substring of this object starting at index toffset; false otherwise. The result is false if toffset is negative or greater than the length of this String object; otherwise the result is the same as the result of the expression this.substring(toffset).startsWith(prefix)"]], "Parameters": [["@B_java#lang#String_E@", "String: the prefix."], ["int", "int: where to begin looking in this string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if the substring of this string beginning at the specified index starts with the specified prefix.", "history": "Added in API level 1", "FullName": "public boolean startsWith (String prefix, int toffset)"}, "String(int[], int, int)": {"Returns": [], "Parameters": [["int[]", "int: Array that is the source of Unicode code points"], ["int", "int: The initial offset"], ["int", "int: The length"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If any invalid Unicode code point is found in codePoints"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the offset and count arguments index characters outside the bounds of the codePoints array"]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new String that contains characters from a subarray of the offset argument is the index of the first code point of the subarray and the count argument specifies the length of the subarray. The contents of the subarray are converted to chars; subsequent modification of the int array does not affect the newly created string.", "history": "added in API level 1", "FullName": "public String (int[] codePoints, int offset, int count)"}, "codePointCount(int,int)": {"Returns": [["int", "the number of Unicode code points in the specified text range"]], "Parameters": [["int", "int: the index to the first char of the text range."], ["int", "int: the index after the last char of the text range."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the beginIndex is negative, or endIndex is larger than the length of this String, or beginIndex is larger than endIndex."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of Unicode code points in the specified text range of this String. The text range begins at the specified beginIndex and extends to the char at index endIndex - 1. Thus the length (in chars) of the text range is endIndex-beginIndex. Unpaired surrogates within the text range count as one code point each.", "history": "Added in API level 1", "FullName": "public int codePointCount (int beginIndex, int endIndex)"}, "toLowerCase(java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the String, converted to lowercase."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: use the case transformation rules for this locale"]], "Throws": [], "SeeAlso": ["@B_java#lang#String#toLowerCase_E@", "@B_java#lang#String#toUpperCase_E@"], "Permissions": [], "Description": "Converts all of the characters in this String to lower case using the rules of the given Locale. Case mapping is based on the Unicode Standard version specified by the @B_java#lang#Character_E@ class. Since case mappings are not always 1:1 char mappings, the resulting String may be a different length than the original String. Examples of lowercase mappings are in the following table:", "history": "Added in API level 1", "FullName": "public String toLowerCase (Locale locale)"}, "indexOf(int, int)": {"Returns": [["int", "the index of the first occurrence of the character in the character sequence represented by this object that is greater than or equal to fromIndex, or -1 if the character does not occur."]], "Parameters": [["int", "int: a character (Unicode code point)."], ["int", "int: the index to start the search from."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index. If a character with value ch occurs in the character sequence represented by this String object at an index no smaller than fromIndex, then the index of the first such occurrence is returned. For values of ch in the range from 0 to 0xFFFF (inclusive), this is the smallest value ch, it is the smallest value fromIndex, then -1 is returned. There is no restriction on the value of fromIndex. If it is negative, it has the same effect as if it were zero: this entire string may be searched. If it is greater than the length of this string, it has the same effect as if it were equal to the length of this string: -1 is returned. All indices are specified in char values (Unicode code units).", "history": "added in API level 1", "FullName": "public int indexOf (int ch, int fromIndex)"}, "indexOf(java.lang.String)": {"Returns": [["int", "the index of the first occurrence of the specified substring, or -1 if there is no such occurrence."]], "Parameters": [["@B_java#lang#String_E@", "String: the substring to search for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the first occurrence of the specified substring. The returned index is the smallest value -1 is returned.", "history": "Added in API level 1", "FullName": "public int indexOf (String str)"}, "valueOf(int)": {"Returns": [["@B_java#lang#String_E@", "a string representation of the int argument."]], "Parameters": [["int", "int: an int."]], "Throws": [], "SeeAlso": ["@B_java#lang#Integer#toString_E@"], "Permissions": [], "Description": "Returns the string representation of the int argument. The representation is exactly the one returned by the Integer.toString method of one argument.", "history": "Added in API level 1", "FullName": "public static String valueOf (int i)"}, "copyValueOf(char[],int,int)": {"Returns": [["@B_java#lang#String_E@", "a String that contains the characters of the specified subarray of the character array."]], "Parameters": [["char[]", "char: the character array."], ["int", "int: initial offset of the subarray."], ["int", "int: length of the subarray."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if offset is negative, or count is negative, or offset+count is larger than data.length."]], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to @B_java#lang#String#valueOf_E@.", "history": "Added in API level 1", "FullName": "public static String copyValueOf (char[] data, int offset, int count)"}, "lastIndexOf(java.lang.String,int)": {"Returns": [["int", "the index of the last occurrence of the specified substring, searching backward from the specified index, or -1 if there is no such occurrence."]], "Parameters": [["@B_java#lang#String_E@", "String: the substring to search for."], ["int", "int: the index to start the search from."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index. The returned index is the largest value -1 is returned.", "history": "Added in API level 1", "FullName": "public int lastIndexOf (String str, int fromIndex)"}, "subSequence(int,int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the specified subsequence."]], "Parameters": [["int", "int: the begin index, inclusive."], ["int", "int: the end index, exclusive."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if beginIndex or endIndex is negative, if endIndex is greater than length(), or if beginIndex is greater than endIndex"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a character sequence that is a subsequence of this sequence. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public CharSequence subSequence (int beginIndex, int endIndex)"}, "String()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a newly created String object so that it represents an empty character sequence. Note that use of this constructor is unnecessary since Strings are immutable.", "history": "Added in API level 1", "FullName": "public String ()"}, "copyValueOf(char[])": {"Returns": [["@B_java#lang#String_E@", "a String that contains the characters of the character array."]], "Parameters": [["char[]", "char: the character array."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to @B_java#lang#String#valueOf_E@.", "history": "Added in API level 1", "FullName": "public static String copyValueOf (char[] data)"}, "indexOf(int,int)": {"Returns": [["int", "the index of the first occurrence of the character in the character sequence represented by this object that is greater than or equal to fromIndex, or -1 if the character does not occur."]], "Parameters": [["int", "int: a character (Unicode code point)."], ["int", "int: the index to start the search from."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index. If a character with value ch occurs in the character sequence represented by this String object at an index no smaller than fromIndex, then the index of the first such occurrence is returned. For values of ch in the range from 0 to 0xFFFF (inclusive), this is the smallest value ch, it is the smallest value fromIndex, then -1 is returned. There is no restriction on the value of fromIndex. If it is negative, it has the same effect as if it were zero: this entire string may be searched. If it is greater than the length of this string, it has the same effect as if it were equal to the length of this string: -1 is returned. All indices are specified in char values (Unicode code units).", "history": "Added in API level 1", "FullName": "public int indexOf (int ch, int fromIndex)"}, "lastIndexOf(int, int)": {"Returns": [["int", "the index of the last occurrence of the character in the character sequence represented by this object that is less than or equal to fromIndex, or -1 if the character does not occur before that point."]], "Parameters": [["int", "int: a character (Unicode code point)."], ["int", "int: the index to start the search from. There is no restriction on the value of fromIndex. If it is greater than or equal to the length of this string, it has the same effect as if it were equal to one less than the length of this string: this entire string may be searched. If it is negative, it has the same effect as if it were -1: -1 is returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index. For values of ch in the range from 0 to 0xFFFF (inclusive), the index returned is the largest value ch, it is the largest value fromIndex, then -1 is returned. All indices are specified in char values (Unicode code units).", "history": "added in API level 1", "FullName": "public int lastIndexOf (int ch, int fromIndex)"}, "charAt(int)": {"Returns": [["char", "the char value at the specified index of this string. The first char value is at index 0."]], "Parameters": [["int", "int: the index of the char value."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the index argument is negative or not less than the length of this string."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the char value at the specified index. An index ranges from 0 to length() - 1. The first char value of the sequence is at index 0, the next at index 1, and so on, as for array indexing. If the char value specified by the index is a", "history": "Added in API level 1", "FullName": "public char charAt (int index)"}, "matches(java.lang.String)": {"Returns": [["boolean", "true if, and only if, this string matches the given regular expression"]], "Parameters": [["@B_java#lang#String_E@", "String: the regular expression to which this string is to be matched"]], "Throws": [["@B_java#util#regex#PatternSyntaxException_E@", "if the regular expression's syntax is invalid"]], "SeeAlso": ["@B_java#util#regex#Pattern_E@"], "Permissions": [], "Description": "Tells whether or not this string matches the given An invocation of this method of the form .matches() yields exactly the same result as the expression", "history": "Added in API level 1", "FullName": "public boolean matches (String regex)"}, "getBytes(java.lang.String)": {"Returns": [["byte[]", "The resultant byte array"]], "Parameters": [["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array. The behavior of this method when this string cannot be encoded in the given charset is unspecified. The @B_java#nio#charset#CharsetEncoder_E@ class should be used when more control over the encoding process is required.", "history": "Added in API level 1", "FullName": "public byte[] getBytes (String charsetName)"}, "compareTo(java.lang.String)": {"Returns": [["int", "the value 0 if the argument string is equal to this string; a value less than 0 if this string is lexicographically less than the string argument; and a value greater than 0 if this string is lexicographically greater than the string argument."]], "Parameters": [["@B_java#lang#String_E@", "String: the String to be compared."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The character sequence represented by this String object is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if this String object lexicographically precedes the argument string. The result is a positive integer if this String object lexicographically follows the argument string. The result is zero if the strings are equal; compareTo returns 0 exactly when the @B_java#lang#String#equals_E@ method would return true. This is the definition of lexicographic ordering. If two strings are different, then either they have different characters at some index that is a valid index for both strings, or their lengths are different, or both. If they have different characters at one or more index positions, let compareTo returns the difference of the two character values at position k in the two string -- that is, the value: compareTo returns the difference of the lengths of the strings -- that is, the value:", "history": "Added in API level 1", "FullName": "public int compareTo (String anotherString)"}, "offsetByCodePoints(int, int)": {"Returns": [["int", "the index within this String"]], "Parameters": [["int", "int: the index to be offset"], ["int", "int: the offset in code points"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if index is negative or larger then the length of this String, or if codePointOffset is positive and the substring starting with index has fewer than codePointOffset code points, or if codePointOffset is negative and the substring before index has fewer than the absolute value of codePointOffset code points."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this String that is offset from the given index by codePointOffset code points. Unpaired surrogates within the text range given by index and codePointOffset count as one code point each.", "history": "added in API level 1", "FullName": "public int offsetByCodePoints (int index, int codePointOffset)"}, "codePointBefore(int)": {"Returns": [["int", "the Unicode code point value before the given index."]], "Parameters": [["int", "int: the index following the code point that should be returned"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the index argument is less than 1 or greater than the length of this string."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the character (Unicode code point) before the specified index. The index refers to char values (Unicode code units) and ranges from 1 to @B_java#lang#CharSequence#length_E@. If the char value at (index - 1) is in the low-surrogate range, (index - 2) is not negative, and the char value at (index - 2) is in the high-surrogate range, then the supplementary code point value of the surrogate pair is returned. If the char value at index - 1 is an unpaired low-surrogate or a high-surrogate, the surrogate value is returned.", "history": "Added in API level 1", "FullName": "public int codePointBefore (int index)"}}, "Inheritance": [], "ClassName": "java.lang.String", "ClassDesc": "The String class represents character strings. All string literals in Java programs, such as \"abc\", are implemented as instances of this class. Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings. Because String objects are immutable they can be shared. For example: is equivalent to: Here are some more examples of how strings can be used: The class String includes methods for examining individual characters of the sequence, for comparing strings, for searching strings, for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to lowercase. Case mapping is based on the Unicode Standard version specified by the @B_java#lang#Character_E@ class. The Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to strings. String concatenation is implemented through the StringBuilder(or StringBuffer) class and its append method. String conversions are implemented through the method toString, defined by Object and inherited by all classes in Java. For additional information on string concatenation and conversion, see Gosling, Joy, and Steele, Unless otherwise noted, passing a @B_java#lang#NullPointerException_E@ to be thrown. A String represents a string in the UTF-16 format in which supplementary characters are represented by surrogate pairs (see the section Character class for more information). Index values refer to char code units, so a supplementary character uses two positions in a String. The String class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., char values)."}