{"Functions": {"seekTo(long)": {"Returns": [["boolean", "true if the command to set the playback position was successfully sent."]], "Parameters": [["long", "long: a 0 or positive value for the new playback position, expressed in ms."]], "Throws": [["", "java.lang.IllegalArgumentException"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the new playback position. This method can only be called on a registered RemoteController.", "history": "Added in API level 19 Deprecated in API level 21", "FullName": "public boolean seekTo (long timeMs)"}, "RemoteController(android.content.Context,android.media.RemoteController.OnClientUpdateListener)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the @B_android#content#Context_E@, must be non-null."], ["@B_android#media#RemoteController#OnClientUpdateListener_E@", "RemoteController.OnClientUpdateListener: the listener to be called whenever new client information is available, must be non-null."]], "Throws": [["", "java.lang.IllegalArgumentException"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Class constructor.", "history": "Added in API level 19", "FullName": "public RemoteController (Context context, RemoteController.OnClientUpdateListener updateListener)"}, "setArtworkConfiguration(int, int)": {"Returns": [["boolean", "true if the artwork dimension was successfully set."]], "Parameters": [["int", "int: the maximum width in pixels"], ["int", "int: the maximum height in pixels"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set the maximum artwork image dimensions to be received in the metadata. No bitmaps will be received unless this has been specified.", "history": "added in API level 19", "FullName": "public boolean setArtworkConfiguration (int width, int height)"}, "setSynchronizationMode(int)": {"Returns": [["boolean", "true if the synchronization mode was successfully set."]], "Parameters": [["int", "int: @B_android#media#RemoteController#POSITION_SYNCHRONIZATION_NONE_E@ or @B_android#media#RemoteController#POSITION_SYNCHRONIZATION_CHECK_E@"]], "Throws": [["", "java.lang.IllegalArgumentException"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set the playback position synchronization mode. Must be called on a registered RemoteController.", "history": "Added in API level 19 Deprecated in API level 21", "FullName": "public boolean setSynchronizationMode (int sync)"}, "sendMediaKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "true if the event was successfully sent, false otherwise."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: a @B_android#view#KeyEvent_E@ instance whose key code is one of @B_android#view#KeyEvent#KEYCODE_MUTE_E@, @B_android#view#KeyEvent#KEYCODE_HEADSETHOOK_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_PLAY_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_PAUSE_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_PLAY_PAUSE_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_STOP_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_NEXT_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_PREVIOUS_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_REWIND_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_RECORD_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_FAST_FORWARD_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_CLOSE_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_EJECT_E@, or @B_android#view#KeyEvent#KEYCODE_MEDIA_AUDIO_TRACK_E@."]], "Throws": [["", "java.lang.IllegalArgumentException"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Send a simulated key event for a media button to be received by the current client. To simulate a key press, you must first send a KeyEvent built with a @B_android#view#KeyEvent#ACTION_DOWN_E@ action, then another event with the @B_android#view#KeyEvent#ACTION_UP_E@ action. The key event will be sent to the registered receiver (see @B_android#media#AudioManager#registerMediaButtonEventReceiver_E@) whose associated @B_android#media#RemoteControlClient_E@'s metadata and playback state is published (there may be none under some circumstances).", "history": "Added in API level 19 Deprecated in API level 21", "FullName": "public boolean sendMediaKeyEvent (KeyEvent keyEvent)"}, "getEstimatedMediaPosition()": {"Returns": [["long", "the current estimated playback position in milliseconds or a negative value if not available"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#RemoteController#OnClientUpdateListener#onClientPlaybackStateUpdate_E@"], "Permissions": [], "Description": "Return the estimated playback position of the current media track or a negative value if not available. The value returned is estimated by the current process and may not be perfect. The time returned by this method is calculated from the last state change time based on the current play position at that time and the last known playback speed. An application may call @B_android#media#RemoteController#setSynchronizationMode_E@ to apply a synchronization policy that will periodically re-sync the estimated position with the RemoteControlClient.", "history": "Added in API level 19 Deprecated in API level 21", "FullName": "public long getEstimatedMediaPosition ()"}, "clearArtworkConfiguration()": {"Returns": [["boolean", "true if receiving artwork images was successfully disabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prevents this RemoteController from receiving artwork images.", "history": "Added in API level 19 Deprecated in API level 21", "FullName": "public boolean clearArtworkConfiguration ()"}, "RemoteController(android.content.Context,android.media.RemoteController.OnClientUpdateListener,android.os.Looper)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the @B_android#content#Context_E@, must be non-null."], ["@B_android#media#RemoteController#OnClientUpdateListener_E@", "RemoteController.OnClientUpdateListener: the listener to be called whenever new client information is available, must be non-null."], ["@B_android#os#Looper_E@", "Looper: the @B_android#os#Looper_E@ on which to run the event loop, or null to use the current thread's looper."]], "Throws": [["", "java.lang.IllegalArgumentException"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Class constructor.", "history": "Added in API level 19", "FullName": "public RemoteController (Context context, RemoteController.OnClientUpdateListener updateListener, Looper looper)"}, "setArtworkConfiguration(int,int)": {"Returns": [["boolean", "true if the artwork dimension was successfully set."]], "Parameters": [["int", "int: the maximum width in pixels"], ["int", "int: the maximum height in pixels"]], "Throws": [["", "java.lang.IllegalArgumentException"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set the maximum artwork image dimensions to be received in the metadata. No bitmaps will be received unless this has been specified.", "history": "Added in API level 19 Deprecated in API level 21", "FullName": "public boolean setArtworkConfiguration (int width, int height)"}, "editMetadata()": {"Returns": [["@B_android#media#RemoteController#MetadataEditor_E@", "a new MetadataEditor instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#media#RemoteController#MetadataEditor_E@ for updating metadata values of the editable keys of the current @B_android#media#RemoteControlClient_E@. This method can only be called on a registered RemoteController.", "history": "Added in API level 19 Deprecated in API level 21", "FullName": "public RemoteController.MetadataEditor editMetadata ()"}}, "Inheritance": [], "ClassName": "android.media.RemoteController", "ClassDesc": "Use @B_android#media#session#MediaController_E@ instead. The RemoteController class is used to control media playback, display and update media metadata and playback status, published by applications using the @B_android#media#RemoteControlClient_E@ class. A RemoteController shall be registered through @B_android#media#AudioManager#registerRemoteController_E@ in order for the system to send media event updates to the @B_android#media#RemoteController#OnClientUpdateListener_E@ listener set in the class constructor. Implement the methods of the interface to receive the information published by the active @B_android#media#RemoteControlClient_E@ instances. By default an @B_android#media#RemoteController#OnClientUpdateListener_E@ implementation will not receive bitmaps for album art. Use @B_android#media#RemoteController#setArtworkConfiguration_E@ to receive images as well. Registration requires the @B_android#media#RemoteController#OnClientUpdateListener_E@ listener to be one of the enabled notification listeners (see @B_android#service#notification#NotificationListenerService_E@)."}