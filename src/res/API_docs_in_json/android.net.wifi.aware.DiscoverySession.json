{"Functions": {"sendMessage(android.net.wifi.aware.PeerHandle,int,byte[])": {"Returns": [], "Parameters": [["@B_android#net#wifi#aware#PeerHandle_E@", "PeerHandle: The peer's handle for the message. Must be a result of an @B_android#net#wifi#aware#DiscoverySessionCallback#onServiceDiscovered_E@ or @B_android#net#wifi#aware#DiscoverySessionCallback#onMessageReceived_E@ events. This value must never be null."], ["int", "int: An arbitrary integer used by the caller to identify the message. The same integer ID will be returned in the callbacks indicating message send success or failure. The messageId is not used internally by the Aware service - it can be arbitrary and non-unique."], ["byte[]", "byte: The message to be transmitted. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends a message to the specified destination. Aware messages are transmitted in the context of a discovery session - executed subsequent to a publish/subscribe @B_android#net#wifi#aware#DiscoverySessionCallback#onServiceDiscovered_E@ event. Aware messages are not guaranteed delivery. Callbacks on @B_android#net#wifi#aware#DiscoverySessionCallback_E@ indicate message was transmitted successfully, @B_android#net#wifi#aware#DiscoverySessionCallback#onMessageSendSucceeded_E@, or transmission failed (possibly after several retries) - @B_android#net#wifi#aware#DiscoverySessionCallback#onMessageSendFailed_E@. The peer will get a callback indicating a message was received using @B_android#net#wifi#aware#DiscoverySessionCallback#onMessageReceived_E@.", "history": "Added in API level 26", "FullName": "public void sendMessage (PeerHandle peerHandle, int messageId, byte[] message)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Destroy the publish or subscribe session - free any resources, and stop transmitting packets on-air (for an active session) or listening for matches (for a passive session). The session may not be used for any additional operations after its destruction. This operation must be done on a session which is no longer needed. Otherwise system resources will continue to be utilized until the application exits. The only exception is a session for which we received a termination callback, @B_android#net#wifi#aware#DiscoverySessionCallback#onSessionTerminated_E@.", "history": "Added in API level 26", "FullName": "public void close ()"}, "createNetworkSpecifierOpen(android.net.wifi.aware.PeerHandle)": {"Returns": [["@B_android#net#NetworkSpecifier_E@", "A @B_android#net#NetworkSpecifier_E@ to be used to construct @B_android#net#NetworkRequest#Builder#setNetworkSpecifier_E@ to pass to @B_android#net#ConnectivityManager#requestNetwork_E@ [or other varieties of that API]."]], "Parameters": [["@B_android#net#wifi#aware#PeerHandle_E@", "PeerHandle: The peer's handle obtained through @B_android#net#wifi#aware#DiscoverySessionCallback#onServiceDiscovered_E@ or @B_android#net#wifi#aware#DiscoverySessionCallback#onMessageReceived_E@. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use the replacement @B_android#net#wifi#aware#WifiAwareNetworkSpecifier#Builder_E@. Create a @B_android#net#NetworkRequest#Builder#setNetworkSpecifier_E@ for an unencrypted WiFi Aware connection (link) to the specified peer. The @B_android#net#NetworkRequest#Builder#addTransportType_E@ should be set to @B_android#net#NetworkCapabilities#TRANSPORT_WIFI_AWARE_E@. This method should be used when setting up a connection with a peer discovered through Aware discovery or communication (in such scenarios the MAC address of the peer is shielded by an opaque peer ID handle). If an Aware connection is needed to a peer discovered using other OOB (out-of-band) mechanism then use the alternative @B_android#net#wifi#aware#WifiAwareSession#createNetworkSpecifierOpen_E@ method - which uses the peer's MAC address. Note: per the Wi-Fi Aware specification the roles are fixed - a Subscriber is an INITIATOR and a Publisher is a RESPONDER. To set up an encrypted link use the @B_android#net#wifi#aware#DiscoverySession#createNetworkSpecifierPassphrase_E@ API.", "history": "Added in API level 26 Deprecated in API level 29", "FullName": "public NetworkSpecifier createNetworkSpecifierOpen (PeerHandle peerHandle)"}, "createNetworkSpecifierPassphrase(android.net.wifi.aware.PeerHandle,java.lang.String)": {"Returns": [["@B_android#net#NetworkSpecifier_E@", "A @B_android#net#NetworkSpecifier_E@ to be used to construct @B_android#net#NetworkRequest#Builder#setNetworkSpecifier_E@ to pass to @B_android#net#ConnectivityManager#requestNetwork_E@ [or other varieties of that API]."]], "Parameters": [["@B_android#net#wifi#aware#PeerHandle_E@", "PeerHandle: The peer's handle obtained through @B_android#net#wifi#aware#DiscoverySessionCallback#onServiceDiscovered_E@ or @B_android#net#wifi#aware#DiscoverySessionCallback#onMessageReceived_E@. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. This value must never be null."], ["@B_java#lang#String_E@", "String: The passphrase to be used to encrypt the link. The PMK is generated from the passphrase. Use the @B_android#net#wifi#aware#DiscoverySession#createNetworkSpecifierOpen_E@ API to specify an open (unencrypted) link. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use the replacement @B_android#net#wifi#aware#WifiAwareNetworkSpecifier#Builder_E@. Create a @B_android#net#NetworkRequest#Builder#setNetworkSpecifier_E@ for an encrypted WiFi Aware connection (link) to the specified peer. The @B_android#net#NetworkRequest#Builder#addTransportType_E@ should be set to @B_android#net#NetworkCapabilities#TRANSPORT_WIFI_AWARE_E@. This method should be used when setting up a connection with a peer discovered through Aware discovery or communication (in such scenarios the MAC address of the peer is shielded by an opaque peer ID handle). If an Aware connection is needed to a peer discovered using other OOB (out-of-band) mechanism then use the alternative @B_android#net#wifi#aware#WifiAwareSession#createNetworkSpecifierPassphrase_E@ method - which uses the peer's MAC address. Note: per the Wi-Fi Aware specification the roles are fixed - a Subscriber is an INITIATOR and a Publisher is a RESPONDER.", "history": "Added in API level 26 Deprecated in API level 29", "FullName": "public NetworkSpecifier createNetworkSpecifierPassphrase (PeerHandle peerHandle, String passphrase)"}}, "Inheritance": [], "ClassName": "android.net.wifi.aware.DiscoverySession", "ClassDesc": "A class representing a single publish or subscribe Aware session. This object will not be created directly - only its child classes are available: @B_android#net#wifi#aware#PublishDiscoverySession_E@ and @B_android#net#wifi#aware#SubscribeDiscoverySession_E@. This class provides functionality common to both publish and subscribe discovery sessions: Sending messages: @B_android#net#wifi#aware#DiscoverySession#sendMessage_E@ method. Creating a network-specifier when requesting a Aware connection using @B_android#net#wifi#aware#WifiAwareNetworkSpecifier#Builder_E@. The @B_android#net#wifi#aware#DiscoverySession#close_E@ method must be called to destroy discovery sessions once they are no longer needed."}