{"Functions": {"draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The picture is drawn to this canvas This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw this picture on the canvas. Prior to @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@, this call could have the side effect of changing the matrix and clip of the canvas if this picture had imbalanced saves/restores. @B_android#graphics#Picture#endRecording_E@ in order to prepare for playback.", "history": "Added in API level 1", "FullName": "public void draw (Canvas canvas)"}, "endRecording()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call endRecording when the picture is built. After this call, the picture may be drawn, but the canvas that was returned by beginRecording must not be used anymore. This is automatically called if @B_android#graphics#Picture#draw_E@ or @B_android#graphics#Canvas#drawPicture_E@ is called.", "history": "Added in API level 1", "FullName": "public void endRecording ()"}, "Picture(android.graphics.Picture)": {"Returns": [], "Parameters": [["@B_android#graphics#Picture_E@", "Picture no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a picture by making a copy of what has already been recorded in src. The contents of src are unchanged, and if src changes later, those changes will not be reflected in this picture.", "history": "Added in API level 1", "FullName": "public Picture (Picture src)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "beginRecording(int,int)": {"Returns": [["@B_android#graphics#Canvas_E@", "This value will never be null."]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "To record a picture, call beginRecording() and then draw into the Canvas that is returned. Nothing we appear on screen, but all of the draw commands (e.g. @B_android#graphics#Canvas#drawRect_E@) will be recorded. To stop recording, call endRecording(). After endRecording() the Canvas that was returned must no longer be used, and nothing should be drawn into it.", "history": "Added in API level 1", "FullName": "public Canvas beginRecording (int width, int height)"}, "Picture()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an empty picture that is ready to record.", "history": "Added in API level 1", "FullName": "public Picture ()"}, "writeToStream(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Picture#createFromStream_E@"], "Permissions": [], "Description": "The recommended alternative is to draw the picture into a Bitmap from which you can persist it as raw or compressed pixels. Write the picture contents to a stream. The data can be used to recreate the picture in this or another process by calling createFromStream(...) The resulting stream is NOT to be persisted across device restarts as there is no guarantee that the Picture can be successfully reconstructed.", "history": "added in API level 1", "FullName": "public void writeToStream (OutputStream stream)"}, "getHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the height of the picture as passed to beginRecording. This does not reflect (per se) the content of the picture.", "history": "Added in API level 1", "FullName": "public int getHeight ()"}, "requiresHardwareAcceleration()": {"Returns": [["boolean", "true if the Picture can only be drawn to a hardware-accelerated canvas, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not this Picture contains recorded commands that only work when drawn to a hardware-accelerated canvas. If this returns true then this Picture can only be drawn to another Picture or to a Canvas where canvas.isHardwareAccelerated() is true. Note this value is only updated after recording has finished by a call to @B_android#graphics#Picture#endRecording_E@. Prior to that it will be the default value of false.", "history": "Added in API level 28", "FullName": "public boolean requiresHardwareAcceleration ()"}, "getWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the width of the picture as passed to beginRecording. This does not reflect (per se) the content of the picture.", "history": "Added in API level 1", "FullName": "public int getWidth ()"}, "beginRecording(int, int)": {"Returns": [["@B_android#graphics#Canvas_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "To record a picture, call beginRecording() and then draw into the Canvas that is returned. Nothing we appear on screen, but all of the draw commands (e.g. @B_android#graphics#Canvas#drawRect_E@) will be recorded. To stop recording, call endRecording(). After endRecording() the Canvas that was returned must no longer be used, and nothing should be drawn into it.", "history": "added in API level 1", "FullName": "public Canvas beginRecording (int width, int height)"}, "createFromStream(java.io.InputStream)": {"Returns": [["@B_android#graphics#Picture_E@", "no returns description in source"]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Picture#writeToStream_E@"], "Permissions": [], "Description": "The recommended alternative is to not use writeToStream and instead draw the picture into a Bitmap from which you can persist it as raw or compressed pixels. Create a new picture (already recorded) from the data in the stream. This data was generated by a previous call to writeToStream(). Pictures that have been persisted across device restarts are not guaranteed to decode properly and are highly discouraged.", "history": "added in API level 1", "FullName": "public static Picture createFromStream (InputStream stream)"}}, "Inheritance": [], "ClassName": "android.graphics.Picture", "ClassDesc": "A Picture records drawing calls (via the canvas returned by beginRecording) and can then play them back into Canvas (via @B_android#graphics#Picture#draw_E@ or @B_android#graphics#Canvas#drawPicture_E@).For most content (e.g. text, lines, rectangles), drawing a sequence from a picture can be faster than the equivalent API calls, since the picture performs its playback without incurring any method-call overhead."}