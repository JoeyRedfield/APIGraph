{"Functions": {"parseInt(java.lang.String,int)": {"Returns": [["int", "the integer represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the String containing the integer representation to be parsed"], ["int", "int: the radix to be used while parsing s."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the String does not contain a parsable int."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the string argument as a signed integer in the radix specified by the second argument. The characters in the string must all be digits of the specified radix (as determined by whether @B_java#lang#Character#digit_E@ returns a nonnegative value), except that the first character may be an ASCII minus sign '-' ('\\u002D') to indicate a negative value or an ASCII plus sign '+' ('\\u002B') to indicate a positive value. The resulting integer value is returned. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than @B_java#lang#Character#MIN_RADIX_E@ or larger than @B_java#lang#Character#MAX_RADIX_E@. Any character of the string is not a digit of the specified radix, except that the first character may be a minus sign '-' ('\\u002D') or plus sign '+' ('\\u002B') provided that the string is longer than length 1. The value represented by the string is not a value of type int. Examples:", "history": "Added in API level 1", "FullName": "public static int parseInt (String s, int radix)"}, "parseInt(java.lang.String)": {"Returns": [["int", "the integer value represented by the argument in decimal."]], "Parameters": [["@B_java#lang#String_E@", "String: a String containing the int representation to be parsed"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the string does not contain a parsable integer."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the string argument as a signed decimal integer. The characters in the string must all be decimal digits, except that the first character may be an ASCII minus sign '-' ('\\u002D') to indicate a negative value or an ASCII plus sign '+' ('\\u002B') to indicate a positive value. The resulting integer value is returned, exactly as if the argument and the radix 10 were given as arguments to the @B_java#lang#Integer#parseInt_E@ method.", "history": "Added in API level 1", "FullName": "public static int parseInt (String s)"}, "getInteger(java.lang.String, int)": {"Returns": [["@B_java#lang#Integer_E@", "the Integer value of the property."]], "Parameters": [["@B_java#lang#String_E@", "String: property name."], ["int", "int: default value."]], "Throws": [["@B_java#lang#SecurityException_E@", "for the same reasons as @B_java#lang#System#getProperty_E@"]], "SeeAlso": ["@B_java#lang#System#getProperty_E@"], "Permissions": [], "Description": "Determines the integer value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the @B_java#lang#System#getProperty_E@ method. The string value of this property is then interpreted as an integer value using the grammar supported by @B_java#lang#Integer#decode_E@ and an Integer object representing this value is returned. The second argument is the default value. An Integer object that represents the value of the second argument is returned if there is no property of the specified name, if the property does not have the correct numeric format, or if the specified name is empty or null. In other words, this method returns an Integer object equal to the value of: Integer object when the default value is not needed.", "history": "added in API level 1", "FullName": "public static Integer getInteger (String nm, int val)"}, "toString(int)": {"Returns": [["@B_java#lang#String_E@", "a string representation of the argument in base 10."]], "Parameters": [["int", "int: an integer to be converted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a String object representing the specified integer. The argument is converted to signed decimal representation and returned as a string, exactly as if the argument and radix 10 were given as arguments to the @B_java#lang#Integer#toString_E@ method.", "history": "Added in API level 1", "FullName": "public static String toString (int i)"}, "sum(int,int)": {"Returns": [["int", "the sum of a and b"]], "Parameters": [["int", "int: the first operand"], ["int", "int: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Adds two integers together as per the + operator.", "history": "Added in API level 24", "FullName": "public static int sum (int a, int b)"}, "rotateLeft(int,int)": {"Returns": [["int", "the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits."]], "Parameters": [["int", "int: the value whose bits are to be rotated left"], ["int", "int: the number of bit positions to rotate left"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits. (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) Note that left rotation with a negative distance is equivalent to right rotation: rotateLeft(val, -distance) == rotateRight(val, distance). Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative: rotateLeft(val, distance) == rotateLeft(val, distance & 0x1F).", "history": "Added in API level 1", "FullName": "public static int rotateLeft (int i, int distance)"}, "parseUnsignedInt(java.lang.String,int)": {"Returns": [["int", "the integer represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the String containing the unsigned integer representation to be parsed"], ["int", "int: the radix to be used while parsing s."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the String does not contain a parsable int."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the string argument as an unsigned integer in the radix specified by the second argument. An unsigned integer maps the values usually associated with negative numbers to positive numbers larger than MAX_VALUE. The characters in the string must all be digits of the specified radix (as determined by whether @B_java#lang#Character#digit_E@ returns a nonnegative value), except that the first character may be an ASCII plus sign '+' ('\\u002B'). The resulting integer value is returned. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than @B_java#lang#Character#MIN_RADIX_E@ or larger than @B_java#lang#Character#MAX_RADIX_E@. Any character of the string is not a digit of the specified radix, except that the first character may be a plus sign '+' ('\\u002B') provided that the string is longer than length 1. The value represented by the string is larger than the largest unsigned int, 2", "history": "Added in API level 26", "FullName": "public static int parseUnsignedInt (String s, int radix)"}, "max(int,int)": {"Returns": [["int", "the greater of a and b"]], "Parameters": [["int", "int: the first operand"], ["int", "int: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the greater of two int values as if by calling @B_java#lang#Math#max_E@.", "history": "Added in API level 24", "FullName": "public static int max (int a, int b)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are the same; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this object to the specified object. The result is true if and only if the argument is not null and is an Integer object that contains the same int value as this object.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "divideUnsigned(int, int)": {"Returns": [["int", "the unsigned quotient of the first argument divided by the second argument"]], "Parameters": [["int", "int: the value to be divided"], ["int", "int: the value doing the dividing"]], "Throws": [], "SeeAlso": ["@B_java#lang#Integer#remainderUnsigned_E@"], "Permissions": [], "Description": "Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value. Note that in two's complement arithmetic, the three other basic arithmetic operations of add, subtract, and multiply are bit-wise identical if the two operands are regarded as both being signed or both being unsigned. Therefore separate addUnsigned, etc. methods are not provided.", "history": "added in API level 26", "FullName": "public static int divideUnsigned (int dividend, int divisor)"}, "longValue()": {"Returns": [["long", "the numeric value represented by this object after conversion to type long."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Integer#toUnsignedLong_E@"], "Permissions": [], "Description": "Returns the value of this Integer as a long after a widening primitive conversion.", "history": "Added in API level 1", "FullName": "public long longValue ()"}, "parseInt(java.lang.String, int)": {"Returns": [["int", "the integer represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the String containing the integer representation to be parsed"], ["int", "int: the radix to be used while parsing s."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the String does not contain a parsable int."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the string argument as a signed integer in the radix specified by the second argument. The characters in the string must all be digits of the specified radix (as determined by whether @B_java#lang#Character#digit_E@ returns a nonnegative value), except that the first character may be an ASCII minus sign '-' ('\\u002D') to indicate a negative value or an ASCII plus sign '+' ('\\u002B') to indicate a positive value. The resulting integer value is returned. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than @B_java#lang#Character#MIN_RADIX_E@ or larger than @B_java#lang#Character#MAX_RADIX_E@. Any character of the string is not a digit of the specified radix, except that the first character may be a minus sign '-' ('\\u002D') or plus sign '+' ('\\u002B') provided that the string is longer than length 1. The value represented by the string is not a value of type int. Examples:", "history": "added in API level 1", "FullName": "public static int parseInt (String s, int radix)"}, "rotateLeft(int, int)": {"Returns": [["int", "the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits."]], "Parameters": [["int", "int: the value whose bits are to be rotated left"], ["int", "int: the number of bit positions to rotate left"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits. (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) Note that left rotation with a negative distance is equivalent to right rotation: rotateLeft(val, -distance) == rotateRight(val, distance). Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative: rotateLeft(val, distance) == rotateLeft(val, distance & 0x1F).", "history": "added in API level 1", "FullName": "public static int rotateLeft (int i, int distance)"}, "getInteger(java.lang.String, java.lang.Integer)": {"Returns": [["@B_java#lang#Integer_E@", "the Integer value of the property."]], "Parameters": [["@B_java#lang#String_E@", "String: property name."], ["@B_java#lang#Integer_E@", "Integer: default value."]], "Throws": [["@B_java#lang#SecurityException_E@", "for the same reasons as @B_java#lang#System#getProperty_E@"]], "SeeAlso": ["@B_java#lang#System#getProperty_E@"], "Permissions": [], "Description": "Returns the integer value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the @B_java#lang#System#getProperty_E@ method. The string value of this property is then interpreted as an integer value, as per the @B_java#lang#Integer#decode_E@ method, and an Integer object representing this value is returned; in summary: If the property value begins with the two ASCII characters 0x or the ASCII character #, not followed by a minus sign, then the rest of it is parsed as a hexadecimal integer exactly as by the method @B_java#lang#Integer#valueOf_E@ with radix 16. If the property value begins with the ASCII character 0 followed by another character, it is parsed as an octal integer exactly as by the method @B_java#lang#Integer#valueOf_E@ with radix 8. Otherwise, the property value is parsed as a decimal integer exactly as by the method @B_java#lang#Integer#valueOf_E@ with radix 10. The second argument is the default value. The default value is returned if there is no property of the specified name, if the property does not have the correct numeric format, or if the specified name is empty or null.", "history": "added in API level 1", "FullName": "public static Integer getInteger (String nm, Integer val)"}, "toUnsignedLong(int)": {"Returns": [["long", "the argument converted to long by an unsigned conversion"]], "Parameters": [["int", "int: the value to convert to an unsigned long"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the argument to a long by an unsigned conversion. In an unsigned conversion to a long, the high-order 32 bits of the long are zero and the low-order 32 bits are equal to the bits of the integer argument. Consequently, zero and positive int values are mapped to a numerically equal long value and negative int values are mapped to a long value equal to the input plus 2", "history": "Added in API level 26", "FullName": "public static long toUnsignedLong (int x)"}, "Integer(int)": {"Returns": [], "Parameters": [["int", "int: the value to be represented by the Integer object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a newly allocated Integer object that represents the specified int value.", "history": "Added in API level 1", "FullName": "public Integer (int value)"}, "rotateRight(int,int)": {"Returns": [["int", "the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits."]], "Parameters": [["int", "int: the value whose bits are to be rotated right"], ["int", "int: the number of bit positions to rotate right"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits. (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) Note that right rotation with a negative distance is equivalent to left rotation: rotateRight(val, -distance) == rotateLeft(val, distance). Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative: rotateRight(val, distance) == rotateRight(val, distance & 0x1F).", "history": "Added in API level 1", "FullName": "public static int rotateRight (int i, int distance)"}, "hashCode(int)": {"Returns": [["int", "a hash code value for a int value."]], "Parameters": [["int", "int: the value to hash"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for a int value; compatible with Integer.hashCode().", "history": "Added in API level 24", "FullName": "public static int hashCode (int value)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the value of this object in base 10."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a String object representing this Integer's value. The value is converted to signed decimal representation and returned as a string, exactly as if the integer value were given as an argument to the @B_java#lang#Integer#toString_E@ method.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "signum(int)": {"Returns": [["int", "the signum function of the specified int value."]], "Parameters": [["int", "int: the value whose signum is to be computed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the signum function of the specified int value. (The return value is -1 if the specified value is negative; 0 if the specified value is zero; and 1 if the specified value is positive.)", "history": "Added in API level 1", "FullName": "public static int signum (int i)"}, "toString(int, int)": {"Returns": [["@B_java#lang#String_E@", "a string representation of the argument in the specified radix."]], "Parameters": [["int", "int: an integer to be converted to a string."], ["int", "int: the radix to use in the string representation."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character_E@"], "Permissions": [], "Description": "Returns a string representation of the first argument in the radix specified by the second argument. If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX, then the radix 10 is used instead. If the first argument is negative, the first element of the result is the ASCII minus character '-' ('\\u002D'). If the first argument is not negative, no sign character appears in the result. The remaining characters of the result represent the magnitude of the first argument. If the magnitude is zero, it is represented by a single zero character '0' ('\\u0030'); otherwise, the first character of the representation of the magnitude will not be the zero character. The following ASCII characters are used as digits: '\\u0030' through '\\u0039' and '\\u0061' through '\\u007A'. If radix is 0123456789abcdef. If uppercase letters are desired, the @B_java#lang#String#toUpperCase_E@ method may be called on the result:", "history": "added in API level 1", "FullName": "public static String toString (int i, int radix)"}, "valueOf(java.lang.String,int)": {"Returns": [["@B_java#lang#Integer_E@", "an Integer object holding the value represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed."], ["int", "int: the radix to be used in interpreting s"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the String does not contain a parsable int."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an Integer object holding the value extracted from the specified String when parsed with the radix given by the second argument. The first argument is interpreted as representing a signed integer in the radix specified by the second argument, exactly as if the arguments were given to the @B_java#lang#Integer#parseInt_E@ method. The result is an Integer object that represents the integer value specified by the string. In other words, this method returns an Integer object equal to the value of:", "history": "Added in API level 1", "FullName": "public static Integer valueOf (String s, int radix)"}, "numberOfLeadingZeros(int)": {"Returns": [["int", "the number of zero bits preceding the highest-order (\"leftmost\") one-bit in the two's complement binary representation of the specified int value, or 32 if the value is equal to zero."]], "Parameters": [["int", "int: the value whose number of leading zeros is to be computed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of zero bits preceding the highest-order (\"leftmost\") one-bit in the two's complement binary representation of the specified int value. Returns 32 if the specified value has no one-bits in its two's complement representation, in other words if it is equal to zero. Note that this method is closely related to the logarithm base 2. For all positive int values x: floor(log31 - numberOfLeadingZeros(x) ceil(log32 - numberOfLeadingZeros(x - 1)", "history": "Added in API level 1", "FullName": "public static int numberOfLeadingZeros (int i)"}, "lowestOneBit(int)": {"Returns": [["int", "an int value with a single one-bit, in the position of the lowest-order one-bit in the specified value, or zero if the specified value is itself equal to zero."]], "Parameters": [["int", "int: the value whose lowest one bit is to be computed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an int value with at most a single one-bit, in the position of the lowest-order (\"rightmost\") one-bit in the specified int value. Returns zero if the specified value has no one-bits in its two's complement binary representation, that is, if it is equal to zero.", "history": "Added in API level 1", "FullName": "public static int lowestOneBit (int i)"}, "compare(int,int)": {"Returns": [["int", "the value 0 if x == y; a value less than 0 if x < y; and a value greater than 0 if x > y"]], "Parameters": [["int", "int: the first int to compare"], ["int", "int: the second int to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two int values numerically. The value returned is identical to what would be returned by:", "history": "Added in API level 19", "FullName": "public static int compare (int x, int y)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object, equal to the primitive int value represented by this Integer object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for this Integer.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "remainderUnsigned(int, int)": {"Returns": [["int", "the unsigned remainder of the first argument divided by the second argument"]], "Parameters": [["int", "int: the value to be divided"], ["int", "int: the value doing the dividing"]], "Throws": [], "SeeAlso": ["@B_java#lang#Integer#divideUnsigned_E@"], "Permissions": [], "Description": "Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.", "history": "added in API level 26", "FullName": "public static int remainderUnsigned (int dividend, int divisor)"}, "max(int, int)": {"Returns": [["int", "the greater of a and b"]], "Parameters": [["int", "int: the first operand"], ["int", "int: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the greater of two int values as if by calling @B_java#lang#Math#max_E@.", "history": "added in API level 24", "FullName": "public static int max (int a, int b)"}, "min(int, int)": {"Returns": [["int", "the smaller of a and b"]], "Parameters": [["int", "int: the first operand"], ["int", "int: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the smaller of two int values as if by calling @B_java#lang#Math#min_E@.", "history": "added in API level 24", "FullName": "public static int min (int a, int b)"}, "shortValue()": {"Returns": [["short", "the numeric value represented by this object after conversion to type short."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Integer as a short after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public short shortValue ()"}, "intValue()": {"Returns": [["int", "the numeric value represented by this object after conversion to type int."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Integer as an int.", "history": "Added in API level 1", "FullName": "public int intValue ()"}, "toHexString(int)": {"Returns": [["@B_java#lang#String_E@", "the string representation of the unsigned integer value represented by the argument in hexadecimal (base 16)."]], "Parameters": [["int", "int: an integer to be converted to a string."]], "Throws": [], "SeeAlso": ["@B_java#lang#Integer#parseUnsignedInt_E@", "@B_java#lang#Integer#toUnsignedString_E@"], "Permissions": [], "Description": "Returns a string representation of the integer argument as an unsigned integer in base 16. The unsigned integer value is the argument plus 20s. The value of the argument can be recovered from the returned string s by calling @B_java#lang#Integer#parseUnsignedInt_E@. If the unsigned magnitude is zero, it is represented by a single zero character '0' ('\\u0030'); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as hexadecimal digits: '\\u0030' through '\\u0039' and '\\u0061' through '\\u0066'. If uppercase letters are desired, the @B_java#lang#String#toUpperCase_E@ method may be called on the result:", "history": "Added in API level 1", "FullName": "public static String toHexString (int i)"}, "parseUnsignedInt(java.lang.String, int)": {"Returns": [["int", "the integer represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the String containing the unsigned integer representation to be parsed"], ["int", "int: the radix to be used while parsing s."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the String does not contain a parsable int."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the string argument as an unsigned integer in the radix specified by the second argument. An unsigned integer maps the values usually associated with negative numbers to positive numbers larger than MAX_VALUE. The characters in the string must all be digits of the specified radix (as determined by whether @B_java#lang#Character#digit_E@ returns a nonnegative value), except that the first character may be an ASCII plus sign '+' ('\\u002B'). The resulting integer value is returned. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than @B_java#lang#Character#MIN_RADIX_E@ or larger than @B_java#lang#Character#MAX_RADIX_E@. Any character of the string is not a digit of the specified radix, except that the first character may be a plus sign '+' ('\\u002B') provided that the string is longer than length 1. The value represented by the string is larger than the largest unsigned int, 2", "history": "added in API level 26", "FullName": "public static int parseUnsignedInt (String s, int radix)"}, "remainderUnsigned(int,int)": {"Returns": [["int", "the unsigned remainder of the first argument divided by the second argument"]], "Parameters": [["int", "int: the value to be divided"], ["int", "int: the value doing the dividing"]], "Throws": [], "SeeAlso": ["@B_java#lang#Integer#divideUnsigned_E@"], "Permissions": [], "Description": "Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.", "history": "Added in API level 26", "FullName": "public static int remainderUnsigned (int dividend, int divisor)"}, "parseUnsignedInt(java.lang.String)": {"Returns": [["int", "the unsigned integer value represented by the argument in decimal."]], "Parameters": [["@B_java#lang#String_E@", "String: a String containing the unsigned int representation to be parsed"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the string does not contain a parsable unsigned integer."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the string argument as an unsigned decimal integer. The characters in the string must all be decimal digits, except that the first character may be an an ASCII plus sign '+' ('\\u002B'). The resulting integer value is returned, exactly as if the argument and the radix 10 were given as arguments to the @B_java#lang#Integer#parseUnsignedInt_E@ method.", "history": "Added in API level 26", "FullName": "public static int parseUnsignedInt (String s)"}, "getInteger(java.lang.String,int)": {"Returns": [["@B_java#lang#Integer_E@", "the Integer value of the property."]], "Parameters": [["@B_java#lang#String_E@", "String: property name."], ["int", "int: default value."]], "Throws": [["@B_java#lang#SecurityException_E@", "for the same reasons as @B_java#lang#System#getProperty_E@"]], "SeeAlso": ["@B_java#lang#System#getProperty_E@"], "Permissions": [], "Description": "Determines the integer value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the @B_java#lang#System#getProperty_E@ method. The string value of this property is then interpreted as an integer value using the grammar supported by @B_java#lang#Integer#decode_E@ and an Integer object representing this value is returned. The second argument is the default value. An Integer object that represents the value of the second argument is returned if there is no property of the specified name, if the property does not have the correct numeric format, or if the specified name is empty or null. In other words, this method returns an Integer object equal to the value of: Integer object when the default value is not needed.", "history": "Added in API level 1", "FullName": "public static Integer getInteger (String nm, int val)"}, "rotateRight(int, int)": {"Returns": [["int", "the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits."]], "Parameters": [["int", "int: the value whose bits are to be rotated right"], ["int", "int: the number of bit positions to rotate right"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits. (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) Note that right rotation with a negative distance is equivalent to left rotation: rotateRight(val, -distance) == rotateLeft(val, distance). Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative: rotateRight(val, distance) == rotateRight(val, distance & 0x1F).", "history": "added in API level 1", "FullName": "public static int rotateRight (int i, int distance)"}, "numberOfTrailingZeros(int)": {"Returns": [["int", "the number of zero bits following the lowest-order (\"rightmost\") one-bit in the two's complement binary representation of the specified int value, or 32 if the value is equal to zero."]], "Parameters": [["int", "int: the value whose number of trailing zeros is to be computed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of zero bits following the lowest-order (\"rightmost\") one-bit in the two's complement binary representation of the specified int value. Returns 32 if the specified value has no one-bits in its two's complement representation, in other words if it is equal to zero.", "history": "Added in API level 1", "FullName": "public static int numberOfTrailingZeros (int i)"}, "valueOf(java.lang.String, int)": {"Returns": [["@B_java#lang#Integer_E@", "an Integer object holding the value represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed."], ["int", "int: the radix to be used in interpreting s"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the String does not contain a parsable int."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an Integer object holding the value extracted from the specified String when parsed with the radix given by the second argument. The first argument is interpreted as representing a signed integer in the radix specified by the second argument, exactly as if the arguments were given to the @B_java#lang#Integer#parseInt_E@ method. The result is an Integer object that represents the integer value specified by the string. In other words, this method returns an Integer object equal to the value of:", "history": "added in API level 1", "FullName": "public static Integer valueOf (String s, int radix)"}, "highestOneBit(int)": {"Returns": [["int", "an int value with a single one-bit, in the position of the highest-order one-bit in the specified value, or zero if the specified value is itself equal to zero."]], "Parameters": [["int", "int: the value whose highest one bit is to be computed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an int value with at most a single one-bit, in the position of the highest-order (\"leftmost\") one-bit in the specified int value. Returns zero if the specified value has no one-bits in its two's complement binary representation, that is, if it is equal to zero.", "history": "Added in API level 1", "FullName": "public static int highestOneBit (int i)"}, "getInteger(java.lang.String)": {"Returns": [["@B_java#lang#Integer_E@", "the Integer value of the property."]], "Parameters": [["@B_java#lang#String_E@", "String: property name."]], "Throws": [["@B_java#lang#SecurityException_E@", "for the same reasons as @B_java#lang#System#getProperty_E@"]], "SeeAlso": ["@B_java#lang#System#getProperty_E@"], "Permissions": [], "Description": "Determines the integer value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the @B_java#lang#System#getProperty_E@ method. The string value of this property is then interpreted as an integer value using the grammar supported by @B_java#lang#Integer#decode_E@ and an Integer object representing this value is returned. If there is no property with the specified name, if the specified name is empty or null, or if the property does not have the correct numeric format, then null is returned. In other words, this method returns an Integer object equal to the value of:", "history": "Added in API level 1", "FullName": "public static Integer getInteger (String nm)"}, "compareUnsigned(int, int)": {"Returns": [["int", "the value 0 if x == y; a value less than 0 if x < y as unsigned values; and a value greater than 0 if x > y as unsigned values"]], "Parameters": [["int", "int: the first int to compare"], ["int", "int: the second int to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two int values numerically treating the values as unsigned.", "history": "added in API level 26", "FullName": "public static int compareUnsigned (int x, int y)"}, "toUnsignedString(int, int)": {"Returns": [["@B_java#lang#String_E@", "an unsigned string representation of the argument in the specified radix."]], "Parameters": [["int", "int: an integer to be converted to an unsigned string."], ["int", "int: the radix to use in the string representation."]], "Throws": [], "SeeAlso": ["@B_java#lang#Integer#toString_E@"], "Permissions": [], "Description": "Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument. If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX, then the radix 10 is used instead. Note that since the first argument is treated as an unsigned value, no leading sign character is printed. If the magnitude is zero, it is represented by a single zero character '0' ('\\u0030'); otherwise, the first character of the representation of the magnitude will not be the zero character. The behavior of radixes and the characters used as digits are the same as @B_java#lang#Integer#toString_E@.", "history": "added in API level 26", "FullName": "public static String toUnsignedString (int i, int radix)"}, "valueOf(int)": {"Returns": [["@B_java#lang#Integer_E@", "an Integer instance representing i."]], "Parameters": [["int", "int: an int value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an Integer instance representing the specified int value. If a new Integer instance is not required, this method should generally be used in preference to the constructor @B_java#lang#Integer#Integer_E@, as this method is likely to yield significantly better space and time performance by caching frequently requested values. This method will always cache values in the range -128 to 127, inclusive, and may cache other values outside of this range.", "history": "Added in API level 1", "FullName": "public static Integer valueOf (int i)"}, "Integer(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the String to be converted to an Integer."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the String does not contain a parsable integer."]], "SeeAlso": ["@B_java#lang#Integer#parseInt_E@"], "Permissions": [], "Description": "Constructs a newly allocated Integer object that represents the int value indicated by the String parameter. The string is converted to an int value in exactly the manner used by the parseInt method for radix 10.", "history": "Added in API level 1", "FullName": "public Integer (String s)"}, "byteValue()": {"Returns": [["byte", "the numeric value represented by this object after conversion to type byte."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Integer as a byte after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public byte byteValue ()"}, "getInteger(java.lang.String,java.lang.Integer)": {"Returns": [["@B_java#lang#Integer_E@", "the Integer value of the property."]], "Parameters": [["@B_java#lang#String_E@", "String: property name."], ["@B_java#lang#Integer_E@", "Integer: default value."]], "Throws": [["@B_java#lang#SecurityException_E@", "for the same reasons as @B_java#lang#System#getProperty_E@"]], "SeeAlso": ["@B_java#lang#System#getProperty_E@"], "Permissions": [], "Description": "Returns the integer value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the @B_java#lang#System#getProperty_E@ method. The string value of this property is then interpreted as an integer value, as per the @B_java#lang#Integer#decode_E@ method, and an Integer object representing this value is returned; in summary: If the property value begins with the two ASCII characters 0x or the ASCII character #, not followed by a minus sign, then the rest of it is parsed as a hexadecimal integer exactly as by the method @B_java#lang#Integer#valueOf_E@ with radix 16. If the property value begins with the ASCII character 0 followed by another character, it is parsed as an octal integer exactly as by the method @B_java#lang#Integer#valueOf_E@ with radix 8. Otherwise, the property value is parsed as a decimal integer exactly as by the method @B_java#lang#Integer#valueOf_E@ with radix 10. The second argument is the default value. The default value is returned if there is no property of the specified name, if the property does not have the correct numeric format, or if the specified name is empty or null.", "history": "Added in API level 1", "FullName": "public static Integer getInteger (String nm, Integer val)"}, "compare(int, int)": {"Returns": [["int", "the value 0 if x == y; a value less than 0 if x < y; and a value greater than 0 if x > y"]], "Parameters": [["int", "int: the first int to compare"], ["int", "int: the second int to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two int values numerically. The value returned is identical to what would be returned by:", "history": "added in API level 19", "FullName": "public static int compare (int x, int y)"}, "decode(java.lang.String)": {"Returns": [["@B_java#lang#Integer_E@", "an Integer object holding the int value represented by nm"]], "Parameters": [["@B_java#lang#String_E@", "String: the String to decode."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the String does not contain a parsable integer."]], "SeeAlso": ["@B_java#lang#Integer#parseInt_E@"], "Permissions": [], "Description": "Decodes a String into an Integer. Accepts decimal, hexadecimal, and octal numbers given by the following grammar: The sequence of characters following an optional sign and/or radix specifier (\"0x\", \"0X\", \"#\", or leading zero) is parsed as by the Integer.parseInt method with the indicated radix (10, 16, or 8). This sequence of characters must represent a positive value or a @B_java#lang#NumberFormatException_E@ will be thrown. The result is negated if first character of the specified String is the minus sign. No whitespace characters are permitted in the String.", "history": "Added in API level 1", "FullName": "public static Integer decode (String nm)"}, "toString(int,int)": {"Returns": [["@B_java#lang#String_E@", "a string representation of the argument in the specified radix."]], "Parameters": [["int", "int: an integer to be converted to a string."], ["int", "int: the radix to use in the string representation."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character_E@"], "Permissions": [], "Description": "Returns a string representation of the first argument in the radix specified by the second argument. If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX, then the radix 10 is used instead. If the first argument is negative, the first element of the result is the ASCII minus character '-' ('\\u002D'). If the first argument is not negative, no sign character appears in the result. The remaining characters of the result represent the magnitude of the first argument. If the magnitude is zero, it is represented by a single zero character '0' ('\\u0030'); otherwise, the first character of the representation of the magnitude will not be the zero character. The following ASCII characters are used as digits: '\\u0030' through '\\u0039' and '\\u0061' through '\\u007A'. If radix is 0123456789abcdef. If uppercase letters are desired, the @B_java#lang#String#toUpperCase_E@ method may be called on the result:", "history": "Added in API level 1", "FullName": "public static String toString (int i, int radix)"}, "compareUnsigned(int,int)": {"Returns": [["int", "the value 0 if x == y; a value less than 0 if x < y as unsigned values; and a value greater than 0 if x > y as unsigned values"]], "Parameters": [["int", "int: the first int to compare"], ["int", "int: the second int to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two int values numerically treating the values as unsigned.", "history": "Added in API level 26", "FullName": "public static int compareUnsigned (int x, int y)"}, "toUnsignedString(int)": {"Returns": [["@B_java#lang#String_E@", "an unsigned string representation of the argument."]], "Parameters": [["int", "int: an integer to be converted to an unsigned string."]], "Throws": [], "SeeAlso": ["@B_java#lang#Integer#toUnsignedString_E@"], "Permissions": [], "Description": "Returns a string representation of the argument as an unsigned decimal value. The argument is converted to unsigned decimal representation and returned as a string exactly as if the argument and radix 10 were given as arguments to the @B_java#lang#Integer#toUnsignedString_E@ method.", "history": "Added in API level 26", "FullName": "public static String toUnsignedString (int i)"}, "reverse(int)": {"Returns": [["int", "the value obtained by reversing order of the bits in the specified int value."]], "Parameters": [["int", "int: the value to be reversed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified int value.", "history": "Added in API level 1", "FullName": "public static int reverse (int i)"}, "floatValue()": {"Returns": [["float", "the numeric value represented by this object after conversion to type float."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Integer as a float after a widening primitive conversion.", "history": "Added in API level 1", "FullName": "public float floatValue ()"}, "bitCount(int)": {"Returns": [["int", "the number of one-bits in the two's complement binary representation of the specified int value."]], "Parameters": [["int", "int: the value whose bits are to be counted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of one-bits in the two's complement binary representation of the specified int value. This function is sometimes referred to as the", "history": "Added in API level 1", "FullName": "public static int bitCount (int i)"}, "compareTo(java.lang.Integer)": {"Returns": [["int", "the value 0 if this Integer is equal to the argument Integer; a value less than 0 if this Integer is numerically less than the argument Integer; and a value greater than 0 if this Integer is numerically greater than the argument Integer (signed comparison)."]], "Parameters": [["@B_java#lang#Integer_E@", "Integer: the Integer to be compared."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two Integer objects numerically.", "history": "Added in API level 1", "FullName": "public int compareTo (Integer anotherInteger)"}, "divideUnsigned(int,int)": {"Returns": [["int", "the unsigned quotient of the first argument divided by the second argument"]], "Parameters": [["int", "int: the value to be divided"], ["int", "int: the value doing the dividing"]], "Throws": [], "SeeAlso": ["@B_java#lang#Integer#remainderUnsigned_E@"], "Permissions": [], "Description": "Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value. Note that in two's complement arithmetic, the three other basic arithmetic operations of add, subtract, and multiply are bit-wise identical if the two operands are regarded as both being signed or both being unsigned. Therefore separate addUnsigned, etc. methods are not provided.", "history": "Added in API level 26", "FullName": "public static int divideUnsigned (int dividend, int divisor)"}, "min(int,int)": {"Returns": [["int", "the smaller of a and b"]], "Parameters": [["int", "int: the first operand"], ["int", "int: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the smaller of two int values as if by calling @B_java#lang#Math#min_E@.", "history": "Added in API level 24", "FullName": "public static int min (int a, int b)"}, "valueOf(java.lang.String)": {"Returns": [["@B_java#lang#Integer_E@", "an Integer object holding the value represented by the string argument."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the string cannot be parsed as an integer."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an Integer object holding the value of the specified String. The argument is interpreted as representing a signed decimal integer, exactly as if the argument were given to the @B_java#lang#Integer#parseInt_E@ method. The result is an Integer object that represents the integer value specified by the string. In other words, this method returns an Integer object equal to the value of:", "history": "Added in API level 1", "FullName": "public static Integer valueOf (String s)"}, "toOctalString(int)": {"Returns": [["@B_java#lang#String_E@", "the string representation of the unsigned integer value represented by the argument in octal (base 8)."]], "Parameters": [["int", "int: an integer to be converted to a string."]], "Throws": [], "SeeAlso": ["@B_java#lang#Integer#parseUnsignedInt_E@", "@B_java#lang#Integer#toUnsignedString_E@"], "Permissions": [], "Description": "Returns a string representation of the integer argument as an unsigned integer in base 8. The unsigned integer value is the argument plus 20s. The value of the argument can be recovered from the returned string s by calling @B_java#lang#Integer#parseUnsignedInt_E@. If the unsigned magnitude is zero, it is represented by a single zero character '0' ('\\u0030'); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as octal digits: '\\u0030' through '\\u0037'.", "history": "Added in API level 1", "FullName": "public static String toOctalString (int i)"}, "sum(int, int)": {"Returns": [["int", "the sum of a and b"]], "Parameters": [["int", "int: the first operand"], ["int", "int: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Adds two integers together as per the + operator.", "history": "added in API level 24", "FullName": "public static int sum (int a, int b)"}, "reverseBytes(int)": {"Returns": [["int", "the value obtained by reversing the bytes in the specified int value."]], "Parameters": [["int", "int: the value whose bytes are to be reversed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified int value.", "history": "Added in API level 1", "FullName": "public static int reverseBytes (int i)"}, "toUnsignedString(int,int)": {"Returns": [["@B_java#lang#String_E@", "an unsigned string representation of the argument in the specified radix."]], "Parameters": [["int", "int: an integer to be converted to an unsigned string."], ["int", "int: the radix to use in the string representation."]], "Throws": [], "SeeAlso": ["@B_java#lang#Integer#toString_E@"], "Permissions": [], "Description": "Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument. If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX, then the radix 10 is used instead. Note that since the first argument is treated as an unsigned value, no leading sign character is printed. If the magnitude is zero, it is represented by a single zero character '0' ('\\u0030'); otherwise, the first character of the representation of the magnitude will not be the zero character. The behavior of radixes and the characters used as digits are the same as @B_java#lang#Integer#toString_E@.", "history": "Added in API level 26", "FullName": "public static String toUnsignedString (int i, int radix)"}, "toBinaryString(int)": {"Returns": [["@B_java#lang#String_E@", "the string representation of the unsigned integer value represented by the argument in binary (base 2)."]], "Parameters": [["int", "int: an integer to be converted to a string."]], "Throws": [], "SeeAlso": ["@B_java#lang#Integer#parseUnsignedInt_E@", "@B_java#lang#Integer#toUnsignedString_E@"], "Permissions": [], "Description": "Returns a string representation of the integer argument as an unsigned integer in base 2. The unsigned integer value is the argument plus 20s. The value of the argument can be recovered from the returned string s by calling @B_java#lang#Integer#parseUnsignedInt_E@. If the unsigned magnitude is zero, it is represented by a single zero character '0' ('\\u0030'); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The characters '0' ('\\u0030') and '1' ('\\u0031') are used as binary digits.", "history": "Added in API level 1", "FullName": "public static String toBinaryString (int i)"}, "doubleValue()": {"Returns": [["double", "the numeric value represented by this object after conversion to type double."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Integer as a double after a widening primitive conversion.", "history": "Added in API level 1", "FullName": "public double doubleValue ()"}}, "Inheritance": ["@B_java#lang#Number_E@"], "ClassName": "java.lang.Integer", "ClassDesc": "The Integer class wraps a value of the primitive type int in an object. An object of type Integer contains a single field whose type is int. In addition, this class provides several methods for converting an int to a String and a String to an int, as well as other constants and methods useful when dealing with an int. Implementation note: The implementations of the \"bit twiddling\" methods (such as @B_java#lang#Integer#highestOneBit_E@ and @B_java#lang#Integer#numberOfTrailingZeros_E@) are based on material from Henry S. Warren, Jr.'s"}