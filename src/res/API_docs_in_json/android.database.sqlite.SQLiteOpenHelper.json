{"Functions": {"setLookasideConfig(int,int)": {"Returns": [], "Parameters": [["int", "int: The size in bytes of each lookaside slot. Value is 0 or greater"], ["int", "int: The total number of lookaside memory slots per database connection. Value is 0 or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Configures This method should be called from the constructor of the subclass, before opening the database, since lookaside memory configuration can only be changed when no connection is using it SQLite default settings will be used, if this method isn't called. Use setLookasideConfig(0,0) to disable lookaside", "history": "Added in API level 27", "FullName": "public void setLookasideConfig (int slotSize, int slotCount)"}, "SQLiteOpenHelper(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase.CursorFactory,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: to use for locating paths to the the database This value may be null."], ["@B_java#lang#String_E@", "String: of the database file, or null for an in-memory database This value may be null."], ["@B_android#database#sqlite#SQLiteDatabase#CursorFactory_E@", "SQLiteDatabase.CursorFactory: to use for creating cursor objects, or null for the default This value may be null."], ["int", "int: number of the database (starting at 1); if the database is older, @B_android#database#sqlite#SQLiteOpenHelper#onUpgrade_E@ will be used to upgrade the database; if the database is newer, @B_android#database#sqlite#SQLiteOpenHelper#onDowngrade_E@ will be used to downgrade the database"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a helper object to create, open, and/or manage a database. This method always returns very quickly. The database is not actually created or opened until one of @B_android#database#sqlite#SQLiteOpenHelper#getWritableDatabase_E@ or @B_android#database#sqlite#SQLiteOpenHelper#getReadableDatabase_E@ is called.", "history": "Added in API level 1", "FullName": "public SQLiteOpenHelper (Context context, String name, SQLiteDatabase.CursorFactory factory, int version)"}, "setIdleConnectionTimeout(long)": {"Returns": [], "Parameters": [["long", "long: timeout in milliseconds. Use @B_java#lang#Long#MAX_VALUE_E@ value to allow unlimited idle connections. Value is 0 or greater"]], "Throws": [], "SeeAlso": ["@B_android#database#sqlite#SQLiteDatabase#OpenParams#Builder#setIdleConnectionTimeout_E@"], "Permissions": [], "Description": "DO NOT USE this method. See the javadoc of @B_android#database#sqlite#SQLiteDatabase#OpenParams#Builder#setIdleConnectionTimeout_E@ for the details. Sets the maximum number of milliseconds that SQLite connection is allowed to be idle before it is closed and removed from the pool. This method should be called from the constructor of the subclass, before opening the database @B_android#database#sqlite#SQLiteDatabase#OpenParams#Builder#setIdleConnectionTimeout_E@ for the details.", "history": "Added in API level 27 Deprecated in API level 29", "FullName": "public void setIdleConnectionTimeout (long idleConnectionTimeoutMs)"}, "onCreate(android.database.sqlite.SQLiteDatabase)": {"Returns": [], "Parameters": [["@B_android#database#sqlite#SQLiteDatabase_E@", "SQLiteDatabase: The database."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the database is created for the first time. This is where the creation of tables and the initial population of the tables should happen.", "history": "Added in API level 1", "FullName": "public abstract void onCreate (SQLiteDatabase db)"}, "SQLiteOpenHelper(android.content.Context,java.lang.String,int,android.database.sqlite.SQLiteDatabase.OpenParams)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: to use for locating paths to the the database This value may be null."], ["@B_java#lang#String_E@", "String: of the database file, or null for an in-memory database This value may be null."], ["int", "int: number of the database (starting at 1); if the database is older, @B_android#database#sqlite#SQLiteOpenHelper#onUpgrade_E@ will be used to upgrade the database; if the database is newer, @B_android#database#sqlite#SQLiteOpenHelper#onDowngrade_E@ will be used to downgrade the database"], ["@B_android#database#sqlite#SQLiteDatabase#OpenParams_E@", "SQLiteDatabase.OpenParams: configuration parameters that are used for opening @B_android#database#sqlite#SQLiteDatabase_E@. Please note that @B_android#database#sqlite#SQLiteDatabase#CREATE_IF_NECESSARY_E@ flag will always be set when the helper opens the database This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a helper object to create, open, and/or manage a database. This method always returns very quickly. The database is not actually created or opened until one of @B_android#database#sqlite#SQLiteOpenHelper#getWritableDatabase_E@ or @B_android#database#sqlite#SQLiteOpenHelper#getReadableDatabase_E@ is called.", "history": "Added in API level 28", "FullName": "public SQLiteOpenHelper (Context context, String name, int version, SQLiteDatabase.OpenParams openParams)"}, "setOpenParams(android.database.sqlite.SQLiteDatabase.OpenParams)": {"Returns": [], "Parameters": [["@B_android#database#sqlite#SQLiteDatabase#OpenParams_E@", "SQLiteDatabase.OpenParams: configuration parameters that are used for opening @B_android#database#sqlite#SQLiteDatabase_E@. This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the database is already open"]], "SeeAlso": [], "Permissions": [], "Description": "Sets configuration parameters that are used for opening @B_android#database#sqlite#SQLiteDatabase_E@. Please note that @B_android#database#sqlite#SQLiteDatabase#CREATE_IF_NECESSARY_E@ flag will always be set when opening the database", "history": "Added in API level 28", "FullName": "public void setOpenParams (SQLiteDatabase.OpenParams openParams)"}, "setLookasideConfig(int, int)": {"Returns": [], "Parameters": [["int", "int: The size in bytes of each lookaside slot."], ["int", "int: The total number of lookaside memory slots per database connection."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Configures This method should be called from the constructor of the subclass, before opening the database, since lookaside memory configuration can only be changed when no connection is using it SQLite default settings will be used, if this method isn't called. Use setLookasideConfig(0,0) to disable lookaside", "history": "added in API level 27", "FullName": "public void setLookasideConfig (int slotSize, int slotCount)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close any open database object.", "history": "Added in API level 1", "FullName": "public void close ()"}, "getDatabaseName()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the name of the SQLite database being opened, as given to the constructor.", "history": "Added in API level 14", "FullName": "public String getDatabaseName ()"}, "onDowngrade(android.database.sqlite.SQLiteDatabase,int,int)": {"Returns": [], "Parameters": [["@B_android#database#sqlite#SQLiteDatabase_E@", "SQLiteDatabase: The database."], ["int", "int: The old database version."], ["int", "int: The new database version."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the database needs to be downgraded. This is strictly similar to @B_android#database#sqlite#SQLiteOpenHelper#onUpgrade_E@ method, but is called whenever current version is newer than requested one. However, this method is not abstract, so it is not mandatory for a customer to implement it. If not overridden, default implementation will reject downgrade and throws SQLiteException This method executes within a transaction. If an exception is thrown, all changes will automatically be rolled back.", "history": "Added in API level 11", "FullName": "public void onDowngrade (SQLiteDatabase db, int oldVersion, int newVersion)"}, "getReadableDatabase()": {"Returns": [["@B_android#database#sqlite#SQLiteDatabase_E@", "a database object valid until @B_android#database#sqlite#SQLiteOpenHelper#getWritableDatabase_E@ or @B_android#database#sqlite#SQLiteOpenHelper#close_E@ is called."]], "Parameters": [], "Throws": [["@B_android#database#sqlite#SQLiteException_E@", "if the database cannot be opened"]], "SeeAlso": [], "Permissions": [], "Description": "Create and/or open a database. This will be the same object returned by @B_android#database#sqlite#SQLiteOpenHelper#getWritableDatabase_E@ unless some problem, such as a full disk, requires the database to be opened read-only. In that case, a read-only database object will be returned. If the problem is fixed, a future call to @B_android#database#sqlite#SQLiteOpenHelper#getWritableDatabase_E@ may succeed, in which case the read-only database object will be closed and the read/write object will be returned in the future. Like @B_android#database#sqlite#SQLiteOpenHelper#getWritableDatabase_E@, this method may take a long time to return, so you should not call it from the application main thread, including from @B_android#content#ContentProvider#onCreate_E@.", "history": "Added in API level 1", "FullName": "public SQLiteDatabase getReadableDatabase ()"}, "onOpen(android.database.sqlite.SQLiteDatabase)": {"Returns": [], "Parameters": [["@B_android#database#sqlite#SQLiteDatabase_E@", "SQLiteDatabase: The database."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the database has been opened. The implementation should check @B_android#database#sqlite#SQLiteDatabase#isReadOnly_E@ before updating the database. This method is called after the database connection has been configured and after the database schema has been created, upgraded or downgraded as necessary. If the database connection must be configured in some way before the schema is created, upgraded, or downgraded, do it in @B_android#database#sqlite#SQLiteOpenHelper#onConfigure_E@ instead.", "history": "Added in API level 1", "FullName": "public void onOpen (SQLiteDatabase db)"}, "setWriteAheadLoggingEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if write-ahead logging should be enabled, false if it should be disabled."]], "Throws": [], "SeeAlso": ["@B_android#database#sqlite#SQLiteDatabase#enableWriteAheadLogging_E@"], "Permissions": [], "Description": "Enables or disables the use of write-ahead logging for the database. Write-ahead logging cannot be used with read-only databases so the value of this flag is ignored if the database is opened read-only.", "history": "Added in API level 16", "FullName": "public void setWriteAheadLoggingEnabled (boolean enabled)"}, "onConfigure(android.database.sqlite.SQLiteDatabase)": {"Returns": [], "Parameters": [["@B_android#database#sqlite#SQLiteDatabase_E@", "SQLiteDatabase: The database."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the database connection is being configured, to enable features such as write-ahead logging or foreign key support. This method is called before @B_android#database#sqlite#SQLiteOpenHelper#onCreate_E@, @B_android#database#sqlite#SQLiteOpenHelper#onUpgrade_E@, @B_android#database#sqlite#SQLiteOpenHelper#onDowngrade_E@, or @B_android#database#sqlite#SQLiteOpenHelper#onOpen_E@ are called. It should not modify the database except to configure the database connection as required. This method should only call methods that configure the parameters of the database connection, such as @B_android#database#sqlite#SQLiteDatabase#enableWriteAheadLogging_E@ @B_android#database#sqlite#SQLiteDatabase#setForeignKeyConstraintsEnabled_E@, @B_android#database#sqlite#SQLiteDatabase#setLocale_E@, @B_android#database#sqlite#SQLiteDatabase#setMaximumSize_E@, or executing PRAGMA statements.", "history": "Added in API level 16", "FullName": "public void onConfigure (SQLiteDatabase db)"}, "getWritableDatabase()": {"Returns": [["@B_android#database#sqlite#SQLiteDatabase_E@", "a read/write database object valid until @B_android#database#sqlite#SQLiteOpenHelper#close_E@ is called"]], "Parameters": [], "Throws": [["@B_android#database#sqlite#SQLiteException_E@", "if the database cannot be opened for writing"]], "SeeAlso": [], "Permissions": [], "Description": "Create and/or open a database that will be used for reading and writing. The first time this is called, the database will be opened and @B_android#database#sqlite#SQLiteOpenHelper#onCreate_E@, @B_android#database#sqlite#SQLiteOpenHelper#onUpgrade_E@ and/or @B_android#database#sqlite#SQLiteOpenHelper#onOpen_E@ will be called. Once opened successfully, the database is cached, so you can call this method every time you need to write to the database. (Make sure to call @B_android#database#sqlite#SQLiteOpenHelper#close_E@ when you no longer need the database.) Errors such as bad permissions or a full disk may cause this method to fail, but future attempts may succeed if the problem is fixed. Database upgrade may take a long time, you should not call this method from the application main thread, including from @B_android#content#ContentProvider#onCreate_E@.", "history": "Added in API level 1", "FullName": "public SQLiteDatabase getWritableDatabase ()"}, "onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)": {"Returns": [], "Parameters": [["@B_android#database#sqlite#SQLiteDatabase_E@", "SQLiteDatabase: The database."], ["int", "int: The old database version."], ["int", "int: The new database version."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the database needs to be upgraded. The implementation should use this method to drop tables, add tables, or do anything else it needs to upgrade to the new schema version. The SQLite ALTER TABLE documentation can be found This method executes within a transaction. If an exception is thrown, all changes will automatically be rolled back.", "history": "Added in API level 1", "FullName": "public abstract void onUpgrade (SQLiteDatabase db, int oldVersion, int newVersion)"}, "SQLiteOpenHelper(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase.CursorFactory,int,android.database.DatabaseErrorHandler)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: to use for locating paths to the the database This value may be null."], ["@B_java#lang#String_E@", "String: of the database file, or null for an in-memory database This value may be null."], ["@B_android#database#sqlite#SQLiteDatabase#CursorFactory_E@", "SQLiteDatabase.CursorFactory: to use for creating cursor objects, or null for the default This value may be null."], ["int", "int: number of the database (starting at 1); if the database is older, @B_android#database#sqlite#SQLiteOpenHelper#onUpgrade_E@ will be used to upgrade the database; if the database is newer, @B_android#database#sqlite#SQLiteOpenHelper#onDowngrade_E@ will be used to downgrade the database"], ["@B_android#database#DatabaseErrorHandler_E@", "DatabaseErrorHandler: the @B_android#database#DatabaseErrorHandler_E@ to be used when sqlite reports database corruption, or null to use the default error handler. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a helper object to create, open, and/or manage a database. The database is not actually created or opened until one of @B_android#database#sqlite#SQLiteOpenHelper#getWritableDatabase_E@ or @B_android#database#sqlite#SQLiteOpenHelper#getReadableDatabase_E@ is called. Accepts input param: a concrete instance of @B_android#database#DatabaseErrorHandler_E@ to be used to handle corruption when sqlite reports database corruption.", "history": "Added in API level 11", "FullName": "public SQLiteOpenHelper (Context context, String name, SQLiteDatabase.CursorFactory factory, int version, DatabaseErrorHandler errorHandler)"}}, "Inheritance": [], "ClassName": "android.database.sqlite.SQLiteOpenHelper", "ClassDesc": "A helper class to manage database creation and version management. You create a subclass implementing @B_android#database#sqlite#SQLiteOpenHelper#onCreate_E@, @B_android#database#sqlite#SQLiteOpenHelper#onUpgrade_E@ and optionally @B_android#database#sqlite#SQLiteOpenHelper#onOpen_E@, and this class takes care of opening the database if it exists, creating it if it does not, and upgrading it as necessary. Transactions are used to make sure the database is always in a sensible state. This class makes it easy for @B_android#content#ContentProvider_E@ implementations to defer opening and upgrading the database until first use, to avoid blocking application startup with long-running database upgrades. For an example, see the NotePadProvider class in the NotePad sample application, in the samples/ directory of the SDK. @B_java#lang#AutoCloseable_E@ interface was first added in the @B_android#os#Build#VERSION_CODES#Q_E@ release."}