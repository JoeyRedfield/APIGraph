{"Functions": {"abortAnimation()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#abortAnimation_E@ directly. Stops the animation. Aborting the animation causes the scroller to move to the final x and y position.", "history": "added in version 22.0.0", "FullName": "void abortAnimation ()"}, "getCurrY()": {"Returns": [["int", "The new Y offset as an absolute distance from the origin."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#getCurrY_E@ directly. Returns the current Y offset in the scroll.", "history": "added in version 22.0.0", "FullName": "int getCurrY ()"}, "notifyHorizontalEdgeReached(int, int, int)": {"Returns": [], "Parameters": [["int", "int: Starting/current X position"], ["int", "int: Desired final X position"], ["int", "int: Magnitude of overscroll allowed. This should be the maximum desired distance from finalX. Absolute value - must be positive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#notifyHorizontalEdgeReached_E@ directly. Notify the scroller that we've reached a horizontal boundary. Normally the information to handle this will already be known when the animation is started, such as in a call to one of the fling functions. However there are cases where this cannot be known in advance. This function will transition the current motion and animate from startX to finalX as appropriate.", "history": "added in version 22.0.0", "FullName": "void notifyHorizontalEdgeReached (int startX, int finalX, int overX)"}, "computeScrollOffset()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#computeScrollOffset_E@ directly. Call this when you want to know the new location. If it returns true, the animation is not yet finished. loc will be altered to provide the new location.", "history": "added in version 22.0.0", "FullName": "boolean computeScrollOffset ()"}, "getFinalY()": {"Returns": [["int", "The final Y position for the scroll in progress, if known."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#getFinalY_E@ directly.", "history": "added in version 22.0.0", "FullName": "int getFinalY ()"}, "getCurrX()": {"Returns": [["int", "The new X offset as an absolute distance from the origin."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#getCurrX_E@ directly. Returns the current X offset in the scroll.", "history": "added in version 22.0.0", "FullName": "int getCurrX ()"}, "startScroll(int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Starting horizontal scroll offset in pixels. Positive numbers will scroll the content to the left."], ["int", "int: Starting vertical scroll offset in pixels. Positive numbers will scroll the content up."], ["int", "int: Horizontal distance to travel. Positive numbers will scroll the content to the left."], ["int", "int: Vertical distance to travel. Positive numbers will scroll the content up."], ["int", "int: Duration of the scroll in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#startScroll_E@ directly. Start scrolling by providing a starting point and the distance to travel.", "history": "added in version 22.0.0", "FullName": "void startScroll (int startX, int startY, int dx, int dy, int duration)"}, "notifyVerticalEdgeReached(int, int, int)": {"Returns": [], "Parameters": [["int", "int: Starting/current Y position"], ["int", "int: Desired final Y position"], ["int", "int: Magnitude of overscroll allowed. This should be the maximum desired distance from finalY. Absolute value - must be positive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#notifyVerticalEdgeReached_E@ directly. Notify the scroller that we've reached a vertical boundary. Normally the information to handle this will already be known when the animation is started, such as in a call to one of the fling functions. However there are cases where this cannot be known in advance. This function will animate a parabolic motion from startY to finalY.", "history": "added in version 22.0.0", "FullName": "void notifyVerticalEdgeReached (int startY, int finalY, int overY)"}, "create(android.content.Context)": {"Returns": [["@B_android#support#v4#widget#ScrollerCompat_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller_E@ constructor directly.", "history": "added in version 22.0.0", "FullName": "ScrollerCompat create (Context context)"}, "springBack(int, int, int, int, int, int)": {"Returns": [["boolean", "true if a springback was initiated, false if startX and startY were already within the valid range."]], "Parameters": [["int", "int: Starting X coordinate"], ["int", "int: Starting Y coordinate"], ["int", "int: Minimum valid X value"], ["int", "int: Maximum valid X value"], ["int", "int: Minimum valid Y value"], ["int", "int: Maximum valid Y value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#springBack_E@ directly. Call this when you want to 'spring back' into a valid coordinate range.", "history": "added in version 23.1.0", "FullName": "boolean springBack (int startX, int startY, int minX, int maxX, int minY, int maxY)"}, "getCurrVelocity()": {"Returns": [["float", "The original velocity less the deceleration. Result may be negative."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#getCurrVelocity_E@ directly. Returns the current velocity on platform versions that support it. This method should only be used as input for nonessential visual effects such as @B_android#support#v4#widget#EdgeEffectCompat_E@.", "history": "added in version 22.0.0", "FullName": "float getCurrVelocity ()"}, "isOverScrolled()": {"Returns": [["boolean", "true when the current position is overscrolled and in the process of interpolating back to a valid value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#isOverScrolled_E@ directly. Returns whether the current Scroller is currently returning to a valid position. Valid bounds were provided by the @B_android#support#v4#widget#ScrollerCompat#fling_E@ method. One should check this value before calling @B_android#support#v4#widget#ScrollerCompat#startScroll_E@ as the interpolation currently in progress to restore a valid position will then be stopped. The caller has to take into account the fact that the started scroll will start from an overscrolled position.", "history": "added in version 22.0.0", "FullName": "boolean isOverScrolled ()"}, "startScroll(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Starting horizontal scroll offset in pixels. Positive numbers will scroll the content to the left."], ["int", "int: Starting vertical scroll offset in pixels. Positive numbers will scroll the content up."], ["int", "int: Horizontal distance to travel. Positive numbers will scroll the content to the left."], ["int", "int: Vertical distance to travel. Positive numbers will scroll the content up."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#getCurrX_E@ directly. Start scrolling by providing a starting point and the distance to travel. The scroll will use the default value of 250 milliseconds for the duration.", "history": "added in version 22.0.0", "FullName": "void startScroll (int startX, int startY, int dx, int dy)"}, "fling(int, int, int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Starting point of the scroll (X)"], ["int", "int: Starting point of the scroll (Y)"], ["int", "int: Initial velocity of the fling (X) measured in pixels per second."], ["int", "int: Initial velocity of the fling (Y) measured in pixels per second"], ["int", "int: Minimum X value. The scroller will not scroll past this point."], ["int", "int: Maximum X value. The scroller will not scroll past this point."], ["int", "int: Minimum Y value. The scroller will not scroll past this point."], ["int", "int: Maximum Y value. The scroller will not scroll past this point."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#fling_E@ directly. Start scrolling based on a fling gesture. The distance travelled will depend on the initial velocity of the fling.", "history": "added in version 22.0.0", "FullName": "void fling (int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY)"}, "getFinalX()": {"Returns": [["int", "The final X position for the scroll in progress, if known."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#getFinalX_E@ directly.", "history": "added in version 22.0.0", "FullName": "int getFinalX ()"}, "isFinished()": {"Returns": [["boolean", "True if the scroller has finished scrolling, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#isFinished_E@ directly. Returns whether the scroller has finished scrolling.", "history": "added in version 22.0.0", "FullName": "boolean isFinished ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v4.widget.ScrollerCompat", "ClassDesc": "Use https:##developer#android#com@B_android#widget#OverScroller_E@ directly. Provides access to new https:##developer#android#com@B_android#widget#Scroller_E@ APIs when available. This class provides a platform version-independent mechanism for obeying the current device's preferred scroll physics and fling behavior. It offers a subset of the APIs from Scroller or OverScroller."}