{"Functions": {"get(android.nfc.Tag)": {"Returns": [["@B_android#nfc#tech#NfcBarcode_E@", "NfcBarcode object"]], "Parameters": [["@B_android#nfc#Tag_E@", "Tag: an NfcBarcode compatible tag"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get an instance of @B_android#nfc#tech#NfcBarcode_E@ for the given tag. Returns null if @B_android#nfc#tech#NfcBarcode_E@ was not enumerated in @B_android#nfc#Tag#getTechList_E@. Does not cause any RF activity and does not block.", "history": "Added in API level 17", "FullName": "public static NfcBarcode get (Tag tag)"}, "isConnected()": {"Returns": [["boolean", "true if I/O operations should be possible"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper to indicate if I/O operations should be possible. Returns true if @B_android#nfc#tech#TagTechnology#connect_E@ has completed, and @B_android#nfc#tech#TagTechnology#close_E@ has not been called, and the @B_android#nfc#Tag_E@ is not known to be out of range. Does not cause RF activity, and does not block.", "history": "added in API level 17", "FullName": "public boolean isConnected ()"}, "connect()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Enable I/O operations to the tag from this @B_android#nfc#tech#TagTechnology_E@ object. May cause RF activity and may block. Must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ by calling @B_android#nfc#tech#TagTechnology#close_E@ from another thread. Only one @B_android#nfc#tech#TagTechnology_E@ object can be connected to a @B_android#nfc#Tag_E@ at a time. Applications must call @B_android#nfc#tech#TagTechnology#close_E@ when I/O operations are complete. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 17", "FullName": "public void connect ()"}, "getType()": {"Returns": [["int", "the NFC Barcode tag type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the NFC Barcode tag type. Currently only one of @B_android#nfc#tech#NfcBarcode#TYPE_KOVIO_E@ or @B_android#nfc#tech#NfcBarcode#TYPE_UNKNOWN_E@. Does not cause any RF activity and does not block.", "history": "Added in API level 17", "FullName": "public int getType ()"}, "getBarcode()": {"Returns": [["byte[]", "a byte array containing the barcode"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the barcode of an NfcBarcode tag. Tags of @B_android#nfc#tech#NfcBarcode#TYPE_KOVIO_E@ return 16 bytes: The first byte is 0x80 ORd with a manufacturer ID, corresponding to ISO/IEC 7816-6. The second byte describes the payload data format. Defined data format types include the following: 0x00: Reserved for manufacturer assignment 0x01: 96-bit URL with \"http://www.\" prefix 0x02: 96-bit URL with \"https://www.\" prefix 0x03: 96-bit URL with \"http://\" prefix 0x04: 96-bit URL with \"https://\" prefix 0x05: 96-bit GS1 EPC 0x06-0xFF: reserved The following 12 bytes are payload: In case of a URL payload, the payload is encoded in US-ASCII, following the limitations defined in RFC3987. In case of GS1 EPC data, see The last 2 bytes comprise the CRC. Does not cause any RF activity and does not block.", "history": "Added in API level 17", "FullName": "public byte[] getBarcode ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Disable I/O operations to the tag from this @B_android#nfc#tech#TagTechnology_E@ object, and release resources. Also causes all blocked I/O operations on other thread to be canceled and return with @B_java#io#IOException_E@. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 17", "FullName": "public void close ()"}, "getTag()": {"Returns": [["@B_android#nfc#Tag_E@", "the @B_android#nfc#Tag_E@ backing this @B_android#nfc#tech#TagTechnology_E@ object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the @B_android#nfc#Tag_E@ object backing this @B_android#nfc#tech#TagTechnology_E@ object.", "history": "added in API level 17", "FullName": "public Tag getTag ()"}}, "Inheritance": [], "ClassName": "android.nfc.tech.NfcBarcode", "ClassDesc": "Provides access to tags containing just a barcode. Acquire an @B_android#nfc#tech#NfcBarcode_E@ object using @B_android#nfc#tech#NfcBarcode#get_E@."}