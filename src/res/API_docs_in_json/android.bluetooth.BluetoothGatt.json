{"Functions": {"setPreferredPhy(int,int,int)": {"Returns": [], "Parameters": [["int", "int: preferred transmitter PHY. Bitwise OR of any of @B_android#bluetooth#BluetoothDevice#PHY_LE_1M_MASK_E@, @B_android#bluetooth#BluetoothDevice#PHY_LE_2M_MASK_E@, and @B_android#bluetooth#BluetoothDevice#PHY_LE_CODED_MASK_E@."], ["int", "int: preferred receiver PHY. Bitwise OR of any of @B_android#bluetooth#BluetoothDevice#PHY_LE_1M_MASK_E@, @B_android#bluetooth#BluetoothDevice#PHY_LE_2M_MASK_E@, and @B_android#bluetooth#BluetoothDevice#PHY_LE_CODED_MASK_E@."], ["int", "int: preferred coding to use when transmitting on the LE Coded PHY. Can be one of @B_android#bluetooth#BluetoothDevice#PHY_OPTION_NO_PREFERRED_E@, @B_android#bluetooth#BluetoothDevice#PHY_OPTION_S2_E@ or @B_android#bluetooth#BluetoothDevice#PHY_OPTION_S8_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the preferred connection PHY for this app. Please note that this is just a recommendation, whether the PHY change will happen depends on other applications preferences, local and remote controller capabilities. Controller can override these settings. @B_android#bluetooth#BluetoothGattCallback#onPhyUpdate_E@ will be triggered as a result of this call, even if no PHY change happens. It is also triggered when remote device updates the PHY.", "history": "Added in API level 26", "FullName": "public void setPreferredPhy (int txPhy, int rxPhy, int phyOptions)"}, "readDescriptor(android.bluetooth.BluetoothGattDescriptor)": {"Returns": [["boolean", "true, if the read operation was initiated successfully"]], "Parameters": [["@B_android#bluetooth#BluetoothGattDescriptor_E@", "BluetoothGattDescriptor: Descriptor value to read from the remote device"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Reads the value for a given descriptor from the associated remote device. Once the read operation has been completed, the @B_android#bluetooth#BluetoothGattCallback#onDescriptorRead_E@ callback is triggered, signaling the result of the operation. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 18", "FullName": "public boolean readDescriptor (BluetoothGattDescriptor descriptor)"}, "getConnectedDevices()": {"Returns": [["@B_java#util#List_E@", "List of devices. The list will be empty on error."]], "Parameters": [], "Throws": [["", "java.lang.UnsupportedOperationException"]], "SeeAlso": [], "Permissions": [], "Description": "Not supported - please use @B_android#bluetooth#BluetoothManager#getConnectedDevices_E@ with @B_android#bluetooth#BluetoothProfile#GATT_E@ as argument", "history": "Added in API level 18", "FullName": "public List<BluetoothDevice> getConnectedDevices ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close this Bluetooth GATT client. Application should call this method as early as possible after it is done with this GATT client.", "history": "Added in API level 18", "FullName": "public void close ()"}, "disconnect()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Disconnects an established connection, or cancels a connection attempt currently in progress. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 18", "FullName": "public void disconnect ()"}, "readPhy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read the current transmitter PHY and receiver PHY of the connection. The values are returned in @B_android#bluetooth#BluetoothGattCallback#onPhyRead_E@", "history": "Added in API level 26", "FullName": "public void readPhy ()"}, "beginReliableWrite()": {"Returns": [["boolean", "true, if the reliable write transaction has been initiated"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Initiates a reliable write transaction for a given remote device. Once a reliable write transaction has been initiated, all calls to @B_android#bluetooth#BluetoothGatt#writeCharacteristic_E@ are sent to the remote device for verification and queued up for atomic execution. The application will receive an @B_android#bluetooth#BluetoothGattCallback#onCharacteristicWrite_E@ callback in response to every @B_android#bluetooth#BluetoothGatt#writeCharacteristic_E@ call and is responsible for verifying if the value has been transmitted accurately. After all characteristics have been queued up and verified, @B_android#bluetooth#BluetoothGatt#executeReliableWrite_E@ will execute all writes. If a characteristic was not written correctly, calling @B_android#bluetooth#BluetoothGatt#abortReliableWrite_E@ will cancel the current transaction without committing any values on the remote device. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 18", "FullName": "public boolean beginReliableWrite ()"}, "getServices()": {"Returns": [["@B_java#util#List_E@", "List of services on the remote device. Returns an empty list if service discovery has not yet been performed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Returns a list of GATT services offered by the remote device. This function requires that service discovery has been completed for the given device. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 18", "FullName": "public List<BluetoothGattService> getServices ()"}, "requestMtu(int)": {"Returns": [["boolean", "true, if the new MTU value has been requested successfully"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Request an MTU size used for a given connection. When performing a write request operation (write without response), the data sent is truncated to the MTU size. This function may be used to request a larger MTU size to be able to send more data at once. A @B_android#bluetooth#BluetoothGattCallback#onMtuChanged_E@ callback will indicate whether this operation was successful. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 21", "FullName": "public boolean requestMtu (int mtu)"}, "getService(java.util.UUID)": {"Returns": [["@B_android#bluetooth#BluetoothGattService_E@", "BluetoothGattService if supported, or null if the requested service is not offered by the remote device."]], "Parameters": [["@B_java#util#UUID_E@", "UUID: UUID of the requested service"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Returns a @B_android#bluetooth#BluetoothGattService_E@, if the requested UUID is supported by the remote device. This function requires that service discovery has been completed for the given device. If multiple instances of the same service (as identified by UUID) exist, the first instance of the service is returned. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 18", "FullName": "public BluetoothGattService getService (UUID uuid)"}, "setPreferredPhy(int, int, int)": {"Returns": [], "Parameters": [["int", "int: preferred transmitter PHY. Bitwise OR of any of @B_android#bluetooth#BluetoothDevice#PHY_LE_1M_MASK_E@, @B_android#bluetooth#BluetoothDevice#PHY_LE_2M_MASK_E@, and @B_android#bluetooth#BluetoothDevice#PHY_LE_CODED_MASK_E@."], ["int", "int: preferred receiver PHY. Bitwise OR of any of @B_android#bluetooth#BluetoothDevice#PHY_LE_1M_MASK_E@, @B_android#bluetooth#BluetoothDevice#PHY_LE_2M_MASK_E@, and @B_android#bluetooth#BluetoothDevice#PHY_LE_CODED_MASK_E@."], ["int", "int: preferred coding to use when transmitting on the LE Coded PHY. Can be one of @B_android#bluetooth#BluetoothDevice#PHY_OPTION_NO_PREFERRED_E@, @B_android#bluetooth#BluetoothDevice#PHY_OPTION_S2_E@ or @B_android#bluetooth#BluetoothDevice#PHY_OPTION_S8_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the preferred connection PHY for this app. Please note that this is just a recommendation, whether the PHY change will happen depends on other applications preferences, local and remote controller capabilities. Controller can override these settings. @B_android#bluetooth#BluetoothGattCallback#onPhyUpdate_E@ will be triggered as a result of this call, even if no PHY change happens. It is also triggered when remote device updates the PHY.", "history": "added in API level 26", "FullName": "public void setPreferredPhy (int txPhy, int rxPhy, int phyOptions)"}, "getDevicesMatchingConnectionStates(int[])": {"Returns": [["@B_java#util#List_E@", "List of devices. The list will be empty on error."]], "Parameters": [["int[]", "int: Array of states. States can be one of @B_android#bluetooth#BluetoothProfile#STATE_CONNECTED_E@, @B_android#bluetooth#BluetoothProfile#STATE_CONNECTING_E@, @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTED_E@, @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTING_E@,"]], "Throws": [["", "java.lang.UnsupportedOperationException"]], "SeeAlso": [], "Permissions": [], "Description": "Not supported - please use @B_android#bluetooth#BluetoothManager#getDevicesMatchingConnectionStates_E@ with @B_android#bluetooth#BluetoothProfile#GATT_E@ as first argument", "history": "Added in API level 18", "FullName": "public List<BluetoothDevice> getDevicesMatchingConnectionStates (int[] states)"}, "getDevice()": {"Returns": [["@B_android#bluetooth#BluetoothDevice_E@", "remote bluetooth device"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the remote bluetooth device this GATT client targets to", "history": "Added in API level 18", "FullName": "public BluetoothDevice getDevice ()"}, "abortReliableWrite()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Cancels a reliable write transaction for a given device. Calling this function will discard all queued characteristic write operations for a given remote device. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 19", "FullName": "public void abortReliableWrite ()"}, "connect()": {"Returns": [["boolean", "true, if the connection attempt was initiated successfully"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Connect back to remote device. This method is used to re-connect to a remote device after the connection has been dropped. If the device is not in range, the re-connection will be triggered once the device is back in range.", "history": "Added in API level 18", "FullName": "public boolean connect ()"}, "writeDescriptor(android.bluetooth.BluetoothGattDescriptor)": {"Returns": [["boolean", "true, if the write operation was initiated successfully"]], "Parameters": [["@B_android#bluetooth#BluetoothGattDescriptor_E@", "BluetoothGattDescriptor: Descriptor to write to the associated remote device"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Write the value of a given descriptor to the associated remote device. A @B_android#bluetooth#BluetoothGattCallback#onDescriptorWrite_E@ callback is triggered to report the result of the write operation. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 18", "FullName": "public boolean writeDescriptor (BluetoothGattDescriptor descriptor)"}, "discoverServices()": {"Returns": [["boolean", "true, if the remote service discovery has been started"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Discovers services offered by a remote device as well as their characteristics and descriptors. This is an asynchronous operation. Once service discovery is completed, the @B_android#bluetooth#BluetoothGattCallback#onServicesDiscovered_E@ callback is triggered. If the discovery was successful, the remote services can be retrieved using the @B_android#bluetooth#BluetoothGatt#getServices_E@ function. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 18", "FullName": "public boolean discoverServices ()"}, "getConnectionState(android.bluetooth.BluetoothDevice)": {"Returns": [["int", "State of the profile connection. One of @B_android#bluetooth#BluetoothProfile#STATE_CONNECTED_E@, @B_android#bluetooth#BluetoothProfile#STATE_CONNECTING_E@, @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTED_E@, @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTING_E@ Value is @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTED_E@, @B_android#bluetooth#BluetoothProfile#STATE_CONNECTING_E@, @B_android#bluetooth#BluetoothProfile#STATE_CONNECTED_E@, or @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTING_E@"]], "Parameters": [["@B_android#bluetooth#BluetoothDevice_E@", "BluetoothDevice: Remote bluetooth device."]], "Throws": [["", "java.lang.UnsupportedOperationException"]], "SeeAlso": [], "Permissions": [], "Description": "Not supported - please use @B_android#bluetooth#BluetoothManager#getConnectedDevices_E@ with @B_android#bluetooth#BluetoothProfile#GATT_E@ as argument", "history": "Added in API level 18", "FullName": "public int getConnectionState (BluetoothDevice device)"}, "executeReliableWrite()": {"Returns": [["boolean", "true, if the request to execute the transaction has been sent"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Executes a reliable write transaction for a given remote device. This function will commit all queued up characteristic write operations for a given remote device. A @B_android#bluetooth#BluetoothGattCallback#onReliableWriteCompleted_E@ callback is invoked to indicate whether the transaction has been executed correctly. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 18", "FullName": "public boolean executeReliableWrite ()"}, "writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic)": {"Returns": [["boolean", "true, if the write operation was initiated successfully"]], "Parameters": [["@B_android#bluetooth#BluetoothGattCharacteristic_E@", "BluetoothGattCharacteristic: Characteristic to write on the remote device"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Writes a given characteristic and its values to the associated remote device. Once the write operation has been completed, the @B_android#bluetooth#BluetoothGattCallback#onCharacteristicWrite_E@ callback is invoked, reporting the result of the operation. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 18", "FullName": "public boolean writeCharacteristic (BluetoothGattCharacteristic characteristic)"}, "readRemoteRssi()": {"Returns": [["boolean", "true, if the RSSI value has been requested successfully"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Read the RSSI for a connected remote device. The @B_android#bluetooth#BluetoothGattCallback#onReadRemoteRssi_E@ callback will be invoked when the RSSI value has been read. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 18", "FullName": "public boolean readRemoteRssi ()"}, "abortReliableWrite(android.bluetooth.BluetoothDevice)": {"Returns": [], "Parameters": [["@B_android#bluetooth#BluetoothDevice_E@", "BluetoothDevice no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#bluetooth#BluetoothGatt#abortReliableWrite_E@", "history": "Added in API level 18 Deprecated in API level 19", "FullName": "public void abortReliableWrite (BluetoothDevice mDevice)"}, "readCharacteristic(android.bluetooth.BluetoothGattCharacteristic)": {"Returns": [["boolean", "true, if the read operation was initiated successfully"]], "Parameters": [["@B_android#bluetooth#BluetoothGattCharacteristic_E@", "BluetoothGattCharacteristic: Characteristic to read from the remote device"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Reads the requested characteristic from the associated remote device. This is an asynchronous operation. The result of the read operation is reported by the @B_android#bluetooth#BluetoothGattCallback#onCharacteristicRead_E@ callback. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 18", "FullName": "public boolean readCharacteristic (BluetoothGattCharacteristic characteristic)"}, "setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,boolean)": {"Returns": [["boolean", "true, if the requested notification status was set successfully"]], "Parameters": [["@B_android#bluetooth#BluetoothGattCharacteristic_E@", "BluetoothGattCharacteristic: The characteristic for which to enable notifications"], ["boolean", "boolean: Set to true to enable notifications/indications"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Enable or disable notifications/indications for a given characteristic. Once notifications are enabled for a characteristic, a @B_android#bluetooth#BluetoothGattCallback#onCharacteristicChanged_E@ callback will be triggered if the remote device indicates that the given characteristic has changed. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 18", "FullName": "public boolean setCharacteristicNotification (BluetoothGattCharacteristic characteristic, boolean enable)"}, "requestConnectionPriority(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int: Request a specific connection priority. Must be one of @B_android#bluetooth#BluetoothGatt#CONNECTION_PRIORITY_BALANCED_E@, @B_android#bluetooth#BluetoothGatt#CONNECTION_PRIORITY_HIGH_E@ or @B_android#bluetooth#BluetoothGatt#CONNECTION_PRIORITY_LOW_POWER_E@."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the parameters are outside of their specified range."]], "SeeAlso": [], "Permissions": [], "Description": "Request a connection parameter update. This function will send a connection parameter update request to the remote device.", "history": "Added in API level 21", "FullName": "public boolean requestConnectionPriority (int connectionPriority)"}}, "Inheritance": [], "ClassName": "android.bluetooth.BluetoothGatt", "ClassDesc": "Public API for the Bluetooth GATT Profile. This class provides Bluetooth GATT functionality to enable communication with Bluetooth Smart or Smart Ready devices. To connect to a remote peripheral device, create a @B_android#bluetooth#BluetoothGattCallback_E@ and call @B_android#bluetooth#BluetoothDevice#connectGatt_E@ to get a instance of this class. GATT capable devices can be discovered using the Bluetooth device discovery or BLE scan process."}