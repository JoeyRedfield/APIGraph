{"Functions": {"queryEffects()": {"Returns": [["@B_android#media#audiofx#AudioEffect#Descriptor_E@", "no returns description in source"]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"]], "SeeAlso": [], "Permissions": [], "Description": "Query all effects available on the platform. Returns an array of @B_android#media#audiofx#AudioEffect#Descriptor_E@ objects", "history": "Added in API level 9", "FullName": "public static Descriptor[] queryEffects ()"}, "setEnabled(boolean)": {"Returns": [["int", "@B_android#media#audiofx#AudioEffect#SUCCESS_E@ in case of success, @B_android#media#audiofx#AudioEffect#ERROR_INVALID_OPERATION_E@ or @B_android#media#audiofx#AudioEffect#ERROR_DEAD_OBJECT_E@ in case of failure."]], "Parameters": [["boolean", "boolean: the requested enable state"]], "Throws": [["", "java.lang.IllegalStateException"], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Enable or disable the effect. Creating an audio effect does not automatically apply this effect on the audio source. It creates the resources necessary to process this effect but the audio signal is still bypassed through the effect engine. Calling this method will make that the effect is actually applied or not to the audio content being played in the corresponding audio session.", "history": "Added in API level 9", "FullName": "public int setEnabled (boolean enabled)"}, "setEnableStatusListener(android.media.audiofx.AudioEffect.OnEnableStatusChangeListener)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener AudioEffect notifies when the effect engine is enabled or disabled.", "history": "Added in API level 9", "FullName": "public void setEnableStatusListener (AudioEffect.OnEnableStatusChangeListener listener)"}, "setControlStatusListener(android.media.audiofx.AudioEffect.OnControlStatusChangeListener)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener AudioEffect notifies when the effect engine control is taken or returned.", "history": "Added in API level 9", "FullName": "public void setControlStatusListener (AudioEffect.OnControlStatusChangeListener listener)"}, "getId()": {"Returns": [["int", "the effect identifier."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns effect unique identifier. This system wide unique identifier can be used to attach this effect to a MediaPlayer or an AudioTrack when the effect is an auxiliary effect (Reverb)", "history": "Added in API level 9", "FullName": "public int getId ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 9", "FullName": "protected void finalize ()"}, "hasControl()": {"Returns": [["boolean", "true if this instance has control of effect engine, false otherwise."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Checks if this AudioEffect object is controlling the effect engine.", "history": "Added in API level 9", "FullName": "public boolean hasControl ()"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases the native AudioEffect resources. It is a good practice to release the effect engine when not in use as control can be returned to other applications or the native resources released.", "history": "Added in API level 9", "FullName": "public void release ()"}, "getEnabled()": {"Returns": [["boolean", "true if the effect is enabled, false otherwise."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns effect enabled state", "history": "Added in API level 9", "FullName": "public boolean getEnabled ()"}, "getDescriptor()": {"Returns": [["@B_android#media#audiofx#AudioEffect#Descriptor_E@", "no returns description in source"]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": ["@B_android#media#audiofx#AudioEffect#Descriptor_E@"], "Permissions": [], "Description": "Get the effect descriptor.", "history": "Added in API level 9", "FullName": "public AudioEffect.Descriptor getDescriptor ()"}}, "Inheritance": [], "ClassName": "android.media.audiofx.AudioEffect", "ClassDesc": "AudioEffect is the base class for controlling audio effects provided by the android audio framework. Applications should not use the AudioEffect class directly but one of its derived classes to control specific effects: @B_android#media#audiofx#Equalizer_E@ @B_android#media#audiofx#Virtualizer_E@ @B_android#media#audiofx#BassBoost_E@ @B_android#media#audiofx#PresetReverb_E@ @B_android#media#audiofx#EnvironmentalReverb_E@ @B_android#media#audiofx#DynamicsProcessing_E@ To apply the audio effect to a specific AudioTrack or MediaPlayer instance, the application must specify the audio session ID of that instance when creating the AudioEffect. (see @B_android#media#MediaPlayer#getAudioSessionId_E@ for details on audio sessions). NOTE: attaching insert effects (equalizer, bass boost, virtualizer) to the global audio output mix by use of session 0 is deprecated. Creating an AudioEffect object will create the corresponding effect engine in the audio framework if no instance of the same effect type exists in the specified audio session. If one exists, this instance will be used. The application creating the AudioEffect object (or a derived class) will either receive control of the effect engine or not depending on the priority parameter. If priority is higher than the priority used by the current effect engine owner, the control will be transfered to the new object. Otherwise control will remain with the previous object. In this case, the new application will be notified of changes in effect engine state or control ownership by the appropriate listener."}