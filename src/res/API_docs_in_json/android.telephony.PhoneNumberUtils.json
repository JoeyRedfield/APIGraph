{"Functions": {"formatNumberToE164(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the E.164 representation, or null if the given phone number is not valid."]], "Parameters": [["@B_java#lang#String_E@", "String: the phone number to format."], ["@B_java#lang#String_E@", "String: the ISO 3166-1 two letters country code."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats the specified phoneNumber to the E.164 representation.", "history": "Added in API level 21", "FullName": "public static String formatNumberToE164 (String phoneNumber, String defaultCountryIso)"}, "stripSeparators(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "phone string stripped of separators."]], "Parameters": [["@B_java#lang#String_E@", "String: phone number to strip."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Strips separators from a phone number string.", "history": "Added in API level 1", "FullName": "public static String stripSeparators (String phoneNumber)"}, "createTtsSpan(java.lang.String)": {"Returns": [["@B_android#text#style#TtsSpan_E@", "A TtsSpan for ."]], "Parameters": [["@B_java#lang#String_E@", "String: A String the entirety of which represents a phone number."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a TtsSpan for the supplied String.", "history": "Added in API level 23", "FullName": "public static TtsSpan createTtsSpan (String phoneNumberString)"}, "isISODigit(char)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["char", "char no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "True if c is ISO-LATIN characters 0-9", "history": "Added in API level 1", "FullName": "public static boolean isISODigit (char c)"}, "calledPartyBCDToString(byte[],int,int)": {"Returns": [["@B_java#lang#String_E@", "partial string on invalid decode"]], "Parameters": [["byte[]", "byte: the data buffer"], ["int", "int: should point to the TOA (aka. TON/NPI) octet after the length byte"], ["int", "int: is the number of bytes including TOA byte and must be at least 2"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#telephony#PhoneNumberUtils#calledPartyBCDToString_E@ instead. Calling this method is equivalent to calling @B_android#telephony#PhoneNumberUtils#calledPartyBCDToString_E@ with @B_android#telephony#PhoneNumberUtils#BCD_EXTENDED_TYPE_EF_ADN_E@ as the extended type. 3GPP TS 24.008 10.5.4.7 Called Party BCD Number See Also TS 51.011 10.5.1 \"dialing number/ssc string\" and TS 11.11 \"10.3.1 EF adn (Abbreviated dialing numbers)\"", "history": "Added in API level 1 Deprecated in API level 28", "FullName": "public static String calledPartyBCDToString (byte[] bytes, int offset, int length)"}, "stringFromStringAndTOA(java.lang.String, int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Basically: makes sure there's a + in front of a TOA_International number Returns null if s == null", "history": "added in API level 1", "FullName": "public static String stringFromStringAndTOA (String s, int TOA)"}, "calledPartyBCDToString(byte[], int, int, int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["byte[]", "byte: the data buffer"], ["int", "int: should point to the TOA (aka. TON/NPI) octet after the length byte"], ["int", "int: is the number of bytes including TOA byte and must be at least 2"], ["int", "int: used to determine the extended bcd codingValue is BCD_EXTENDED_TYPE_EF_ADN or BCD_EXTENDED_TYPE_CALLED_PARTY."]], "Throws": [], "SeeAlso": ["@B_android#telephony#PhoneNumberUtils_E@"], "Permissions": [], "Description": "3GPP TS 24.008 10.5.4.7 Called Party BCD Number See Also TS 51.011 10.5.1 \"dialing number/ssc string\" and TS 11.11 \"10.3.1 EF adn (Abbreviated dialing numbers)\"", "history": "added in API level 28", "FullName": "public static String calledPartyBCDToString (byte[] bytes, int offset, int length, int bcdExtType)"}, "calledPartyBCDToString(byte[],int,int,int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["byte[]", "byte: the data buffer"], ["int", "int: should point to the TOA (aka. TON/NPI) octet after the length byte"], ["int", "int: is the number of bytes including TOA byte and must be at least 2"], ["int", "int: used to determine the extended bcd coding Value is @B_android#telephony#PhoneNumberUtils#BCD_EXTENDED_TYPE_EF_ADN_E@, or @B_android#telephony#PhoneNumberUtils#BCD_EXTENDED_TYPE_CALLED_PARTY_E@"]], "Throws": [], "SeeAlso": ["@B_android#telephony#PhoneNumberUtils_E@"], "Permissions": [], "Description": "3GPP TS 24.008 10.5.4.7 Called Party BCD Number See Also TS 51.011 10.5.1 \"dialing number/ssc string\" and TS 11.11 \"10.3.1 EF adn (Abbreviated dialing numbers)\"", "history": "Added in API level 28", "FullName": "public static String calledPartyBCDToString (byte[] bytes, int offset, int length, int bcdExtType)"}, "stringFromStringAndTOA(java.lang.String,int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Basically: makes sure there's a + in front of a TOA_International number Returns null if s == null", "history": "Added in API level 1", "FullName": "public static String stringFromStringAndTOA (String s, int TOA)"}, "formatNanpNumber(android.text.Editable)": {"Returns": [], "Parameters": [["@B_android#text#Editable_E@", "Editable: the number to be formatted, will be modified with the formatting"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead Formats a phone number in-place using the NANP formatting rules. Numbers will be formatted as: xxxxx xxx-xxxx xxx-xxx-xxxx 1-xxx-xxx-xxxx +1-xxx-xxx-xxxx", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public static void formatNanpNumber (Editable text)"}, "createTtsSpannable(java.lang.CharSequence)": {"Returns": [["@B_java#lang#CharSequence_E@", "A CharSequence with appropriate annotations."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: A CharSequence the entirety of which represents a phone number."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Wrap the supplied CharSequence with a TtsSpan, annotating it as containing a phone number in its entirety.", "history": "Added in API level 23", "FullName": "public static CharSequence createTtsSpannable (CharSequence phoneNumber)"}, "PhoneNumberUtils()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public PhoneNumberUtils ()"}, "normalizeNumber(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the normalized number."]], "Parameters": [["@B_java#lang#String_E@", "String: the number to be normalized."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Normalize a phone number by removing the characters other than digits. If the given number has keypad letters, the letters will be converted to digits first.", "history": "Added in API level 21", "FullName": "public static String normalizeNumber (String phoneNumber)"}, "numberToCalledPartyBCD(java.lang.String)": {"Returns": [["byte[]", "BCD byte array"]], "Parameters": [["@B_java#lang#String_E@", "String: dialing number string. If the dialing number starts with '+', set to international TOA"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#telephony#PhoneNumberUtils#numberToCalledPartyBCD_E@ instead. Calling this method is equivalent to calling @B_android#telephony#PhoneNumberUtils#numberToCalledPartyBCD_E@ with @B_android#telephony#PhoneNumberUtils#BCD_EXTENDED_TYPE_EF_ADN_E@ as the extended type. Convert a dialing number to BCD byte array", "history": "Added in API level 1 Deprecated in API level 28", "FullName": "public static byte[] numberToCalledPartyBCD (String number)"}, "replaceUnicodeDigits(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the replaced number."]], "Parameters": [["@B_java#lang#String_E@", "String: the number to perform the replacement on."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces all unicode(e.g. Arabic, Persian) digits with their decimal digit equivalents.", "history": "Added in API level 21", "FullName": "public static String replaceUnicodeDigits (String number)"}, "calledPartyBCDFragmentToString(byte[],int,int,int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["byte[]", "byte no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int: Value is @B_android#telephony#PhoneNumberUtils#BCD_EXTENDED_TYPE_EF_ADN_E@, or @B_android#telephony#PhoneNumberUtils#BCD_EXTENDED_TYPE_CALLED_PARTY_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like calledPartyBCDToString, but field does not start with a TOA byte. For example: SIM ADN extension fields", "history": "Added in API level 28", "FullName": "public static String calledPartyBCDFragmentToString (byte[] bytes, int offset, int length, int bcdExtType)"}, "formatNumberToRFC3966(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the RFC3966 representation, or null if the given phone number is not valid."]], "Parameters": [["@B_java#lang#String_E@", "String: the phone number to format."], ["@B_java#lang#String_E@", "String: the ISO 3166-1 two letters country code."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats the specified phoneNumber to the RFC3966 representation.", "history": "Added in API level 23", "FullName": "public static String formatNumberToRFC3966 (String phoneNumber, String defaultCountryIso)"}, "calledPartyBCDToString(byte[], int, int)": {"Returns": [["@B_java#lang#String_E@", "partial string on invalid decode"]], "Parameters": [["byte[]", "byte: the data buffer"], ["int", "int: should point to the TOA (aka. TON/NPI) octet after the length byte"], ["int", "int: is the number of bytes including TOA byte and must be at least 2"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#telephony#PhoneNumberUtils#calledPartyBCDToString_E@ instead. Calling this method is equivalent to calling @B_android#telephony#PhoneNumberUtils#calledPartyBCDToString_E@ with @B_android#telephony#PhoneNumberUtils#BCD_EXTENDED_TYPE_EF_ADN_E@ as the extended type. 3GPP TS 24.008 10.5.4.7 Called Party BCD Number See Also TS 51.011 10.5.1 \"dialing number/ssc string\" and TS 11.11 \"10.3.1 EF adn (Abbreviated dialing numbers)\"", "history": "added in API level 1", "FullName": "public static String calledPartyBCDToString (byte[] bytes, int offset, int length)"}, "formatNumber(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the formatted number if the given number has been formatted, otherwise, return the given number."]], "Parameters": [["@B_java#lang#String_E@", "String: the number to be formatted."], ["@B_java#lang#String_E@", "String: the E164 format number whose country code is used if the given phoneNumber doesn't have the country code."], ["@B_java#lang#String_E@", "String: the ISO 3166-1 two letters country code whose convention will be used if the phoneNumberE164 is null or invalid, or if phoneNumber contains IDD."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format the phone number only if the given number hasn't been formatted. The number which has only dailable character is treated as not being formatted.", "history": "Added in API level 21", "FullName": "public static String formatNumber (String phoneNumber, String phoneNumberE164, String defaultCountryIso)"}, "formatNumber(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the formatted number, or null if the given number is not valid."]], "Parameters": [["@B_java#lang#String_E@", "String: the number to be formatted."], ["@B_java#lang#String_E@", "String: the ISO 3166-1 two letters country code whose convention will be used if the given number doesn't have the country code."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format a phone number. If the given number doesn't have the country code, the phone will be formatted to the default country's convention.", "history": "Added in API level 21", "FullName": "public static String formatNumber (String phoneNumber, String defaultCountryIso)"}, "compare(java.lang.String,java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compare phone numbers a and b, return true if they're identical enough for caller ID purposes.", "history": "Added in API level 1", "FullName": "public static boolean compare (String a, String b)"}, "isGlobalPhoneNumber(java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public static boolean isGlobalPhoneNumber (String phoneNumber)"}, "isLocalEmergencyNumber(android.content.Context,java.lang.String)": {"Returns": [["boolean", "true if the specified number is an emergency number for the country the user is currently in."]], "Parameters": [["@B_android#content#Context_E@", "Context: the specific context which the number should be checked against"], ["@B_java#lang#String_E@", "String: the number to look up."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Please use @B_android#telephony#TelephonyManager#isEmergencyNumber_E@ instead. Checks if a given number is an emergency number for the country that the user is in.", "history": "Added in API level 21 Deprecated in API level 29", "FullName": "public static boolean isLocalEmergencyNumber (Context context, String number)"}, "compare(java.lang.String, java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compare phone numbers a and b, return true if they're identical enough for caller ID purposes.", "history": "added in API level 1", "FullName": "public static boolean compare (String a, String b)"}, "isWellFormedSmsAddress(java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true iff the network portion of address is, as far as we can tell on the device, suitable for use as an SMS destination address.", "history": "Added in API level 1", "FullName": "public static boolean isWellFormedSmsAddress (String address)"}, "isReallyDialable(char)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["char", "char no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "True if c is ISO-LATIN characters 0-9, *, # , + (no WILD)", "history": "Added in API level 1", "FullName": "public static final boolean isReallyDialable (char c)"}, "getFormatTypeForLocale(java.util.Locale)": {"Returns": [["int", "The formatting type for the given locale, or FORMAT_UNKNOWN if the formatting rules are not known for the given locale"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale of interest, usually @B_java#util#Locale#getDefault_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead Returns the phone number formatting type for the given locale.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public static int getFormatTypeForLocale (Locale locale)"}, "networkPortionToCalledPartyBCD(java.lang.String)": {"Returns": [["byte[]", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Note: calls extractNetworkPortion(), so do not use for SIM EF[ADN] style records Returns null if network portion is empty.", "history": "Added in API level 1", "FullName": "public static byte[] networkPortionToCalledPartyBCD (String s)"}, "toCallerIDMinMatch(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the rightmost MIN_MATCH (5) characters in the network portion in *reversed* order This can be used to do a database lookup against the column that stores getStrippedReversed() Returns null if phoneNumber == null", "history": "Added in API level 1", "FullName": "public static String toCallerIDMinMatch (String phoneNumber)"}, "isNonSeparator(char)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["char", "char no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "True if c is ISO-LATIN characters 0-9, *, # , +, WILD, WAIT, PAUSE", "history": "Added in API level 1", "FullName": "public static final boolean isNonSeparator (char c)"}, "formatNumber(android.text.Editable,int)": {"Returns": [], "Parameters": [["@B_android#text#Editable_E@", "Editable: The number to be formatted, will be modified with the formatting"], ["int", "int: The default formatting rules to apply if the number does not begin with +[country_code]"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead Formats a phone number in-place. Currently @B_android#telephony#PhoneNumberUtils#FORMAT_JAPAN_E@ and @B_android#telephony#PhoneNumberUtils#FORMAT_NANP_E@ is supported as a second argument.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public static void formatNumber (Editable text, int defaultFormattingType)"}, "addTtsSpan(android.text.Spannable,int,int)": {"Returns": [], "Parameters": [["@B_android#text#Spannable_E@", "Spannable: A Spannable to annotate."], ["int", "int: The starting character position of the phone number in s."], ["int", "int: The position after the ending character in the phone number s."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attach a @B_android#text#style#TtsSpan_E@ to the supplied Spannable at the indicated location, annotating that location as containing a phone number.", "history": "Added in API level 23", "FullName": "public static void addTtsSpan (Spannable s, int start, int endExclusive)"}, "numberToCalledPartyBCD(java.lang.String, int)": {"Returns": [["byte[]", "BCD byte array"]], "Parameters": [["@B_java#lang#String_E@", "String: dialing number string. If the dialing number starts with '+', set to international TOA"], ["int", "int: used to determine the extended bcd codingValue is BCD_EXTENDED_TYPE_EF_ADN or BCD_EXTENDED_TYPE_CALLED_PARTY."]], "Throws": [], "SeeAlso": ["@B_android#telephony#PhoneNumberUtils_E@"], "Permissions": [], "Description": "Convert a dialing number to BCD byte array", "history": "added in API level 28", "FullName": "public static byte[] numberToCalledPartyBCD (String number, int bcdExtType)"}, "extractPostDialPortion(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Extracts the post-dial sequence of DTMF control digits, pauses, and waits. Strips separators. This string may be empty, but will not be null unless phoneNumber == null. Returns null if phoneNumber == null", "history": "Added in API level 1", "FullName": "public static String extractPostDialPortion (String phoneNumber)"}, "formatNumber(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the formatted number, or null if the given number is not valid."]], "Parameters": [["@B_java#lang#String_E@", "String: the number to be formatted."], ["@B_java#lang#String_E@", "String: the ISO 3166-1 two letters country code whose convention will be used if the given number doesn't have the country code."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format a phone number. If the given number doesn't have the country code, the phone will be formatted to the default country's convention.", "history": "added in API level 21", "FullName": "public static String formatNumber (String phoneNumber, String defaultCountryIso)"}, "isStartsPostDial(char)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["char", "char no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This any anything to the right of this char is part of the post-dial string (eg this is PAUSE or WAIT)", "history": "Added in API level 1", "FullName": "public static final boolean isStartsPostDial (char c)"}, "formatNumber(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "A locally acceptable formatting of the input, or the raw input if formatting rules aren't known for the number"]], "Parameters": [["@B_java#lang#String_E@", "String: The phone number to format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead Breaks the given number down and formats it according to the rules for the country the number is from.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public static String formatNumber (String source)"}, "isDialable(char)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["char", "char no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "True if c is ISO-LATIN characters 0-9, *, # , +, WILD", "history": "Added in API level 1", "FullName": "public static final boolean isDialable (char c)"}, "convertKeypadLettersToDigits(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the input string, with alpha letters converted to numeric digits using the phone keypad letter mapping. For example, an input of \"1-800-GOOG-411\" will return \"1-800-4664-411\"."]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Translates any alphabetic letters (i.e. [A-Za-z]) in the specified phone number into the equivalent numeric digits, according to the phone keypad letter mapping described in ITU E.161 and ISO/IEC 9995-8.", "history": "Added in API level 1", "FullName": "public static String convertKeypadLettersToDigits (String input)"}, "numberToCalledPartyBCD(java.lang.String,int)": {"Returns": [["byte[]", "BCD byte array"]], "Parameters": [["@B_java#lang#String_E@", "String: dialing number string. If the dialing number starts with '+', set to international TOA"], ["int", "int: used to determine the extended bcd coding Value is @B_android#telephony#PhoneNumberUtils#BCD_EXTENDED_TYPE_EF_ADN_E@, or @B_android#telephony#PhoneNumberUtils#BCD_EXTENDED_TYPE_CALLED_PARTY_E@"]], "Throws": [], "SeeAlso": ["@B_android#telephony#PhoneNumberUtils_E@"], "Permissions": [], "Description": "Convert a dialing number to BCD byte array", "history": "Added in API level 28", "FullName": "public static byte[] numberToCalledPartyBCD (String number, int bcdExtType)"}, "formatJapaneseNumber(android.text.Editable)": {"Returns": [], "Parameters": [["@B_android#text#Editable_E@", "Editable: the number to be formatted, will be modified with the formatting"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead Formats a phone number in-place using the Japanese formatting rules. Numbers will be formatted as: 03-xxxx-xxxx 090-xxxx-xxxx 0120-xxx-xxx +81-3-xxxx-xxxx +81-90-xxxx-xxxx", "history": "Added in API level 3 Deprecated in API level 21", "FullName": "public static void formatJapaneseNumber (Editable text)"}, "is12Key(char)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["char", "char no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "True if c is ISO-LATIN characters 0-9, *, #", "history": "Added in API level 1", "FullName": "public static final boolean is12Key (char c)"}, "isEmergencyNumber(java.lang.String)": {"Returns": [["boolean", "true if the number is in the list of emergency numbers listed in the RIL / SIM, otherwise return false."]], "Parameters": [["@B_java#lang#String_E@", "String: the number to look up."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Please use @B_android#telephony#TelephonyManager#isEmergencyNumber_E@ instead. Checks a given number against the list of emergency numbers provided by the RIL and SIM card.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public static boolean isEmergencyNumber (String number)"}, "toaFromString(java.lang.String)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the TOA for the given dial string Basically, returns TOA_International if there's a + prefix", "history": "Added in API level 1", "FullName": "public static int toaFromString (String s)"}, "calledPartyBCDFragmentToString(byte[],int,int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["byte[]", "byte no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#telephony#PhoneNumberUtils#calledPartyBCDFragmentToString_E@ instead. Calling this method is equivalent to calling @B_android#telephony#PhoneNumberUtils#calledPartyBCDFragmentToString_E@ with @B_android#telephony#PhoneNumberUtils#BCD_EXTENDED_TYPE_EF_ADN_E@ as the extended type. Like calledPartyBCDToString, but field does not start with a TOA byte. For example: SIM ADN extension fields", "history": "Added in API level 1 Deprecated in API level 28", "FullName": "public static String calledPartyBCDFragmentToString (byte[] bytes, int offset, int length)"}, "extractNetworkPortion(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Extracts the network address portion and canonicalizes (filters out separators.) Network address portion is everything up to DTMF control digit separators (pause or wait), but without non-dialable characters. Please note that the GSM wild character is allowed in the result. This must be resolved before dialing. Returns null if phoneNumber == null", "history": "Added in API level 1", "FullName": "public static String extractNetworkPortion (String phoneNumber)"}, "addTtsSpan(android.text.Spannable, int, int)": {"Returns": [], "Parameters": [["@B_android#text#Spannable_E@", "Spannable: A Spannable to annotate."], ["int", "int: The starting character position of the phone number in s."], ["int", "int: The position after the ending character in the phone number s."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attach a @B_android#text#style#TtsSpan_E@ to the supplied Spannable at the indicated location, annotating that location as containing a phone number.", "history": "added in API level 23", "FullName": "public static void addTtsSpan (Spannable s, int start, int endExclusive)"}, "getNumberFromIntent(android.content.Intent,android.content.Context)": {"Returns": [["@B_java#lang#String_E@", "the phone number that would be called by the intent, or null if the number cannot be found."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: the intent to get the number of"], ["@B_android#content#Context_E@", "Context: a context to use for database access"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Extracts the phone number from an Intent.", "history": "Added in API level 1", "FullName": "public static String getNumberFromIntent (Intent intent, Context context)"}, "compare(android.content.Context,java.lang.String,java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compare phone numbers a and b, and return true if they're identical enough for caller ID purposes. Checks a resource to determine whether to use a strict or loose comparison algorithm.", "history": "Added in API level 5", "FullName": "public static boolean compare (Context context, String a, String b)"}, "isVoiceMailNumber(java.lang.String)": {"Returns": [["boolean", "true if the number is in the list of voicemail. False otherwise, including if the caller does not have the permission to read the VM number."]], "Parameters": [["@B_java#lang#String_E@", "String: the number to look up."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "isVoiceMailNumber: checks a given number against the voicemail number provided by the RIL and SIM card. The caller must have the READ_PHONE_STATE credential.", "history": "Added in API level 21", "FullName": "public static boolean isVoiceMailNumber (String number)"}, "calledPartyBCDFragmentToString(byte[], int, int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["byte[]", "byte no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#telephony#PhoneNumberUtils#calledPartyBCDFragmentToString_E@ instead. Calling this method is equivalent to calling @B_android#telephony#PhoneNumberUtils#calledPartyBCDFragmentToString_E@ with @B_android#telephony#PhoneNumberUtils#BCD_EXTENDED_TYPE_EF_ADN_E@ as the extended type. Like calledPartyBCDToString, but field does not start with a TOA byte. For example: SIM ADN extension fields", "history": "added in API level 1", "FullName": "public static String calledPartyBCDFragmentToString (byte[] bytes, int offset, int length)"}, "formatNumber(android.text.Editable, int)": {"Returns": [], "Parameters": [["@B_android#text#Editable_E@", "Editable: The number to be formatted, will be modified with the formatting"], ["int", "int: The default formatting rules to apply if the number does not begin with +[country_code]"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead Formats a phone number in-place. Currently @B_android#telephony#PhoneNumberUtils#FORMAT_JAPAN_E@ and @B_android#telephony#PhoneNumberUtils#FORMAT_NANP_E@ is supported as a second argument.", "history": "added in API level 1", "FullName": "public static void formatNumber (Editable text, int defaultFormattingType)"}, "getStrippedReversed(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the network portion reversed. This string is intended to go into an index column for a database lookup. Returns null if phoneNumber == null", "history": "Added in API level 1", "FullName": "public static String getStrippedReversed (String phoneNumber)"}, "networkPortionToCalledPartyBCDWithLength(java.lang.String)": {"Returns": [["byte[]", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Same as @B_android#telephony#PhoneNumberUtils#networkPortionToCalledPartyBCD_E@, but includes a one-byte length prefix.", "history": "Added in API level 1", "FullName": "public static byte[] networkPortionToCalledPartyBCDWithLength (String s)"}}, "Inheritance": [], "ClassName": "android.telephony.PhoneNumberUtils", "ClassDesc": "Various utilities for dealing with phone number strings."}