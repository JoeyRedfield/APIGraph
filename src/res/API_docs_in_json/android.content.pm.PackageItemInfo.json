{"Functions": {"loadLabel(android.content.pm.PackageManager)": {"Returns": [["@B_java#lang#CharSequence_E@", "Returns a CharSequence containing the item's label. If the item does not have a label, its name is returned. This value will never be null."]], "Parameters": [["@B_android#content#pm#PackageManager_E@", "PackageManager: A PackageManager from which the label can be loaded; usually the PackageManager from which you originally retrieved this item. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current textual label associated with this item. This will call back on the given PackageManager to load the label from the application.", "history": "Added in API level 1", "FullName": "public CharSequence loadLabel (PackageManager pm)"}, "loadLogo(android.content.pm.PackageManager)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns a Drawable containing the item's logo. If the item does not have a logo, this method will return null."]], "Parameters": [["@B_android#content#pm#PackageManager_E@", "PackageManager: A PackageManager from which the logo can be loaded; usually the PackageManager from which you originally retrieved this item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current graphical logo associated with this item. This will call back on the given PackageManager to load the logo from the application.", "history": "Added in API level 9", "FullName": "public Drawable loadLogo (PackageManager pm)"}, "loadBanner(android.content.pm.PackageManager)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns a Drawable containing the item's banner. If the item does not have a banner, this method will return null."]], "Parameters": [["@B_android#content#pm#PackageManager_E@", "PackageManager: A PackageManager from which the banner can be loaded; usually the PackageManager from which you originally retrieved this item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current graphical banner associated with this item. This will call back on the given PackageManager to load the banner from the application.", "history": "Added in API level 20", "FullName": "public Drawable loadBanner (PackageManager pm)"}, "dumpFront(android.util.Printer,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#util#Printer_E@", "Printer no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected void dumpFront (Printer pw, String prefix)"}, "dumpBack(android.util.Printer, java.lang.String)": {"Returns": [], "Parameters": [["@B_android#util#Printer_E@", "Printer no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "protected void dumpBack (Printer pw, String prefix)"}, "loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)": {"Returns": [["@B_android#content#res#XmlResourceParser_E@", "Returns an XmlPullParser you can use to parse the XML file assigned as the given meta-data. If the meta-data name is not defined or the XML resource could not be found, null is returned."]], "Parameters": [["@B_android#content#pm#PackageManager_E@", "PackageManager: A PackageManager from which the XML can be loaded; usually the PackageManager from which you originally retrieved this item."], ["@B_java#lang#String_E@", "String: Name of the meta-date you would like to load."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Load an XML resource attached to the meta-data of this item. This will retrieved the name meta-data entry, and if defined call back on the given PackageManager to load its XML file from the application.", "history": "Added in API level 1", "FullName": "public XmlResourceParser loadXmlMetaData (PackageManager pm, String name)"}, "PackageItemInfo()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public PackageItemInfo ()"}, "PackageItemInfo(android.os.Parcel)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected PackageItemInfo (Parcel source)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int parcelableFlags)"}, "loadIcon(android.content.pm.PackageManager)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns a Drawable containing the item's icon. If the item does not have an icon, the item's default icon is returned such as the default activity icon."]], "Parameters": [["@B_android#content#pm#PackageManager_E@", "PackageManager: A PackageManager from which the icon can be loaded; usually the PackageManager from which you originally retrieved this item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current graphical icon associated with this item. This will call back on the given PackageManager to load the icon from the application.", "history": "Added in API level 1", "FullName": "public Drawable loadIcon (PackageManager pm)"}, "PackageItemInfo(android.content.pm.PackageItemInfo)": {"Returns": [], "Parameters": [["@B_android#content#pm#PackageItemInfo_E@", "PackageItemInfo no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public PackageItemInfo (PackageItemInfo orig)"}, "dumpBack(android.util.Printer,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#util#Printer_E@", "Printer no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected void dumpBack (Printer pw, String prefix)"}, "loadUnbadgedIcon(android.content.pm.PackageManager)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns a Drawable containing the item's icon. If the item does not have an icon, the item's default icon is returned such as the default activity icon."]], "Parameters": [["@B_android#content#pm#PackageManager_E@", "PackageManager: A PackageManager from which the icon can be loaded; usually the PackageManager from which you originally retrieved this item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current graphical icon associated with this item without the addition of a work badge if applicable. This will call back on the given PackageManager to load the icon from the application.", "history": "Added in API level 22", "FullName": "public Drawable loadUnbadgedIcon (PackageManager pm)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int parcelableFlags)"}, "dumpFront(android.util.Printer, java.lang.String)": {"Returns": [], "Parameters": [["@B_android#util#Printer_E@", "Printer no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "protected void dumpFront (Printer pw, String prefix)"}}, "Inheritance": [], "ClassName": "android.content.pm.PackageItemInfo", "ClassDesc": "Base class containing information common to all package items held by the package manager. This provides a very common basic set of attributes: a label, icon, and meta-data. This class is not intended to be used by itself; it is simply here to share common definitions between all items returned by the package manager. As such, it does not itself implement Parcelable, but does provide convenience methods to assist in the implementation of Parcelable in subclasses."}