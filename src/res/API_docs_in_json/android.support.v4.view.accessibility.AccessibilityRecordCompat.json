{"Functions": {"getItemCount()": {"Returns": [["int", "The number of items."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#getItemCount_E@ directly. Gets the number of items that can be visited.", "history": "added in version 22.0.0", "FullName": "int getItemCount ()"}, "setBeforeText(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text before the change."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setBeforeText_E@ directly. Sets the text before a change.", "history": "added in version 22.0.0", "FullName": "void setBeforeText (CharSequence beforeText)"}, "getFromIndex()": {"Returns": [["int", "The index of the first character or selection start or the first visible item."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#getFromIndex_E@ directly. Gets the index of the first character of the changed sequence, or the beginning of a text selection or the index of the first visible item when scrolling.", "history": "added in version 22.0.0", "FullName": "int getFromIndex ()"}, "getClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "The class name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#getClassName_E@ directly. Gets the class name of the source.", "history": "added in version 22.0.0", "FullName": "CharSequence getClassName ()"}, "setParcelableData(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The parcelable data."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setParcelableData_E@ directly. Sets the @B_android#os#Parcelable_E@ data of the event.", "history": "added in version 22.0.0", "FullName": "void setParcelableData (Parcelable parcelableData)"}, "setAddedCount(int)": {"Returns": [], "Parameters": [["int", "int: The number of added characters."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setAddedCount_E@ directly. Sets the number of added characters.", "history": "added in version 22.0.0", "FullName": "void setAddedCount (int addedCount)"}, "setScrollable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the source is scrollable, false otherwise."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setScrollable_E@ directly. Sets if the source is scrollable.", "history": "added in version 22.0.0", "FullName": "void setScrollable (boolean scrollable)"}, "setSource(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The source."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setSource_E@ directly. Sets the event source.", "history": "added in version 22.0.0", "FullName": "void setSource (View source)"}, "isFullScreen()": {"Returns": [["boolean", "True if the source is full screen, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#isFullScreen_E@ directly. Gets if the source is taking the entire screen.", "history": "added in version 22.0.0", "FullName": "boolean isFullScreen ()"}, "setRemovedCount(int)": {"Returns": [], "Parameters": [["int", "int: The number of removed characters."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setRemovedCount_E@ directly. Sets the number of removed characters.", "history": "added in version 22.0.0", "FullName": "void setRemovedCount (int removedCount)"}, "setContentDescription(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The description."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setContentDescription_E@ directly. Sets the description of the source.", "history": "added in version 22.0.0", "FullName": "void setContentDescription (CharSequence contentDescription)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord_E@ directly. Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "", "FullName": "boolean equals (Object obj)"}, "getBeforeText()": {"Returns": [["@B_java#lang#CharSequence_E@", "The text before the change."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#getBeforeText_E@ directly. Sets the text before a change.", "history": "added in version 22.0.0", "FullName": "CharSequence getBeforeText ()"}, "AccessibilityRecordCompat(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is not type safe. If you want to modify an @B_android#view#accessibility#AccessibilityEvent_E@'s properties defined in @B_android#view#accessibility#AccessibilityRecord_E@ use @B_android#support#v4#view#accessibility#AccessibilityEventCompat#asRecord_E@. This method will be removed in a subsequent release of the support library.", "history": "added in version 22.0.0", "FullName": "AccessibilityRecordCompat (Object record)"}, "setChecked(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the view is checked, false otherwise."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setChecked_E@ directly. Sets if the source is checked.", "history": "added in version 22.0.0", "FullName": "void setChecked (boolean isChecked)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_java#lang#Object#hashCode_E@ directly. Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "", "FullName": "int hashCode ()"}, "setEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the view is enabled, false otherwise."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#isEnabled_E@ directly. Sets if the source is enabled.", "history": "added in version 22.0.0", "FullName": "void setEnabled (boolean isEnabled)"}, "setMaxScrollX(int)": {"Returns": [], "Parameters": [["int", "int: The max scroll."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v4#view#accessibility#AccessibilityRecordCompat#setMaxScrollX_E@ instead. Sets the max scroll offset of the source left edge in pixels.", "history": "added in version 22.0.0", "FullName": "void setMaxScrollX (int maxScrollX)"}, "setScrollX(int)": {"Returns": [], "Parameters": [["int", "int: The scroll."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setScrollX_E@ directly. Sets the scroll offset of the source left edge in pixels.", "history": "added in version 22.0.0", "FullName": "void setScrollX (int scrollX)"}, "isScrollable()": {"Returns": [["boolean", "True if the source is scrollable, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#isScrollable_E@ directly. Gets if the source is scrollable.", "history": "added in version 22.0.0", "FullName": "boolean isScrollable ()"}, "getCurrentItemIndex()": {"Returns": [["int", "The current item index."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#getCurrentItemIndex_E@ directly. Gets the index of the source in the list of items the can be visited.", "history": "added in version 22.0.0", "FullName": "int getCurrentItemIndex ()"}, "setPassword(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the view is a password field, false otherwise."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setPassword_E@ directly. Sets if the source is a password field.", "history": "added in version 22.0.0", "FullName": "void setPassword (boolean isPassword)"}, "setSource(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v4#view#accessibility#AccessibilityRecordCompat#setSource_E@ instead. Sets the source to be a virtual descendant of the given root. If virtualDescendantId equals to @B_android#view#View#NO_ID_E@ the root is set as the source. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure.", "history": "added in version 22.0.0", "FullName": "void setSource (View root, int virtualDescendantId)"}, "setScrollY(int)": {"Returns": [], "Parameters": [["int", "int: The scroll."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setScrollY_E@ directly. Sets the scroll offset of the source top edge in pixels.", "history": "added in version 22.0.0", "FullName": "void setScrollY (int scrollY)"}, "getScrollY()": {"Returns": [["int", "The scroll."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#getScrollY_E@ directly. Gets the scroll offset of the source top edge in pixels.", "history": "added in version 22.0.0", "FullName": "int getScrollY ()"}, "getImpl()": {"Returns": [["@B_java#lang#Object_E@", "The wrapped implementation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will be removed in a subsequent release of the support library.", "history": "added in version 22.0.0", "FullName": "Object getImpl ()"}, "setToIndex(int)": {"Returns": [], "Parameters": [["int", "int: The index of selection end or last item index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setToIndex_E@ directly. Sets the index of text selection end or the index of the last visible item when scrolling.", "history": "added in version 22.0.0", "FullName": "void setToIndex (int toIndex)"}, "isPassword()": {"Returns": [["boolean", "True if the view is a password field, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#isPassword_E@ directly. Gets if the source is a password field.", "history": "added in version 22.0.0", "FullName": "boolean isPassword ()"}, "getRemovedCount()": {"Returns": [["int", "The number of removed characters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#getRemovedCount_E@ directly. Gets the number of removed characters.", "history": "added in version 22.0.0", "FullName": "int getRemovedCount ()"}, "setCurrentItemIndex(int)": {"Returns": [], "Parameters": [["int", "int: The current item index."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setCurrentItemIndex_E@ directly. Sets the index of the source in the list of items that can be visited.", "history": "added in version 22.0.0", "FullName": "void setCurrentItemIndex (int currentItemIndex)"}, "recycle()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the record is already recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#recycle_E@ directly. Return an instance back to be reused.", "history": "added in version 22.0.0", "FullName": "void recycle ()"}, "getSource()": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat_E@", "The info of the source."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#getSource_E@ directly. Gets the @B_android#view#accessibility#AccessibilityNodeInfo_E@ of the event source. @B_android#view#accessibility#AccessibilityNodeInfo#recycle_E@ to avoid creating of multiple instances.", "history": "added in version 22.0.0", "FullName": "AccessibilityNodeInfoCompat getSource ()"}, "isChecked()": {"Returns": [["boolean", "True if the view is checked, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#isChecked_E@ directly. Gets if the source is checked.", "history": "added in version 22.0.0", "FullName": "boolean isChecked ()"}, "getScrollX()": {"Returns": [["int", "The scroll."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#getScrollX_E@ directly. Gets the scroll offset of the source left edge in pixels.", "history": "added in version 22.0.0", "FullName": "int getScrollX ()"}, "setFullScreen(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the source is full screen, false otherwise."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setFullScreen_E@ directly. Sets if the source is taking the entire screen.", "history": "added in version 22.0.0", "FullName": "void setFullScreen (boolean isFullScreen)"}, "setItemCount(int)": {"Returns": [], "Parameters": [["int", "int: The number of items."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setItemCount_E@ directly. Sets the number of items that can be visited.", "history": "added in version 22.0.0", "FullName": "void setItemCount (int itemCount)"}, "setMaxScrollY(int)": {"Returns": [], "Parameters": [["int", "int: The max scroll."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v4#view#accessibility#AccessibilityRecordCompat#setMaxScrollY_E@ instead. Sets the max scroll offset of the source top edge in pixels.", "history": "added in version 22.0.0", "FullName": "void setMaxScrollY (int maxScrollY)"}, "getContentDescription()": {"Returns": [["@B_java#lang#CharSequence_E@", "The description."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#getContentDescription_E@ directly. Gets the description of the source.", "history": "added in version 22.0.0", "FullName": "CharSequence getContentDescription ()"}, "getMaxScrollX()": {"Returns": [["int", "The max scroll."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v4#view#accessibility#AccessibilityRecordCompat#getMaxScrollX_E@ instead. Gets the max scroll offset of the source left edge in pixels.", "history": "added in version 22.0.0", "FullName": "int getMaxScrollX ()"}, "isEnabled()": {"Returns": [["boolean", "True if the view is enabled, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#isEnabled_E@ directly. Gets if the source is enabled.", "history": "added in version 22.0.0", "FullName": "boolean isEnabled ()"}, "setFromIndex(int)": {"Returns": [], "Parameters": [["int", "int: The index of the first character or selection start or the first visible item."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setFromIndex_E@ directly. Sets the index of the first character of the changed sequence or the beginning of a text selection or the index of the first visible item when scrolling.", "history": "added in version 22.0.0", "FullName": "void setFromIndex (int fromIndex)"}, "getText()": {"Returns": [["@B_java#util#List_E@", "The text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#getText_E@ directly. Gets the text of the event. The index in the list represents the priority of the text. Specifically, the lower the index the higher the priority.", "history": "added in version 22.0.0", "FullName": "List<CharSequence> getText ()"}, "getAddedCount()": {"Returns": [["int", "The number of added characters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#getAddedCount_E@ directly. Gets the number of added characters.", "history": "added in version 22.0.0", "FullName": "int getAddedCount ()"}, "getMaxScrollY()": {"Returns": [["int", "The max scroll."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v4#view#accessibility#AccessibilityRecordCompat#getMaxScrollY_E@ instead. Gets the max scroll offset of the source top edge in pixels.", "history": "added in version 22.0.0", "FullName": "int getMaxScrollY ()"}, "getWindowId()": {"Returns": [["int", "The window id."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#getWindowId_E@ directly. Gets the id of the window from which the event comes from.", "history": "added in version 22.0.0", "FullName": "int getWindowId ()"}, "getParcelableData()": {"Returns": [["@B_android#os#Parcelable_E@", "The parcelable data."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#getParcelableData_E@ directly. Gets the @B_android#os#Parcelable_E@ data.", "history": "added in version 22.0.0", "FullName": "Parcelable getParcelableData ()"}, "obtain()": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityRecordCompat_E@", "An instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#obtain_E@ directly. Returns a cached instance if such is available or a new one is instantiated.", "history": "added in version 22.0.0", "FullName": "AccessibilityRecordCompat obtain ()"}, "getToIndex()": {"Returns": [["int", "The index of selection end or last item index."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#getToIndex_E@ directly. Gets the index of text selection end or the index of the last visible item when scrolling.", "history": "added in version 22.0.0", "FullName": "int getToIndex ()"}, "setClassName(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The lass name."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityRecord#setClassName_E@ directly. Sets the class name of the source.", "history": "added in version 22.0.0", "FullName": "void setClassName (CharSequence className)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v4.view.accessibility.AccessibilityRecordCompat", "ClassDesc": "Helper for accessing https:##developer#android#com@B_android#view#accessibility#AccessibilityRecord_E@."}