{"Functions": {"setContentWidth(int)": {"Returns": [], "Parameters": [["int", "int: Desired width of content in pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the width of the popup window by the size of its content. The final width may be larger to accommodate styled window dressing.", "history": "Added in API level 11", "FullName": "public void setContentWidth (int width)"}, "getHorizontalOffset()": {"Returns": [["int", "The horizontal offset of the popup from its anchor in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public int getHorizontalOffset ()"}, "getPromptPosition()": {"Returns": [["int", "Where the optional prompt view should appear."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ListPopupWindow_E@"], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public int getPromptPosition ()"}, "postShow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Post a @B_android#widget#ListPopupWindow#show_E@ call to the UI thread.", "history": "Added in API level 11", "FullName": "public void postShow ()"}, "onKeyPreIme(int, android.view.KeyEvent)": {"Returns": [["boolean", "true if the event was handled, false if it was ignored."]], "Parameters": [["int", "int: keyCode param passed to the host view's onKeyPreIme"], ["@B_android#view#KeyEvent_E@", "KeyEvent: event param passed to the host view's onKeyPreImeThis value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ListPopupWindow#setModal_E@"], "Permissions": [], "Description": "Filter pre-IME key events. By forwarding @B_android#view#View#onKeyPreIme_E@ events to this function, views using ListPopupWindow can have it dismiss the popup when the back key is pressed.", "history": "added in API level 11", "FullName": "public boolean onKeyPreIme (int keyCode, KeyEvent event)"}, "setModal(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the popup window should be modal, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this window should be modal when shown. If a popup window is modal, it will receive all touch and key input. If the user touches outside the popup window's content area the popup window will be dismissed.", "history": "Added in API level 11", "FullName": "public void setModal (boolean modal)"}, "ListPopupWindow(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: Context used for contained views. This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: Attributes from inflating parent views used to style the popup. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new, empty popup window capable of displaying items from a ListAdapter. Backgrounds should be set using @B_android#widget#ListPopupWindow#setBackgroundDrawable_E@.", "history": "Added in API level 11", "FullName": "public ListPopupWindow (Context context, AttributeSet attrs)"}, "setEpicenterBounds(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: anchor-relative bounds, or null to use default epicenter This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ListPopupWindow#getEpicenterBounds_E@"], "Permissions": [], "Description": "Specifies the anchor-relative bounds of the popup's transition epicenter.", "history": "Added in API level 29", "FullName": "public void setEpicenterBounds (Rect bounds)"}, "setAnchorView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view to use as an anchor. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the popup's anchor view. This popup will always be positioned relative to the anchor view when shown.", "history": "Added in API level 11", "FullName": "public void setAnchorView (View anchor)"}, "setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)": {"Returns": [], "Parameters": [["@B_android#widget#AdapterView#OnItemClickListener_E@", "AdapterView.OnItemClickListener: Listener to register This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterView#setOnItemClickListener_E@"], "Permissions": [], "Description": "Sets a listener to receive events when a list item is clicked.", "history": "Added in API level 11", "FullName": "public void setOnItemClickListener (AdapterView.OnItemClickListener clickListener)"}, "getAnchorView()": {"Returns": [["@B_android#view#View_E@", "The popup's anchor view This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the view that will be used to anchor this popup.", "history": "Added in API level 11", "FullName": "public View getAnchorView ()"}, "getSelectedItemPosition()": {"Returns": [["int", "The position of the currently selected item or @B_android#widget#AdapterView#INVALID_POSITION_E@ if @B_android#widget#ListPopupWindow#isShowing_E@ == false."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterView#getSelectedItemPosition_E@"], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public int getSelectedItemPosition ()"}, "getAnimationStyle()": {"Returns": [["int", "Animation style that will be used."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the animation style that will be used when the popup window is shown or dismissed.", "history": "Added in API level 11", "FullName": "public int getAnimationStyle ()"}, "clearListSelection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear any current list selection. Only valid when @B_android#widget#ListPopupWindow#isShowing_E@ == true.", "history": "Added in API level 11", "FullName": "public void clearListSelection ()"}, "getInputMethodMode()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ListPopupWindow#setInputMethodMode_E@"], "Permissions": [], "Description": "Return the current value in @B_android#widget#ListPopupWindow#setInputMethodMode_E@.", "history": "Added in API level 11", "FullName": "public int getInputMethodMode ()"}, "isInputMethodNotNeeded()": {"Returns": [["boolean", "true if this popup is configured to assume the user does not need to interact with the IME while it is showing, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public boolean isInputMethodNotNeeded ()"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "true if the event was handled, false if it was ignored."]], "Parameters": [["int", "int: keyCode param passed to the host view's onKeyDown"], ["@B_android#view#KeyEvent_E@", "KeyEvent: event param passed to the host view's onKeyDown This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ListPopupWindow#setModal_E@", "@B_android#widget#ListPopupWindow#onKeyUp_E@"], "Permissions": [], "Description": "Filter key down events. By forwarding key down events to this function, views using non-modal ListPopupWindow can have it handle key selection of items.", "history": "Added in API level 11", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "ListPopupWindow(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: Context used for contained views. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new, empty popup window capable of displaying items from a ListAdapter. Backgrounds should be set using @B_android#widget#ListPopupWindow#setBackgroundDrawable_E@.", "history": "Added in API level 11", "FullName": "public ListPopupWindow (Context context)"}, "getBackground()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The background drawable for the popup window. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public Drawable getBackground ()"}, "setWindowLayoutType(int)": {"Returns": [], "Parameters": [["int", "int: Layout type for this window."]], "Throws": [], "SeeAlso": ["@B_android#view#WindowManager#LayoutParams#type_E@"], "Permissions": [], "Description": "Set the layout type for this popup window. See @B_android#view#WindowManager#LayoutParams#type_E@ for possible values.", "history": "Added in API level 23", "FullName": "public void setWindowLayoutType (int layoutType)"}, "setVerticalOffset(int)": {"Returns": [], "Parameters": [["int", "int: The vertical offset of the popup from its anchor."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the vertical offset of this popup from its anchor view in pixels.", "history": "Added in API level 11", "FullName": "public void setVerticalOffset (int offset)"}, "setBackgroundDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: A drawable to set as the background. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a drawable to be the background for the popup window.", "history": "Added in API level 11", "FullName": "public void setBackgroundDrawable (Drawable d)"}, "createDragToOpenListener(android.view.View)": {"Returns": [["@B_android#view#View#OnTouchListener_E@", "a touch listener that controls drag-to-open behavior"]], "Parameters": [["@B_android#view#View_E@", "View: the view on which the resulting listener will be set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an @B_android#view#View#OnTouchListener_E@ that can be added to the source view to implement drag-to-open behavior. Generally, the source view should be the same view that was passed to @B_android#widget#ListPopupWindow#setAnchorView_E@. When the listener is set on a view, touching that view and dragging outside of its bounds will open the popup window. Lifting will select the currently touched list item. Example usage:", "history": "Added in API level 19", "FullName": "public View.OnTouchListener createDragToOpenListener (View src)"}, "onKeyPreIme(int,android.view.KeyEvent)": {"Returns": [["boolean", "true if the event was handled, false if it was ignored."]], "Parameters": [["int", "int: keyCode param passed to the host view's onKeyPreIme"], ["@B_android#view#KeyEvent_E@", "KeyEvent: event param passed to the host view's onKeyPreIme This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ListPopupWindow#setModal_E@"], "Permissions": [], "Description": "Filter pre-IME key events. By forwarding @B_android#view#View#onKeyPreIme_E@ events to this function, views using ListPopupWindow can have it dismiss the popup when the back key is pressed.", "history": "Added in API level 11", "FullName": "public boolean onKeyPreIme (int keyCode, KeyEvent event)"}, "getSoftInputMode()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ListPopupWindow#setSoftInputMode_E@", "@B_android#view#WindowManager#LayoutParams#softInputMode_E@"], "Permissions": [], "Description": "Returns the current value in @B_android#widget#ListPopupWindow#setSoftInputMode_E@.", "history": "Added in API level 11", "FullName": "public int getSoftInputMode ()"}, "getHeight()": {"Returns": [["int", "The height of the popup window in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public int getHeight ()"}, "setDropDownGravity(int)": {"Returns": [], "Parameters": [["int", "int: Gravity value to use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the gravity of the dropdown list. This is commonly used to set gravity to START or END for alignment with the anchor.", "history": "Added in API level 19", "FullName": "public void setDropDownGravity (int gravity)"}, "getWidth()": {"Returns": [["int", "The width of the popup window in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public int getWidth ()"}, "setPromptView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: View to use as an informational prompt. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a view to act as a user prompt for this popup window. Where the prompt view will appear is controlled by @B_android#widget#ListPopupWindow#setPromptPosition_E@.", "history": "Added in API level 11", "FullName": "public void setPromptView (View prompt)"}, "getSelectedView()": {"Returns": [["@B_android#view#View_E@", "The View for the currently selected item or null if @B_android#widget#ListPopupWindow#isShowing_E@ == false."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#getSelectedView_E@"], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public View getSelectedView ()"}, "setAdapter(android.widget.ListAdapter)": {"Returns": [], "Parameters": [["@B_android#widget#ListAdapter_E@", "ListAdapter: The adapter to use to create this window's content. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the adapter that provides the data and the views to represent the data in this popup window.", "history": "Added in API level 11", "FullName": "public void setAdapter (ListAdapter adapter)"}, "show()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Show the popup list. If the list is already showing, this method will recalculate the popup's size and position.", "history": "Added in API level 11", "FullName": "public void show ()"}, "setAnimationStyle(int)": {"Returns": [], "Parameters": [["int", "int: Animation style to use."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set an animation style to use when the popup window is shown or dismissed.", "history": "Added in API level 11", "FullName": "public void setAnimationStyle (int animationStyle)"}, "setHeight(int)": {"Returns": [], "Parameters": [["int", "int: Height of the popup window must be a positive value, @B_android#widget#ListPopupWindow#MATCH_PARENT_E@, or @B_android#widget#ListPopupWindow#WRAP_CONTENT_E@."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if height is set to negative value"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the height of the popup window in pixels. Can also be @B_android#widget#ListPopupWindow#MATCH_PARENT_E@.", "history": "Added in API level 11", "FullName": "public void setHeight (int height)"}, "setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)": {"Returns": [], "Parameters": [["@B_android#widget#AdapterView#OnItemSelectedListener_E@", "AdapterView.OnItemSelectedListener: Listener to register. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterView#setOnItemSelectedListener_E@"], "Permissions": [], "Description": "Sets a listener to receive events when a list item is selected.", "history": "Added in API level 11", "FullName": "public void setOnItemSelectedListener (AdapterView.OnItemSelectedListener selectedListener)"}, "dismiss()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dismiss the popup window.", "history": "Added in API level 11", "FullName": "public void dismiss ()"}, "getListView()": {"Returns": [["@B_android#widget#ListView_E@", "The @B_android#widget#ListView_E@ displayed within the popup window. Only valid when @B_android#widget#ListPopupWindow#isShowing_E@ == true. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public ListView getListView ()"}, "setInputMethodMode(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#ListPopupWindow#getInputMethodMode_E@", "@B_android#widget#ListPopupWindow#show_E@"], "Permissions": [], "Description": "Control how the popup operates with an input method: one of @B_android#widget#ListPopupWindow#INPUT_METHOD_FROM_FOCUSABLE_E@, @B_android#widget#ListPopupWindow#INPUT_METHOD_NEEDED_E@, or @B_android#widget#ListPopupWindow#INPUT_METHOD_NOT_NEEDED_E@. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to the @B_android#widget#ListPopupWindow#show_E@ method.", "history": "Added in API level 11", "FullName": "public void setInputMethodMode (int mode)"}, "getSelectedItemId()": {"Returns": [["long", "The ID of the currently selected item or @B_android#widget#AdapterView#INVALID_ROW_ID_E@ if @B_android#widget#ListPopupWindow#isShowing_E@ == false."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterView#getSelectedItemId_E@"], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public long getSelectedItemId ()"}, "ListPopupWindow(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: Context used for contained views. This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: Attributes from inflating parent views used to style the popup. This value may be null."], ["int", "int: Style attribute to read for default styling of popup content."], ["int", "int: Style resource ID to use for default styling of popup content."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new, empty popup window capable of displaying items from a ListAdapter. Backgrounds should be set using @B_android#widget#ListPopupWindow#setBackgroundDrawable_E@.", "history": "Added in API level 11", "FullName": "public ListPopupWindow (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "isShowing()": {"Returns": [["boolean", "true if the popup is currently showing, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public boolean isShowing ()"}, "ListPopupWindow(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: Context used for contained views. This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: Attributes from inflating parent views used to style the popup. This value may be null."], ["int", "int: Default style attribute to use for popup content."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new, empty popup window capable of displaying items from a ListAdapter. Backgrounds should be set using @B_android#widget#ListPopupWindow#setBackgroundDrawable_E@.", "history": "Added in API level 11", "FullName": "public ListPopupWindow (Context context, AttributeSet attrs, int defStyleAttr)"}, "performItemClick(int)": {"Returns": [["boolean", "true if the click action could be performed, false if not. (e.g. if the popup was not showing, this method would return false.)"]], "Parameters": [["int", "int: Adapter position for performing the click"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform an item click operation on the specified list adapter position.", "history": "Added in API level 11", "FullName": "public boolean performItemClick (int position)"}, "setHorizontalOffset(int)": {"Returns": [], "Parameters": [["int", "int: The horizontal offset of the popup from its anchor."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the horizontal offset of this popup from its anchor view in pixels.", "history": "Added in API level 11", "FullName": "public void setHorizontalOffset (int offset)"}, "getSelectedItem()": {"Returns": [["@B_java#lang#Object_E@", "The currently selected item or null if the popup is not showing."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public Object getSelectedItem ()"}, "onKeyUp(int, android.view.KeyEvent)": {"Returns": [["boolean", "true if the event was handled, false if it was ignored."]], "Parameters": [["int", "int: keyCode param passed to the host view's onKeyUp"], ["@B_android#view#KeyEvent_E@", "KeyEvent: event param passed to the host view's onKeyUpThis value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ListPopupWindow#setModal_E@", "@B_android#widget#ListPopupWindow#onKeyDown_E@"], "Permissions": [], "Description": "Filter key up events. By forwarding key up events to this function, views using non-modal ListPopupWindow can have it handle key selection of items.", "history": "added in API level 11", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "setPromptPosition(int)": {"Returns": [], "Parameters": [["int", "int: A position constant declaring where the prompt should be displayed."]], "Throws": [], "SeeAlso": ["@B_android#widget#ListPopupWindow_E@"], "Permissions": [], "Description": "Set where the optional prompt view should appear. The default is @B_android#widget#ListPopupWindow#POSITION_PROMPT_ABOVE_E@.", "history": "Added in API level 11", "FullName": "public void setPromptPosition (int position)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "true if the event was handled, false if it was ignored."]], "Parameters": [["int", "int: keyCode param passed to the host view's onKeyDown"], ["@B_android#view#KeyEvent_E@", "KeyEvent: event param passed to the host view's onKeyDownThis value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ListPopupWindow#setModal_E@", "@B_android#widget#ListPopupWindow#onKeyUp_E@"], "Permissions": [], "Description": "Filter key down events. By forwarding key down events to this function, views using non-modal ListPopupWindow can have it handle key selection of items.", "history": "added in API level 11", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "isModal()": {"Returns": [["boolean", "true if the popup window will be modal, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the popup window will be modal when shown.", "history": "Added in API level 11", "FullName": "public boolean isModal ()"}, "setOnDismissListener(android.widget.PopupWindow.OnDismissListener)": {"Returns": [], "Parameters": [["@B_android#widget#PopupWindow#OnDismissListener_E@", "PopupWindow.OnDismissListener: Listener that will be notified when the popup is dismissed. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a listener to receive a callback when the popup is dismissed.", "history": "Added in API level 11", "FullName": "public void setOnDismissListener (PopupWindow.OnDismissListener listener)"}, "setWidth(int)": {"Returns": [], "Parameters": [["int", "int: Width of the popup window."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the width of the popup window in pixels. Can also be @B_android#widget#ListPopupWindow#MATCH_PARENT_E@ or @B_android#widget#ListPopupWindow#WRAP_CONTENT_E@.", "history": "Added in API level 11", "FullName": "public void setWidth (int width)"}, "onKeyUp(int,android.view.KeyEvent)": {"Returns": [["boolean", "true if the event was handled, false if it was ignored."]], "Parameters": [["int", "int: keyCode param passed to the host view's onKeyUp"], ["@B_android#view#KeyEvent_E@", "KeyEvent: event param passed to the host view's onKeyUp This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ListPopupWindow#setModal_E@", "@B_android#widget#ListPopupWindow#onKeyDown_E@"], "Permissions": [], "Description": "Filter key up events. By forwarding key up events to this function, views using non-modal ListPopupWindow can have it handle key selection of items.", "history": "Added in API level 11", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "setSelection(int)": {"Returns": [], "Parameters": [["int", "int: List position to set as selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the selected position of the list. Only valid when @B_android#widget#ListPopupWindow#isShowing_E@ == true.", "history": "Added in API level 11", "FullName": "public void setSelection (int position)"}, "getVerticalOffset()": {"Returns": [["int", "The vertical offset of the popup from its anchor in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public int getVerticalOffset ()"}, "getEpicenterBounds()": {"Returns": [["@B_android#graphics#Rect_E@", "bounds relative to anchor view, or null if not set"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ListPopupWindow#setEpicenterBounds_E@"], "Permissions": [], "Description": "Returns bounds which are used as a popup's epicenter of the enter and exit transitions.", "history": "Added in API level 29", "FullName": "public Rect getEpicenterBounds ()"}, "setListSelector(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: List selector drawable to use in the popup."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a drawable to use as the list item selector.", "history": "Added in API level 11", "FullName": "public void setListSelector (Drawable selector)"}, "setSoftInputMode(int)": {"Returns": [], "Parameters": [["int", "int: The desired mode, see @B_android#view#WindowManager#LayoutParams#softInputMode_E@ for the full list"]], "Throws": [], "SeeAlso": ["@B_android#view#WindowManager#LayoutParams#softInputMode_E@", "@B_android#widget#ListPopupWindow#getSoftInputMode_E@"], "Permissions": [], "Description": "Sets the operating mode for the soft input area.", "history": "Added in API level 11", "FullName": "public void setSoftInputMode (int mode)"}}, "Inheritance": [], "ClassName": "android.widget.ListPopupWindow", "ClassDesc": "A ListPopupWindow anchors itself to a host view and displays a list of choices. ListPopupWindow contains a number of tricky behaviors surrounding positioning, scrolling parents to fit the dropdown, interacting sanely with the IME if present, and others."}