{"Functions": {"insert(android.net.Uri,android.content.ContentValues)": {"Returns": [["@B_android#net#Uri_E@", "The URI for the newly inserted item."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The content:// URI of the insertion request. This must not be null. This value must never be null."], ["@B_android#content#ContentValues_E@", "ContentValues: A set of column_name/value pairs to add to the database. This must not be null. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to handle requests to insert a new row. As a courtesy, call @B_android#content#ContentResolver#notifyChange_E@ after inserting. This method can be called from multiple threads, as described in", "history": "Added in API level 28", "FullName": "public final Uri insert (Uri uri, ContentValues values)"}, "onBindSlice(android.net.Uri,java.util.Set<android.app.slice.SliceSpec>)": {"Returns": [["@B_android#app#slice#Slice_E@", "no returns description in source"]], "Parameters": [["@B_android#net#Uri_E@", "Uri: Uri to bind."], ["@B_java#util#Set_E@", "Set: List of supported specs."]], "Throws": [], "SeeAlso": ["@B_android#app#slice#Slice_E@"], "Permissions": [], "Description": "Implemented to create a slice. onBindSlice should return as quickly as possible so that the UI tied to this slice can be responsive. No network or other IO will be allowed during onBindSlice. Any loading that needs to be done should happen in the background with a call to @B_android#content#ContentResolver#notifyChange_E@ when the app is ready to provide the complete data in onBindSlice. The slice returned should have a spec that is compatible with one of the supported specs.", "history": "Added in API level 28", "FullName": "public Slice onBindSlice (Uri sliceUri, Set<SliceSpec> supportedSpecs)"}, "getType(android.net.Uri)": {"Returns": [["@B_java#lang#String_E@", "a MIME type string, or null if there is no type."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: the URI to query. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to handle requests for the MIME type of the data at the given URI. The returned MIME type should start with vnd.android.cursor.item for a single record, or vnd.android.cursor.dir/ for multiple items. This method can be called from multiple threads, as described in Note that there are no permissions needed for an application to access this information; if your content provider requires read and/or write permissions, or is not exported, all applications can still call this method regardless of their access permissions. This allows them to retrieve the MIME type for a URI when dispatching intents.", "history": "Added in API level 28", "FullName": "public final String getType (Uri uri)"}, "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)": {"Returns": [["@B_android#database#Cursor_E@", "a Cursor or null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI to query. This will be the full URI sent by the client; if the client is requesting a specific record, the URI will end in a record number that the implementation should parse and add to a WHERE or HAVING clause, specifying that _id value. This value must never be null."], ["@B_java#lang#String_E@", "String: The list of columns to put into the cursor. If null all columns are included. This value may be null."], ["@B_java#lang#String_E@", "String: A selection criteria to apply when filtering rows. If null then all rows are included. This value may be null."], ["@B_java#lang#String_E@", "String: You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings. This value may be null."], ["@B_java#lang#String_E@", "String: How the rows in the cursor should be sorted. If null then the provider is free to define the sort order. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to handle query requests from clients. Apps targeting @B_android#os#Build#VERSION_CODES#O_E@ or higher should override @B_android#content#ContentProvider#query_E@ and provide a stub implementation of this method. This method can be called from multiple threads, as described in Example client call:", "history": "Added in API level 28", "FullName": "public final Cursor query (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)"}, "onCreatePermissionRequest(android.net.Uri)": {"Returns": [["@B_android#app#PendingIntent_E@", "This value will never be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: the Uri of the slice attempting to be bound."]], "Throws": [], "SeeAlso": ["@B_android#content#ContentProvider#getCallingPackage_E@"], "Permissions": [], "Description": "Called when an app requests a slice it does not have write permission to the uri for. The return value will be the action on a slice that prompts the user that the calling app wants to show slices from this app. The default implementation launches a dialog that allows the user to grant access to this slice. Apps that do not want to allow this user grant, can override this and instead launch their own dialog with different behavior.", "history": "Added in API level 28", "FullName": "public PendingIntent onCreatePermissionRequest (Uri sliceUri)"}, "SliceProvider()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public SliceProvider ()"}, "delete(android.net.Uri,java.lang.String,java.lang.String[])": {"Returns": [["int", "The number of rows affected."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The full URI to query, including a row ID (if a specific record is requested). This value must never be null."], ["@B_java#lang#String_E@", "String: An optional restriction to apply to rows when deleting. This value may be null."], ["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to handle requests to delete one or more rows. The implementation should apply the selection clause when performing deletion, allowing the operation to affect multiple rows in a directory. As a courtesy, call @B_android#content#ContentResolver#notifyChange_E@ after deleting. This method can be called from multiple threads, as described in The implementation is responsible for parsing out a row ID at the end of the URI, if a specific row is being deleted. That is, the client would pass in content://contacts/people/22 and the implementation is responsible for parsing the record number (22) when creating a SQL statement.", "history": "Added in API level 28", "FullName": "public final int delete (Uri uri, String selection, String[] selectionArgs)"}, "onMapIntentToUri(android.content.Intent)": {"Returns": [["@B_android#net#Uri_E@", "Uri representing the slice associated with the provided intent."]], "Parameters": [["@B_android#content#Intent_E@", "Intent no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#app#slice#Slice_E@", "@B_android#app#slice#SliceManager#mapIntentToUri_E@"], "Permissions": [], "Description": "This method must be overridden if an @B_android#content#IntentFilter_E@ is specified on the SliceProvider. In that case, this method can be called and is expected to return a non-null Uri representing a slice. Otherwise this will throw @B_java#lang#UnsupportedOperationException_E@. Any intent filter added to a slice provider should also contain @B_android#app#slice#SliceManager#CATEGORY_SLICE_E@, because otherwise it will not be detected by @B_android#app#slice#SliceManager#mapIntentToUri_E@.", "history": "Added in API level 28", "FullName": "public Uri onMapIntentToUri (Intent intent)"}, "query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)": {"Returns": [["@B_android#database#Cursor_E@", "a Cursor or null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI to query. This will be the full URI sent by the client. This value must never be null."], ["@B_java#lang#String_E@", "String: The list of columns to put into the cursor. If null provide a default set of columns. This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: A Bundle containing all additional information necessary for the query. Values in the Bundle may include SQL style arguments. This value may be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to handle query requests where the arguments are packed into a @B_android#os#Bundle_E@. Arguments may include traditional SQL style query arguments. When present these should be handled according to the contract established in @B_android#content#ContentProvider#query_E@. Traditional SQL arguments can be found in the bundle using the following keys: @B_android#content#ContentResolver#QUERY_ARG_SQL_SELECTION_E@ @B_android#content#ContentResolver#QUERY_ARG_SQL_SELECTION_ARGS_E@ @B_android#content#ContentResolver#QUERY_ARG_SQL_SORT_ORDER_E@ This method can be called from multiple threads, as described in Example client call: See @B_android#content#ContentProvider#query_E@ for implementation details.", "history": "Added in API level 28", "FullName": "public final Cursor query (Uri uri, String[] projection, Bundle queryArgs, CancellationSignal cancellationSignal)"}, "onSlicePinned(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The uri of the slice being unpinned."]], "Throws": [], "SeeAlso": ["@B_android#app#slice#SliceProvider#onSliceUnpinned_E@"], "Permissions": [], "Description": "Called to inform an app that a slice has been pinned. Pinning is a way that slice hosts use to notify apps of which slices they care about updates for. When a slice is pinned the content is expected to be relatively fresh and kept up to date. Being pinned does not provide any escalated privileges for the slice provider. So apps should do things such as turn on syncing or schedule a job in response to a onSlicePinned. Pinned state is not persisted through a reboot, and apps can expect a new call to onSlicePinned for any slices that should remain pinned after a reboot occurs.", "history": "Added in API level 28", "FullName": "public void onSlicePinned (Uri sliceUri)"}, "update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])": {"Returns": [["int", "the number of rows affected."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI to query. This can potentially have a record ID if this is an update request for a specific record. This value must never be null."], ["@B_android#content#ContentValues_E@", "ContentValues: A set of column_name/value pairs to update in the database. This must not be null. This value may be null."], ["@B_java#lang#String_E@", "String: An optional filter to match rows to update. This value may be null."], ["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to handle requests to update one or more rows. The implementation should update all rows matching the selection to set the columns according to the provided values map. As a courtesy, call @B_android#content#ContentResolver#notifyChange_E@ after updating. This method can be called from multiple threads, as described in", "history": "Added in API level 28", "FullName": "public final int update (Uri uri, ContentValues values, String selection, String[] selectionArgs)"}, "call(java.lang.String,java.lang.String,android.os.Bundle)": {"Returns": [["@B_android#os#Bundle_E@", "This value may be null."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."], ["@B_java#lang#String_E@", "String: This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public Bundle call (String method, String arg, Bundle extras)"}, "SliceProvider(java.lang.String...)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: List of permissions that holders are auto-granted access to slices. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A version of constructing a SliceProvider that allows autogranting slice permissions to apps that hold specific platform permissions. When an app tries to bind a slice from this provider that it does not have access to, This provider will check if the caller holds permissions to any of the autoGrantPermissions specified, if they do they will be granted persisted uri access to all slices of this provider.", "history": "Added in API level 28", "FullName": "public SliceProvider (String... autoGrantPermissions)"}, "onSliceUnpinned(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#app#slice#SliceProvider#onSlicePinned_E@"], "Permissions": [], "Description": "Called to inform an app that a slices is no longer pinned. This means that no other apps on the device care about updates to this slice anymore and therefore it is not important to be updated. Any syncs or jobs related to this slice should be cancelled.", "history": "Added in API level 28", "FullName": "public void onSliceUnpinned (Uri sliceUri)"}, "attachInfo(android.content.Context,android.content.pm.ProviderInfo)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context this provider is running in"], ["@B_android#content#pm#ProviderInfo_E@", "ProviderInfo: Registered information about this content provider"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "After being instantiated, this is called to tell the content provider about itself.", "history": "Added in API level 28", "FullName": "public void attachInfo (Context context, ProviderInfo info)"}, "onGetSliceDescendants(android.net.Uri)": {"Returns": [["@B_java#util#Collection_E@", "All slices within the space. This value will never be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The uri to look for descendants under. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#slice#SliceManager#getSliceDescendants_E@"], "Permissions": [], "Description": "Obtains a list of slices that are descendants of the specified Uri. Implementing this is optional for a SliceProvider, but does provide a good discovery mechanism for finding slice Uris.", "history": "Added in API level 28", "FullName": "public Collection<Uri> onGetSliceDescendants (Uri uri)"}, "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)": {"Returns": [["@B_android#database#Cursor_E@", "a Cursor or null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI to query. This will be the full URI sent by the client; if the client is requesting a specific record, the URI will end in a record number that the implementation should parse and add to a WHERE or HAVING clause, specifying that _id value. This value must never be null."], ["@B_java#lang#String_E@", "String: The list of columns to put into the cursor. If null all columns are included. This value may be null."], ["@B_java#lang#String_E@", "String: A selection criteria to apply when filtering rows. If null then all rows are included. This value may be null."], ["@B_java#lang#String_E@", "String: You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings. This value may be null."], ["@B_java#lang#String_E@", "String: How the rows in the cursor should be sorted. If null then the provider is free to define the sort order. This value may be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null if none. If the operation is canceled, then @B_android#os#OperationCanceledException_E@ will be thrown when the query is executed. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to handle query requests from clients with support for cancellation. Apps targeting @B_android#os#Build#VERSION_CODES#O_E@ or higher should override @B_android#content#ContentProvider#query_E@ instead of this method. This method can be called from multiple threads, as described in Example client call: If you implement this method then you must also implement the version of @B_android#content#ContentProvider#query_E@ that does not take a cancellation signal to ensure correct operation on older versions of the Android Framework in which the cancellation signal overload was not available.", "history": "Added in API level 28", "FullName": "public final Cursor query (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder, CancellationSignal cancellationSignal)"}}, "Inheritance": ["@B_android#content#ContentProvider_E@"], "ClassName": "android.app.slice.SliceProvider", "ClassDesc": "A SliceProvider allows an app to provide content to be displayed in system spaces. This content is templated and can contain actions, and the behavior of how it is surfaced is specific to the system surface. Slices are not currently live content. They are bound once and shown to the user. If the content changes due to a callback from user interaction, then @B_android#content#ContentResolver#notifyChange_E@ should be used to notify the system. The provider needs to be declared in the manifest to provide the authority for the app. The authority for most slices is expected to match the package of the application. Slices can be identified by a Uri or by an Intent. To link an Intent with a slice, the provider must have an @B_android#content#IntentFilter_E@ matching the slice intent. When a slice is being requested via an intent, @B_android#app#slice#SliceProvider#onMapIntentToUri_E@ can be called and is expected to return an appropriate Uri representing the slice."}