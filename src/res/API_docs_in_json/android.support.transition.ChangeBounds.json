{"Functions": {"setResizeClip(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Used to indicate whether the view bounds should be modified or the clip bounds should be modified by ChangeBounds."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setClipBounds_E@"], "Permissions": [], "Description": "When resizeClip is true, ChangeBounds resizes the view using the clipBounds instead of changing the dimensions of the view during the animation. When resizeClip is false, ChangeBounds resizes the View by changing its dimensions. When resizeClip is set to true, the clip bounds is modified by ChangeBounds. Therefore, @B_android#transition#ChangeClipBounds_E@ is not compatible with ChangeBounds in this mode.", "history": "added in version 24.2.0", "FullName": "void setResizeClip (boolean resizeClip)"}, "ChangeBounds()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "ChangeBounds ()"}, "getResizeClip()": {"Returns": [["boolean", "true when the ChangeBounds will resize by changing the clip bounds during the view animation or false when bounds are changed. The default value is false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true when the ChangeBounds will resize by changing the clip bounds during the view animation or false when bounds are changed. The default value is false.", "history": "added in version 26.0.0-beta2", "FullName": "boolean getResizeClip ()"}, "getTransitionProperties()": {"Returns": [["@B_java#lang#String_E@", "An array of property names as described in the class documentation for @B_android#support#transition#TransitionValues_E@. The default implementation returns null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of property names used stored in the @B_android#support#transition#TransitionValues_E@ object passed into @B_android#support#transition#Transition#captureStartValues_E@ that this transition cares about for the purposes of canceling overlapping animations. When any transition is started on a given scene root, all transitions currently running on that same scene root are checked to see whether the properties on which they based their animations agree with the end values of the same properties in the new transition. If the end values are not equal, then the old animation is canceled since the new transition will start a new animation to these new values. If the values are equal, the old animation is allowed to continue and no new animation is started for that transition. A transition does not need to override this method. However, not doing so will mean that the cancellation logic outlined in the previous paragraph will be skipped for that transition, possibly leading to artifacts as old transitions and new transitions on the same targets run in parallel, animating views toward potentially different end values.", "history": "added in version 24.2.0", "FullName": "String[] getTransitionProperties ()"}}, "Inheritance": ["java.lang.Object", "@B_android#support#transition#Transition_E@"], "ClassName": "android.support.transition.ChangeBounds", "ClassDesc": "This transition captures the layout bounds of target views before and after the scene change and animates those changes during the transition. A ChangeBounds transition can be described in a resource file by using the tag changeBounds, along with the other standard attributes of Transition."}