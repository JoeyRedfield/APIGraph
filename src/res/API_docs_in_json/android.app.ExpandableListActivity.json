{"Functions": {"getExpandableListAdapter()": {"Returns": [["@B_android#widget#ExpandableListAdapter_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the ExpandableListAdapter associated with this activity's ExpandableListView.", "history": "Added in API level 1", "FullName": "public ExpandableListAdapter getExpandableListAdapter ()"}, "getSelectedId()": {"Returns": [["long", "The ID of the currently selected group or child."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the ID of the currently selected group or child.", "history": "Added in API level 1", "FullName": "public long getSelectedId ()"}, "onGroupExpand(int)": {"Returns": [], "Parameters": [["int", "int: The group position that was expanded"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this for receiving callbacks when a group has been expanded.", "history": "Added in API level 1", "FullName": "public void onGroupExpand (int groupPosition)"}, "setListAdapter(android.widget.ExpandableListAdapter)": {"Returns": [], "Parameters": [["@B_android#widget#ExpandableListAdapter_E@", "ExpandableListAdapter no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provide the adapter for the expandable list.", "history": "Added in API level 1", "FullName": "public void setListAdapter (ExpandableListAdapter adapter)"}, "setSelectedChild(int,int,boolean)": {"Returns": [["boolean", "Whether the selection was successfully set on the child."]], "Parameters": [["int", "int: The position of the group that contains the child."], ["int", "int: The position of the child within the group."], ["boolean", "boolean: Whether the child's group should be expanded if it is collapsed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the selection to the specified child. If the child is in a collapsed group, the group will only be expanded and child subsequently selected if shouldExpandGroup is set to true, otherwise the method will return false.", "history": "Added in API level 1", "FullName": "public boolean setSelectedChild (int groupPosition, int childPosition, boolean shouldExpandGroup)"}, "onContentChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onContentChanged_E@"], "Permissions": [], "Description": "Updates the screen state (current list and other views) when the content changes.", "history": "Added in API level 1", "FullName": "public void onContentChanged ()"}, "onRestoreInstanceState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: the data most recently supplied in @B_android#app#Activity#onSaveInstanceState_E@. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onRestoreInstanceState_E@"], "Permissions": [], "Description": "Ensures the expandable list view has been created before Activity restores all of the view states.", "history": "Added in API level 1", "FullName": "protected void onRestoreInstanceState (Bundle state)"}, "onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)": {"Returns": [], "Parameters": [["@B_android#view#ContextMenu_E@", "ContextMenu: The context menu that is being built"], ["@B_android#view#View_E@", "View: The view for which the context menu is being built"], ["@B_android#view#ContextMenu#ContextMenuInfo_E@", "ContextMenu.ContextMenuInfo: Extra information about the item for which the context menu should be shown. This information will vary depending on the class of v."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this to populate the context menu when an item is long pressed. menuInfo will contain an @B_android#widget#ExpandableListView#ExpandableListContextMenuInfo_E@ whose packedPosition is a packed position that should be used with @B_android#widget#ExpandableListView#getPackedPositionType_E@ and the other similar methods. Called when a context menu for the view is about to be shown. Unlike @B_android#app#Activity#onCreateOptionsMenu_E@, this will be called every time the context menu is about to be shown and should be populated for the view (or item inside the view for @B_android#widget#AdapterView_E@ subclasses, this can be found in the menuInfo)). Use @B_android#app#Activity#onContextItemSelected_E@ to know when an item has been selected. It is not safe to hold onto the context menu after this method returns.", "history": "Added in API level 1", "FullName": "public void onCreateContextMenu (ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo)"}, "getSelectedPosition()": {"Returns": [["long", "A packed position representation containing the currently selected group or child's position and type."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the position (in packed position representation) of the currently selected group or child. Use @B_android#widget#ExpandableListView#getPackedPositionType_E@, @B_android#widget#ExpandableListView#getPackedPositionGroup_E@, and @B_android#widget#ExpandableListView#getPackedPositionChild_E@ to unpack the returned packed position.", "history": "Added in API level 1", "FullName": "public long getSelectedPosition ()"}, "onGroupCollapse(int)": {"Returns": [], "Parameters": [["int", "int: The group position that was collapsed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this for receiving callbacks when a group has been collapsed.", "history": "Added in API level 1", "FullName": "public void onGroupCollapse (int groupPosition)"}, "getExpandableListView()": {"Returns": [["@B_android#widget#ExpandableListView_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ExpandableListView_E@"], "Permissions": [], "Description": "Get the activity's expandable list view widget. This can be used to get the selection, set the selection, and many other useful functions.", "history": "Added in API level 1", "FullName": "public ExpandableListView getExpandableListView ()"}, "setSelectedGroup(int)": {"Returns": [], "Parameters": [["int", "int: The position of the group that should be selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the selection to the specified group.", "history": "Added in API level 1", "FullName": "public void setSelectedGroup (int groupPosition)"}, "setSelectedChild(int, int, boolean)": {"Returns": [["boolean", "Whether the selection was successfully set on the child."]], "Parameters": [["int", "int: The position of the group that contains the child."], ["int", "int: The position of the child within the group."], ["boolean", "boolean: Whether the child's group should be expanded if it is collapsed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the selection to the specified child. If the child is in a collapsed group, the group will only be expanded and child subsequently selected if shouldExpandGroup is set to true, otherwise the method will return false.", "history": "added in API level 1", "FullName": "public boolean setSelectedChild (int groupPosition, int childPosition, boolean shouldExpandGroup)"}, "onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)": {"Returns": [["boolean", "True if the click was handled"]], "Parameters": [["@B_android#widget#ExpandableListView_E@", "ExpandableListView: The ExpandableListView where the click happened"], ["@B_android#view#View_E@", "View: The view within the expandable list/ListView that was clicked"], ["int", "int: The group position that contains the child that was clicked"], ["int", "int: The child position within the group"], ["long", "long: The row id of the child that was clicked"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this for receiving callbacks when a child has been clicked. Callback method to be invoked when a child in this expandable list has been clicked.", "history": "Added in API level 1", "FullName": "public boolean onChildClick (ExpandableListView parent, View v, int groupPosition, int childPosition, long id)"}, "ExpandableListActivity()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public ExpandableListActivity ()"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#view#ContextThemeWrapper_E@", "@B_android#app#Activity_E@"], "ClassName": "android.app.ExpandableListActivity", "ClassDesc": "An activity that displays an expandable list of items by binding to a data source implementing the ExpandableListAdapter, and exposes event handlers when the user selects an item. ExpandableListActivity hosts a @B_android#widget#ExpandableListView_E@ object that can be bound to different data sources that provide a two-levels of data (the top-level is group, and below each group are children). Binding, screen layout, and row layout are discussed in the following sections. ExpandableListActivity has a default layout that consists of a single, full-screen, centered expandable list. However, if you desire, you can customize the screen layout by setting your own view layout with setContentView() in onCreate(). To do this, your own view MUST contain an ExpandableListView object with the id \"@android:id/list\" (or @B_android#R#id#list_E@ if it's in code) Optionally, your custom view can contain another view object of any type to display when the list view is empty. This \"empty list\" notifier must have an id \"android:empty\". Note that when an empty view is present, the expandable list view will be hidden when there is no data to display. The following code demonstrates an (ugly) custom screen layout. It has a list with a green background, and an alternate red \"no data\" message. The @B_android#widget#ExpandableListAdapter_E@ set in the @B_android#app#ExpandableListActivity_E@ via @B_android#app#ExpandableListActivity#setListAdapter_E@ provides the @B_android#view#View_E@s for each row. This adapter has separate methods for providing the group @B_android#view#View_E@s and child @B_android#view#View_E@s. There are a couple provided @B_android#widget#ExpandableListAdapter_E@s that simplify use of adapters: @B_android#widget#SimpleCursorTreeAdapter_E@ and @B_android#widget#SimpleExpandableListAdapter_E@. With these, you can specify the layout of individual rows for groups and children in the list. These constructor takes a few parameters that specify layout resources for groups and children. It also has additional parameters that let you specify which data field to associate with which object in the row layout resource. The @B_android#widget#SimpleCursorTreeAdapter_E@ fetches data from @B_android#database#Cursor_E@s and the @B_android#widget#SimpleExpandableListAdapter_E@ fetches data from @B_java#util#List_E@s of @B_java#util#Map_E@s. Android provides some standard row layout resources. These are in the @B_android#R#layout_E@ class, and have names such as simple_list_item_1, simple_list_item_2, and two_line_list_item. The following layout XML is the source for the resource two_line_list_item, which displays two data fields,one above the other, for each list row. You must identify the data bound to each TextView object in this layout. The syntax for this is discussed in the next section. You bind the ExpandableListActivity's ExpandableListView object to data using a class that implements the @B_android#widget#ExpandableListAdapter_E@ interface. Android provides two standard list adapters: @B_android#widget#SimpleExpandableListAdapter_E@ for static data (Maps), and @B_android#widget#SimpleCursorTreeAdapter_E@ for Cursor query results."}