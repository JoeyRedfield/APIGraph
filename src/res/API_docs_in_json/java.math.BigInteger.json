{"Functions": {"not()": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is ~this. The result of this operation is -this-1.", "history": "Added in API level 1", "FullName": "public BigInteger not ()"}, "BigInteger(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: string representation of the new BigInteger."], ["int", "int: the base to be used for the conversion."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value == null."], ["@B_java#lang#NumberFormatException_E@", "if value is not a valid representation of a BigInteger or if radix < Character.MIN_RADIX or radix > Character.MAX_RADIX."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigInteger instance by parsing value. The string representation consists of an optional plus or minus sign followed by a non-empty sequence of digits in the specified radix. Digits are interpreted as if by Character.digit(char, radix).", "history": "added in API level 1", "FullName": "public BigInteger (String value, int radix)"}, "multiply(java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value == null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is this * value.", "history": "Added in API level 1", "FullName": "public BigInteger multiply (BigInteger value)"}, "floatValue()": {"Returns": [["float", "the numeric value represented by this object after conversion to type float."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this BigInteger as a float. If this is too big to be represented as a float, then Float.POSITIVE_INFINITY or Float.NEGATIVE_INFINITY is returned. Note that not all integers in the range [-Float.MAX_VALUE, Float.MAX_VALUE] can be exactly represented as a float.", "history": "Added in API level 1", "FullName": "public float floatValue ()"}, "xor(java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: value to be xor'ed with this"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value == null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is this ^ value.", "history": "Added in API level 1", "FullName": "public BigInteger xor (BigInteger value)"}, "toString(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int: base to be used for the string representation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string containing a string representation of this BigInteger with base radix. If radix < Character.MIN_RADIX or radix > Character.MAX_RADIX then a decimal representation is returned. The characters of the string representation are generated with method Character.forDigit.", "history": "Added in API level 1", "FullName": "public String toString (int radix)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 1", "FullName": "public boolean equals (Object x)"}, "setBit(int)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["int", "int: position where the bit in this has to be set."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if n < 0."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger which has the same binary representation as this but with the bit at position n set. The result is equivalent to this | pow(2, n).", "history": "Added in API level 1", "FullName": "public BigInteger setBit (int n)"}, "clearBit(int)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["int", "int: position where the bit in this has to be cleared."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if n < 0."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger which has the same binary representation as this but with the bit at position n cleared. The result is equivalent to this & ~pow(2, n).", "history": "Added in API level 1", "FullName": "public BigInteger clearBit (int n)"}, "longValue()": {"Returns": [["long", "the numeric value represented by this object after conversion to type long."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this BigInteger as a long value. If this is too big to be represented as a long, then this % pow(2, 64) is returned.", "history": "Added in API level 1", "FullName": "public long longValue ()"}, "shiftRight(int)": {"Returns": [["@B_java#math#BigInteger_E@", "this >> n if n >= 0; this << (-n) otherwise"]], "Parameters": [["int", "int: shift distance"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is this >> n. For negative arguments, the result is also negative. The shift distance may be negative which means that this is shifted left.", "history": "Added in API level 1", "FullName": "public BigInteger shiftRight (int n)"}, "nextProbablePrime()": {"Returns": [["@B_java#math#BigInteger_E@", "smallest integer > this which is probably prime."]], "Parameters": [], "Throws": [["@B_java#lang#ArithmeticException_E@", "if this < 0."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the smallest integer x > this which is probably prime as a BigInteger instance. The probability that the returned BigInteger is prime is greater than 1 - 1/2<sup>100</sup>.", "history": "Added in API level 1", "FullName": "public BigInteger nextProbablePrime ()"}, "gcd(java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: value with which the greatest common divisor is computed."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value == null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is greatest common divisor of this and value. If this == 0 and value == 0 then zero is returned, otherwise the result is positive.", "history": "Added in API level 1", "FullName": "public BigInteger gcd (BigInteger value)"}, "probablePrime(int,java.util.Random)": {"Returns": [["@B_java#math#BigInteger_E@", "probably prime random BigInteger instance."]], "Parameters": [["int", "int: length of the new BigInteger in bits."], ["@B_java#util#Random_E@", "Random no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if bitLength < 2."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a random positive BigInteger instance in the range [0, pow(2, bitLength)-1] which is probably prime. The probability that the returned BigInteger is prime is greater than 1 - 1/2<sup>100</sup>).", "history": "Added in API level 1", "FullName": "public static BigInteger probablePrime (int bitLength, Random random)"}, "BigInteger(int,java.util.Random)": {"Returns": [], "Parameters": [["int", "int: maximum length of the new BigInteger in bits."], ["@B_java#util#Random_E@", "Random: is the random number generator to be used."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if numBits < 0."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a random non-negative BigInteger instance in the range [0, pow(2, numBits)-1].", "history": "Added in API level 1", "FullName": "public BigInteger (int numBits, Random random)"}, "remainder(java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: value by which this is divided."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is this % divisor. Regarding signs this methods has the same behavior as the % operator on ints: the sign of the remainder is the same as the sign of this.", "history": "Added in API level 1", "FullName": "public BigInteger remainder (BigInteger divisor)"}, "flipBit(int)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["int", "int: position where the bit in this has to be flipped."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if n < 0."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger which has the same binary representation as this but with the bit at position n flipped. The result is equivalent to this ^ pow(2, n).", "history": "Added in API level 1", "FullName": "public BigInteger flipBit (int n)"}, "valueOf(long)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is equal to value.", "history": "Added in API level 1", "FullName": "public static BigInteger valueOf (long value)"}, "negate()": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is the -this.", "history": "Added in API level 1", "FullName": "public BigInteger negate ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this BigInteger in decimal form.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "add(java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is this + value.", "history": "Added in API level 1", "FullName": "public BigInteger add (BigInteger value)"}, "modInverse(java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: the modulus."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if m == null"], ["@B_java#lang#ArithmeticException_E@", "if m < 0 or if this is not relatively prime to m"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is 1/this mod m. The modulus m must be positive. The result is guaranteed to be in the interval [0, m) (0 inclusive, m exclusive). If this is not relatively prime to m, then an exception is thrown.", "history": "Added in API level 1", "FullName": "public BigInteger modInverse (BigInteger m)"}, "or(java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: value to be or'ed with this."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value == null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is this | value.", "history": "Added in API level 1", "FullName": "public BigInteger or (BigInteger value)"}, "testBit(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int: position where the bit in this has to be inspected."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if n < 0."]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether the bit at position n in this is set. The result is equivalent to this & pow(2, n) != 0.", "history": "Added in API level 1", "FullName": "public boolean testBit (int n)"}, "abs()": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is the absolute value of this.", "history": "Added in API level 1", "FullName": "public BigInteger abs ()"}, "shiftLeft(int)": {"Returns": [["@B_java#math#BigInteger_E@", "this << n if n >= 0; this >> (-n). otherwise"]], "Parameters": [["int", "int: shift distance."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is this << n. The result is equivalent to this * pow(2, n) if n >= 0. The shift distance may be negative which means that this is shifted right. The result then corresponds to floor(this / pow(2, -n)).", "history": "Added in API level 1", "FullName": "public BigInteger shiftLeft (int n)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "bitLength()": {"Returns": [["int", "the length of the minimal two's complement representation for this without the sign bit."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the value's two's complement representation without leading zeros for positive numbers / without leading ones for negative values. The two's complement representation of this will be at least bitLength() + 1 bits long. The value will fit into an int if bitLength() < 32 or into a long if bitLength() < 64.", "history": "Added in API level 1", "FullName": "public int bitLength ()"}, "divideAndRemainder(java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: value by which this is divided."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."]], "SeeAlso": ["@B_java#math#BigInteger#divide_E@", "@B_java#math#BigInteger#remainder_E@"], "Permissions": [], "Description": "Returns a two element BigInteger array containing this / divisor at index 0 and this % divisor at index 1.", "history": "Added in API level 1", "FullName": "public BigInteger[] divideAndRemainder (BigInteger divisor)"}, "isProbablePrime(int)": {"Returns": [["boolean", "true, if this is probably prime, false otherwise."]], "Parameters": [["int", "int: tolerated primality uncertainty."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests whether this BigInteger is probably prime. If true is returned, then this is prime with a probability greater than 1 - 1/2<sup>certainty</sup>). If false is returned, then this is definitely composite. If the argument certainty <= 0, then this method returns true.", "history": "Added in API level 1", "FullName": "public boolean isProbablePrime (int certainty)"}, "mod(java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "this mod m."]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: the modulus."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if m == null."], ["@B_java#lang#ArithmeticException_E@", "if m < 0."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is this mod m. The modulus m must be positive. The result is guaranteed to be in the interval [0, m) (0 inclusive, m exclusive). The behavior of this function is not equivalent to the behavior of the % operator defined for the built-in int's.", "history": "Added in API level 1", "FullName": "public BigInteger mod (BigInteger m)"}, "BigInteger(int,int,java.util.Random)": {"Returns": [], "Parameters": [["int", "int: length of the new BigInteger in bits."], ["int", "int: tolerated primality uncertainty."], ["@B_java#util#Random_E@", "Random no parameter comment"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if bitLength < 2."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a random BigInteger instance in the range [0, pow(2, bitLength)-1] which is probably prime. The probability that the returned BigInteger is prime is greater than 1 - 1/2<sup>certainty</sup>). Random argument is ignored if bitLength >= 16, where this implementation will use OpenSSL's BN_generate_prime_ex as a source of cryptographically strong pseudo-random numbers.", "history": "Added in API level 1", "FullName": "public BigInteger (int bitLength, int certainty, Random random)"}, "divide(java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "this / divisor."]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: value by which this is divided."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is this / divisor.", "history": "Added in API level 1", "FullName": "public BigInteger divide (BigInteger divisor)"}, "BigInteger(int, int, java.util.Random)": {"Returns": [], "Parameters": [["int", "int: length of the new BigInteger in bits."], ["int", "int: tolerated primality uncertainty."], ["@B_java#util#Random_E@", "Random no parameter comment"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if bitLength < 2."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a random BigInteger instance in the range [0, pow(2, bitLength)-1] which is probably prime. The probability that the returned BigInteger is prime is greater than 1 - 1/2<sup>certainty</sup>). Random argument is ignored if bitLength >= 16, where this implementation will use OpenSSL's BN_generate_prime_ex as a source of cryptographically strong pseudo-random numbers.", "history": "added in API level 1", "FullName": "public BigInteger (int bitLength, int certainty, Random random)"}, "probablePrime(int, java.util.Random)": {"Returns": [["@B_java#math#BigInteger_E@", "probably prime random BigInteger instance."]], "Parameters": [["int", "int: length of the new BigInteger in bits."], ["@B_java#util#Random_E@", "Random no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if bitLength < 2."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a random positive BigInteger instance in the range [0, pow(2, bitLength)-1] which is probably prime. The probability that the returned BigInteger is prime is greater than 1 - 1/2<sup>100</sup>).", "history": "added in API level 1", "FullName": "public static BigInteger probablePrime (int bitLength, Random random)"}, "toByteArray()": {"Returns": [["byte[]", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the two's complement representation of this BigInteger in a byte array.", "history": "Added in API level 1", "FullName": "public byte[] toByteArray ()"}, "doubleValue()": {"Returns": [["double", "the numeric value represented by this object after conversion to type double."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this BigInteger as a double. If this is too big to be represented as a double, then Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY is returned. Note that not all integers in the range [-Double.MAX_VALUE, Double.MAX_VALUE] can be exactly represented as a double.", "history": "Added in API level 1", "FullName": "public double doubleValue ()"}, "min(java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: value to be used to compute the minimum with this."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value == null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum of this BigInteger and value.", "history": "Added in API level 1", "FullName": "public BigInteger min (BigInteger value)"}, "pow(int)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if exp < 0."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is pow(this, exp).", "history": "Added in API level 1", "FullName": "public BigInteger pow (int exp)"}, "BigInteger(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: two's complement representation of the new BigInteger."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value == null."], ["@B_java#lang#NumberFormatException_E@", "if the length of value is zero."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigInteger from the given two's complement representation. The most significant byte is the entry at index 0. The most significant bit of this entry determines the sign of the new BigInteger instance. The array must be nonempty.", "history": "Added in API level 1", "FullName": "public BigInteger (byte[] value)"}, "BigInteger(int, java.util.Random)": {"Returns": [], "Parameters": [["int", "int: maximum length of the new BigInteger in bits."], ["@B_java#util#Random_E@", "Random: is the random number generator to be used."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if numBits < 0."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a random non-negative BigInteger instance in the range [0, pow(2, numBits)-1].", "history": "added in API level 1", "FullName": "public BigInteger (int numBits, Random random)"}, "getLowestSetBit()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the position of the lowest set bit in the two's complement representation of this BigInteger. If all bits are zero (this==0) then -1 is returned as result.", "history": "Added in API level 1", "FullName": "public int getLowestSetBit ()"}, "BigInteger(int, byte[])": {"Returns": [], "Parameters": [["int", "int: sign of the new BigInteger (-1 for negative, 0 for zero, 1 for positive)."], ["byte[]", "byte: magnitude of the new BigInteger with the most significant byte first."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if magnitude == null."], ["@B_java#lang#NumberFormatException_E@", "if the sign is not one of -1, 0, 1 or if the sign is zero and the magnitude contains non-zero entries."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigInteger instance with the given sign and magnitude.", "history": "added in API level 1", "FullName": "public BigInteger (int signum, byte[] magnitude)"}, "signum()": {"Returns": [["int", "-1 if this < 0, 0 if this == 0, 1 if this > 0."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the sign of this BigInteger.", "history": "Added in API level 1", "FullName": "public int signum ()"}, "modPow(java.math.BigInteger,java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger no parameter comment"], ["@B_java#math#BigInteger_E@", "BigInteger no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if modulus == null or exponent == null."], ["@B_java#lang#ArithmeticException_E@", "if modulus < 0 or if exponent < 0 and not relatively prime to modulus."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is pow(this, exponent) mod modulus. The modulus must be positive. The result is guaranteed to be in the interval [0, modulus). If the exponent is negative, then pow(this.modInverse(modulus), -exponent) mod modulus is computed. The inverse of this only exists if this is relatively prime to the modulus, otherwise an exception is thrown.", "history": "Added in API level 1", "FullName": "public BigInteger modPow (BigInteger exponent, BigInteger modulus)"}, "compareTo(java.math.BigInteger)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: value to be compared with this."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value == null."]], "SeeAlso": [], "Permissions": [], "Description": "Compares this BigInteger with value. Returns -1 if this < value, 0 if this == value and 1 if this > value, .", "history": "Added in API level 1", "FullName": "public int compareTo (BigInteger value)"}, "BigInteger(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: string representation of the new BigInteger."], ["int", "int: the base to be used for the conversion."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value == null."], ["@B_java#lang#NumberFormatException_E@", "if value is not a valid representation of a BigInteger or if radix < Character.MIN_RADIX or radix > Character.MAX_RADIX."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigInteger instance by parsing value. The string representation consists of an optional plus or minus sign followed by a non-empty sequence of digits in the specified radix. Digits are interpreted as if by Character.digit(char, radix).", "history": "Added in API level 1", "FullName": "public BigInteger (String value, int radix)"}, "BigInteger(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: string representation of the new BigInteger."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value == null."], ["@B_java#lang#NumberFormatException_E@", "if value is not a valid representation of a BigInteger."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigInteger by parsing value. The string representation consists of an optional plus or minus sign followed by a non-empty sequence of decimal digits. Digits are interpreted as if by Character.digit(char,10).", "history": "Added in API level 1", "FullName": "public BigInteger (String value)"}, "andNot(java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: value to be not'ed and then and'ed with this."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value == null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is this & ~value. Evaluating x.andNot(value) returns the same result as x.and(value.not()).", "history": "Added in API level 1", "FullName": "public BigInteger andNot (BigInteger value)"}, "modPow(java.math.BigInteger, java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger no parameter comment"], ["@B_java#math#BigInteger_E@", "BigInteger no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if modulus == null or exponent == null."], ["@B_java#lang#ArithmeticException_E@", "if modulus < 0 or if exponent < 0 and not relatively prime to modulus."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is pow(this, exponent) mod modulus. The modulus must be positive. The result is guaranteed to be in the interval [0, modulus). If the exponent is negative, then pow(this.modInverse(modulus), -exponent) mod modulus is computed. The inverse of this only exists if this is relatively prime to the modulus, otherwise an exception is thrown.", "history": "added in API level 1", "FullName": "public BigInteger modPow (BigInteger exponent, BigInteger modulus)"}, "and(java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: value to be and'ed with this."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value == null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is this & value.", "history": "Added in API level 1", "FullName": "public BigInteger and (BigInteger value)"}, "bitCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of bits in the two's complement representation of this which differ from the sign bit. If this is negative, the result is equivalent to the number of bits set in the two's complement representation of -this - 1. Use bitLength(0) to find the length of the binary value in bits.", "history": "Added in API level 1", "FullName": "public int bitCount ()"}, "intValue()": {"Returns": [["int", "the numeric value represented by this object after conversion to type int."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this BigInteger as an int value. If this is too big to be represented as an int, then this % (1 << 32) is returned.", "history": "Added in API level 1", "FullName": "public int intValue ()"}, "BigInteger(int,byte[])": {"Returns": [], "Parameters": [["int", "int: sign of the new BigInteger (-1 for negative, 0 for zero, 1 for positive)."], ["byte[]", "byte: magnitude of the new BigInteger with the most significant byte first."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if magnitude == null."], ["@B_java#lang#NumberFormatException_E@", "if the sign is not one of -1, 0, 1 or if the sign is zero and the magnitude contains non-zero entries."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigInteger instance with the given sign and magnitude.", "history": "Added in API level 1", "FullName": "public BigInteger (int signum, byte[] magnitude)"}, "subtract(java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigInteger whose value is this - value.", "history": "Added in API level 1", "FullName": "public BigInteger subtract (BigInteger value)"}, "max(java.math.BigInteger)": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: value to be used to compute the maximum with this"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value == null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum of this BigInteger and value.", "history": "Added in API level 1", "FullName": "public BigInteger max (BigInteger value)"}}, "Inheritance": ["@B_java#lang#Number_E@"], "ClassName": "java.math.BigInteger", "ClassDesc": "An immutable arbitrary-precision signed integer. @B_java#util#BitSet_E@ for high-performance bitwise operations on arbitrarily-large sequences of bits."}