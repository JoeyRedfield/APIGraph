{"Functions": {"setTimeZone(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: one of the Olson ids from the list returned by @B_java#util#TimeZone#getAvailableIDs_E@"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SET_TIME_ZONE_E@"], "Description": "Sets the system's persistent default time zone. This is the time zone for all apps, even after a reboot. Use @B_java#util#TimeZone#setDefault_E@ if you just want to change the time zone within your app, and even then prefer to pass an explicit @B_java#util#TimeZone_E@ to APIs that require it rather than changing the time zone for all threads. On android M and above, it is an error to pass in a non-Olson timezone to this function. Note that this is a bad idea on all Android releases because POSIX and the TimeZone class have opposite interpretations of '+' and '-' in the same non-Olson ID. Requires @B_android#Manifest#permission#SET_TIME_ZONE_E@", "history": "Added in API level 1", "FullName": "public void setTimeZone (String timeZone)"}, "set(int,long,android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: type of alarm. Value is @B_android#app#AlarmManager#RTC_WAKEUP_E@, @B_android#app#AlarmManager#RTC_E@, @B_android#app#AlarmManager#ELAPSED_REALTIME_WAKEUP_E@, or @B_android#app#AlarmManager#ELAPSED_REALTIME_E@"], ["long", "long: time in milliseconds that the alarm should go off, using the appropriate clock (depending on the alarm type)."], ["@B_android#app#PendingIntent_E@", "PendingIntent: Action to perform when the alarm goes off; typically comes from @B_android#app#PendingIntent#getBroadcast_E@."]], "Throws": [], "SeeAlso": ["@B_android#os#Handler_E@", "@B_android#app#AlarmManager#setExact_E@", "@B_android#app#AlarmManager#setRepeating_E@", "@B_android#app#AlarmManager#setWindow_E@", "@B_android#app#AlarmManager#cancel_E@", "@B_android#content#Context#sendBroadcast_E@", "@B_android#content#Context#registerReceiver_E@", "@B_android#content#Intent#filterEquals_E@", "@B_android#app#AlarmManager_E@"], "Permissions": [], "Description": "Schedule an alarm. If the stated trigger time is in the past, the alarm will be triggered immediately. If there is already an alarm for this Intent scheduled (with the equality of two intents being defined by @B_android#content#Intent#filterEquals_E@), then it will be removed and replaced by this one. The alarm is an Intent broadcast that goes to a broadcast receiver that you registered with @B_android#content#Context#registerReceiver_E@ or through the <receiver> tag in an AndroidManifest.xml file. Alarm intents are delivered with a data extra of type int called @B_android#content#Intent#EXTRA_ALARM_COUNT_E@ that indicates how many past alarm events have been accumulated into this intent broadcast. Recurring alarms that have gone undelivered because the phone was asleep may have a count greater than one when delivered.", "history": "Added in API level 1", "FullName": "public void set (int type, long triggerAtMillis, PendingIntent operation)"}, "getNextAlarmClock()": {"Returns": [["@B_android#app#AlarmManager#AlarmClockInfo_E@", "An @B_android#app#AlarmManager#AlarmClockInfo_E@ object describing the next upcoming alarm clock event that will occur. If there are no alarm clock events currently scheduled, this method will return null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#AlarmManager#setAlarmClock_E@", "@B_android#app#AlarmManager#AlarmClockInfo_E@", "@B_android#app#AlarmManager_E@"], "Permissions": [], "Description": "Gets information about the next alarm clock currently scheduled. The alarm clocks considered are those scheduled by any application using the @B_android#app#AlarmManager#setAlarmClock_E@ method.", "history": "Added in API level 21", "FullName": "public AlarmManager.AlarmClockInfo getNextAlarmClock ()"}, "setExact(int,long,java.lang.String,android.app.AlarmManager.OnAlarmListener,android.os.Handler)": {"Returns": [], "Parameters": [["int", "int: Value is @B_android#app#AlarmManager#RTC_WAKEUP_E@, @B_android#app#AlarmManager#RTC_E@, @B_android#app#AlarmManager#ELAPSED_REALTIME_WAKEUP_E@, or @B_android#app#AlarmManager#ELAPSED_REALTIME_E@"], ["long", "long no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_android#app#AlarmManager#OnAlarmListener_E@", "AlarmManager.OnAlarmListener no parameter comment"], ["@B_android#os#Handler_E@", "Handler no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Direct callback version of @B_android#app#AlarmManager#setExact_E@. Rather than supplying a PendingIntent to be sent when the alarm time is reached, this variant supplies an @B_android#app#AlarmManager#OnAlarmListener_E@ instance that will be invoked at that time. The OnAlarmListener's @B_android#app#AlarmManager#OnAlarmListener#onAlarm_E@ method will be invoked via the specified target Handler, or on the application's main looper if null is passed as the targetHandler parameter.", "history": "Added in API level 24", "FullName": "public void setExact (int type, long triggerAtMillis, String tag, AlarmManager.OnAlarmListener listener, Handler targetHandler)"}, "setWindow(int,long,long,android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: type of alarm. Value is @B_android#app#AlarmManager#RTC_WAKEUP_E@, @B_android#app#AlarmManager#RTC_E@, @B_android#app#AlarmManager#ELAPSED_REALTIME_WAKEUP_E@, or @B_android#app#AlarmManager#ELAPSED_REALTIME_E@"], ["long", "long: The earliest time, in milliseconds, that the alarm should be delivered, expressed in the appropriate clock's units (depending on the alarm type)."], ["long", "long: The length of the requested delivery window, in milliseconds. The alarm will be delivered no later than this many milliseconds after windowStartMillis. Note that this parameter is a duration, not the timestamp of the end of the window."], ["@B_android#app#PendingIntent_E@", "PendingIntent: Action to perform when the alarm goes off; typically comes from @B_android#app#PendingIntent#getBroadcast_E@."]], "Throws": [], "SeeAlso": ["@B_android#app#AlarmManager#set_E@", "@B_android#app#AlarmManager#setExact_E@", "@B_android#app#AlarmManager#setRepeating_E@", "@B_android#app#AlarmManager#cancel_E@", "@B_android#content#Context#sendBroadcast_E@", "@B_android#content#Context#registerReceiver_E@", "@B_android#content#Intent#filterEquals_E@", "@B_android#app#AlarmManager_E@"], "Permissions": [], "Description": "Schedule an alarm to be delivered within a given window of time. This method is similar to @B_android#app#AlarmManager#set_E@, but allows the application to precisely control the degree to which its delivery might be adjusted by the OS. This method allows an application to take advantage of the battery optimizations that arise from delivery batching even when it has modest timeliness requirements for its alarms. This method can also be used to achieve strict ordering guarantees among multiple alarms by ensuring that the windows requested for each alarm do not intersect. When precise delivery is not required, applications should use the standard @B_android#app#AlarmManager#set_E@ method. This will give the OS the most flexibility to minimize wakeups and battery use. For alarms that must be delivered at precisely-specified times with no acceptable variation, applications can use @B_android#app#AlarmManager#setExact_E@.", "history": "Added in API level 19", "FullName": "public void setWindow (int type, long windowStartMillis, long windowLengthMillis, PendingIntent operation)"}, "set(int, long, android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: type of alarm.Value is RTC_WAKEUP, RTC, ELAPSED_REALTIME_WAKEUP or ELAPSED_REALTIME."], ["long", "long: time in milliseconds that the alarm should go off, using the appropriate clock (depending on the alarm type)."], ["@B_android#app#PendingIntent_E@", "PendingIntent: Action to perform when the alarm goes off; typically comes from @B_android#app#PendingIntent#getBroadcast_E@."]], "Throws": [], "SeeAlso": ["@B_android#os#Handler_E@", "@B_android#app#AlarmManager#setExact_E@", "@B_android#app#AlarmManager#setRepeating_E@", "@B_android#app#AlarmManager#setWindow_E@", "@B_android#app#AlarmManager#cancel_E@", "@B_android#content#Context#sendBroadcast_E@", "@B_android#content#Context#registerReceiver_E@", "@B_android#content#Intent#filterEquals_E@", "@B_android#app#AlarmManager_E@"], "Permissions": [], "Description": "Schedule an alarm. If the stated trigger time is in the past, the alarm will be triggered immediately. If there is already an alarm for this Intent scheduled (with the equality of two intents being defined by @B_android#content#Intent#filterEquals_E@), then it will be removed and replaced by this one. The alarm is an Intent broadcast that goes to a broadcast receiver that you registered with @B_android#content#Context#registerReceiver_E@ or through the <receiver> tag in an AndroidManifest.xml file. Alarm intents are delivered with a data extra of type int called @B_android#content#Intent#EXTRA_ALARM_COUNT_E@ that indicates how many past alarm events have been accumulated into this intent broadcast. Recurring alarms that have gone undelivered because the phone was asleep may have a count greater than one when delivered.", "history": "added in API level 1", "FullName": "public void set (int type, long triggerAtMillis, PendingIntent operation)"}, "setRepeating(int,long,long,android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: type of alarm. Value is @B_android#app#AlarmManager#RTC_WAKEUP_E@, @B_android#app#AlarmManager#RTC_E@, @B_android#app#AlarmManager#ELAPSED_REALTIME_WAKEUP_E@, or @B_android#app#AlarmManager#ELAPSED_REALTIME_E@"], ["long", "long: time in milliseconds that the alarm should first go off, using the appropriate clock (depending on the alarm type)."], ["long", "long: interval in milliseconds between subsequent repeats of the alarm."], ["@B_android#app#PendingIntent_E@", "PendingIntent: Action to perform when the alarm goes off; typically comes from @B_android#app#PendingIntent#getBroadcast_E@."]], "Throws": [], "SeeAlso": ["@B_android#os#Handler_E@", "@B_android#app#AlarmManager#set_E@", "@B_android#app#AlarmManager#setExact_E@", "@B_android#app#AlarmManager#setWindow_E@", "@B_android#app#AlarmManager#cancel_E@", "@B_android#content#Context#sendBroadcast_E@", "@B_android#content#Context#registerReceiver_E@", "@B_android#content#Intent#filterEquals_E@", "@B_android#app#AlarmManager_E@"], "Permissions": [], "Description": "Schedule a repeating alarm. Like @B_android#app#AlarmManager#set_E@, except you can also supply a period at which the alarm will automatically repeat. This alarm continues repeating until explicitly removed with @B_android#app#AlarmManager#cancel_E@. If the stated trigger time is in the past, the alarm will be triggered immediately, with an alarm count depending on how far in the past the trigger time is relative to the repeat interval. If an alarm is delayed (by system sleep, for example, for non _WAKEUP alarm types), a skipped repeat will be delivered as soon as possible. After that, future alarms will be delivered according to the original schedule; they do not drift over time. For example, if you have set a recurring alarm for the top of every hour but the phone was asleep from 7:45 until 8:45, an alarm will be sent as soon as the phone awakens, then the next alarm will be sent at 9:00. If your application wants to allow the delivery times to drift in order to guarantee that at least a certain time interval always elapses between alarms, then the approach to take is to use one-time alarms, scheduling the next one yourself when handling each alarm delivery. targetSdkVersion is earlier than API 19 will continue to have all of their alarms, including repeating alarms, treated as exact.", "history": "Added in API level 1", "FullName": "public void setRepeating (int type, long triggerAtMillis, long intervalMillis, PendingIntent operation)"}, "setExactAndAllowWhileIdle(int,long,android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: type of alarm. Value is @B_android#app#AlarmManager#RTC_WAKEUP_E@, @B_android#app#AlarmManager#RTC_E@, @B_android#app#AlarmManager#ELAPSED_REALTIME_WAKEUP_E@, or @B_android#app#AlarmManager#ELAPSED_REALTIME_E@"], ["long", "long: time in milliseconds that the alarm should go off, using the appropriate clock (depending on the alarm type)."], ["@B_android#app#PendingIntent_E@", "PendingIntent: Action to perform when the alarm goes off; typically comes from @B_android#app#PendingIntent#getBroadcast_E@."]], "Throws": [], "SeeAlso": ["@B_android#app#AlarmManager#set_E@", "@B_android#app#AlarmManager#setRepeating_E@", "@B_android#app#AlarmManager#setWindow_E@", "@B_android#app#AlarmManager#cancel_E@", "@B_android#content#Context#sendBroadcast_E@", "@B_android#content#Context#registerReceiver_E@", "@B_android#content#Intent#filterEquals_E@", "@B_android#app#AlarmManager_E@"], "Permissions": [], "Description": "Like @B_android#app#AlarmManager#setExact_E@, but this alarm will be allowed to execute even when the system is in low-power idle modes. If you don't need exact scheduling of the alarm but still need to execute while idle, consider using @B_android#app#AlarmManager#setAndAllowWhileIdle_E@. This type of alarm must These alarms can significantly impact the power use of the device when idle (and thus cause significant battery blame to the app scheduling them), so they should be used with care. To reduce abuse, there are restrictions on how frequently these alarms will go off for a particular application. Under normal system operation, it will not dispatch these alarms more than about every minute (at which point every such pending alarm is dispatched); when in low-power idle modes this duration may be significantly longer, such as 15 minutes. Unlike other alarms, the system is free to reschedule this type of alarm to happen out of order with any other alarms, even those from the same app. This will clearly happen when the device is idle (since this alarm can go off while idle, when any other alarms from the app will be held until later), but may also happen even when not idle. Note that the OS will allow itself more flexibility for scheduling these alarms than regular exact alarms, since the application has opted into this behavior. When the device is idle it may take even more liberties with scheduling in order to optimize for battery life.", "history": "Added in API level 23", "FullName": "public void setExactAndAllowWhileIdle (int type, long triggerAtMillis, PendingIntent operation)"}, "cancel(android.app.AlarmManager.OnAlarmListener)": {"Returns": [], "Parameters": [["@B_android#app#AlarmManager#OnAlarmListener_E@", "AlarmManager.OnAlarmListener: OnAlarmListener instance that is the target of a currently-set alarm."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove any alarm scheduled to be delivered to the given @B_android#app#AlarmManager#OnAlarmListener_E@.", "history": "Added in API level 24", "FullName": "public void cancel (AlarmManager.OnAlarmListener listener)"}, "setInexactRepeating(int,long,long,android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: type of alarm. Value is @B_android#app#AlarmManager#RTC_WAKEUP_E@, @B_android#app#AlarmManager#RTC_E@, @B_android#app#AlarmManager#ELAPSED_REALTIME_WAKEUP_E@, or @B_android#app#AlarmManager#ELAPSED_REALTIME_E@"], ["long", "long: time in milliseconds that the alarm should first go off, using the appropriate clock (depending on the alarm type). This is inexact: the alarm will not fire before this time, but there may be a delay of almost an entire alarm interval before the first invocation of the alarm."], ["long", "long: interval in milliseconds between subsequent repeats of the alarm. Prior to API 19, if this is one of INTERVAL_FIFTEEN_MINUTES, INTERVAL_HALF_HOUR, INTERVAL_HOUR, INTERVAL_HALF_DAY, or INTERVAL_DAY then the alarm will be phase-aligned with other alarms to reduce the number of wakeups. Otherwise, the alarm will be set as though the application had called @B_android#app#AlarmManager#setRepeating_E@. As of API 19, all repeating alarms will be inexact and subject to batching with other alarms regardless of their stated repeat interval."], ["@B_android#app#PendingIntent_E@", "PendingIntent: Action to perform when the alarm goes off; typically comes from @B_android#app#PendingIntent#getBroadcast_E@."]], "Throws": [], "SeeAlso": ["@B_android#os#Handler_E@", "@B_android#app#AlarmManager#set_E@", "@B_android#app#AlarmManager#cancel_E@", "@B_android#content#Context#sendBroadcast_E@", "@B_android#content#Context#registerReceiver_E@", "@B_android#content#Intent#filterEquals_E@", "@B_android#app#AlarmManager_E@"], "Permissions": [], "Description": "Schedule a repeating alarm that has inexact trigger time requirements; for example, an alarm that repeats every hour, but not necessarily at the top of every hour. These alarms are more power-efficient than the strict recurrences traditionally supplied by @B_android#app#AlarmManager#setRepeating_E@, since the system can adjust alarms' delivery times to cause them to fire simultaneously, avoiding waking the device from sleep more than necessary. Your alarm's first trigger will not be before the requested time, but it might not occur for almost a full interval after that time. In addition, while the overall period of the repeating alarm will be as requested, the time between any two successive firings of the alarm may vary. If your application demands very low jitter, use one-shot alarms with an appropriate window instead; see @B_android#app#AlarmManager#setWindow_E@ and @B_android#app#AlarmManager#setExact_E@. As of API 19, all repeating alarms are inexact. Because this method has been available since API 3, your application can safely call it and be assured that it will get similar behavior on both current and older versions of Android.", "history": "Added in API level 3", "FullName": "public void setInexactRepeating (int type, long triggerAtMillis, long intervalMillis, PendingIntent operation)"}, "setWindow(int,long,long,java.lang.String,android.app.AlarmManager.OnAlarmListener,android.os.Handler)": {"Returns": [], "Parameters": [["int", "int: Value is @B_android#app#AlarmManager#RTC_WAKEUP_E@, @B_android#app#AlarmManager#RTC_E@, @B_android#app#AlarmManager#ELAPSED_REALTIME_WAKEUP_E@, or @B_android#app#AlarmManager#ELAPSED_REALTIME_E@"], ["long", "long no parameter comment"], ["long", "long no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_android#app#AlarmManager#OnAlarmListener_E@", "AlarmManager.OnAlarmListener no parameter comment"], ["@B_android#os#Handler_E@", "Handler no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Direct callback version of @B_android#app#AlarmManager#setWindow_E@. Rather than supplying a PendingIntent to be sent when the alarm time is reached, this variant supplies an @B_android#app#AlarmManager#OnAlarmListener_E@ instance that will be invoked at that time. The OnAlarmListener @B_android#app#AlarmManager#OnAlarmListener#onAlarm_E@ method will be invoked via the specified target Handler, or on the application's main looper if null is passed as the targetHandler parameter.", "history": "Added in API level 24", "FullName": "public void setWindow (int type, long windowStartMillis, long windowLengthMillis, String tag, AlarmManager.OnAlarmListener listener, Handler targetHandler)"}, "setAndAllowWhileIdle(int,long,android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: type of alarm. Value is @B_android#app#AlarmManager#RTC_WAKEUP_E@, @B_android#app#AlarmManager#RTC_E@, @B_android#app#AlarmManager#ELAPSED_REALTIME_WAKEUP_E@, or @B_android#app#AlarmManager#ELAPSED_REALTIME_E@"], ["long", "long: time in milliseconds that the alarm should go off, using the appropriate clock (depending on the alarm type)."], ["@B_android#app#PendingIntent_E@", "PendingIntent: Action to perform when the alarm goes off; typically comes from @B_android#app#PendingIntent#getBroadcast_E@."]], "Throws": [], "SeeAlso": ["@B_android#app#AlarmManager#set_E@", "@B_android#app#AlarmManager#setExactAndAllowWhileIdle_E@", "@B_android#app#AlarmManager#cancel_E@", "@B_android#content#Context#sendBroadcast_E@", "@B_android#content#Context#registerReceiver_E@", "@B_android#content#Intent#filterEquals_E@", "@B_android#app#AlarmManager_E@"], "Permissions": [], "Description": "Like @B_android#app#AlarmManager#set_E@, but this alarm will be allowed to execute even when the system is in low-power idle (a.k.a. doze) modes. This type of alarm must These alarms can significantly impact the power use of the device when idle (and thus cause significant battery blame to the app scheduling them), so they should be used with care. To reduce abuse, there are restrictions on how frequently these alarms will go off for a particular application. Under normal system operation, it will not dispatch these alarms more than about every minute (at which point every such pending alarm is dispatched); when in low-power idle modes this duration may be significantly longer, such as 15 minutes. Unlike other alarms, the system is free to reschedule this type of alarm to happen out of order with any other alarms, even those from the same app. This will clearly happen when the device is idle (since this alarm can go off while idle, when any other alarms from the app will be held until later), but may also happen even when not idle. Regardless of the app's target SDK version, this call always allows batching of the alarm.", "history": "Added in API level 23", "FullName": "public void setAndAllowWhileIdle (int type, long triggerAtMillis, PendingIntent operation)"}, "setExact(int,long,android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: type of alarm. Value is @B_android#app#AlarmManager#RTC_WAKEUP_E@, @B_android#app#AlarmManager#RTC_E@, @B_android#app#AlarmManager#ELAPSED_REALTIME_WAKEUP_E@, or @B_android#app#AlarmManager#ELAPSED_REALTIME_E@"], ["long", "long: time in milliseconds that the alarm should go off, using the appropriate clock (depending on the alarm type)."], ["@B_android#app#PendingIntent_E@", "PendingIntent: Action to perform when the alarm goes off; typically comes from @B_android#app#PendingIntent#getBroadcast_E@."]], "Throws": [], "SeeAlso": ["@B_android#app#AlarmManager#set_E@", "@B_android#app#AlarmManager#setRepeating_E@", "@B_android#app#AlarmManager#setWindow_E@", "@B_android#app#AlarmManager#cancel_E@", "@B_android#content#Context#sendBroadcast_E@", "@B_android#content#Context#registerReceiver_E@", "@B_android#content#Intent#filterEquals_E@", "@B_android#app#AlarmManager_E@"], "Permissions": [], "Description": "Schedule an alarm to be delivered precisely at the stated time. This method is like @B_android#app#AlarmManager#set_E@, but does not permit the OS to adjust the delivery time. The alarm will be delivered as nearly as possible to the requested trigger time.", "history": "Added in API level 19", "FullName": "public void setExact (int type, long triggerAtMillis, PendingIntent operation)"}, "setTime(long)": {"Returns": [], "Parameters": [["long", "long: time in milliseconds since the Epoch"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SET_TIME_E@"], "Description": "Set the system wall clock time. Requires the permission android.permission.SET_TIME. Requires @B_android#Manifest#permission#SET_TIME_E@", "history": "Added in API level 8", "FullName": "public void setTime (long millis)"}, "cancel(android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent: IntentSender which matches a previously added IntentSender. This parameter must not be null."]], "Throws": [], "SeeAlso": ["@B_android#app#AlarmManager#set_E@"], "Permissions": [], "Description": "Remove any alarms with a matching @B_android#content#Intent_E@. Any alarm, of any type, whose Intent matches this one (as defined by @B_android#content#Intent#filterEquals_E@), will be canceled.", "history": "Added in API level 1", "FullName": "public void cancel (PendingIntent operation)"}, "setAlarmClock(android.app.AlarmManager.AlarmClockInfo,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent: Action to perform when the alarm goes off; typically comes from @B_android#app#PendingIntent#getBroadcast_E@."]], "Throws": [], "SeeAlso": ["@B_android#app#AlarmManager#set_E@", "@B_android#app#AlarmManager#setRepeating_E@", "@B_android#app#AlarmManager#setWindow_E@", "@B_android#app#AlarmManager#setExact_E@", "@B_android#app#AlarmManager#cancel_E@", "@B_android#app#AlarmManager#getNextAlarmClock_E@", "@B_android#content#Context#sendBroadcast_E@", "@B_android#content#Context#registerReceiver_E@", "@B_android#content#Intent#filterEquals_E@"], "Permissions": [], "Description": "Schedule an alarm that represents an alarm clock, which will be used to notify the user when it goes off. The expectation is that when this alarm triggers, the application will further wake up the device to tell the user about the alarm -- turning on the screen, playing a sound, vibrating, etc. As such, the system will typically also use the information supplied here to tell the user about this upcoming alarm if appropriate. Due to the nature of this kind of alarm, similar to @B_android#app#AlarmManager#setExactAndAllowWhileIdle_E@, these alarms will be allowed to trigger even if the system is in a low-power idle (a.k.a. doze) mode. The system may also do some prep-work when it sees that such an alarm coming up, to reduce the amount of background work that could happen if this causes the device to fully wake up -- this is to avoid situations such as a large number of devices having an alarm set at the same time in the morning, all waking up at that time and suddenly swamping the network with pending background work. As such, these types of alarms can be extremely expensive on battery use and should only be used for their intended purpose. This method is like @B_android#app#AlarmManager#setExact_E@, but implies @B_android#app#AlarmManager#RTC_WAKEUP_E@.", "history": "Added in API level 21", "FullName": "public void setAlarmClock (AlarmManager.AlarmClockInfo info, PendingIntent operation)"}, "set(int,long,java.lang.String,android.app.AlarmManager.OnAlarmListener,android.os.Handler)": {"Returns": [], "Parameters": [["int", "int: type of alarm. Value is @B_android#app#AlarmManager#RTC_WAKEUP_E@, @B_android#app#AlarmManager#RTC_E@, @B_android#app#AlarmManager#ELAPSED_REALTIME_WAKEUP_E@, or @B_android#app#AlarmManager#ELAPSED_REALTIME_E@"], ["long", "long: time in milliseconds that the alarm should go off, using the appropriate clock (depending on the alarm type)."], ["@B_java#lang#String_E@", "String: string describing the alarm, used for logging and battery-use attribution"], ["@B_android#app#AlarmManager#OnAlarmListener_E@", "AlarmManager.OnAlarmListener: @B_android#app#AlarmManager#OnAlarmListener_E@ instance whose @B_android#app#AlarmManager#OnAlarmListener#onAlarm_E@ method will be called when the alarm time is reached. A given OnAlarmListener instance can only be the target of a single pending alarm, just as a given PendingIntent can only be used with one alarm at a time."], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ on which to execute the listener's onAlarm() callback, or null to run that callback on the main looper."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Direct callback version of @B_android#app#AlarmManager#set_E@. Rather than supplying a PendingIntent to be sent when the alarm time is reached, this variant supplies an @B_android#app#AlarmManager#OnAlarmListener_E@ instance that will be invoked at that time. The OnAlarmListener's @B_android#app#AlarmManager#OnAlarmListener#onAlarm_E@ method will be invoked via the specified target Handler, or on the application's main looper if null is passed as the targetHandler parameter.", "history": "Added in API level 24", "FullName": "public void set (int type, long triggerAtMillis, String tag, AlarmManager.OnAlarmListener listener, Handler targetHandler)"}, "setExact(int, long, android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: type of alarm.Value is RTC_WAKEUP, RTC, ELAPSED_REALTIME_WAKEUP or ELAPSED_REALTIME."], ["long", "long: time in milliseconds that the alarm should go off, using the appropriate clock (depending on the alarm type)."], ["@B_android#app#PendingIntent_E@", "PendingIntent: Action to perform when the alarm goes off; typically comes from @B_android#app#PendingIntent#getBroadcast_E@."]], "Throws": [], "SeeAlso": ["@B_android#app#AlarmManager#set_E@", "@B_android#app#AlarmManager#setRepeating_E@", "@B_android#app#AlarmManager#setWindow_E@", "@B_android#app#AlarmManager#cancel_E@", "@B_android#content#Context#sendBroadcast_E@", "@B_android#content#Context#registerReceiver_E@", "@B_android#content#Intent#filterEquals_E@", "@B_android#app#AlarmManager_E@"], "Permissions": [], "Description": "Schedule an alarm to be delivered precisely at the stated time. This method is like @B_android#app#AlarmManager#set_E@, but does not permit the OS to adjust the delivery time. The alarm will be delivered as nearly as possible to the requested trigger time.", "history": "added in API level 19", "FullName": "public void setExact (int type, long triggerAtMillis, PendingIntent operation)"}}, "Inheritance": [], "ClassName": "android.app.AlarmManager", "ClassDesc": "This class provides access to the system alarm services. These allow you to schedule your application to be run at some point in the future. When an alarm goes off, the @B_android#content#Intent_E@ that had been registered for it is broadcast by the system, automatically starting the target application if it is not already running. Registered alarms are retained while the device is asleep (and can optionally wake the device up if they go off during that time), but will be cleared if it is turned off and rebooted. The Alarm Manager holds a CPU wake lock as long as the alarm receiver's onReceive() method is executing. This guarantees that the phone will not sleep until you have finished handling the broadcast. Once onReceive() returns, the Alarm Manager releases this wake lock. This means that the phone will in some cases sleep as soon as your onReceive() method completes. If your alarm receiver called @B_android#content#Context#startService_E@, it is possible that the phone will sleep before the requested service is launched. To prevent this, your BroadcastReceiver and Service will need to implement a separate wake lock policy to ensure that the phone continues running until the service becomes available. @B_android#os#Build#VERSION_CODES#KITKAT_E@) alarm delivery is inexact: the OS will shift alarms in order to minimize wakeups and battery use. There are new APIs to support applications which need strict delivery guarantees; see @B_android#app#AlarmManager#setWindow_E@ and @B_android#app#AlarmManager#setExact_E@. Applications whose targetSdkVersion is earlier than API 19 will continue to see the previous behavior in which all alarms are delivered exactly when requested."}