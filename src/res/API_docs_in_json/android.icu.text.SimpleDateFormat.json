{"Functions": {"getDateFormatSymbols()": {"Returns": [["@B_android#icu#text#DateFormatSymbols_E@", "a copy of the date-time formatting data associated with this date-time formatter."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the date/time formatting data.", "history": "Added in API level 24", "FullName": "public DateFormatSymbols getDateFormatSymbols ()"}, "SimpleDateFormat(java.lang.String,java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#util#Locale_E@", "Locale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a SimpleDateFormat using the given pattern and locale.", "history": "Added in API level 24", "FullName": "public SimpleDateFormat (String pattern, Locale loc)"}, "setContext(android.icu.text.DisplayContext)": {"Returns": [], "Parameters": [["@B_android#icu#text#DisplayContext_E@", "DisplayContext: The DisplayContext value to set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public void setContext (DisplayContext context)"}, "setNumberFormat(java.lang.String,android.icu.text.NumberFormat)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the fields to override"], ["@B_android#icu#text#NumberFormat_E@", "NumberFormat: the NumbeferFormat used"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "when the fields contain invalid field"]], "SeeAlso": [], "Permissions": [], "Description": "allow the user to set the NumberFormat for several fields It can be a single field like: \"y\"(year) or \"M\"(month) It can be several field combined together: \"yMd\"(year, month and date) Note: 1 symbol field is enough for multiple symbol fields (so \"y\" will override \"yy\", \"yyy\") If the field is not numeric, then override has no effect (like \"MMM\" will use abbreviation, not numerical field)", "history": "Added in API level 24", "FullName": "public void setNumberFormat (String fields, NumberFormat overrideNF)"}, "patternCharToDateFormatField(char)": {"Returns": [["@B_android#icu#text#DateFormat#Field_E@", "DateFormat.Field associated with the pattern character"]], "Parameters": [["char", "char: The pattern character"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a DateFormat.Field constant associated with the specified format pattern character.", "history": "Added in API level 24", "FullName": "protected DateFormat.Field patternCharToDateFormatField (char ch)"}, "SimpleDateFormat()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat_E@", "@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a SimpleDateFormat using the default pattern for the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public SimpleDateFormat ()"}, "parse(java.lang.String,android.icu.util.Calendar,java.text.ParsePosition)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The date/time string to be parsed"], ["@B_android#icu#util#Calendar_E@", "Calendar: The calendar set on input to the date and time to be used for missing values in the date/time string being parsed, and set on output to the parsed date/time. In general, this should be initialized before calling this method - either cleared or set to the current date, depending on desired behavior. If this parse fails, the calendar may still have been modified. When the calendar type is different from the internal calendar held by this DateFormat instance, calendar field values will be parsed based on the internal calendar initialized with the time and the time zone taken from this calendar, then the parse result (time in milliseconds and time zone) will be set back to this calendar."], ["@B_java#text#ParsePosition_E@", "ParsePosition: On input, the position at which to start parsing; on output, the position at which parsing terminated, or the start position if the parse failed."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat_E@"], "Permissions": [], "Description": "Overrides DateFormat", "history": "Added in API level 24", "FullName": "public void parse (String text, Calendar cal, ParsePosition parsePos)"}, "setNumberFormat(android.icu.text.NumberFormat)": {"Returns": [], "Parameters": [["@B_android#icu#text#NumberFormat_E@", "NumberFormat: the given new NumberFormat."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides superclass method and This method also clears per field NumberFormat instances previously set by @B_android#icu#text#SimpleDateFormat#setNumberFormat_E@", "history": "Added in API level 24", "FullName": "public void setNumberFormat (NumberFormat newNumberFormat)"}, "set2DigitYearStart(java.util.Date)": {"Returns": [], "Parameters": [["@B_java#util#Date_E@", "Date: During parsing, two digit years will be placed in the range startDate to startDate + 100 years."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the 100-year period 2-digit years will be interpreted as being in to begin on the date the user specifies.", "history": "Added in API level 24", "FullName": "public void set2DigitYearStart (Date startDate)"}, "matchString(java.lang.String,int,int,java.lang.String[],android.icu.util.Calendar)": {"Returns": [["int", "the new start position if matching succeeded; a negative number indicating matching failure, otherwise. As a side effect, sets the cal field field to the index of the best match, if matching succeeded."]], "Parameters": [["@B_java#lang#String_E@", "String: the time text being parsed."], ["int", "int: where to start parsing."], ["int", "int: the date field being parsed."], ["@B_java#lang#String_E@", "String: the string array to parsed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempt to match the text at a given position against an array of strings. Since multiple strings in the array may match (for example, if the array contains \"a\", \"ab\", and \"abc\", all will match the input string \"abcd\") the longest match is returned. As a side effect, the given field of cal is set to the index of the best match, if there is one.", "history": "Added in API level 24", "FullName": "protected int matchString (String text, int start, int field, String[] data, Calendar cal)"}, "SimpleDateFormat(java.lang.String,java.lang.String,android.icu.util.ULocale)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The pattern to be used"], ["@B_java#lang#String_E@", "String: The override string. A numbering system override string can take one of the following forms: 1). If just a numbering system name is specified, it applies to all numeric fields in the date format pattern. 2). To specify an alternate numbering system on a field by field basis, use the field letters from the pattern followed by an = sign, followed by the numbering system name. For example, to specify that just the year be formatted using Hebrew digits, use the override \"y=hebr\". Multiple overrides can be specified in a single string by separating them with a semi-colon. For example, the override string \"m=thai;y=deva\" would format using Thai digits for the month and Devanagari digits for the year."], ["@B_android#icu#util#ULocale_E@", "ULocale: The locale to be used"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a SimpleDateFormat using the given pattern , override and locale.", "history": "Added in API level 24", "FullName": "public SimpleDateFormat (String pattern, String override, ULocale loc)"}, "SimpleDateFormat(java.lang.String,android.icu.text.DateFormatSymbols)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_android#icu#text#DateFormatSymbols_E@", "DateFormatSymbols no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a SimpleDateFormat using the given pattern and locale-specific symbol data. Warning: uses default FORMAT locale for digits!", "history": "Added in API level 24", "FullName": "public SimpleDateFormat (String pattern, DateFormatSymbols formatData)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override equals.", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "matchQuarterString(java.lang.String,int,int,java.lang.String[],android.icu.util.Calendar)": {"Returns": [["int", "the new start position if matching succeeded; a negative number indicating matching failure, otherwise. As a side effect, sets the cal field field to the index of the best match, if matching succeeded."]], "Parameters": [["@B_java#lang#String_E@", "String: the time text being parsed."], ["int", "int: where to start parsing."], ["int", "int: the date field being parsed."], ["@B_java#lang#String_E@", "String: the string array to parsed."], ["@B_android#icu#util#Calendar_E@", "Calendar no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempt to match the text at a given position against an array of quarter strings. Since multiple strings in the array may match (for example, if the array contains \"a\", \"ab\", and \"abc\", all will match the input string \"abcd\") the longest match is returned. As a side effect, the given field of cal is set to the index of the best match, if there is one.", "history": "Added in API level 24", "FullName": "protected int matchQuarterString (String text, int start, int field, String[] data, Calendar cal)"}, "format(android.icu.util.Calendar,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "the formatted date-time string."]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: the calendar whose date-time value is to be formatted into a date-time string"], ["@B_java#lang#StringBuffer_E@", "StringBuffer: where the new date-time text is to be appended"], ["@B_java#text#FieldPosition_E@", "FieldPosition: the formatting position. On input: an alignment field, if desired. On output: the offsets of the alignment field."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat_E@"], "Permissions": [], "Description": "Formats a date or time, which is the standard millis since January 1, 1970, 00:00:00 GMT. Example: using the US locale: \"yyyy.MM.dd G 'at' HH:mm:ss zzz\" ->> 1996.07.10 AD at 15:08:56 PDT", "history": "Added in API level 24", "FullName": "public StringBuffer format (Calendar cal, StringBuffer toAppendTo, FieldPosition pos)"}, "subParse(java.lang.String,int,char,int,boolean,boolean,boolean[],android.icu.util.Calendar)": {"Returns": [["int", "the new start position if matching succeeded; a negative number indicating matching failure, otherwise. As a side effect, set the appropriate field of cal with the parsed value."]], "Parameters": [["@B_java#lang#String_E@", "String: the time text to be parsed."], ["int", "int: where to start parsing."], ["char", "char: the pattern character for the date field text to be parsed."], ["int", "int: the count of a pattern character."], ["boolean", "boolean: if true, then the next field directly abuts this one, and we should use the count to know when to stop parsing."], ["boolean", "boolean no parameter comment"], ["boolean[]", "boolean: return parameter; upon return, if ambiguousYear[0] is true, then a two-digit year was parsed and may need to be readjusted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Protected method that converts one field of the input string into a numeric field value in cal. Returns -start (for ParsePosition) if failed. Subclasses may override this method to modify or add parsing capabilities.", "history": "Added in API level 24", "FullName": "protected int subParse (String text, int start, char ch, int count, boolean obeyCount, boolean allowNegative, boolean[] ambiguousYear, Calendar cal)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides Cloneable", "history": "Added in API level 24", "FullName": "public Object clone ()"}, "applyPattern(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apply the given unlocalized pattern string to this date format.", "history": "Added in API level 24", "FullName": "public void applyPattern (String pat)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override hashCode. Generates the hash code for the SimpleDateFormat object", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "zeroPaddingNumber(long,int,int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a number with the specified minimum and maximum number of digits.", "history": "Added in API level 24", "FullName": "protected String zeroPaddingNumber (long value, int minDigits, int maxDigits)"}, "formatToCharacterIterator(java.lang.Object)": {"Returns": [["@B_java#text#AttributedCharacterIterator_E@", "AttributedCharacterIterator describing the formatted value."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format the object to an attributed string, and return the corresponding iterator Overrides superclass method.", "history": "Added in API level 24", "FullName": "public AttributedCharacterIterator formatToCharacterIterator (Object obj)"}, "toLocalizedPattern()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a localized pattern string describing this date format. @B_android#icu#text#DateFormatSymbols#getLocalPatternChars_E@ to get localized format pattern characters. ICU does not include localized pattern character data, therefore, unless user sets localized pattern characters manually, this method returns the same result as @B_android#icu#text#SimpleDateFormat#toPattern_E@.", "history": "Added in API level 24", "FullName": "public String toLocalizedPattern ()"}, "subFormat(char,int,int,java.text.FieldPosition,android.icu.text.DateFormatSymbols,android.icu.util.Calendar)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["char", "char: the pattern character"], ["int", "int: the number of times ch is repeated in the pattern"], ["int", "int: the offset of the output string at the start of this field; used to set pos when appropriate"], ["@B_java#text#FieldPosition_E@", "FieldPosition: receives the position of a field, when appropriate"], ["@B_android#icu#text#DateFormatSymbols_E@", "DateFormatSymbols: the symbols for this formatter"], ["@B_android#icu#util#Calendar_E@", "Calendar no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Formats a single field, given its pattern character. Subclasses may override this method in order to modify or add formatting capabilities.", "history": "Added in API level 24", "FullName": "protected String subFormat (char ch, int count, int beginOffset, FieldPosition pos, DateFormatSymbols fmtData, Calendar cal)"}, "setTimeZoneFormat(android.icu.text.TimeZoneFormat)": {"Returns": [], "Parameters": [["@B_android#icu#text#TimeZoneFormat_E@", "TimeZoneFormat: the new time zone formatter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public void setTimeZoneFormat (TimeZoneFormat tzfmt)"}, "SimpleDateFormat(java.lang.String,android.icu.util.ULocale)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_android#icu#util#ULocale_E@", "ULocale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a SimpleDateFormat using the given pattern and locale.", "history": "Added in API level 24", "FullName": "public SimpleDateFormat (String pattern, ULocale loc)"}, "get2DigitYearStart()": {"Returns": [["@B_java#util#Date_E@", "the start of the 100-year period into which two digit years are parsed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the beginning date of the 100-year period 2-digit years are interpreted as being within.", "history": "Added in API level 24", "FullName": "public Date get2DigitYearStart ()"}, "getSymbols()": {"Returns": [["@B_android#icu#text#DateFormatSymbols_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Method for subclasses to access the DateFormatSymbols.", "history": "Added in API level 24", "FullName": "protected DateFormatSymbols getSymbols ()"}, "getNumberFormat(char)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "override NumberFormat used for the field"]], "Parameters": [["char", "char: the field the user wants"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "give the NumberFormat used for the field like 'y'(year) and 'M'(year)", "history": "Added in API level 24", "FullName": "public NumberFormat getNumberFormat (char field)"}, "toPattern()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a pattern string describing this date format.", "history": "Added in API level 24", "FullName": "public String toPattern ()"}, "SimpleDateFormat(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a SimpleDateFormat using the given pattern in the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public SimpleDateFormat (String pattern)"}, "applyLocalizedPattern(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apply the given localized pattern string to this date format.", "history": "Added in API level 24", "FullName": "public void applyLocalizedPattern (String pat)"}, "zeroPaddingNumber(long, int, int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a number with the specified minimum and maximum number of digits.", "history": "added in API level 24", "FullName": "protected String zeroPaddingNumber (long value, int minDigits, int maxDigits)"}, "setDateFormatSymbols(android.icu.text.DateFormatSymbols)": {"Returns": [], "Parameters": [["@B_android#icu#text#DateFormatSymbols_E@", "DateFormatSymbols: the new symbols"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allows you to set the date/time formatting data.", "history": "Added in API level 24", "FullName": "public void setDateFormatSymbols (DateFormatSymbols newFormatSymbols)"}, "getTimeZoneFormat()": {"Returns": [["@B_android#icu#text#TimeZoneFormat_E@", "the time zone formatter which this date/time formatter uses."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public TimeZoneFormat getTimeZoneFormat ()"}}, "Inheritance": ["@B_java#text#Format_E@", "@B_android#icu#text#UFormat_E@", "@B_android#icu#text#DateFormat_E@"], "ClassName": "android.icu.text.SimpleDateFormat", "ClassDesc": "@B_java#text#SimpleDateFormat_E@. Methods, fields, and other functionality specific to ICU are labeled 'SimpleDateFormat is a concrete class for formatting and parsing dates in a locale-sensitive manner. It allows for formatting (date -> text), parsing (text -> date), and normalization. SimpleDateFormat allows you to start by choosing any user-defined patterns for date-time formatting. However, you are encouraged to create a date-time formatter with either getTimeInstance, getDateInstance, or getDateTimeInstance in DateFormat. Each of these class methods can return a date/time formatter initialized with a default format pattern. You may modify the format pattern using the applyPattern methods as desired. For more information on using these methods, see @B_android#icu#text#DateFormat_E@. Date and time formats are specified by date and time pattern strings. Within date and time pattern strings, all unquoted ASCII letters [A-Za-z] are reserved as pattern letters representing calendar fields. SimpleDateFormat supports the date and time formatting algorithm and pattern letters defined by Any characters in the pattern that are not in the ranges of ['a'..'z'] and ['A'..'Z'] will be treated as quoted text. For instance, characters like ':', '.', ' ', '#' and '@' will appear in the resulting time text even they are not embraced within single quotes. A pattern containing any invalid pattern letter will result in a thrown exception during formatting or parsing. currentTime_2 obtained from parsing will be equal to currentTime_1. However, they may not be equal if the am/pm marker 'a' is left out from the format pattern while the \"hour in am/pm\" pattern symbol is used. This information loss can happen when formatting the time in PM. When parsing a date string using the abbreviated year pattern (\"yy\"), SimpleDateFormat must interpret the abbreviated year relative to some century. It does this by adjusting dates to be within 80 years before and 20 years after the time the SimpleDateFormat instance is created. For example, using a pattern of \"MM/dd/yy\" and a SimpleDateFormat instance created on Jan 1, 1997, the string \"01/11/12\" would be interpreted as Jan 11, 2012 while the string \"05/04/64\" would be interpreted as May 4, 1964. During parsing, only strings consisting of exactly two digits, as defined by @B_android#icu#lang#UCharacter#isDigit_E@, will be parsed into the default century. Any other numeric string, such as a one digit string, a three or more digit string, or a two digit string that isn't all digits (for example, \"-1\"), is interpreted literally. So \"01/02/3\" or \"01/02/003\" are parsed, using the same pattern, as Jan 2, 3 AD. Likewise, \"01/02/-3\" is parsed as Jan 2, 4 BC. If the year pattern does not have exactly two 'y' characters, the year is interpreted literally, regardless of the number of digits. So using the pattern \"MM/dd/yyyy\", \"01/11/12\" parses to Jan 11, 12 A.D. When numeric fields abut one another directly, with no intervening delimiter characters, they constitute a run of abutting numeric fields. Such runs are parsed specially. For example, the format \"HHmmss\" parses the input text \"123456\" to 12:34:56, parses the input text \"12345\" to 1:23:45, and fails to parse \"1234\". In other words, the leftmost field of the run is flexible, while the others keep a fixed width. If the parse fails anywhere in the run, then the leftmost field is shortened by one character, and the entire run is parsed again. This is repeated until either the parse succeeds or the leftmost field is one character in length. If the parse still fails at that point, the parse of the run fails. For time zones that have no names, use strings GMT+hours:minutes or GMT-hours:minutes. The calendar defines what is the first day of the week, the first week of the year, whether hours are zero based or not (0 vs 12 or 24), and the time zone. There is one common decimal format to handle all the numbers; the digit count is handled programmatically according to the pattern."}