{"Functions": {"flush(java.nio.ByteBuffer)": {"Returns": [["@B_java#nio#charset#CoderResult_E@", "A coder-result object, either @B_java#nio#charset#CoderResult#UNDERFLOW_E@ or @B_java#nio#charset#CoderResult#OVERFLOW_E@"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The output byte buffer"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the previous step of the current encoding operation was an invocation neither of the @B_java#nio#charset#CharsetEncoder#flush_E@ method nor of the three-argument @B_java#nio#charset#CharsetEncoder#encode_E@ method with a value of true for the endOfInput parameter"]], "SeeAlso": [], "Permissions": [], "Description": "Flushes this encoder. Some encoders maintain internal state and may need to write some final bytes to the output buffer once the overall input sequence has been read. Any additional output is written to the output buffer beginning at its current position. At most @B_java#nio#Buffer#remaining_E@ bytes will be written. The buffer's position will be advanced appropriately, but its mark and limit will not be modified. If this method completes successfully then it returns @B_java#nio#charset#CoderResult#UNDERFLOW_E@. If there is insufficient room in the output buffer then it returns @B_java#nio#charset#CoderResult#OVERFLOW_E@. If this happens then this method must be invoked again, with an output buffer that has more room, in order to complete the current If this encoder has already been flushed then invoking this method has no effect. This method invokes the @B_java#nio#charset#CharsetEncoder#implFlush_E@ method to perform the actual flushing operation.", "history": "Added in API level 1", "FullName": "public final CoderResult flush (ByteBuffer out)"}, "malformedInputAction()": {"Returns": [["@B_java#nio#charset#CodingErrorAction_E@", "The current malformed-input action, which is never null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this encoder's current action for malformed-input errors.", "history": "Added in API level 1", "FullName": "public CodingErrorAction malformedInputAction ()"}, "replaceWith(byte[])": {"Returns": [["@B_java#nio#charset#CharsetEncoder_E@", "This encoder"]], "Parameters": [["byte[]", "byte: The replacement value The new replacement; must not be null, must have non-zero length, must not be longer than the value returned by the @B_java#nio#charset#CharsetEncoder#maxBytesPerChar_E@ method, and must be @B_java#nio#charset#CharsetEncoder#isLegalReplacement_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on the parameter do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Changes this encoder's replacement value. This method invokes the @B_java#nio#charset#CharsetEncoder#implReplaceWith_E@ method, passing the new replacement, after checking that the new replacement is acceptable.", "history": "Added in API level 1", "FullName": "public final CharsetEncoder replaceWith (byte[] newReplacement)"}, "CharsetEncoder(java.nio.charset.Charset,float,float)": {"Returns": [], "Parameters": [["@B_java#nio#charset#Charset_E@", "Charset: The charset that created this encoder"], ["float", "float: A positive float value indicating the expected number of bytes that will be produced for each input character"], ["float", "float: A positive float value indicating the maximum number of bytes that will be produced for each input character"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on the parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new encoder. The new encoder will have the given bytes-per-char values and its replacement will be the byte array", "history": "Added in API level 1", "FullName": "protected CharsetEncoder (Charset cs, float averageBytesPerChar, float maxBytesPerChar)"}, "averageBytesPerChar()": {"Returns": [["float", "The average number of bytes produced per character of input"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the average number of bytes that will be produced for each character of input. This heuristic value may be used to estimate the size of the output buffer required for a given input sequence.", "history": "Added in API level 1", "FullName": "public final float averageBytesPerChar ()"}, "implReset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets this encoder, clearing any charset-specific internal state. The default implementation of this method does nothing. This method should be overridden by encoders that maintain internal state.", "history": "Added in API level 1", "FullName": "protected void implReset ()"}, "unmappableCharacterAction()": {"Returns": [["@B_java#nio#charset#CodingErrorAction_E@", "The current unmappable-character action, which is never null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this encoder's current action for unmappable-character errors.", "history": "Added in API level 1", "FullName": "public CodingErrorAction unmappableCharacterAction ()"}, "canEncode(char)": {"Returns": [["boolean", "true if, and only if, this encoder can encode the given character"]], "Parameters": [["char", "char: The given character"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If an encoding operation is already in progress"]], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this encoder can encode the given character. This method returns @B_java#nio#charset#CharsetEncoder#canEncode_E@ method may be used to test whether or not a character sequence can be encoded. This method may modify this encoder's state; it should therefore not be invoked if an The default implementation of this method is not very efficient; it should generally be overridden to improve performance.", "history": "Added in API level 1", "FullName": "public boolean canEncode (char c)"}, "implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)": {"Returns": [], "Parameters": [["@B_java#nio#charset#CodingErrorAction_E@", "CodingErrorAction: The new action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports a change to this encoder's unmappable-character action. The default implementation of this method does nothing. This method should be overridden by encoders that require notification of changes to the unmappable-character action.", "history": "Added in API level 1", "FullName": "protected void implOnUnmappableCharacter (CodingErrorAction newAction)"}, "CharsetEncoder(java.nio.charset.Charset,float,float,byte[])": {"Returns": [], "Parameters": [["@B_java#nio#charset#Charset_E@", "Charset: The charset that created this encoder"], ["float", "float: A positive float value indicating the expected number of bytes that will be produced for each input character"], ["float", "float: A positive float value indicating the maximum number of bytes that will be produced for each input character"], ["byte[]", "byte: The initial replacement; must not be null, must have non-zero length, must not be longer than maxBytesPerChar, and must be legal"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on the parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new encoder. The new encoder will have the given bytes-per-char and replacement values.", "history": "Added in API level 1", "FullName": "protected CharsetEncoder (Charset cs, float averageBytesPerChar, float maxBytesPerChar, byte[] replacement)"}, "implFlush(java.nio.ByteBuffer)": {"Returns": [["@B_java#nio#charset#CoderResult_E@", "A coder-result object, either @B_java#nio#charset#CoderResult#UNDERFLOW_E@ or @B_java#nio#charset#CoderResult#OVERFLOW_E@"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The output byte buffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flushes this encoder. The default implementation of this method does nothing, and always returns @B_java#nio#charset#CoderResult#UNDERFLOW_E@. This method should be overridden by encoders that may need to write final bytes to the output buffer once the entire input sequence has been read.", "history": "Added in API level 1", "FullName": "protected CoderResult implFlush (ByteBuffer out)"}, "isLegalReplacement(byte[])": {"Returns": [["boolean", "true if, and only if, the given byte array is a legal replacement value for this encoder"]], "Parameters": [["byte[]", "byte: The byte array to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not the given byte array is a legal replacement value for this encoder. A replacement is legal if, and only if, it is a legal sequence of bytes in this encoder's charset; that is, it must be possible to decode the replacement into one or more sixteen-bit Unicode characters. The default implementation of this method is not very efficient; it should generally be overridden to improve performance.", "history": "Added in API level 1", "FullName": "public boolean isLegalReplacement (byte[] repl)"}, "implOnMalformedInput(java.nio.charset.CodingErrorAction)": {"Returns": [], "Parameters": [["@B_java#nio#charset#CodingErrorAction_E@", "CodingErrorAction: The new action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports a change to this encoder's malformed-input action. The default implementation of this method does nothing. This method should be overridden by encoders that require notification of changes to the malformed-input action.", "history": "Added in API level 1", "FullName": "protected void implOnMalformedInput (CodingErrorAction newAction)"}, "reset()": {"Returns": [["@B_java#nio#charset#CharsetEncoder_E@", "This encoder"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets this encoder, clearing any internal state. This method resets charset-independent state and also invokes the @B_java#nio#charset#CharsetEncoder#implReset_E@ method in order to perform any charset-specific reset actions.", "history": "Added in API level 1", "FullName": "public final CharsetEncoder reset ()"}, "encode(java.nio.CharBuffer)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "A newly-allocated byte buffer containing the result of the encoding operation. The buffer's position will be zero and its limit will follow the last byte written."]], "Parameters": [["@B_java#nio#CharBuffer_E@", "CharBuffer: The input character buffer"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If an encoding operation is already in progress"], ["@B_java#nio#charset#MalformedInputException_E@", "If the character sequence starting at the input buffer's current position is not a legal sixteen-bit Unicode sequence and the current malformed-input action is @B_java#nio#charset#CodingErrorAction#REPORT_E@"], ["@B_java#nio#charset#UnmappableCharacterException_E@", "If the character sequence starting at the input buffer's current position cannot be mapped to an equivalent byte sequence and the current unmappable-character action is @B_java#nio#charset#CodingErrorAction#REPORT_E@"], ["@B_java#nio#charset#CharacterCodingException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Convenience method that encodes the remaining content of a single input character buffer into a newly-allocated byte buffer. This method implements an entire", "history": "Added in API level 1", "FullName": "public final ByteBuffer encode (CharBuffer in)"}, "replacement()": {"Returns": [["byte[]", "This encoder's current replacement, which is never null and is never empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this encoder's replacement value.", "history": "Added in API level 1", "FullName": "public final byte[] replacement ()"}, "encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)": {"Returns": [["@B_java#nio#charset#CoderResult_E@", "A coder-result object describing the reason for termination"]], "Parameters": [["@B_java#nio#CharBuffer_E@", "CharBuffer: The input character buffer"], ["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The output byte buffer"], ["boolean", "boolean: true if, and only if, the invoker can provide no additional input characters beyond those in the given buffer"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If an encoding operation is already in progress and the previous step was an invocation neither of the @B_java#nio#charset#CharsetEncoder#reset_E@ method, nor of this method with a value of false for the endOfInput parameter, nor of this method with a value of true for the endOfInput parameter but a return value indicating an incomplete encoding operation"], ["@B_java#nio#charset#CoderMalfunctionError_E@", "If an invocation of the encodeLoop method threw an unexpected exception"]], "SeeAlso": [], "Permissions": [], "Description": "Encodes as many characters as possible from the given input buffer, writing the results to the given output buffer. The buffers are read from, and written to, starting at their current positions. At most @B_java#nio#Buffer#remaining_E@ characters will be read and at most @B_java#nio#Buffer#remaining_E@ bytes will be written. The buffers' positions will be advanced to reflect the characters read and the bytes written, but their marks and limits will not be modified. In addition to reading characters from the input buffer and writing bytes to the output buffer, this method returns a @B_java#nio#charset#CoderResult_E@ object to describe its reason for termination: @B_java#nio#charset#CoderResult#UNDERFLOW_E@ indicates that as much of the input buffer as possible has been encoded. If there is no further input then the invoker can proceed to the next step of the @B_java#nio#charset#CoderResult#OVERFLOW_E@ indicates that there is insufficient space in the output buffer to encode any more characters. This method should be invoked again with an output buffer that has more A @B_java#nio#charset#CoderResult#length_E@ method. This case applies only if the @B_java#nio#charset#CodingErrorAction#REPORT_E@; otherwise the malformed input will be ignored or replaced, as requested. An @B_java#nio#charset#CoderResult#length_E@ method. This case applies only if the @B_java#nio#charset#CodingErrorAction#REPORT_E@; otherwise the unmappable character will be ignored or replaced, as requested. In any case, if this method is to be reinvoked in the same encoding operation then care should be taken to preserve any characters remaining in the input buffer so that they are available to the next invocation. The This method works by invoking the @B_java#nio#charset#CharsetEncoder#encodeLoop_E@ method, interpreting its results, handling error conditions, and reinvoking it as necessary.", "history": "Added in API level 1", "FullName": "public final CoderResult encode (CharBuffer in, ByteBuffer out, boolean endOfInput)"}, "onMalformedInput(java.nio.charset.CodingErrorAction)": {"Returns": [["@B_java#nio#charset#CharsetEncoder_E@", "This encoder"]], "Parameters": [["@B_java#nio#charset#CodingErrorAction_E@", "CodingErrorAction: The new action; must not be null"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the precondition on the parameter does not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Changes this encoder's action for malformed-input errors. This method invokes the @B_java#nio#charset#CharsetEncoder#implOnMalformedInput_E@ method, passing the new action.", "history": "Added in API level 1", "FullName": "public final CharsetEncoder onMalformedInput (CodingErrorAction newAction)"}, "charset()": {"Returns": [["@B_java#nio#charset#Charset_E@", "This encoder's charset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the charset that created this encoder.", "history": "Added in API level 1", "FullName": "public final Charset charset ()"}, "encodeLoop(java.nio.CharBuffer,java.nio.ByteBuffer)": {"Returns": [["@B_java#nio#charset#CoderResult_E@", "A coder-result object describing the reason for termination"]], "Parameters": [["@B_java#nio#CharBuffer_E@", "CharBuffer: The input character buffer"], ["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The output byte buffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Encodes one or more characters into one or more bytes. This method encapsulates the basic encoding loop, encoding as many characters as possible until it either runs out of input, runs out of room in the output buffer, or encounters an encoding error. This method is invoked by the @B_java#nio#charset#CharsetEncoder#encode_E@ method, which handles result interpretation and error recovery. The buffers are read from, and written to, starting at their current positions. At most @B_java#nio#Buffer#remaining_E@ characters will be read, and at most @B_java#nio#Buffer#remaining_E@ bytes will be written. The buffers' positions will be advanced to reflect the characters read and the bytes written, but their marks and limits will not be modified. This method returns a @B_java#nio#charset#CoderResult_E@ object to describe its reason for termination, in the same manner as the @B_java#nio#charset#CharsetEncoder#encode_E@ method. Most implementations of this method will handle encoding errors by returning an appropriate result object for interpretation by the @B_java#nio#charset#CharsetEncoder#encode_E@ method. An optimized implementation may instead examine the relevant error action and implement that action itself. An implementation of this method may perform arbitrary lookahead by returning @B_java#nio#charset#CoderResult#UNDERFLOW_E@ until it receives sufficient input.", "history": "Added in API level 1", "FullName": "protected abstract CoderResult encodeLoop (CharBuffer in, ByteBuffer out)"}, "onUnmappableCharacter(java.nio.charset.CodingErrorAction)": {"Returns": [["@B_java#nio#charset#CharsetEncoder_E@", "This encoder"]], "Parameters": [["@B_java#nio#charset#CodingErrorAction_E@", "CodingErrorAction: The new action; must not be null"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the precondition on the parameter does not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Changes this encoder's action for unmappable-character errors. This method invokes the @B_java#nio#charset#CharsetEncoder#implOnUnmappableCharacter_E@ method, passing the new action.", "history": "Added in API level 1", "FullName": "public final CharsetEncoder onUnmappableCharacter (CodingErrorAction newAction)"}, "maxBytesPerChar()": {"Returns": [["float", "The maximum number of bytes that will be produced per character of input"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum number of bytes that will be produced for each character of input. This value may be used to compute the worst-case size of the output buffer required for a given input sequence.", "history": "Added in API level 1", "FullName": "public final float maxBytesPerChar ()"}, "implReplaceWith(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: The replacement value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports a change to this encoder's replacement value. The default implementation of this method does nothing. This method should be overridden by encoders that require notification of changes to the replacement.", "history": "Added in API level 1", "FullName": "protected void implReplaceWith (byte[] newReplacement)"}, "canEncode(java.lang.CharSequence)": {"Returns": [["boolean", "true if, and only if, this encoder can encode the given character without throwing any exceptions and without performing any replacements"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The given character sequence"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If an encoding operation is already in progress"]], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this encoder can encode the given character sequence. If this method returns This method may modify this encoder's state; it should therefore not be invoked if an encoding operation is already in progress. The default implementation of this method is not very efficient; it should generally be overridden to improve performance.", "history": "Added in API level 1", "FullName": "public boolean canEncode (CharSequence cs)"}}, "Inheritance": [], "ClassName": "java.nio.charset.CharsetEncoder", "ClassDesc": "An engine that can transform a sequence of sixteen-bit Unicode characters into a sequence of bytes in a specific charset. The input character sequence is provided in a character buffer or a series of such buffers. The output byte sequence is written to a byte buffer or a series of such buffers. An encoder should always be used by making the following sequence of method invocations, hereinafter referred to as an @B_java#nio#charset#CharsetEncoder#encode_E@ method will encode as many characters as possible from the input buffer, writing the resulting bytes to the output buffer. The @B_java#nio#charset#CharsetEncoder#encode_E@ method returns when more input is required, when there is not enough room in the output buffer, or when an encoding error has occurred. In each case a @B_java#nio#charset#CoderResult_E@ object is returned to describe the reason for termination. An invoker can examine this object and fill the input buffer, flush the output buffer, or attempt to recover from an encoding error, as appropriate, and try again. There are two general types of encoding errors. If the input character sequence is not a legal sixteen-bit Unicode sequence then the input is considered How an encoding error is handled depends upon the action requested for that type of error, which is described by an instance of the @B_java#nio#charset#CodingErrorAction_E@ class. The possible error actions are to @B_java#nio#charset#CoderResult_E@ object, or @B_java#nio#charset#CharsetEncoder#replaceWith_E@ method. The default action for malformed-input and unmappable-character errors is to @B_java#nio#charset#CharsetEncoder#onMalformedInput_E@ method; the unmappable-character action may be changed via the @B_java#nio#charset#CharsetEncoder#onUnmappableCharacter_E@ method. This class is designed to handle many of the details of the encoding process, including the implementation of error actions. An encoder for a specific charset, which is a concrete subclass of this class, need only implement the abstract @B_java#nio#charset#CharsetEncoder#encodeLoop_E@ method, which encapsulates the basic encoding loop. A subclass that maintains internal state should, additionally, override the @B_java#nio#charset#CharsetEncoder#implFlush_E@ and @B_java#nio#charset#CharsetEncoder#implReset_E@ methods. Instances of this class are not safe for use by multiple concurrent threads."}