{"Functions": {"copy1DRangeFromUnchecked(int, int, byte[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["byte[]", "byte: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy an array into a 1D region of this Allocation. This method does not guarantee that the Allocation is compatible with the input buffer. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeFromUnchecked (int off, int count, byte[] d)"}, "createCubemapFromBitmap(android.support.v8.renderscript.RenderScript, android.graphics.Bitmap)": {"Returns": [["@B_android#support#v8#renderscript#Allocation_E@", "allocation containing cubemap data"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: Context to which the allocation will belong."], ["@B_android#graphics#Bitmap_E@", "Bitmap: bitmap with cubemap faces layed out in the following format: right, left, top, bottom, front, back"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a non-mipmapped cubemap Allocation for use as a graphics texture from a @B_android#graphics#Bitmap_E@ containing the horizontal list of cube faces. Each face must be a square, have the same size as all other faces, and have a width that is a power of 2.", "history": "added in version 23.0.0", "FullName": "Allocation createCubemapFromBitmap (RenderScript rs, Bitmap b)"}, "copyFrom(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy into this Allocation from an array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ does not match the array's primitive type. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copyFrom (Object array)"}, "copy1DRangeFrom(int, int, float[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["float[]", "float: the source array."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy an array into a 1D region of this Allocation. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is neither a 32 bit float nor a vector of 32 bit floats @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeFrom (int off, int count, float[] d)"}, "copy1DRangeFrom(int, int, byte[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["byte[]", "byte: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy an array into a 1D region of this Allocation. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is not an 8 bit integer nor a vector of 8 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeFrom (int off, int count, byte[] d)"}, "setIncAllocID(long)": {"Returns": [], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.0.0", "FullName": "void setIncAllocID (long id)"}, "createFromBitmapResource(android.support.v8.renderscript.RenderScript, android.content.res.Resources, int, android.support.v8.renderscript.Allocation.MipmapControl, int)": {"Returns": [["@B_android#support#v8#renderscript#Allocation_E@", "Allocation containing resource data"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: Context to which the allocation will belong."], ["@B_android#content#res#Resources_E@", "Resources: application resources"], ["int", "int: resource id to load the data from"], ["@B_android#support#v8#renderscript#Allocation#MipmapControl_E@", "Allocation.MipmapControl: specifies desired mipmap behaviour for the allocation"], ["int", "int: bit field specifying how the allocation is utilized"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an Allocation from the Bitmap referenced by resource ID.", "history": "added in version 23.0.0", "FullName": "Allocation createFromBitmapResource (RenderScript rs, Resources res, int id, Allocation.MipmapControl mips, int usage)"}, "copyFromUnchecked(int[])": {"Returns": [], "Parameters": [["int[]", "int: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy into this Allocation from an array. This method does not guarantee that the Allocation is compatible with the input buffer; it copies memory without reinterpretation. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copyFromUnchecked (int[] d)"}, "copyTo(int[])": {"Returns": [], "Parameters": [["int[]", "int: The array to be set from the Allocation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from the Allocation into a int array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is not a 32 bit integer nor a vector of 32 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells will be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copyTo (int[] d)"}, "createCubemapFromCubeFaces(android.support.v8.renderscript.RenderScript, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap)": {"Returns": [["@B_android#support#v8#renderscript#Allocation_E@", "allocation containing cubemap data"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: Context to which the allocation will belong."], ["@B_android#graphics#Bitmap_E@", "Bitmap: cubemap face in the positive x direction"], ["@B_android#graphics#Bitmap_E@", "Bitmap: cubemap face in the negative x direction"], ["@B_android#graphics#Bitmap_E@", "Bitmap: cubemap face in the positive y direction"], ["@B_android#graphics#Bitmap_E@", "Bitmap: cubemap face in the negative y direction"], ["@B_android#graphics#Bitmap_E@", "Bitmap: cubemap face in the positive z direction"], ["@B_android#graphics#Bitmap_E@", "Bitmap: cubemap face in the negative z direction"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a non-mipmapped cubemap Allocation for use as a sampler input from 6 @B_android#graphics#Bitmap_E@ objects containing the cube faces. Each face must be a square, have the same size as all other faces, and have a width that is a power of 2.", "history": "added in version 23.0.0", "FullName": "Allocation createCubemapFromCubeFaces (RenderScript rs, Bitmap xpos, Bitmap xneg, Bitmap ypos, Bitmap yneg, Bitmap zpos, Bitmap zneg)"}, "createCubemapFromBitmap(android.support.v8.renderscript.RenderScript, android.graphics.Bitmap, android.support.v8.renderscript.Allocation.MipmapControl, int)": {"Returns": [["@B_android#support#v8#renderscript#Allocation_E@", "allocation containing cubemap data"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: Context to which the allocation will belong."], ["@B_android#graphics#Bitmap_E@", "Bitmap: Bitmap with cubemap faces layed out in the following format: right, left, top, bottom, front, back"], ["@B_android#support#v8#renderscript#Allocation#MipmapControl_E@", "Allocation.MipmapControl: specifies desired mipmap behaviour for the cubemap"], ["int", "int: bit field specifying how the cubemap is utilized"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a cubemap Allocation from a @B_android#graphics#Bitmap_E@ containing the horizontal list of cube faces. Each face must be a square, have the same size as all other faces, and have a width that is a power of 2.", "history": "added in version 23.0.0", "FullName": "Allocation createCubemapFromBitmap (RenderScript rs, Bitmap b, Allocation.MipmapControl mips, int usage)"}, "setSurface(android.view.Surface)": {"Returns": [], "Parameters": [["@B_android#view#Surface_E@", "Surface: Surface to associate with allocation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Associate a @B_android#view#Surface_E@ with this Allocation. This operation is only valid for Allocations with @B_android#support#v8#renderscript#Allocation#USAGE_IO_OUTPUT_E@.", "history": "added in version 23.0.0", "FullName": "void setSurface (Surface sur)"}, "copy1DRangeFrom(int, int, short[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["short[]", "short: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy an array into a 1D region of this Allocation. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is not an 16 bit integer nor a vector of 16 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeFrom (int off, int count, short[] d)"}, "syncAll(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Propagate changes from one usage of the Allocation to the other usages of the Allocation.", "history": "added in version 23.0.0", "FullName": "void syncAll (int srcLocation)"}, "createCubemapFromCubeFaces(android.support.v8.renderscript.RenderScript, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.support.v8.renderscript.Allocation.MipmapControl, int)": {"Returns": [["@B_android#support#v8#renderscript#Allocation_E@", "allocation containing cubemap data"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: Context to which the allocation will belong."], ["@B_android#graphics#Bitmap_E@", "Bitmap: cubemap face in the positive x direction"], ["@B_android#graphics#Bitmap_E@", "Bitmap: cubemap face in the negative x direction"], ["@B_android#graphics#Bitmap_E@", "Bitmap: cubemap face in the positive y direction"], ["@B_android#graphics#Bitmap_E@", "Bitmap: cubemap face in the negative y direction"], ["@B_android#graphics#Bitmap_E@", "Bitmap: cubemap face in the positive z direction"], ["@B_android#graphics#Bitmap_E@", "Bitmap: cubemap face in the negative z direction"], ["@B_android#support#v8#renderscript#Allocation#MipmapControl_E@", "Allocation.MipmapControl: specifies desired mipmap behaviour for the cubemap"], ["int", "int: bit field specifying how the cubemap is utilized"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a cubemap Allocation from 6 @B_android#graphics#Bitmap_E@ objects containing the cube faces. Each face must be a square, have the same size as all other faces, and have a width that is a power of 2.", "history": "added in version 23.0.0", "FullName": "Allocation createCubemapFromCubeFaces (RenderScript rs, Bitmap xpos, Bitmap xneg, Bitmap ypos, Bitmap yneg, Bitmap zpos, Bitmap zneg, Allocation.MipmapControl mips, int usage)"}, "copy2DRangeTo(int, int, int, int, int[])": {"Returns": [], "Parameters": [["int", "int: X offset of the region to copy in this Allocation"], ["int", "int: Y offset of the region to copy in this Allocation"], ["int", "int: Width of the region to copy"], ["int", "int: Height of the region to copy"], ["int[]", "int: Dest Array to be copied into"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from a rectangular region in this Allocation into an array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is neither a 32 bit integer nor a vector of 32 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: w * h * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy2DRangeTo (int xoff, int yoff, int w, int h, int[] data)"}, "copy1DRangeToUnchecked(int, int, int[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["int[]", "int: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy a 1D region of this Allocation into an array. This method does not guarantee that the Allocation is compatible with the input buffer. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeToUnchecked (int off, int count, int[] d)"}, "copy2DRangeTo(int, int, int, int, byte[])": {"Returns": [], "Parameters": [["int", "int: X offset of the region to copy in this Allocation"], ["int", "int: Y offset of the region to copy in this Allocation"], ["int", "int: Width of the region to copy"], ["int", "int: Height of the region to copy"], ["byte[]", "byte: Dest Array to be copied into"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from a rectangular region in this Allocation into an array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is neither an 8 bit integer nor a vector of 8 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: w * h * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy2DRangeTo (int xoff, int yoff, int w, int h, byte[] data)"}, "copyTo(android.graphics.Bitmap)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap to be set from the Allocation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from the Allocation into a @B_android#graphics#Bitmap_E@. The bitmap must match the dimensions of the Allocation.", "history": "added in version 23.0.0", "FullName": "void copyTo (Bitmap b)"}, "setAutoPadding(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True: enable AutoPadding; False: disable AutoPadding"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the mapping between the Allocation's cells and an array's elements when data is copied from the Allocation to the array, or vice-versa. Only applies to an Allocation whose Element is a vector of length 3 (such as @B_android#support#v8#renderscript#Element#U8_3_E@ or @B_android#support#v8#renderscript#Element#RGB_888_E@). Enabling this feature may make copying data from the Allocation to an array or vice-versa less efficient. Vec3 Element cells are stored in an Allocation as Vec4 Element cells with the same @B_android#support#v8#renderscript#Element#DataType_E@, with the fourth vector component treated as padding. When this feature is enabled, only the data components, i.e. the first 3 vector components of each cell, will be mapped between the array and the Allocation. When disabled, explicit mapping of the padding components is required, as described in the following example. For example, when copying an integer array to an Allocation of two @B_android#support#v8#renderscript#Element#I32_3_E@ cells using @B_android#support#v8#renderscript#Allocation#copyFrom_E@: When disabled: The array must have at least 8 integers, with the first 4 integers copied to the first cell of the Allocation, and the next 4 integers copied to the second cell. The 4th and 8th integers are mapped as the padding components. When enabled: The array just needs to have at least 6 integers, with the first 3 integers copied to the the first cell as data components, and the next 3 copied to the second cell. There is no mapping for the padding components. Similarly, when copying a byte array to an Allocation of two @B_android#support#v8#renderscript#Element#I32_3_E@ cells, using @B_android#support#v8#renderscript#Allocation#copyFromUnchecked_E@: When disabled: The array must have at least 32 bytes, with the first 16 bytes copied to the first cell of the Allocation, and the next 16 bytes copied to the second cell. The 13th-16th and 29th-32nd bytes are mapped as padding components. When enabled: The array just needs to have at least 24 bytes, with the first 12 bytes copied to the first cell of the Allocation, and the next 12 bytes copied to the second cell. There is no mapping for the padding components. Similar to copying data to an Allocation from an array, when copying data from an Allocation to an array, the padding components for Vec3 Element cells will not be copied/mapped to the array if AutoPadding is enabled. Default: Disabled.", "history": "added in version 23.0.0", "FullName": "void setAutoPadding (boolean useAutoPadding)"}, "copy1DRangeFrom(int, int, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: the source data allocation."], ["int", "int: off The offset of the first element in data to be copied."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy part of an Allocation into this Allocation.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeFrom (int off, int count, Allocation data, int dataOff)"}, "copy2DRangeFrom(int, int, android.graphics.Bitmap)": {"Returns": [], "Parameters": [["int", "int: X offset of the region to update in this Allocation"], ["int", "int: Y offset of the region to update in this Allocation"], ["@B_android#graphics#Bitmap_E@", "Bitmap: the Bitmap to be copied"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy a @B_android#graphics#Bitmap_E@ into an Allocation. The height and width of the update will use the height and width of the @B_android#graphics#Bitmap_E@.", "history": "added in version 23.0.0", "FullName": "void copy2DRangeFrom (int xoff, int yoff, Bitmap data)"}, "copy2DRangeFrom(int, int, int, int, int[])": {"Returns": [], "Parameters": [["int", "int: X offset of the region to update in this Allocation"], ["int", "int: Y offset of the region to update in this Allocation"], ["int", "int: Width of the region to update"], ["int", "int: Height of the region to update"], ["int[]", "int: to be placed into the Allocation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from an array into a rectangular region in this Allocation. The array is assumed to be tightly packed. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is not a 32 bit integer nor a vector of 32 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: w * h * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy2DRangeFrom (int xoff, int yoff, int w, int h, int[] data)"}, "ioReceive()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Receive the latest input into the Allocation. This operation is only valid if @B_android#support#v8#renderscript#Allocation#USAGE_IO_INPUT_E@ is set on the Allocation.", "history": "added in version 23.0.0", "FullName": "void ioReceive ()"}, "destroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Frees any native resources associated with this object. The primary use is to force immediate cleanup of resources when it is believed the GC will not respond quickly enough. For USAGE_IO_OUTPUT, destroy() implies setSurface(null).", "history": "added in version 23.0.0", "FullName": "void destroy ()"}, "copy1DRangeToUnchecked(int, int, java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["@B_java#lang#Object_E@", "Object: The dest array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy a 1D region of this Allocation into an array. This method does not guarantee that the Allocation is compatible with the input buffer. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeToUnchecked (int off, int count, Object array)"}, "getBytesSize()": {"Returns": [["int", "size of the Allocation in bytes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the size of the Allocation in bytes.", "history": "added in version 23.0.0", "FullName": "int getBytesSize ()"}, "copy2DRangeTo(int, int, int, int, java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: X offset of the region to copy in this Allocation"], ["int", "int: Y offset of the region to copy in this Allocation"], ["int", "int: Width of the region to copy"], ["int", "int: Height of the region to copy"], ["@B_java#lang#Object_E@", "Object: Dest Array to be copied into"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from a rectangular region in this Allocation into an array. This method is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ does not match the component type of the array passed in. The size of the region is: w * h * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy2DRangeTo (int xoff, int yoff, int w, int h, Object array)"}, "copyFrom(android.support.v8.renderscript.BaseObj[])": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#BaseObj_E@", "BaseObj: Source array."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy an array of RS objects to the Allocation.", "history": "added in version 23.0.0", "FullName": "void copyFrom (BaseObj[] d)"}, "copyFrom(short[])": {"Returns": [], "Parameters": [["short[]", "short: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy into this Allocation from an array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is not a 16 bit integer nor a vector of 16 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copyFrom (short[] d)"}, "copy2DRangeTo(int, int, int, int, short[])": {"Returns": [], "Parameters": [["int", "int: X offset of the region to copy in this Allocation"], ["int", "int: Y offset of the region to copy in this Allocation"], ["int", "int: Width of the region to copy"], ["int", "int: Height of the region to copy"], ["short[]", "short: Dest Array to be copied into"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from a rectangular region in this Allocation into an array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is neither a 16 bit integer nor a vector of 16 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: w * h * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy2DRangeTo (int xoff, int yoff, int w, int h, short[] data)"}, "copy1DRangeTo(int, int, int[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["int[]", "int: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy a 1D region of this Allocation into an array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is neither a 32 bit integer nor a vector of 32 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeTo (int off, int count, int[] d)"}, "createFromBitmap(android.support.v8.renderscript.RenderScript, android.graphics.Bitmap)": {"Returns": [["@B_android#support#v8#renderscript#Allocation_E@", "Allocation containing bitmap data"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: Context to which the allocation will belong."], ["@B_android#graphics#Bitmap_E@", "Bitmap: bitmap source for the allocation data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an Allocation from a @B_android#graphics#Bitmap_E@. This Allocation will be created with @B_android#support#v8#renderscript#Allocation#USAGE_SHARED_E@, and @B_android#support#v8#renderscript#Allocation#USAGE_SCRIPT_E@.", "history": "added in version 23.0.0", "FullName": "Allocation createFromBitmap (RenderScript rs, Bitmap b)"}, "copy2DRangeFrom(int, int, int, int, byte[])": {"Returns": [], "Parameters": [["int", "int: X offset of the region to update in this Allocation"], ["int", "int: Y offset of the region to update in this Allocation"], ["int", "int: Width of the region to update"], ["int", "int: Height of the region to update"], ["byte[]", "byte: to be placed into the Allocation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from an array into a rectangular region in this Allocation. The array is assumed to be tightly packed. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is not an 8 bit integer nor a vector of 8 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: w * h * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy2DRangeFrom (int xoff, int yoff, int w, int h, byte[] data)"}, "setFromFieldPacker(int, int, android.support.v8.renderscript.FieldPacker)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is only intended to be used by auto-generated code reflected from the RenderScript script files.", "history": "added in version 23.0.0", "FullName": "void setFromFieldPacker (int xoff, int component_number, FieldPacker fp)"}, "copy2DRangeFrom(int, int, int, int, short[])": {"Returns": [], "Parameters": [["int", "int: X offset of the region to update in this Allocation"], ["int", "int: Y offset of the region to update in this Allocation"], ["int", "int: Width of the region to update"], ["int", "int: Height of the region to update"], ["short[]", "short: to be placed into the Allocation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from an array into a rectangular region in this Allocation. The array is assumed to be tightly packed. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is not a 16 bit integer nor a vector of 16 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: w * h * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy2DRangeFrom (int xoff, int yoff, int w, int h, short[] data)"}, "getType()": {"Returns": [["@B_android#support#v8#renderscript#Type_E@", "Type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the @B_android#support#v8#renderscript#Type_E@ of the Allocation.", "history": "added in version 23.0.0", "FullName": "Type getType ()"}, "createTyped(android.support.v8.renderscript.RenderScript, android.support.v8.renderscript.Type, android.support.v8.renderscript.Allocation.MipmapControl, int)": {"Returns": [["@B_android#support#v8#renderscript#Allocation_E@", "no returns description in source"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript no parameter comment"], ["@B_android#support#v8#renderscript#Type_E@", "Type: RenderScript type describing data layout"], ["@B_android#support#v8#renderscript#Allocation#MipmapControl_E@", "Allocation.MipmapControl: specifies desired mipmap behaviour for the allocation"], ["int", "int: bit field specifying how the Allocation is utilized"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new Allocation with the given @B_android#support#v8#renderscript#Type_E@, mipmap flag, and usage flags.", "history": "added in version 23.0.0", "FullName": "Allocation createTyped (RenderScript rs, Type type, Allocation.MipmapControl mips, int usage)"}, "getByteBuffer()": {"Returns": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer The ByteBuffer associated with raw data pointer of the Allocation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets or creates a ByteBuffer that contains the raw data of the current Allocation. If the Allocation is created with USAGE_IO_INPUT, the returned ByteBuffer would contain the up-to-date data as READ ONLY. For a 2D or 3D Allocation, the raw data maybe padded so that each row of the Allocation has certain alignment. The size of each row including padding, called stride, can be queried using the @B_android#support#v8#renderscript#Allocation#getStride_E@ method. Note: Operating on the ByteBuffer of a destroyed Allocation will triger errors. The ByteBuffer will be Read-Only for devices before Lollopop (API 21).", "history": "added in version 24.0.0", "FullName": "ByteBuffer getByteBuffer ()"}, "copyFrom(float[])": {"Returns": [], "Parameters": [["float[]", "float: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy into this Allocation from an array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is neither a 32 bit float nor a vector of 32 bit floats @B_android#support#v8#renderscript#Element#DataType_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copyFrom (float[] d)"}, "copy2DRangeFrom(int, int, int, int, float[])": {"Returns": [], "Parameters": [["int", "int: X offset of the region to update in this Allocation"], ["int", "int: Y offset of the region to update in this Allocation"], ["int", "int: Width of the region to update"], ["int", "int: Height of the region to update"], ["float[]", "float: to be placed into the Allocation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from an array into a rectangular region in this Allocation. The array is assumed to be tightly packed. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is neither a 32 bit float nor a vector of 32 bit floats @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: w * h * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy2DRangeFrom (int xoff, int yoff, int w, int h, float[] data)"}, "copy3DRangeFrom(int, int, int, int, int, int, java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: X offset of the region to update in this Allocation"], ["int", "int: Y offset of the region to update in this Allocation"], ["int", "int: Z offset of the region to update in this Allocation"], ["int", "int: Width of the region to update"], ["int", "int: Height of the region to update"], ["int", "int: Depth of the region to update"], ["@B_java#lang#Object_E@", "Object: to be placed into the allocation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from an array into a 3D region in this Allocation. The array is assumed to be tightly packed. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ does not match the input data type. The size of the region is: w * h * d * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy3DRangeFrom (int xoff, int yoff, int zoff, int w, int h, int d, Object array)"}, "copyTo(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: The array to be set from the Allocation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from the Allocation into a byte array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is neither an 8 bit integer nor a vector of 8 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells will be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copyTo (byte[] d)"}, "copy1DRangeTo(int, int, java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["@B_java#lang#Object_E@", "Object: The source array."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy a 1D region of this Allocation into an array. This method is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ does not match the component type of the array passed in. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeTo (int off, int count, Object array)"}, "copy1DRangeFromUnchecked(int, int, java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["@B_java#lang#Object_E@", "Object: The source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy an array into a 1D region of this Allocation. This method does not guarantee that the Allocation is compatible with the input buffer. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeFromUnchecked (int off, int count, Object array)"}, "copyFromUnchecked(float[])": {"Returns": [], "Parameters": [["float[]", "float: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy into this Allocation from an array. This method does not guarantee that the Allocation is compatible with the input buffer; it copies memory without reinterpretation. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copyFromUnchecked (float[] d)"}, "createFromString(android.support.v8.renderscript.RenderScript, java.lang.String, int)": {"Returns": [["@B_android#support#v8#renderscript#Allocation_E@", "no returns description in source"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: Context to which the allocation will belong."], ["@B_java#lang#String_E@", "String: string to create the allocation from"], ["int", "int: bit field specifying how the allocaiton is utilized"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an Allocation containing string data encoded in UTF-8 format.", "history": "added in version 23.0.0", "FullName": "Allocation createFromString (RenderScript rs, String str, int usage)"}, "copy1DRangeToUnchecked(int, int, short[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["short[]", "short: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy a 1D region of this Allocation into an array. This method does not guarantee that the Allocation is compatible with the input buffer. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeToUnchecked (int off, int count, short[] d)"}, "copyFrom(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy into this Allocation from an array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is not an 8 bit integer nor a vector of 8 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copyFrom (byte[] d)"}, "getStride()": {"Returns": [["long", "the stride. For 1D Allocation, the stride will be the number of bytes of this Allocation. For 2D and 3D Allocations, the stride will be the stride in X dimension measuring in bytes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the stride of the Allocation. For a 2D or 3D Allocation, the raw data maybe padded so that each row of the Allocation has certain alignment. The size of each row including such padding is called stride.", "history": "added in version 24.0.0", "FullName": "long getStride ()"}, "copy1DRangeToUnchecked(int, int, byte[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["byte[]", "byte: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy a 1D region of this Allocation into an array. This method does not guarantee that the Allocation is compatible with the input buffer. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeToUnchecked (int off, int count, byte[] d)"}, "createTyped(android.support.v8.renderscript.RenderScript, android.support.v8.renderscript.Type, int)": {"Returns": [["@B_android#support#v8#renderscript#Allocation_E@", "allocation"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: Context to which the allocation will belong."], ["@B_android#support#v8#renderscript#Type_E@", "Type: renderscript type describing data layout"], ["int", "int: bit field specifying how the allocation is utilized"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an Allocation with the size specified by the type and no mipmaps generated by default", "history": "added in version 23.0.0", "FullName": "Allocation createTyped (RenderScript rs, Type type, int usage)"}, "copyFromUnchecked(short[])": {"Returns": [], "Parameters": [["short[]", "short: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy into this Allocation from an array. This method does not guarantee that the Allocation is compatible with the input buffer; it copies memory without reinterpretation. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copyFromUnchecked (short[] d)"}, "copy1DRangeFrom(int, int, java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["@B_java#lang#Object_E@", "Object: The source array."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy an array into a 1D region of this Allocation. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ does not match the component type of the array passed in. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeFrom (int off, int count, Object array)"}, "createFromBitmapResource(android.support.v8.renderscript.RenderScript, android.content.res.Resources, int)": {"Returns": [["@B_android#support#v8#renderscript#Allocation_E@", "Allocation containing resource data"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: Context to which the allocation will belong."], ["@B_android#content#res#Resources_E@", "Resources: application resources"], ["int", "int: resource id to load the data from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a non-mipmapped Allocation to use as a graphics texture from the @B_android#graphics#Bitmap_E@ referenced by resource ID. This allocation will be created with @B_android#support#v8#renderscript#Allocation#USAGE_SCRIPT_E@ and @B_android#support#v8#renderscript#Allocation#USAGE_GRAPHICS_TEXTURE_E@.", "history": "added in version 23.0.0", "FullName": "Allocation createFromBitmapResource (RenderScript rs, Resources res, int id)"}, "createTyped(android.support.v8.renderscript.RenderScript, android.support.v8.renderscript.Type)": {"Returns": [["@B_android#support#v8#renderscript#Allocation_E@", "allocation"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: Context to which the Allocation will belong."], ["@B_android#support#v8#renderscript#Type_E@", "Type: RenderScript Type describing data layout"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an Allocation for use by scripts with a given @B_android#support#v8#renderscript#Type_E@ and no mipmaps", "history": "added in version 23.0.0", "FullName": "Allocation createTyped (RenderScript rs, Type type)"}, "ioSendOutput()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Delete once code is updated.", "history": "added in version 23.0.0", "FullName": "void ioSendOutput ()"}, "copy2DRangeTo(int, int, int, int, float[])": {"Returns": [], "Parameters": [["int", "int: X offset of the region to copy in this Allocation"], ["int", "int: Y offset of the region to copy in this Allocation"], ["int", "int: Width of the region to copy"], ["int", "int: Height of the region to copy"], ["float[]", "float: Dest Array to be copied into"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from a rectangular region in this Allocation into an array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is neither a 32 bit float nor a vector of 32 bit floats @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: w * h * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy2DRangeTo (int xoff, int yoff, int w, int h, float[] data)"}, "copyFrom(android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: the source allocation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy an Allocation from an Allocation. The types of both allocations must be identical.", "history": "added in version 23.0.0", "FullName": "void copyFrom (Allocation a)"}, "createSized(android.support.v8.renderscript.RenderScript, android.support.v8.renderscript.Element, int, int)": {"Returns": [["@B_android#support#v8#renderscript#Allocation_E@", "allocation"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: Context to which the Allocation will belong."], ["@B_android#support#v8#renderscript#Element_E@", "Element: Element to use in the Allocation"], ["int", "int: the number of Elements in the Allocation"], ["int", "int: bit field specifying how the Allocation is utilized"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an Allocation with a specified number of given elements", "history": "added in version 23.0.0", "FullName": "Allocation createSized (RenderScript rs, Element e, int count, int usage)"}, "copy1DRangeTo(int, int, byte[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["byte[]", "byte: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy a 1D region of this Allocation into an array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is neither an 8 bit integer nor a vector of 8 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeTo (int off, int count, byte[] d)"}, "copy1DRangeTo(int, int, float[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["float[]", "float: the source array."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy a 1D region of this Allocation into an array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is neither a 32 bit float nor a vector of 32 bit floats @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeTo (int off, int count, float[] d)"}, "getElement()": {"Returns": [["@B_android#support#v8#renderscript#Element_E@", "Element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the @B_android#support#v8#renderscript#Element_E@ of the @B_android#support#v8#renderscript#Type_E@ of the Allocation.", "history": "added in version 23.0.0", "FullName": "Element getElement ()"}, "copy1DRangeToUnchecked(int, int, float[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["float[]", "float: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy a 1D region of this Allocation into an array. This method does not guarantee that the Allocation is compatible with the input buffer. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeToUnchecked (int off, int count, float[] d)"}, "copyTo(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The array to be set from the Allocation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from the Allocation into an array. The method is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ does not match the input data type. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells will be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copyTo (Object array)"}, "copyTo(float[])": {"Returns": [], "Parameters": [["float[]", "float: The array to be set from the Allocation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from the Allocation into a float array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is neither a 32 bit float nor a vector of 32 bit floats @B_android#support#v8#renderscript#Element#DataType_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells will be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copyTo (float[] d)"}, "copyFromUnchecked(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy into this Allocation from an array. This method does not guarantee that the Allocation is compatible with the input buffer; it copies memory without reinterpretation. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copyFromUnchecked (Object array)"}, "ioSend()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send a buffer to the output stream. The contents of the Allocation will be undefined after this operation. This operation is only valid if @B_android#support#v8#renderscript#Allocation#USAGE_IO_OUTPUT_E@ is set on the Allocation.", "history": "added in version 23.0.0", "FullName": "void ioSend ()"}, "copy1DRangeFromUnchecked(int, int, short[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["short[]", "short: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy an array into a 1D region of this Allocation. This method does not guarantee that the Allocation is compatible with the input buffer. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeFromUnchecked (int off, int count, short[] d)"}, "setFromFieldPacker(int, android.support.v8.renderscript.FieldPacker)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is only intended to be used by auto-generated code reflected from the RenderScript script files and should not be used by developers.", "history": "added in version 23.0.0", "FullName": "void setFromFieldPacker (int xoff, FieldPacker fp)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "", "FullName": "void finalize ()"}, "getUsage()": {"Returns": [["int", "usage this Allocation's set of the USAGE_* flags OR'd together"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the usage flags of the Allocation.", "history": "added in version 23.0.0", "FullName": "int getUsage ()"}, "copy2DRangeFrom(int, int, int, int, android.support.v8.renderscript.Allocation, int, int)": {"Returns": [], "Parameters": [["int", "int: X offset of the region in this Allocation"], ["int", "int: Y offset of the region in this Allocation"], ["int", "int: Width of the region to update."], ["int", "int: Height of the region to update."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: source Allocation."], ["int", "int: X offset in source Allocation"], ["int", "int: Y offset in source Allocation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy a rectangular region from an Allocation into a rectangular region in this Allocation.", "history": "added in version 23.0.0", "FullName": "void copy2DRangeFrom (int xoff, int yoff, int w, int h, Allocation data, int dataXoff, int dataYoff)"}, "copyFromUnchecked(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy into this Allocation from an array. This method does not guarantee that the Allocation is compatible with the input buffer; it copies memory without reinterpretation. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copyFromUnchecked (byte[] d)"}, "copyFrom(int[])": {"Returns": [], "Parameters": [["int[]", "int: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy into this Allocation from an array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is not a 32 bit integer nor a vector of 32 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copyFrom (int[] d)"}, "copyTo(short[])": {"Returns": [], "Parameters": [["short[]", "short: The array to be set from the Allocation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from the Allocation into a short array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is not a 16 bit integer nor a vector of 16 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells will be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the Allocation @B_android#support#v8#renderscript#Allocation#getBytesSize_E@. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copyTo (short[] d)"}, "copy1DRangeFromUnchecked(int, int, int[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["int[]", "int: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy an array into a 1D region of this Allocation. This method does not guarantee that the Allocation is compatible with the input buffer. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeFromUnchecked (int off, int count, int[] d)"}, "generateMipmaps()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generate a mipmap chain. This is only valid if the Type of the Allocation includes mipmaps. This function will generate a complete set of mipmaps from the top level LOD and place them into the script memory space. If the Allocation is also using other memory spaces, a call to @B_android#support#v8#renderscript#Allocation#syncAll_E@ is required.", "history": "added in version 23.0.0", "FullName": "void generateMipmaps ()"}, "copy1DRangeFromUnchecked(int, int, float[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["float[]", "float: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy an array into a 1D region of this Allocation. This method does not guarantee that the Allocation is compatible with the input buffer. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeFromUnchecked (int off, int count, float[] d)"}, "createFromBitmap(android.support.v8.renderscript.RenderScript, android.graphics.Bitmap, android.support.v8.renderscript.Allocation.MipmapControl, int)": {"Returns": [["@B_android#support#v8#renderscript#Allocation_E@", "Allocation containing bitmap data"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: Context to which the allocation will belong."], ["@B_android#graphics#Bitmap_E@", "Bitmap: Bitmap source for the allocation data"], ["@B_android#support#v8#renderscript#Allocation#MipmapControl_E@", "Allocation.MipmapControl: specifies desired mipmap behaviour for the allocation"], ["int", "int: bit field specifying how the allocation is utilized"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an Allocation from a @B_android#graphics#Bitmap_E@.", "history": "added in version 23.0.0", "FullName": "Allocation createFromBitmap (RenderScript rs, Bitmap b, Allocation.MipmapControl mips, int usage)"}, "createSized(android.support.v8.renderscript.RenderScript, android.support.v8.renderscript.Element, int)": {"Returns": [["@B_android#support#v8#renderscript#Allocation_E@", "allocation"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: Context to which the Allocation will belong."], ["@B_android#support#v8#renderscript#Element_E@", "Element: Element to use in the Allocation"], ["int", "int: the number of Elements in the Allocation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an Allocation with a specified number of given elements", "history": "added in version 23.0.0", "FullName": "Allocation createSized (RenderScript rs, Element e, int count)"}, "getIncAllocID()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Getter & Setter for the dummy allocation for Inc Support Lib.", "history": "added in version 23.0.0", "FullName": "long getIncAllocID ()"}, "copy3DRangeFrom(int, int, int, int, int, int, android.support.v8.renderscript.Allocation, int, int, int)": {"Returns": [], "Parameters": [["int", "int: X offset of the region to update in this Allocation"], ["int", "int: Y offset of the region to update in this Allocation"], ["int", "int: Z offset of the region to update in this Allocation"], ["int", "int: Width of the region to update."], ["int", "int: Height of the region to update."], ["int", "int: Depth of the region to update."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: source allocation."], ["int", "int: X offset of the region in the source Allocation"], ["int", "int: Y offset of the region in the source Allocation"], ["int", "int: Z offset of the region in the source Allocation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy a rectangular region into the allocation from another allocation.", "history": "added in version 23.0.0", "FullName": "void copy3DRangeFrom (int xoff, int yoff, int zoff, int w, int h, int d, Allocation data, int dataXoff, int dataYoff, int dataZoff)"}, "copy2DRangeFrom(int, int, int, int, java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: X offset of the region to update in this Allocation"], ["int", "int: Y offset of the region to update in this Allocation"], ["int", "int: Width of the region to update"], ["int", "int: Height of the region to update"], ["@B_java#lang#Object_E@", "Object: Data to be placed into the Allocation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy from an array into a rectangular region in this Allocation. The array is assumed to be tightly packed. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ does not match the input data type. The size of the region is: w * h * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy2DRangeFrom (int xoff, int yoff, int w, int h, Object array)"}, "copy1DRangeTo(int, int, short[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["short[]", "short: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy a 1D region of this Allocation into an array. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is neither a 16 bit integer nor a vector of 16 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeTo (int off, int count, short[] d)"}, "copy1DRangeFrom(int, int, int[])": {"Returns": [], "Parameters": [["int", "int: The offset of the first element to be copied."], ["int", "int: The number of elements to be copied."], ["int[]", "int: the source array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy an array into a 1D region of this Allocation. This variant is type checked and will generate exceptions if the Allocation's @B_android#support#v8#renderscript#Element_E@ is not an 32 bit integer nor a vector of 32 bit integers @B_android#support#v8#renderscript#Element#DataType_E@. The size of the region is: count * @B_android#support#v8#renderscript#Allocation#getElement_E@.@B_android#support#v8#renderscript#Element#getBytesSize_E@. If the Allocation does not have Vec3 Elements, then the size of the array in bytes must be at least the size of the region. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is disabled, then the size of the array in bytes must be at least the size of the region. The padding bytes for the cells must be part of the array. If the Allocation has Vec3 Elements and @B_android#support#v8#renderscript#Allocation#setAutoPadding_E@ is enabled, then the size of the array in bytes must be at least 3/4 the size of the region. The padding bytes for the cells must not be part of the array.", "history": "added in version 23.0.0", "FullName": "void copy1DRangeFrom (int off, int count, int[] d)"}, "copyFrom(android.graphics.Bitmap)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: the source bitmap"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy into an Allocation from a @B_android#graphics#Bitmap_E@. The height, width, and format of the bitmap must match the existing allocation. If the @B_android#graphics#Bitmap_E@ is the same as the @B_android#graphics#Bitmap_E@ used to create the Allocation with @B_android#support#v8#renderscript#Allocation#createFromBitmap_E@ and @B_android#support#v8#renderscript#Allocation#USAGE_SHARED_E@ is set on the Allocation, this will synchronize the Allocation with the latest data from the @B_android#graphics#Bitmap_E@, potentially avoiding the actual copy.", "history": "added in version 23.0.0", "FullName": "void copyFrom (Bitmap b)"}}, "Inheritance": ["@B_android#support#v8#renderscript#BaseObj_E@"], "ClassName": "android.support.v8.renderscript.Allocation", "ClassDesc": "This class provides the primary method through which data is passed to and from RenderScript kernels. An Allocation provides the backing store for a given @B_android#support#v8#renderscript#Type_E@. An Allocation also contains a set of usage flags that denote how the Allocation could be used. For example, an Allocation may have usage flags specifying that it can be used from a script as well as input to a @B_android#support#v8#renderscript#Sampler_E@. A developer must synchronize across these different usages using @B_android#support#v8#renderscript#Allocation#syncAll_E@ in order to ensure that different users of the Allocation have a consistent view of memory. For example, in the case where an Allocation is used as the output of one kernel and as Sampler input in a later kernel, a developer must call @B_android#support#v8#renderscript#Allocation#syncAll_E@ prior to launching the second kernel to ensure correctness. An Allocation can be populated with the @B_android#support#v8#renderscript#Allocation#copyFrom_E@ routines. For more complex Element types, the @B_android#support#v8#renderscript#Allocation#copyFromUnchecked_E@ methods can be used to copy from byte arrays or similar constructs."}