{"Functions": {"andThen(java.util.function.Function<?superR,?extendsV>)": {"Returns": [["@B_java#util#function#BiFunction_E@", "a composed function that first applies this function and then applies the after function"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: the function to apply after this function is applied"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if after is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a composed function that first applies this function to its input, and then applies the after function to the result. If evaluation of either function throws an exception, it is relayed to the caller of the composed function.", "history": "Added in API level 24", "FullName": "public BiFunction<T, U, V> andThen (Function<? super R, ? extends V> after)"}, "apply(T,U)": {"Returns": [["R", "the function result"]], "Parameters": [["T", "T: the first function argument"], ["U", "U: the second function argument"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies this function to the given arguments.", "history": "Added in API level 24", "FullName": "public abstract R apply (T t, U u)"}, "apply(T, U)": {"Returns": [["R", "the function result"]], "Parameters": [["T", "T: the first function argument"], ["U", "U: the second function argument"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies this function to the given arguments.", "history": "added in API level 24", "FullName": "public abstract R apply (T t, U u)"}}, "Inheritance": [], "ClassName": "java.util.function.BiFunction<T, U, R>", "ClassDesc": "Represents a function that accepts two arguments and produces a result. This is the two-arity specialization of @B_java#util#function#Function_E@. This is a @B_java#util#function#BiFunction#apply_E@."}