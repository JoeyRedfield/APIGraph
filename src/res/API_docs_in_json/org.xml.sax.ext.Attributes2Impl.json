{"Functions": {"setAttributes(org.xml.sax.Attributes)": {"Returns": [], "Parameters": [["@B_org#xml#sax#Attributes_E@", "Attributes: The attributes to copy."]], "Throws": [], "SeeAlso": ["@B_org#xml#sax#helpers#AttributesImpl#setAttributes_E@"], "Permissions": [], "Description": "Copy an entire Attributes object. The \"specified\" flags are assigned as true, and \"declared\" flags as false (except when an attribute's type is not CDATA), unless the object is an Attributes2 object. In that case those flag values are all copied.", "history": "Added in API level 1", "FullName": "public void setAttributes (Attributes atts)"}, "isSpecified(int)": {"Returns": [["boolean", "current flag value"]], "Parameters": [["int", "int: The attribute index (zero-based)."]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "When the supplied index does not identify an attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the current value of an attribute's \"specified\" flag.", "history": "Added in API level 1", "FullName": "public boolean isSpecified (int index)"}, "isDeclared(java.lang.String,java.lang.String)": {"Returns": [["boolean", "true if the attribute was declared in the DTD, false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI, or the empty string if the name has no Namespace URI."], ["@B_java#lang#String_E@", "String: The attribute's local name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns false unless the attribute was declared in the DTD. This helps distinguish two kinds of attributes that SAX reports as CDATA: ones that were declared (and hence are usually valid), and those that were not (and which are never valid). Remember that since DTDs do not \"understand\" namespaces, the namespace URI associated with an attribute may not have come from the DTD. The declaration will have applied to the attribute's qName.", "history": "Added in API level 1", "FullName": "public boolean isDeclared (String uri, String localName)"}, "isSpecified(java.lang.String,java.lang.String)": {"Returns": [["boolean", "current flag value"]], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI, or the empty string if the name has no Namespace URI."], ["@B_java#lang#String_E@", "String: The attribute's local name."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "When the supplied names do not identify an attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the current value of an attribute's \"specified\" flag.", "history": "Added in API level 1", "FullName": "public boolean isSpecified (String uri, String localName)"}, "isSpecified(java.lang.String)": {"Returns": [["boolean", "current flag value"]], "Parameters": [["@B_java#lang#String_E@", "String: The XML qualified (prefixed) name."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "When the supplied name does not identify an attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the current value of an attribute's \"specified\" flag.", "history": "Added in API level 1", "FullName": "public boolean isSpecified (String qName)"}, "addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI, or the empty string if none is available or Namespace processing is not being performed."], ["@B_java#lang#String_E@", "String: The local name, or the empty string if Namespace processing is not being performed."], ["@B_java#lang#String_E@", "String: The qualified (prefixed) name, or the empty string if qualified names are not available."], ["@B_java#lang#String_E@", "String: The attribute type as a string."], ["@B_java#lang#String_E@", "String: The attribute value."]], "Throws": [], "SeeAlso": ["@B_org#xml#sax#helpers#AttributesImpl#addAttribute_E@"], "Permissions": [], "Description": "Add an attribute to the end of the list, setting its \"specified\" flag to true. To set that flag's value to false, use @B_org#xml#sax#ext#Attributes2Impl#setSpecified_E@. Unless the attribute type is CDATA, this attribute is marked as being declared in the DTD. To set that flag's value to true for CDATA attributes, use @B_org#xml#sax#ext#Attributes2Impl#setDeclared_E@.", "history": "Added in API level 1", "FullName": "public void addAttribute (String uri, String localName, String qName, String type, String value)"}, "isDeclared(java.lang.String)": {"Returns": [["boolean", "true if the attribute was declared in the DTD, false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: The XML qualified (prefixed) name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns false unless the attribute was declared in the DTD. This helps distinguish two kinds of attributes that SAX reports as CDATA: ones that were declared (and hence are usually valid), and those that were not (and which are never valid).", "history": "Added in API level 1", "FullName": "public boolean isDeclared (String qName)"}, "isDeclared(java.lang.String, java.lang.String)": {"Returns": [["boolean", "true if the attribute was declared in the DTD, false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI, or the empty string if the name has no Namespace URI."], ["@B_java#lang#String_E@", "String: The attribute's local name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns false unless the attribute was declared in the DTD. This helps distinguish two kinds of attributes that SAX reports as CDATA: ones that were declared (and hence are usually valid), and those that were not (and which are never valid). Remember that since DTDs do not \"understand\" namespaces, the namespace URI associated with an attribute may not have come from the DTD. The declaration will have applied to the attribute's qName.", "history": "added in API level 1", "FullName": "public boolean isDeclared (String uri, String localName)"}, "setDeclared(int,boolean)": {"Returns": [], "Parameters": [["int", "int: The index of the attribute (zero-based)."], ["boolean", "boolean: The desired flag value."]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "When the supplied index does not identify an attribute."]], "SeeAlso": ["@B_org#xml#sax#helpers#AttributesImpl#setType_E@"], "Permissions": [], "Description": "Assign a value to the \"declared\" flag of a specific attribute. This is normally needed only for attributes of type CDATA, including attributes whose type is changed to or from CDATA.", "history": "Added in API level 1", "FullName": "public void setDeclared (int index, boolean value)"}, "Attributes2Impl(org.xml.sax.Attributes)": {"Returns": [], "Parameters": [["@B_org#xml#sax#Attributes_E@", "Attributes: The existing Attributes object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy an existing Attributes or Attributes2 object. If the object implements Attributes2, values of the specified and declared flags for each attribute are copied. Otherwise the flag values are defaulted to assume no DTD was used, unless there is evidence to the contrary (such as attributes with type other than CDATA, which must have been declared). This constructor is especially useful inside a @B_org#xml#sax#ContentHandler#startElement_E@ event.", "history": "Added in API level 1", "FullName": "public Attributes2Impl (Attributes atts)"}, "isDeclared(int)": {"Returns": [["boolean", "true if the attribute was declared in the DTD, false otherwise."]], "Parameters": [["int", "int: The attribute index (zero-based)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns false unless the attribute was declared in the DTD. This helps distinguish two kinds of attributes that SAX reports as CDATA: ones that were declared (and hence are usually valid), and those that were not (and which are never valid).", "history": "Added in API level 1", "FullName": "public boolean isDeclared (int index)"}, "removeAttribute(int)": {"Returns": [], "Parameters": [["int", "int: The index of the attribute (zero-based)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove an attribute from the list.", "history": "Added in API level 1", "FullName": "public void removeAttribute (int index)"}, "Attributes2Impl()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a new, empty Attributes2Impl object.", "history": "Added in API level 1", "FullName": "public Attributes2Impl ()"}, "setDeclared(int, boolean)": {"Returns": [], "Parameters": [["int", "int: The index of the attribute (zero-based)."], ["boolean", "boolean: The desired flag value."]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "When the supplied index does not identify an attribute."]], "SeeAlso": ["@B_org#xml#sax#helpers#AttributesImpl#setType_E@"], "Permissions": [], "Description": "Assign a value to the \"declared\" flag of a specific attribute. This is normally needed only for attributes of type CDATA, including attributes whose type is changed to or from CDATA.", "history": "added in API level 1", "FullName": "public void setDeclared (int index, boolean value)"}, "setSpecified(int, boolean)": {"Returns": [], "Parameters": [["int", "int: The index of the attribute (zero-based)."], ["boolean", "boolean: The desired flag value."]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "When the supplied index does not identify an attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Assign a value to the \"specified\" flag of a specific attribute. This is the only way this flag can be cleared, except clearing by initialization with the copy constructor.", "history": "added in API level 1", "FullName": "public void setSpecified (int index, boolean value)"}, "isSpecified(java.lang.String, java.lang.String)": {"Returns": [["boolean", "current flag value"]], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI, or the empty string if the name has no Namespace URI."], ["@B_java#lang#String_E@", "String: The attribute's local name."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "When the supplied names do not identify an attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the current value of an attribute's \"specified\" flag.", "history": "added in API level 1", "FullName": "public boolean isSpecified (String uri, String localName)"}, "setSpecified(int,boolean)": {"Returns": [], "Parameters": [["int", "int: The index of the attribute (zero-based)."], ["boolean", "boolean: The desired flag value."]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "When the supplied index does not identify an attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Assign a value to the \"specified\" flag of a specific attribute. This is the only way this flag can be cleared, except clearing by initialization with the copy constructor.", "history": "Added in API level 1", "FullName": "public void setSpecified (int index, boolean value)"}}, "Inheritance": ["@B_org#xml#sax#helpers#AttributesImpl_E@"], "ClassName": "org.xml.sax.ext.Attributes2Impl", "ClassDesc": "SAX2 extension helper for additional Attributes information, implementing the @B_org#xml#sax#ext#Attributes2_E@ interface. This is not part of core-only SAX2 distributions. The specified flag for each attribute will always be true, unless it has been set to false in the copy constructor or using @B_org#xml#sax#ext#Attributes2Impl#setSpecified_E@. Similarly, the declared flag for each attribute will always be false, except for defaulted attributes (specified is false), non-CDATA attributes, or when it is set to true using @B_org#xml#sax#ext#Attributes2Impl#setDeclared_E@. If you change an attribute's type by hand, you may need to modify its declared flag to match."}