{"Functions": {"getActiveRecordingConfiguration()": {"Returns": [["@B_android#media#AudioRecordingConfiguration_E@", "a valid @B_android#media#AudioRecordingConfiguration_E@ if this recorder is active or null otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#AudioRecordingConfiguration_E@"], "Permissions": [], "Description": "Returns the current active audio recording for this audio recorder.", "history": "Added in API level 29", "FullName": "public AudioRecordingConfiguration getActiveRecordingConfiguration ()"}, "removeOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener)": {"Returns": [], "Parameters": [["@B_android#media#AudioRouting#OnRoutingChangedListener_E@", "AudioRouting.OnRoutingChangedListener: The previously added @B_android#media#AudioRouting#OnRoutingChangedListener_E@ interface to remove."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes an @B_android#media#AudioRouting#OnRoutingChangedListener_E@ which has been previously added to receive rerouting notifications.", "history": "Added in API level 28", "FullName": "public void removeOnRoutingChangedListener (AudioRouting.OnRoutingChangedListener listener)"}, "setAudioChannels(int)": {"Returns": [], "Parameters": [["int", "int: the number of audio channels. Usually it is either 1 (mono) or 2 (stereo)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the number of audio channels for recording. Call this method before prepare(). Prepare() may perform additional checks on the parameter to make sure whether the specified number of audio channels are applicable.", "history": "Added in API level 8", "FullName": "public void setAudioChannels (int numChannels)"}, "setPreferredMicrophoneFieldDimension(float)": {"Returns": [["boolean", "true if sucessful."]], "Parameters": [["float", "float: the desired field dimension of microphone capture. Range is from -1 (wide angle), though 0 (no zoom) to 1 (maximum zoom). Value is between -1.0 and 1.0 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the zoom factor (i.e. the field dimension) for the selected microphone (for processing). The selected microphone is determined by the use-case for the stream.", "history": "Added in API level 29", "FullName": "public boolean setPreferredMicrophoneFieldDimension (float zoom)"}, "start()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called before prepare() or when the camera is already in use by another app."]], "SeeAlso": [], "Permissions": [], "Description": "Begins capturing and encoding data to the file specified with setOutputFile(). Call this after prepare(). Since API level 13, if applications set a camera via @B_android#media#MediaRecorder#setCamera_E@, the apps can use the camera after this method call. The apps do not need to lock the camera again. However, if this method fails, the apps should still lock the camera back. The apps should not start another recording session during recording.", "history": "Added in API level 1", "FullName": "public void start ()"}, "setAuxiliaryOutputFile(java.io.FileDescriptor)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Currently not implemented. It does nothing.", "history": "Since: API Level 11", "FullName": "public void setAuxiliaryOutputFile (FileDescriptor fd)"}, "getAudioSourceMax()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#MediaRecorder#AudioSource_E@"], "Permissions": [], "Description": "Gets the maximum value for audio sources.", "history": "Added in API level 4", "FullName": "public static final int getAudioSourceMax ()"}, "setPreferredDevice(android.media.AudioDeviceInfo)": {"Returns": [["boolean", "true if succesful, false if the specified @B_android#media#AudioDeviceInfo_E@ is non-null and does not correspond to a valid audio input device."]], "Parameters": [["@B_android#media#AudioDeviceInfo_E@", "AudioDeviceInfo: The @B_android#media#AudioDeviceInfo_E@ specifying the audio source. If deviceInfo is null, default routing is restored."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies an audio device (via an @B_android#media#AudioDeviceInfo_E@ object) to route the input from this MediaRecorder.", "history": "Added in API level 28", "FullName": "public boolean setPreferredDevice (AudioDeviceInfo deviceInfo)"}, "prepare()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called after start() or before setOutputFormat()."], ["@B_java#io#IOException_E@", "if prepare fails otherwise."]], "SeeAlso": [], "Permissions": [], "Description": "Prepares the recorder to begin capturing and encoding data. This method must be called after setting up the desired audio and video sources, encoders, file format, etc., but before start().", "history": "Added in API level 1", "FullName": "public void prepare ()"}, "setVideoFrameRate(int)": {"Returns": [], "Parameters": [["int", "int: the number of frames per second of video to capture"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare().", "history": "Added in API level 3", "FullName": "public void setVideoFrameRate (int rate)"}, "getRoutedDevice()": {"Returns": [["@B_android#media#AudioDeviceInfo_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an @B_android#media#AudioDeviceInfo_E@ identifying the current routing of this MediaRecorder Note: The query is only valid if the MediaRecorder is currently recording. If the recorder is not recording, the returned device can be null or correspond to previously selected device when the recorder was last active.", "history": "Added in API level 28", "FullName": "public AudioDeviceInfo getRoutedDevice ()"}, "setLocation(float, float)": {"Returns": [], "Parameters": [["float", "float: latitude in degrees. Its value must be in the range [-90, 90]."], ["float", "float: longitude in degrees. Its value must be in the range [-180, 180]."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given latitude or longitude is out of range."]], "SeeAlso": [], "Permissions": [], "Description": "Set and store the geodata (latitude and longitude) in the output file. This method should be called before prepare(). The geodata is stored in udta box if the output format is OutputFormat.THREE_GPP or OutputFormat.MPEG_4, and is ignored for other output formats. The geodata is stored according to ISO-6709 standard.", "history": "added in API level 14", "FullName": "public void setLocation (float latitude, float longitude)"}, "setOrientationHint(int)": {"Returns": [], "Parameters": [["int", "int: the angle to be rotated clockwise in degrees. The supported angles are 0, 90, 180, and 270 degrees."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the angle is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the orientation hint for output video playback. This method should be called before prepare(). This method will not trigger the source video frame to rotate during video recording, but to add a composition matrix containing the rotation angle in the output video if the output format is OutputFormat.THREE_GPP or OutputFormat.MPEG_4 so that a video player can choose the proper orientation for playback. Note that some video players may choose to ignore the compostion matrix in a video during playback.", "history": "Added in API level 9", "FullName": "public void setOrientationHint (int degrees)"}, "stop()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called before start()"]], "SeeAlso": [], "Permissions": [], "Description": "Stops recording. Call this after start(). Once recording is stopped, you will have to configure it again as if it has just been constructed. Note that a RuntimeException is intentionally thrown to the application, if no valid audio/video data has been received when stop() is called. This happens if stop() is called immediately after start(). The failure lets the application take action accordingly to clean up the output file (delete the output file, for instance), since the output file is not properly constructed when this happens.", "history": "Added in API level 1", "FullName": "public void stop ()"}, "pause()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called before start() or after stop()"]], "SeeAlso": [], "Permissions": [], "Description": "Pauses recording. Call this after start(). You may resume recording with resume() without reconfiguration, as opposed to stop(). It does nothing if the recording is already paused. When the recording is paused and resumed, the resulting output would be as if nothing happend during paused period, immediately switching to the resumed scene.", "history": "Added in API level 24", "FullName": "public void pause ()"}, "setMaxDuration(int)": {"Returns": [], "Parameters": [["int", "int: the maximum duration in ms (if zero or negative, disables the duration limit)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the maximum duration (in ms) of the recording session. Call this after setOutFormat() but before prepare(). After recording reaches the specified duration, a notification will be sent to the @B_android#media#MediaRecorder#OnInfoListener_E@ with a \"what\" code of @B_android#media#MediaRecorder#MEDIA_RECORDER_INFO_MAX_DURATION_REACHED_E@ and recording will be stopped. Stopping happens asynchronously, there is no guarantee that the recorder will have stopped by the time the listener is notified. When using MPEG-4 container (@B_android#media#MediaRecorder#setOutputFormat_E@ with @B_android#media#MediaRecorder#OutputFormat#MPEG_4_E@), it is recommended to set maximum duration that fits the use case. Setting a larger than required duration may result in a larger than needed output file because of space reserved for MOOV box expecting large movie data in this recording session. Unused space of MOOV box is turned into FREE box in the output file.", "history": "Added in API level 3", "FullName": "public void setMaxDuration (int max_duration_ms)"}, "setPreferredMicrophoneDirection(int)": {"Returns": [["boolean", "true if sucessful."]], "Parameters": [["int", "int: Direction constant. Value is @B_android#media#MicrophoneDirection#MIC_DIRECTION_UNSPECIFIED_E@, @B_android#media#MicrophoneDirection#MIC_DIRECTION_TOWARDS_USER_E@, @B_android#media#MicrophoneDirection#MIC_DIRECTION_AWAY_FROM_USER_E@, or @B_android#media#MicrophoneDirection#MIC_DIRECTION_EXTERNAL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the logical microphone (for processing).", "history": "Added in API level 29", "FullName": "public boolean setPreferredMicrophoneDirection (int direction)"}, "setLocation(float,float)": {"Returns": [], "Parameters": [["float", "float: latitude in degrees. Its value must be in the range [-90, 90]."], ["float", "float: longitude in degrees. Its value must be in the range [-180, 180]."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given latitude or longitude is out of range."]], "SeeAlso": [], "Permissions": [], "Description": "Set and store the geodata (latitude and longitude) in the output file. This method should be called before prepare(). The geodata is stored in udta box if the output format is OutputFormat.THREE_GPP or OutputFormat.MPEG_4, and is ignored for other output formats. The geodata is stored according to ISO-6709 standard.", "history": "Added in API level 14", "FullName": "public void setLocation (float latitude, float longitude)"}, "setNextOutputFile(java.io.FileDescriptor)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: an open file descriptor to be written into."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called before prepare()."], ["@B_java#io#IOException_E@", "if setNextOutputFile fails otherwise."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the next output file descriptor to be used when the maximum filesize is reached on the prior output @B_android#media#MediaRecorder#setOutputFile_E@ or @B_android#media#MediaRecorder#setNextOutputFile_E@). File descriptor must be seekable and writable. After setting the next output file, application should not use the file referenced by this file descriptor until @B_android#media#MediaRecorder#stop_E@. It is the application's responsibility to close the file descriptor. It is safe to do so as soon as this call returns. Application must call this after receiving on the @B_android#media#MediaRecorder#OnInfoListener_E@ a \"what\" code of @B_android#media#MediaRecorder#MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING_E@ and before receiving a \"what\" code of @B_android#media#MediaRecorder#MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED_E@. The file is not used until switching to that output. Application will receive@B_android#media#MediaRecorder#MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED_E@ when the next output file is used. Application will not be able to set a new output file if the previous one has not been used. Application is responsible for cleaning up unused files after @B_android#media#MediaRecorder#stop_E@ is called.", "history": "Added in API level 26", "FullName": "public void setNextOutputFile (FileDescriptor fd)"}, "setAuxiliaryOutputFile(java.lang.String)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Currently not implemented. It does nothing.", "history": "Since: API Level 11", "FullName": "public void setAuxiliaryOutputFile (String path)"}, "setNextOutputFile(java.io.File)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: The file to use."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called before prepare()."], ["@B_java#io#IOException_E@", "if setNextOutputFile fails otherwise."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the next output file to be used when the maximum filesize is reached on the prior output @B_android#media#MediaRecorder#setOutputFile_E@ or @B_android#media#MediaRecorder#setNextOutputFile_E@). File should be seekable. After setting the next output file, application should not use the file until @B_android#media#MediaRecorder#stop_E@. Application must call this after receiving on the @B_android#media#MediaRecorder#OnInfoListener_E@ a \"what\" code of @B_android#media#MediaRecorder#MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING_E@ and before receiving a \"what\" code of @B_android#media#MediaRecorder#MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED_E@. The file is not used until switching to that output. Application will receive @B_android#media#MediaRecorder#MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED_E@ when the next output file is used. Application will not be able to set a new output file if the previous one has not been used. Application is responsible for cleaning up unused files after @B_android#media#MediaRecorder#stop_E@ is called.", "history": "Added in API level 26", "FullName": "public void setNextOutputFile (File file)"}, "getActiveMicrophones()": {"Returns": [["@B_java#util#List_E@", "a lists of @B_android#media#MicrophoneInfo_E@ representing the active microphones"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Return A lists of @B_android#media#MicrophoneInfo_E@ representing the active microphones. By querying channel mapping for each active microphone, developer can know how the microphone is used by each channels or a capture stream.", "history": "Added in API level 28", "FullName": "public List<MicrophoneInfo> getActiveMicrophones ()"}, "getPreferredDevice()": {"Returns": [["@B_android#media#AudioDeviceInfo_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the selected input device specified by @B_android#media#MediaRecorder#setPreferredDevice_E@. Note that this is not guaranteed to correspond to the actual device being used for recording.", "history": "Added in API level 28", "FullName": "public AudioDeviceInfo getPreferredDevice ()"}, "setAudioSamplingRate(int)": {"Returns": [], "Parameters": [["int", "int: the sampling rate for audio in samples per second."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the audio sampling rate for recording. Call this method before prepare(). Prepare() may perform additional checks on the parameter to make sure whether the specified audio sampling rate is applicable. The sampling rate really depends on the format for the audio recording, as well as the capabilities of the platform. For instance, the sampling rate supported by AAC audio coding standard ranges from 8 to 96 kHz, the sampling rate supported by AMRNB is 8kHz, and the sampling rate supported by AMRWB is 16kHz. Please consult with the related audio coding standard for the supported audio sampling rate.", "history": "Added in API level 8", "FullName": "public void setAudioSamplingRate (int samplingRate)"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases resources associated with this MediaRecorder object. It is good practice to call this method when you're done using the MediaRecorder. In particular, whenever an Activity of an application is paused (its onPause() method is called), or stopped (its onStop() method is called), this method should be invoked to release the MediaRecorder object, unless the application has a special need to keep the object around. In addition to unnecessary resources (such as memory and instances of codecs) being held, failure to call this method immediately if a MediaRecorder object is no longer needed may also lead to continuous battery consumption for mobile devices, and recording failure for other applications if no multiple instances of the same codec are supported on a device. Even if multiple instances of the same codec are supported, some performance degradation may be expected when unnecessary multiple instances are used at the same time.", "history": "Added in API level 1", "FullName": "public void release ()"}, "resume()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called before start() or after stop()"]], "SeeAlso": ["@B_android#media#MediaRecorder#pause_E@"], "Permissions": [], "Description": "Resumes recording. Call this after start(). It does nothing if the recording is not paused.", "history": "Added in API level 24", "FullName": "public void resume ()"}, "getMetrics()": {"Returns": [["@B_android#os#PersistableBundle_E@", "a @B_android#os#PersistableBundle_E@ containing the set of attributes and values available for the media being generated by this instance of MediaRecorder. The attributes are descibed in @B_android#media#MediaRecorder#MetricsConstants_E@. Additional vendor-specific fields may also be present in the return value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return Metrics data about the current Mediarecorder instance.", "history": "Added in API level 26", "FullName": "public PersistableBundle getMetrics ()"}, "setOutputFormat(int)": {"Returns": [], "Parameters": [["int", "int: the output format to use. The output format needs to be specified before setting recording-parameters or encoders."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called after prepare() or before setAudioSource()/setVideoSource()."]], "SeeAlso": ["@B_android#media#MediaRecorder#OutputFormat_E@"], "Permissions": [], "Description": "Sets the format of the output file produced during recording. Call this after setAudioSource()/setVideoSource() but before prepare(). It is recommended to always use 3GP format when using the H.263 video encoder and AMR audio encoder. Using an MPEG-4 container format may confuse some desktop players.", "history": "Added in API level 1", "FullName": "public void setOutputFormat (int output_format)"}, "setInputSurface(android.view.Surface)": {"Returns": [], "Parameters": [["@B_android#view#Surface_E@", "Surface: a persistent input surface created by @B_android#media#MediaCodec#createPersistentInputSurface_E@ This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called after @B_android#media#MediaRecorder#prepare_E@ and before @B_android#media#MediaRecorder#stop_E@."], ["@B_java#lang#IllegalArgumentException_E@", "if the surface was not created by @B_android#media#MediaCodec#createPersistentInputSurface_E@."]], "SeeAlso": ["@B_android#media#MediaCodec#createPersistentInputSurface_E@", "@B_android#media#MediaRecorder#VideoSource_E@"], "Permissions": [], "Description": "Configures the recorder to use a persistent surface when using SURFACE video source. May only be called before @B_android#media#MediaRecorder#prepare_E@. If called, @B_android#media#MediaRecorder#getSurface_E@ should not be used and will throw IllegalStateException. Frames rendered to the Surface before @B_android#media#MediaRecorder#start_E@ will be discarded.", "history": "Added in API level 23", "FullName": "public void setInputSurface (Surface surface)"}, "setAudioEncoder(int)": {"Returns": [], "Parameters": [["int", "int: the audio encoder to use."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called before setOutputFormat() or after prepare()."]], "SeeAlso": ["@B_android#media#MediaRecorder#AudioEncoder_E@"], "Permissions": [], "Description": "Sets the audio encoder to be used for recording. If this method is not called, the output file will not contain an audio track. Call this after setOutputFormat() but before prepare().", "history": "Added in API level 1", "FullName": "public void setAudioEncoder (int audio_encoder)"}, "setPreviewDisplay(android.view.Surface)": {"Returns": [], "Parameters": [["@B_android#view#Surface_E@", "Surface: the Surface to use for the preview"]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#setPreviewDisplay_E@"], "Permissions": [], "Description": "Sets a Surface to show a preview of recorded media (video). Calls this before prepare() to make sure that the desirable preview display is set. If @B_android#media#MediaRecorder#setCamera_E@ is used and the surface has been already set to the camera, application do not need to call this. If this is called with non-null surface, the preview surface of the camera will be replaced by the new surface. If this method is called with null surface or not called at all, media recorder will not change the preview surface of the camera.", "history": "Added in API level 1", "FullName": "public void setPreviewDisplay (Surface sv)"}, "setVideoSize(int, int)": {"Returns": [], "Parameters": [["int", "int: the width of the video to be captured"], ["int", "int: the height of the video to be captured"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called after prepare() or before setOutputFormat()"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the width and height of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare().", "history": "added in API level 3", "FullName": "public void setVideoSize (int width, int height)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "setVideoSize(int,int)": {"Returns": [], "Parameters": [["int", "int: the width of the video to be captured"], ["int", "int: the height of the video to be captured"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called after prepare() or before setOutputFormat()"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the width and height of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare().", "history": "Added in API level 3", "FullName": "public void setVideoSize (int width, int height)"}, "setVideoEncodingBitRate(int)": {"Returns": [], "Parameters": [["int", "int: the video encoding bit rate in bits per second."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the video encoding bit rate for recording. Call this method before prepare(). Prepare() may perform additional checks on the parameter to make sure whether the specified bit rate is applicable, and sometimes the passed bitRate will be clipped internally to ensure the video recording can proceed smoothly based on the capabilities of the platform.", "history": "Added in API level 8", "FullName": "public void setVideoEncodingBitRate (int bitRate)"}, "setVideoEncoder(int)": {"Returns": [], "Parameters": [["int", "int: the video encoder to use."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called before setOutputFormat() or after prepare()"]], "SeeAlso": ["@B_android#media#MediaRecorder#VideoEncoder_E@"], "Permissions": [], "Description": "Sets the video encoder to be used for recording. If this method is not called, the output file will not contain an video track. Call this after setOutputFormat() and before prepare().", "history": "Added in API level 3", "FullName": "public void setVideoEncoder (int video_encoder)"}, "setVideoEncodingProfileLevel(int,int)": {"Returns": [], "Parameters": [["int", "int: declared in @B_android#media#MediaCodecInfo#CodecProfileLevel_E@."], ["int", "int: declared in @B_android#media#MediaCodecInfo#CodecProfileLevel_E@."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "when an invalid profile or level value is used."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the desired video encoding profile and level for recording. The profile and level must be valid for the video encoder set by @B_android#media#MediaRecorder#setVideoEncoder_E@. This method can called before or after @B_android#media#MediaRecorder#setVideoEncoder_E@ but it must be called before @B_android#media#MediaRecorder#prepare_E@. prepare() may perform additional checks on the parameter to make sure that the specified profile and level are applicable, and sometimes the passed profile or level will be discarded due to codec capablity or to ensure the video recording can proceed smoothly based on the capabilities of the platform. Application can also use the @B_android#media#MediaCodecInfo#CodecCapabilities#profileLevels_E@ to query applicable combination of profile and level for the corresponding format. Note that the requested profile/level may not be supported by the codec that is actually being used by this MediaRecorder instance.", "history": "Added in API level 26", "FullName": "public void setVideoEncodingProfileLevel (int profile, int level)"}, "setOutputFile(java.io.FileDescriptor)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: an open file descriptor to be written into."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called before setOutputFormat() or after prepare()"]], "SeeAlso": [], "Permissions": [], "Description": "Pass in the file descriptor of the file to be written. Call this after setOutputFormat() but before prepare().", "history": "Added in API level 3", "FullName": "public void setOutputFile (FileDescriptor fd)"}, "setCaptureRate(double)": {"Returns": [], "Parameters": [["double", "double: Rate at which frames should be captured in frames per second. The fps can go as low as desired. However the fastest fps will be limited by the hardware. For resolutions that can be captured by the video camera, the fastest fps can be computed using @B_android#hardware#Camera#Parameters#getPreviewFpsRange_E@. For higher resolutions the fastest fps may be more restrictive. Note that the recorder cannot guarantee that frames will be captured at the given rate due to camera/encoder limitations. However it tries to be as close as possible."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set video frame capture rate. This can be used to set a different video frame capture rate than the recorded video's playback rate. This method also sets the recording mode to time lapse. In time lapse video recording, only video is recorded. Audio related parameters are ignored when a time lapse recording session starts, if an application sets them.", "history": "Added in API level 11", "FullName": "public void setCaptureRate (double fps)"}, "addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#media#AudioRouting#OnRoutingChangedListener_E@", "AudioRouting.OnRoutingChangedListener: The @B_android#media#AudioRouting#OnRoutingChangedListener_E@ interface to receive notifications of rerouting events."], ["@B_android#os#Handler_E@", "Handler: Specifies the @B_android#os#Handler_E@ object for the thread on which to execute the callback. If null, the handler on the main looper will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds an @B_android#media#AudioRouting#OnRoutingChangedListener_E@ to receive notifications of routing changes on this MediaRecorder.", "history": "Added in API level 28", "FullName": "public void addOnRoutingChangedListener (AudioRouting.OnRoutingChangedListener listener, Handler handler)"}, "getSurface()": {"Returns": [["@B_android#view#Surface_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called before @B_android#media#MediaRecorder#prepare_E@, after @B_android#media#MediaRecorder#stop_E@, or is called when VideoSource is not set to SURFACE."]], "SeeAlso": ["@B_android#media#MediaRecorder#VideoSource_E@"], "Permissions": [], "Description": "Gets the surface to record from when using SURFACE video source. May only be called after @B_android#media#MediaRecorder#prepare_E@. Frames rendered to the Surface before @B_android#media#MediaRecorder#start_E@ will be discarded.", "history": "Added in API level 21", "FullName": "public Surface getSurface ()"}, "setAudioEncodingBitRate(int)": {"Returns": [], "Parameters": [["int", "int: the audio encoding bit rate in bits per second."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the audio encoding bit rate for recording. Call this method before prepare(). Prepare() may perform additional checks on the parameter to make sure whether the specified bit rate is applicable, and sometimes the passed bitRate will be clipped internally to ensure the audio recording can proceed smoothly based on the capabilities of the platform.", "history": "Added in API level 8", "FullName": "public void setAudioEncodingBitRate (int bitRate)"}, "setOutputFile(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The pathname to use."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called before setOutputFormat() or after prepare()"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the path of the output file to be produced. Call this after setOutputFormat() but before prepare().", "history": "Added in API level 1", "FullName": "public void setOutputFile (String path)"}, "MediaRecorder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default constructor.", "history": "Added in API level 1", "FullName": "public MediaRecorder ()"}, "getMaxAmplitude()": {"Returns": [["int", "the maximum absolute amplitude measured since the last call, or 0 when called for the first time"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called before the audio source has been set."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum absolute amplitude that was sampled since the last call to this method. Call this only after the setAudioSource().", "history": "Added in API level 1", "FullName": "public int getMaxAmplitude ()"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Restarts the MediaRecorder to its idle state. After calling this method, you will have to configure it again as if it had just been constructed.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "setAudioSource(int)": {"Returns": [], "Parameters": [["int", "int: the audio source to use Value is @B_android#media#MediaRecorder#AudioSource#DEFAULT_E@, @B_android#media#MediaRecorder#AudioSource#MIC_E@, @B_android#media#MediaRecorder#AudioSource#VOICE_UPLINK_E@, @B_android#media#MediaRecorder#AudioSource#VOICE_DOWNLINK_E@, @B_android#media#MediaRecorder#AudioSource#VOICE_CALL_E@, @B_android#media#MediaRecorder#AudioSource#CAMCORDER_E@, @B_android#media#MediaRecorder#AudioSource#VOICE_RECOGNITION_E@, @B_android#media#MediaRecorder#AudioSource#VOICE_COMMUNICATION_E@, @B_android#media#MediaRecorder#AudioSource#UNPROCESSED_E@, or @B_android#media#MediaRecorder#AudioSource#VOICE_PERFORMANCE_E@"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called after setOutputFormat()"]], "SeeAlso": ["@B_android#media#MediaRecorder#AudioSource_E@"], "Permissions": [], "Description": "Sets the audio source to be used for recording. If this method is not called, the output file will not contain an audio track. The source needs to be specified before setting recording-parameters or encoders. Call this only before setOutputFormat().", "history": "Added in API level 1", "FullName": "public void setAudioSource (int audioSource)"}, "setVideoEncodingProfileLevel(int, int)": {"Returns": [], "Parameters": [["int", "int: declared in @B_android#media#MediaCodecInfo#CodecProfileLevel_E@."], ["int", "int: declared in @B_android#media#MediaCodecInfo#CodecProfileLevel_E@."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "when an invalid profile or level value is used."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the desired video encoding profile and level for recording. The profile and level must be valid for the video encoder set by @B_android#media#MediaRecorder#setVideoEncoder_E@. This method can called before or after @B_android#media#MediaRecorder#setVideoEncoder_E@ but it must be called before @B_android#media#MediaRecorder#prepare_E@. prepare() may perform additional checks on the parameter to make sure that the specified profile and level are applicable, and sometimes the passed profile or level will be discarded due to codec capablity or to ensure the video recording can proceed smoothly based on the capabilities of the platform. Application can also use the @B_android#media#MediaCodecInfo#CodecCapabilities#profileLevels_E@ to query applicable combination of profile and level for the corresponding format. Note that the requested profile/level may not be supported by the codec that is actually being used by this MediaRecorder instance.", "history": "added in API level 26", "FullName": "public void setVideoEncodingProfileLevel (int profile, int level)"}, "setProfile(android.media.CamcorderProfile)": {"Returns": [], "Parameters": [["@B_android#media#CamcorderProfile_E@", "CamcorderProfile: the CamcorderProfile to use"]], "Throws": [], "SeeAlso": ["@B_android#media#CamcorderProfile_E@"], "Permissions": [], "Description": "Uses the settings from a CamcorderProfile object for recording. This method should be called after the video AND audio sources are set, and before setOutputFile(). If a time lapse CamcorderProfile is used, audio related source or recording parameters are ignored.", "history": "Added in API level 8", "FullName": "public void setProfile (CamcorderProfile profile)"}, "registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager.AudioRecordingCallback)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#Executor_E@", "Executor: @B_java#util#concurrent#Executor_E@ to handle the callbacks. This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#media#AudioManager#AudioRecordingCallback_E@", "AudioManager.AudioRecordingCallback: non-null callback to register This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be notified of audio capture changes via a @B_android#media#AudioManager#AudioRecordingCallback_E@. A callback is received when the capture path configuration changes (pre-processing, format, sampling rate...) or capture is silenced/unsilenced by the system.", "history": "Added in API level 29", "FullName": "public void registerAudioRecordingCallback (Executor executor, AudioManager.AudioRecordingCallback cb)"}, "setOnErrorListener(android.media.MediaRecorder.OnErrorListener)": {"Returns": [], "Parameters": [["@B_android#media#MediaRecorder#OnErrorListener_E@", "MediaRecorder.OnErrorListener: the callback that will be run"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when an error occurs while recording.", "history": "Added in API level 3", "FullName": "public void setOnErrorListener (MediaRecorder.OnErrorListener l)"}, "setOnInfoListener(android.media.MediaRecorder.OnInfoListener)": {"Returns": [], "Parameters": [["@B_android#media#MediaRecorder#OnInfoListener_E@", "MediaRecorder.OnInfoListener: the callback that will be run"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when an informational event occurs while recording.", "history": "Added in API level 3", "FullName": "public void setOnInfoListener (MediaRecorder.OnInfoListener listener)"}, "setCamera(android.hardware.Camera)": {"Returns": [], "Parameters": [["@B_android#hardware#Camera_E@", "Camera: the Camera to use for recording"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#media#MediaRecorder#getSurface_E@ and the @B_android#hardware#camera2#package-summary_E@ API instead. Sets a @B_android#hardware#Camera_E@ to use for recording. Use this function to switch quickly between preview and capture mode without a teardown of the camera object. @B_android#hardware#Camera#unlock_E@ should be called before this. Must call before @B_android#media#MediaRecorder#prepare_E@.", "history": "Added in API level 3 Deprecated in API level 21", "FullName": "public void setCamera (Camera c)"}, "setMaxFileSize(long)": {"Returns": [], "Parameters": [["long", "long: the maximum filesize in bytes (if zero or negative, disables the limit)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the maximum filesize (in bytes) of the recording session. Call this after setOutFormat() but before prepare(). After recording reaches the specified filesize, a notification will be sent to the @B_android#media#MediaRecorder#OnInfoListener_E@ with a \"what\" code of @B_android#media#MediaRecorder#MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED_E@ and recording will be stopped. Stopping happens asynchronously, there is no guarantee that the recorder will have stopped by the time the listener is notified. When using MPEG-4 container (@B_android#media#MediaRecorder#setOutputFormat_E@ with @B_android#media#MediaRecorder#OutputFormat#MPEG_4_E@), it is recommended to set maximum filesize that fits the use case. Setting a larger than required filesize may result in a larger than needed output file because of space reserved for MOOV box expecting large movie data in this recording session. Unused space of MOOV box is turned into FREE box in the output file.", "history": "Added in API level 3", "FullName": "public void setMaxFileSize (long max_filesize_bytes)"}, "unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback)": {"Returns": [], "Parameters": [["@B_android#media#AudioManager#AudioRecordingCallback_E@", "AudioManager.AudioRecordingCallback: non-null callback to unregister This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregister an audio recording callback previously registered with @B_android#media#MediaRecorder#registerAudioRecordingCallback_E@.", "history": "Added in API level 29", "FullName": "public void unregisterAudioRecordingCallback (AudioManager.AudioRecordingCallback cb)"}, "setOutputFile(java.io.File)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: the file object to be written into."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pass in the file object to be written. Call this after setOutputFormat() but before prepare(). File should be seekable. After setting the next output file, application should not use the file until @B_android#media#MediaRecorder#stop_E@. Application is responsible for cleaning up unused files after @B_android#media#MediaRecorder#stop_E@ is called.", "history": "Added in API level 26", "FullName": "public void setOutputFile (File file)"}, "setVideoSource(int)": {"Returns": [], "Parameters": [["int", "int: the video source to use"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if it is called after setOutputFormat()"]], "SeeAlso": ["@B_android#media#MediaRecorder#VideoSource_E@"], "Permissions": [], "Description": "Sets the video source to be used for recording. If this method is not called, the output file will not contain an video track. The source needs to be specified before setting recording-parameters or encoders. Call this only before setOutputFormat().", "history": "Added in API level 3", "FullName": "public void setVideoSource (int video_source)"}}, "Inheritance": [], "ClassName": "android.media.MediaRecorder", "ClassDesc": "Used to record audio and video. The recording control is based on a simple state machine (see below). A common case of using MediaRecorder to record audio works as follows: Applications may want to register for informational and error events in order to be informed of some internal update and possible runtime errors during recording. Registration for such events is done by setting the appropriate listeners (via calls (to @B_android#media#MediaRecorder#setOnInfoListener_E@setOnInfoListener and/or @B_android#media#MediaRecorder#setOnErrorListener_E@setOnErrorListener). In order to receive the respective callback associated with these listeners, applications are required to create MediaRecorder objects on threads with a Looper running (the main UI thread by default already has a Looper running)."}