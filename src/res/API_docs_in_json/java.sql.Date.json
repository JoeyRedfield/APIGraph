{"Functions": {"setMinutes(int)": {"Returns": [], "Parameters": [["int", "int: the value of the minutes."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if this method is invoked"]], "SeeAlso": ["@B_java#sql#Date#getMinutes_E@"], "Permissions": [], "Description": "This method is deprecated and should not be used because SQL Date values do not have a time component. Sets the minutes of this", "history": "Added in API level 1", "FullName": "public void setMinutes (int i)"}, "setTime(long)": {"Returns": [], "Parameters": [["long", "long: milliseconds since January 1, 1970, 00:00:00 GMT not to exceed the milliseconds representation for the year 8099. A negative number indicates the number of milliseconds before January 1, 1970, 00:00:00 GMT."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets an existing Date object using the given milliseconds time value. If the given milliseconds value contains time information, the driver will set the time components to the time in the default time zone (the time zone of the Java virtual machine running the application) that corresponds to zero GMT.", "history": "Added in API level 1", "FullName": "public void setTime (long date)"}, "getMinutes()": {"Returns": [["int", "the number of minutes past the hour represented by this date."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if this method is invoked"]], "SeeAlso": ["@B_java#sql#Date#setMinutes_E@"], "Permissions": [], "Description": "This method is deprecated and should not be used because SQL Date values do not have a time component. Returns the number of minutes past the hour represented by this date, as interpreted in the local time zone. The value returned is between 0 and 59.", "history": "Added in API level 1", "FullName": "public int getMinutes ()"}, "getSeconds()": {"Returns": [["int", "the number of seconds past the minute represented by this date."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if this method is invoked"]], "SeeAlso": ["@B_java#sql#Date#setSeconds_E@"], "Permissions": [], "Description": "This method is deprecated and should not be used because SQL Date values do not have a time component. Returns the number of seconds past the minute represented by this date. The value returned is between 0 and 61. The values 60 and 61 can only occur on those Java Virtual Machines that take leap seconds into account.", "history": "Added in API level 1", "FullName": "public int getSeconds ()"}, "Date(int, int, int)": {"Returns": [], "Parameters": [["int", "int: the year minus 1900; must be 0 to 8099. (Note that 8099 is 9999 minus 1900.)"], ["int", "int: 0 to 11"], ["int", "int: 1 to 31"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "instead use the constructor Date(long date) Constructs a Date object initialized with the given year, month, and day. The result is undefined if a given argument is out of bounds.", "history": "added in API level 1", "FullName": "public Date (int year, int month, int day)"}, "getHours()": {"Returns": [["int", "the hour represented by this date."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if this method is invoked"]], "SeeAlso": ["@B_java#sql#Date#setHours_E@"], "Permissions": [], "Description": "This method is deprecated and should not be used because SQL Date values do not have a time component. Returns the hour represented by this", "history": "Added in API level 1", "FullName": "public int getHours ()"}, "setSeconds(int)": {"Returns": [], "Parameters": [["int", "int: the seconds value."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if this method is invoked"]], "SeeAlso": ["@B_java#sql#Date#getSeconds_E@"], "Permissions": [], "Description": "This method is deprecated and should not be used because SQL Date values do not have a time component. Sets the seconds of this", "history": "Added in API level 1", "FullName": "public void setSeconds (int i)"}, "Date(long)": {"Returns": [], "Parameters": [["long", "long: milliseconds since January 1, 1970, 00:00:00 GMT not to exceed the milliseconds representation for the year 8099. A negative number indicates the number of milliseconds before January 1, 1970, 00:00:00 GMT."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a Date object using the given milliseconds time value. If the given milliseconds value contains time information, the driver will set the time components to the time in the default time zone (the time zone of the Java virtual machine running the application) that corresponds to zero GMT.", "history": "Added in API level 1", "FullName": "public Date (long date)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a String in yyyy-mm-dd format"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a date in the date escape format yyyy-mm-dd.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "Date(int,int,int)": {"Returns": [], "Parameters": [["int", "int: the year minus 1900; must be 0 to 8099. (Note that 8099 is 9999 minus 1900.)"], ["int", "int: 0 to 11"], ["int", "int: 1 to 31"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "instead use the constructor Date(long date) Constructs a Date object initialized with the given year, month, and day. The result is undefined if a given argument is out of bounds.", "history": "Added in API level 1", "FullName": "public Date (int year, int month, int day)"}, "setHours(int)": {"Returns": [], "Parameters": [["int", "int: the hour value."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if this method is invoked"]], "SeeAlso": ["@B_java#sql#Date#getHours_E@"], "Permissions": [], "Description": "This method is deprecated and should not be used because SQL Date values do not have a time component. Sets the hour of this", "history": "Added in API level 1", "FullName": "public void setHours (int i)"}, "valueOf(java.lang.String)": {"Returns": [["@B_java#sql#Date_E@", "a java.sql.Date object representing the given date"]], "Parameters": [["@B_java#lang#String_E@", "String: a String object representing a date in in the format \"yyyy-[m]m-[d]d\". The leading zero for mm and dd may also be omitted."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the date given is not in the JDBC date escape format (yyyy-[m]m-[d]d)"]], "SeeAlso": [], "Permissions": [], "Description": "Converts a string in JDBC date escape format to a Date value.", "history": "Added in API level 1", "FullName": "public static Date valueOf (String s)"}}, "Inheritance": ["@B_java#util#Date_E@"], "ClassName": "java.sql.Date", "ClassDesc": "A thin wrapper around a millisecond value that allows JDBC to identify this as an SQL DATE value. A milliseconds value represents the number of milliseconds that have passed since January 1, 1970 00:00:00.000 GMT. To conform with the definition of SQL DATE, the millisecond values wrapped by a java.sql.Date instance must be 'normalized' by setting the hours, minutes, seconds, and milliseconds to zero in the particular time zone with which the instance is associated."}