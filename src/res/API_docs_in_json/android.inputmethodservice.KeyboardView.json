{"Functions": {"setShifted(boolean)": {"Returns": [["boolean", "true if the shift key state changed, false if there was no change"]], "Parameters": [["boolean", "boolean: whether or not to enable the state of the shift key"]], "Throws": [], "SeeAlso": ["@B_android#inputmethodservice#KeyboardView#isShifted_E@"], "Permissions": [], "Description": "Sets the state of the shift key of the keyboard, if any.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public boolean setShifted (boolean shifted)"}, "invalidateAllKeys()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#inputmethodservice#KeyboardView#invalidateKey_E@"], "Permissions": [], "Description": "Requests a redraw of the entire keyboard. Calling @B_android#view#View#invalidate_E@ is not sufficient because the keyboard renders the keys to an off-screen buffer and an invalidate() only draws the cached buffer.", "history": "Added in API level 4 Deprecated in API level 29", "FullName": "public void invalidateAllKeys ()"}, "swipeDown()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected void swipeDown ()"}, "getKeyboard()": {"Returns": [["@B_android#inputmethodservice#Keyboard_E@", "the currently attached keyboard"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#inputmethodservice#KeyboardView#setKeyboard_E@"], "Permissions": [], "Description": "Returns the current keyboard being displayed by this view.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public Keyboard getKeyboard ()"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "isShifted()": {"Returns": [["boolean", "true if the shift is in a pressed state, false otherwise. If there is no shift key on the keyboard or there is no keyboard attached, it returns false."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#inputmethodservice#KeyboardView#setShifted_E@"], "Permissions": [], "Description": "Returns the state of the shift key of the keyboard, if any.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public boolean isShifted ()"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 3", "FullName": "public void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "getOnKeyboardActionListener()": {"Returns": [["@B_android#inputmethodservice#KeyboardView#OnKeyboardActionListener_E@", "the listener attached to this keyboard"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#inputmethodservice#KeyboardView#OnKeyboardActionListener_E@ object.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected KeyboardView.OnKeyboardActionListener getOnKeyboardActionListener ()"}, "swipeUp()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected void swipeUp ()"}, "setProximityCorrectionEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether or not the proximity correction is enabled"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When enabled, calls to @B_android#inputmethodservice#KeyboardView#OnKeyboardActionListener#onKey_E@ will include key codes for adjacent keys. When disabled, only the primary key code will be reported.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void setProximityCorrectionEnabled (boolean enabled)"}, "invalidateKey(int)": {"Returns": [], "Parameters": [["int", "int: the index of the key in the attached @B_android#inputmethodservice#Keyboard_E@."]], "Throws": [], "SeeAlso": ["@B_android#inputmethodservice#KeyboardView#invalidateAllKeys_E@"], "Permissions": [], "Description": "Invalidates a key so that it will be redrawn on the next repaint. Use this method if only one key is changing it's content. Any changes that affect the position or size of the key may not be honored.", "history": "Added in API level 4 Deprecated in API level 29", "FullName": "public void invalidateKey (int keyIndex)"}, "closing()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void closing ()"}, "onSizeChanged(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void onSizeChanged (int w, int h, int oldw, int oldh)"}, "setVerticalCorrection(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void setVerticalCorrection (int verticalOffset)"}, "KeyboardView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public KeyboardView (Context context, AttributeSet attrs)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void onDetachedFromWindow ()"}, "setKeyboard(android.inputmethodservice.Keyboard)": {"Returns": [], "Parameters": [["@B_android#inputmethodservice#Keyboard_E@", "Keyboard: the keyboard to display in this view"]], "Throws": [], "SeeAlso": ["@B_android#inputmethodservice#Keyboard_E@", "@B_android#inputmethodservice#KeyboardView#getKeyboard_E@"], "Permissions": [], "Description": "Attaches a keyboard to this view. The keyboard can be switched at any time and the view will re-layout itself to accommodate the keyboard.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void setKeyboard (Keyboard keyboard)"}, "isPreviewEnabled()": {"Returns": [["boolean", "whether or not the key feedback popup is enabled"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#inputmethodservice#KeyboardView#setPreviewEnabled_E@"], "Permissions": [], "Description": "Returns the enabled state of the key feedback popup.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public boolean isPreviewEnabled ()"}, "KeyboardView(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public KeyboardView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "handleBack()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public boolean handleBack ()"}, "swipeLeft()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected void swipeLeft ()"}, "setOnKeyboardActionListener(android.inputmethodservice.KeyboardView.OnKeyboardActionListener)": {"Returns": [], "Parameters": [["@B_android#inputmethodservice#KeyboardView#OnKeyboardActionListener_E@", "KeyboardView.OnKeyboardActionListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void setOnKeyboardActionListener (KeyboardView.OnKeyboardActionListener listener)"}, "isProximityCorrectionEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if proximity correction is enabled.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public boolean isProximityCorrectionEnabled ()"}, "onSizeChanged(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "added in API level 3", "FullName": "public void onSizeChanged (int w, int h, int oldw, int oldh)"}, "KeyboardView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public KeyboardView (Context context, AttributeSet attrs, int defStyleAttr)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected void onAttachedToWindow ()"}, "setPopupOffset(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void setPopupOffset (int x, int y)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public boolean onTouchEvent (MotionEvent me)"}, "setPopupParent(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void setPopupParent (View v)"}, "setPopupOffset(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 3", "FullName": "public void setPopupOffset (int x, int y)"}, "onLongPress(android.inputmethodservice.Keyboard.Key)": {"Returns": [["boolean", "true if the long press is handled, false otherwise. Subclasses should call the method on the base class if the subclass doesn't wish to handle the call."]], "Parameters": [["@B_android#inputmethodservice#Keyboard#Key_E@", "Keyboard.Key: the key that was long pressed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a key is long pressed. By default this will open any popup keyboard associated with this key through the attributes popupLayout and popupCharacters.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected boolean onLongPress (Keyboard.Key popupKey)"}, "setPreviewEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether or not to enable the key feedback popup"]], "Throws": [], "SeeAlso": ["@B_android#inputmethodservice#KeyboardView#isPreviewEnabled_E@"], "Permissions": [], "Description": "Enables or disables the key feedback popup. This is a popup that shows a magnified version of the depressed key. By default the preview is enabled.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void setPreviewEnabled (boolean previewEnabled)"}, "onHoverEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the view handled the hover event."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event that describes the hover."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle hover events. This method is called whenever a pointer is hovering into, over, or out of the bounds of a view and the view is not currently being touched. Hover events are represented as pointer events with action @B_android#view#MotionEvent#ACTION_HOVER_ENTER_E@, @B_android#view#MotionEvent#ACTION_HOVER_MOVE_E@, or @B_android#view#MotionEvent#ACTION_HOVER_EXIT_E@. The view receives a hover event with action @B_android#view#MotionEvent#ACTION_HOVER_ENTER_E@ when the pointer enters the bounds of the view. The view receives a hover event with action @B_android#view#MotionEvent#ACTION_HOVER_MOVE_E@ when the pointer has already entered the bounds of the view and has moved. The view receives a hover event with action @B_android#view#MotionEvent#ACTION_HOVER_EXIT_E@ when the pointer has exited the bounds of the view or when the pointer is about to go down due to a button click, tap, or similar user action that causes the view to be touched. The view should implement this method to return true to indicate that it is handling the hover event, such as by changing its drawable state. The default implementation calls @B_android#view#View#setHovered_E@ to update the hovered state of the view when a hover enter or hover exit event is received, if the view is enabled and is clickable. The default implementation also sends hover accessibility events.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public boolean onHoverEvent (MotionEvent event)"}, "swipeRight()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected void swipeRight ()"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void onDraw (Canvas canvas)"}}, "Inheritance": ["@B_android#view#View_E@"], "ClassName": "android.inputmethodservice.KeyboardView", "ClassDesc": "This class is deprecated because this is just a convenient UI widget class that application developers can re-implement on top of existing public APIs. If you have already depended on this class, consider copying the implementation from AOSP into your project or re-implementing a similar widget by yourselves A view that renders a virtual @B_android#inputmethodservice#Keyboard_E@. It handles rendering of keys and detecting key presses and touch movements."}