{"Functions": {"getWaveForm(byte[])": {"Returns": [["int", "@B_android#media#audiofx#Visualizer#SUCCESS_E@ in case of success, @B_android#media#audiofx#Visualizer#ERROR_NO_MEMORY_E@, @B_android#media#audiofx#Visualizer#ERROR_INVALID_OPERATION_E@ or @B_android#media#audiofx#Visualizer#ERROR_DEAD_OBJECT_E@ in case of failure."]], "Parameters": [["byte[]", "byte: array of bytes where the waveform should be returned"]], "Throws": [["", "java.lang.IllegalStateException"], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a waveform capture of currently playing audio content. The capture consists in a number of consecutive 8-bit (unsigned) mono PCM samples equal to the capture size returned by @B_android#media#audiofx#Visualizer#getCaptureSize_E@. This method must be called when the Visualizer is enabled.", "history": "Added in API level 9", "FullName": "public int getWaveForm (byte[] waveform)"}, "getEnabled()": {"Returns": [["boolean", "true if the visualizer is active, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get current activation state of the visualizer.", "history": "Added in API level 9", "FullName": "public boolean getEnabled ()"}, "getMeasurementPeakRms(android.media.audiofx.Visualizer.MeasurementPeakRms)": {"Returns": [["int", "@B_android#media#audiofx#Visualizer#SUCCESS_E@ in case of success, @B_android#media#audiofx#Visualizer#ERROR_BAD_VALUE_E@, @B_android#media#audiofx#Visualizer#ERROR_NO_MEMORY_E@, @B_android#media#audiofx#Visualizer#ERROR_INVALID_OPERATION_E@ or @B_android#media#audiofx#Visualizer#ERROR_DEAD_OBJECT_E@ in case of failure."]], "Parameters": [["@B_android#media#audiofx#Visualizer#MeasurementPeakRms_E@", "Visualizer.MeasurementPeakRms: a non-null @B_android#media#audiofx#Visualizer#MeasurementPeakRms_E@ instance to store the measurement values."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the latest peak and RMS measurement. Sets the peak and RMS fields of the supplied @B_android#media#audiofx#Visualizer#MeasurementPeakRms_E@ to the latest measured values.", "history": "Added in API level 19", "FullName": "public int getMeasurementPeakRms (Visualizer.MeasurementPeakRms measurement)"}, "getMaxCaptureRate()": {"Returns": [["int", "the maximum capture rate expressed in milliHertz"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum capture rate for the callback capture method. This is the maximum value for the rate parameter of the @B_android#media#audiofx#Visualizer#setDataCaptureListener_E@ method.", "history": "Added in API level 9", "FullName": "public static int getMaxCaptureRate ()"}, "getFft(byte[])": {"Returns": [["int", "@B_android#media#audiofx#Visualizer#SUCCESS_E@ in case of success, @B_android#media#audiofx#Visualizer#ERROR_NO_MEMORY_E@, @B_android#media#audiofx#Visualizer#ERROR_INVALID_OPERATION_E@ or @B_android#media#audiofx#Visualizer#ERROR_DEAD_OBJECT_E@ in case of failure."]], "Parameters": [["byte[]", "byte: array of bytes where the FFT should be returned"]], "Throws": [["", "java.lang.IllegalStateException"], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a frequency capture of currently playing audio content. This method must be called when the Visualizer is enabled. The capture is an 8-bit magnitude FFT, the frequency range covered being 0 (DC) to half of the sampling rate returned by @B_android#media#audiofx#Visualizer#getSamplingRate_E@. The capture returns the real and imaginary parts of a number of frequency points equal to half of the capture size plus one. Note: only the real part is returned for the first point (DC) and the last point (sampling frequency / 2). The layout in the returned byte array is as follows: n is the capture size returned by getCaptureSize() Rfk, Ifk are respectively the real and imaginary parts of the kth frequency component If Fs is the sampling frequency retuned by getSamplingRate() the kth frequency is: k * Fs / n In order to obtain magnitude and phase values the following code can be used:", "history": "Added in API level 9", "FullName": "public int getFft (byte[] fft)"}, "getScalingMode()": {"Returns": [["int", "the scaling mode, see @B_android#media#audiofx#Visualizer#SCALING_MODE_NORMALIZED_E@ and @B_android#media#audiofx#Visualizer#SCALING_MODE_AS_PLAYED_E@."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the current scaling mode on the captured visualization data.", "history": "Added in API level 16", "FullName": "public int getScalingMode ()"}, "getCaptureSize()": {"Returns": [["int", "the capture size in bytes."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns current capture size.", "history": "Added in API level 9", "FullName": "public int getCaptureSize ()"}, "getCaptureSizeRange()": {"Returns": [["int[]", "the mininum capture size is returned in first array element and the maximum in second array element."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the capture size range.", "history": "Added in API level 9", "FullName": "public static int[] getCaptureSizeRange ()"}, "getSamplingRate()": {"Returns": [["int", "the sampling rate in milliHertz."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the sampling rate of the captured audio.", "history": "Added in API level 9", "FullName": "public int getSamplingRate ()"}, "setEnabled(boolean)": {"Returns": [["int", "@B_android#media#audiofx#Visualizer#SUCCESS_E@ in case of success, @B_android#media#audiofx#Visualizer#ERROR_INVALID_OPERATION_E@ or @B_android#media#audiofx#Visualizer#ERROR_DEAD_OBJECT_E@ in case of failure."]], "Parameters": [["boolean", "boolean: requested enable state"]], "Throws": [["", "java.lang.IllegalStateException"], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Enable or disable the visualization engine.", "history": "Added in API level 9", "FullName": "public int setEnabled (boolean enabled)"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases the native Visualizer resources. It is a good practice to release the visualization engine when not in use.", "history": "Added in API level 9", "FullName": "public void release ()"}, "setCaptureSize(int)": {"Returns": [["int", "@B_android#media#audiofx#Visualizer#SUCCESS_E@ in case of success, @B_android#media#audiofx#Visualizer#ERROR_BAD_VALUE_E@ in case of failure."]], "Parameters": [["int", "int: requested capture size"]], "Throws": [["", "java.lang.IllegalStateException"], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the capture size, i.e. the number of bytes returned by @B_android#media#audiofx#Visualizer#getWaveForm_E@ and @B_android#media#audiofx#Visualizer#getFft_E@ methods. The capture size must be a power of 2 in the range returned by @B_android#media#audiofx#Visualizer#getCaptureSizeRange_E@. This method must not be called when the Visualizer is enabled.", "history": "Added in API level 9", "FullName": "public int setCaptureSize (int size)"}, "Visualizer(int)": {"Returns": [], "Parameters": [["int", "int: system wide unique audio session identifier. If audioSession is not 0, the visualizer will be attached to the MediaPlayer or AudioTrack in the same audio session. Otherwise, the Visualizer will apply to the output mix."]], "Throws": [["", "java.lang.UnsupportedOperationException"], ["", "java.lang.RuntimeException"], ["@B_java#lang#RuntimeException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Class constructor.", "history": "Added in API level 9", "FullName": "public Visualizer (int audioSession)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 9", "FullName": "protected void finalize ()"}, "setDataCaptureListener(android.media.audiofx.Visualizer.OnDataCaptureListener,int,boolean,boolean)": {"Returns": [["int", "@B_android#media#audiofx#Visualizer#SUCCESS_E@ in case of success, @B_android#media#audiofx#Visualizer#ERROR_NO_INIT_E@ or @B_android#media#audiofx#Visualizer#ERROR_BAD_VALUE_E@ in case of failure."]], "Parameters": [["@B_android#media#audiofx#Visualizer#OnDataCaptureListener_E@", "Visualizer.OnDataCaptureListener: OnDataCaptureListener registered"], ["int", "int: rate in milliHertz at which the capture should be updated"], ["boolean", "boolean: true if a waveform capture is requested: the onWaveFormDataCapture() method will be called on the OnDataCaptureListener interface."], ["boolean", "boolean: true if a frequency capture is requested: the onFftDataCapture() method will be called on the OnDataCaptureListener interface."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers an OnDataCaptureListener interface and specifies the rate at which the capture should be updated as well as the type of capture requested. Call this method with a null listener to stop receiving the capture updates.", "history": "Added in API level 9", "FullName": "public int setDataCaptureListener (Visualizer.OnDataCaptureListener listener, int rate, boolean waveform, boolean fft)"}, "getMeasurementMode()": {"Returns": [["int", "the mask of the measurements, @B_android#media#audiofx#Visualizer#MEASUREMENT_MODE_NONE_E@ (when no measurements are performed) or @B_android#media#audiofx#Visualizer#MEASUREMENT_MODE_PEAK_RMS_E@."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the current measurement modes performed by this audio effect", "history": "Added in API level 19", "FullName": "public int getMeasurementMode ()"}, "setScalingMode(int)": {"Returns": [["int", "@B_android#media#audiofx#Visualizer#SUCCESS_E@ in case of success, @B_android#media#audiofx#Visualizer#ERROR_BAD_VALUE_E@ in case of failure."]], "Parameters": [["int", "int: see @B_android#media#audiofx#Visualizer#SCALING_MODE_NORMALIZED_E@ and @B_android#media#audiofx#Visualizer#SCALING_MODE_AS_PLAYED_E@"]], "Throws": [["", "java.lang.IllegalStateException"], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set the type of scaling applied on the captured visualization data.", "history": "Added in API level 16", "FullName": "public int setScalingMode (int mode)"}, "setMeasurementMode(int)": {"Returns": [["int", "@B_android#media#audiofx#Visualizer#SUCCESS_E@ in case of success, @B_android#media#audiofx#Visualizer#ERROR_BAD_VALUE_E@ in case of failure."]], "Parameters": [["int", "int: a mask of the measurements to perform. The valid values are @B_android#media#audiofx#Visualizer#MEASUREMENT_MODE_NONE_E@ (to cancel any measurement) or @B_android#media#audiofx#Visualizer#MEASUREMENT_MODE_PEAK_RMS_E@."]], "Throws": [["", "java.lang.IllegalStateException"], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the combination of measurement modes to be performed by this audio effect.", "history": "Added in API level 19", "FullName": "public int setMeasurementMode (int mode)"}}, "Inheritance": [], "ClassName": "android.media.audiofx.Visualizer", "ClassDesc": "The Visualizer class enables application to retrieve part of the currently playing audio for visualization purpose. It is not an audio recording interface and only returns partial and low quality audio content. However, to protect privacy of certain audio data (e.g voice mail) the use of the visualizer requires the permission android.permission.RECORD_AUDIO. The audio session ID passed to the constructor indicates which audio content should be visualized: If the session is 0, the audio output mix is visualized If the session is not 0, the audio from a particular @B_android#media#MediaPlayer_E@ or @B_android#media#AudioTrack_E@ using this audio session is visualized Two types of representation of audio content can be captured: Waveform data: consecutive 8-bit (unsigned) mono samples by using the @B_android#media#audiofx#Visualizer#getWaveForm_E@ method Frequency data: 8-bit magnitude FFT by using the @B_android#media#audiofx#Visualizer#getFft_E@ method The length of the capture can be retrieved or specified by calling respectively @B_android#media#audiofx#Visualizer#getCaptureSize_E@ and @B_android#media#audiofx#Visualizer#setCaptureSize_E@ methods. The capture size must be a power of 2 in the range returned by @B_android#media#audiofx#Visualizer#getCaptureSizeRange_E@. In addition to the polling capture mode described above with @B_android#media#audiofx#Visualizer#getWaveForm_E@ and @B_android#media#audiofx#Visualizer#getFft_E@ methods, a callback mode is also available by installing a listener by use of the @B_android#media#audiofx#Visualizer#setDataCaptureListener_E@ method. The rate at which the listener capture method is called as well as the type of data returned is specified. Before capturing data, the Visualizer must be enabled by calling the @B_android#media#audiofx#Visualizer#setEnabled_E@ method. When data capture is not needed any more, the Visualizer should be disabled. It is good practice to call the @B_android#media#audiofx#Visualizer#release_E@ method when the Visualizer is not used anymore to free up native resources associated to the Visualizer instance. Creating a Visualizer on the output mix (audio session 0) requires permission @B_android#Manifest#permission#MODIFY_AUDIO_SETTINGS_E@ The Visualizer class can also be used to perform measurements on the audio being played back. The measurements to perform are defined by setting a mask of the requested measurement modes with @B_android#media#audiofx#Visualizer#setMeasurementMode_E@. Supported values are @B_android#media#audiofx#Visualizer#MEASUREMENT_MODE_NONE_E@ to cancel any measurement, and @B_android#media#audiofx#Visualizer#MEASUREMENT_MODE_PEAK_RMS_E@ for peak and RMS monitoring. Measurements can be retrieved through @B_android#media#audiofx#Visualizer#getMeasurementPeakRms_E@."}