{"Functions": {"stopServiceDiscovery(android.net.nsd.NsdManager.DiscoveryListener)": {"Returns": [], "Parameters": [["@B_android#net#nsd#NsdManager#DiscoveryListener_E@", "NsdManager.DiscoveryListener: This should be the listener object that was passed to @B_android#net#nsd#NsdManager#discoverServices_E@. It identifies the discovery that should be stopped and notifies of a successful or unsuccessful stop. In API versions 20 and above, the listener object may be used for another service discovery once the callback has been called. In API versions <= 19, there is no entirely reliable way to know when a listener may be re-used, and a new listener should be created for each service discovery request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stop service discovery initiated with @B_android#net#nsd#NsdManager#discoverServices_E@. An active service discovery is notified to the application with @B_android#net#nsd#NsdManager#DiscoveryListener#onDiscoveryStarted_E@ and it stays active until the application invokes a stop service discovery. A successful stop is notified to with a call to @B_android#net#nsd#NsdManager#DiscoveryListener#onDiscoveryStopped_E@. Upon failure to stop service discovery, application is notified through @B_android#net#nsd#NsdManager#DiscoveryListener#onStopDiscoveryFailed_E@.", "history": "Added in API level 16", "FullName": "public void stopServiceDiscovery (NsdManager.DiscoveryListener listener)"}, "resolveService(android.net.nsd.NsdServiceInfo,android.net.nsd.NsdManager.ResolveListener)": {"Returns": [], "Parameters": [["@B_android#net#nsd#NsdServiceInfo_E@", "NsdServiceInfo: service to be resolved"], ["@B_android#net#nsd#NsdManager#ResolveListener_E@", "NsdManager.ResolveListener: to receive callback upon success or failure. Cannot be null. Cannot be in use for an active service resolution."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resolve a discovered service. An application can resolve a service right before establishing a connection to fetch the IP and port details on which to setup the connection.", "history": "Added in API level 16", "FullName": "public void resolveService (NsdServiceInfo serviceInfo, NsdManager.ResolveListener listener)"}, "discoverServices(java.lang.String,int,android.net.nsd.NsdManager.DiscoveryListener)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The service type being discovered. Examples include \"_http._tcp\" for http services or \"_ipp._tcp\" for printers"], ["int", "int: The service discovery protocol"], ["@B_android#net#nsd#NsdManager#DiscoveryListener_E@", "NsdManager.DiscoveryListener: The listener notifies of a successful discovery and is used to stop discovery on this serviceType through a call on @B_android#net#nsd#NsdManager#stopServiceDiscovery_E@. Cannot be null. Cannot be in use for an active service discovery."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initiate service discovery to browse for instances of a service type. Service discovery consumes network bandwidth and will continue until the application calls @B_android#net#nsd#NsdManager#stopServiceDiscovery_E@. The function call immediately returns after sending a request to start service discovery to the framework. The application is notified of a success to initiate discovery through the callback @B_android#net#nsd#NsdManager#DiscoveryListener#onDiscoveryStarted_E@ or a failure through @B_android#net#nsd#NsdManager#DiscoveryListener#onStartDiscoveryFailed_E@. Upon successful start, application is notified when a service is found with @B_android#net#nsd#NsdManager#DiscoveryListener#onServiceFound_E@ or when a service is lost with @B_android#net#nsd#NsdManager#DiscoveryListener#onServiceLost_E@. Upon failure to start, service discovery is not active and application does not need to invoke @B_android#net#nsd#NsdManager#stopServiceDiscovery_E@ The application should call @B_android#net#nsd#NsdManager#stopServiceDiscovery_E@ when discovery of this service type is no longer required, and/or whenever the application is paused or stopped.", "history": "Added in API level 16", "FullName": "public void discoverServices (String serviceType, int protocolType, NsdManager.DiscoveryListener listener)"}, "registerService(android.net.nsd.NsdServiceInfo,int,android.net.nsd.NsdManager.RegistrationListener)": {"Returns": [], "Parameters": [["@B_android#net#nsd#NsdServiceInfo_E@", "NsdServiceInfo: The service being registered"], ["int", "int: The service discovery protocol"], ["@B_android#net#nsd#NsdManager#RegistrationListener_E@", "NsdManager.RegistrationListener: The listener notifies of a successful registration and is used to unregister this service through a call on @B_android#net#nsd#NsdManager#unregisterService_E@. Cannot be null. Cannot be in use for an active service registration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a service to be discovered by other services. The function call immediately returns after sending a request to register service to the framework. The application is notified of a successful registration through the callback @B_android#net#nsd#NsdManager#RegistrationListener#onServiceRegistered_E@ or a failure through @B_android#net#nsd#NsdManager#RegistrationListener#onRegistrationFailed_E@. The application should call @B_android#net#nsd#NsdManager#unregisterService_E@ when the service registration is no longer required, and/or whenever the application is stopped.", "history": "Added in API level 16", "FullName": "public void registerService (NsdServiceInfo serviceInfo, int protocolType, NsdManager.RegistrationListener listener)"}, "unregisterService(android.net.nsd.NsdManager.RegistrationListener)": {"Returns": [], "Parameters": [["@B_android#net#nsd#NsdManager#RegistrationListener_E@", "NsdManager.RegistrationListener: This should be the listener object that was passed to @B_android#net#nsd#NsdManager#registerService_E@. It identifies the service that should be unregistered and notifies of a successful or unsuccessful unregistration via the listener callbacks. In API versions 20 and above, the listener object may be used for another service registration once the callback has been called. In API versions <= 19, there is no entirely reliable way to know when a listener may be re-used, and a new listener should be created for each service registration request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregister a service registered through @B_android#net#nsd#NsdManager#registerService_E@. A successful unregister is notified to the application with a call to @B_android#net#nsd#NsdManager#RegistrationListener#onServiceUnregistered_E@.", "history": "Added in API level 16", "FullName": "public void unregisterService (NsdManager.RegistrationListener listener)"}}, "Inheritance": [], "ClassName": "android.net.nsd.NsdManager", "ClassDesc": "The Network Service Discovery Manager class provides the API to discover services on a network. As an example, if device A and device B are connected over a Wi-Fi network, a game registered on device A can be discovered by a game on device B. Another example use case is an application discovering printers on the network. The API currently supports DNS based service discovery and discovery is currently limited to a local network over Multicast DNS. DNS service discovery is described at http://files.dns-sd.org/draft-cheshire-dnsext-dns-sd.txt The API is asynchronous, and responses to requests from an application are on listener callbacks on a separate internal thread. There are three main operations the API supports - registration, discovery and resolution."}