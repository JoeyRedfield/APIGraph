{"Functions": {"poll()": {"Returns": [["E", "the head of this queue, or null if this queue has no elements with an expired delay"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, or returns null if this queue has no elements with an expired delay.", "history": "Added in API level 1", "FullName": "public E poll ()"}, "take()": {"Returns": [["E", "the head of this queue"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue.", "history": "Added in API level 1", "FullName": "public E take ()"}, "offer(E)": {"Returns": [["boolean", "true"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this delay queue.", "history": "Added in API level 1", "FullName": "public boolean offer (E e)"}, "remainingCapacity()": {"Returns": [["int", "Integer.MAX_VALUE"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Always returns Integer.MAX_VALUE because a DelayQueue is not capacity constrained.", "history": "Added in API level 1", "FullName": "public int remainingCapacity ()"}, "DelayQueue(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of elements to initially contain"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a DelayQueue initially containing the elements of the given collection of @B_java#util#concurrent#Delayed_E@ instances.", "history": "Added in API level 1", "FullName": "public DelayQueue (Collection<? extends E> c)"}, "drainTo(java.util.Collection<? super E>, int)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"], ["int", "int: the maximum number of elements to transfer"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "added in API level 1", "FullName": "public int drainTo (Collection<? super E> c, int maxElements)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically removes all of the elements from this delay queue. The queue will be empty after this call returns. Elements with an unexpired delay are not waited for; they are simply discarded from the queue.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "offer(E,long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true"]], "Parameters": [["E", "E: the element to add"], ["long", "long: This parameter is ignored as the method never blocks"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: This parameter is ignored as the method never blocks"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this delay queue. As the queue is unbounded this method will never block.", "history": "Added in API level 1", "FullName": "public boolean offer (E e, long timeout, TimeUnit unit)"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this delay queue.", "history": "Added in API level 1", "FullName": "public boolean add (E e)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over all the elements (both expired and unexpired) in this queue. The iterator does not return the elements in any particular order. The returned iterator is", "history": "Added in API level 1", "FullName": "public Iterator<E> iterator ()"}, "poll(long,java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this queue, or null if the specified waiting time elapses before an element with an expired delay becomes available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue, or the specified wait time expires.", "history": "Added in API level 1", "FullName": "public E poll (long timeout, TimeUnit unit)"}, "drainTo(java.util.Collection<?superE>,int)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"], ["int", "int: the maximum number of elements to transfer"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "Added in API level 1", "FullName": "public int drainTo (Collection<? super E> c, int maxElements)"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all of the elements in this queue"]], "Parameters": [["T[]", "T: the array into which the elements of the queue are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose"]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array. The returned array elements are in no particular order. If the queue fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this queue. If this queue fits in the specified array with room to spare (i.e., the array has more elements than this queue), the element in the array immediately following the end of the queue is set to null. Like the @B_java#util#concurrent#DelayQueue#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. The following code can be used to dump a delay queue into a newly allocated array of Delayed: toArray(new Object[0]) is identical in function to toArray().", "history": "Added in API level 1", "FullName": "public T[] toArray (T[] a)"}, "size()": {"Returns": [["int", "the number of elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this collection. If this collection contains more than", "history": "Added in API level 1", "FullName": "public int size ()"}, "drainTo(java.util.Collection<? super E>)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "added in API level 1", "FullName": "public int drainTo (Collection<? super E> c)"}, "peek()": {"Returns": [["E", "the head of this queue, or null if this queue is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty. Unlike poll, if no expired elements are available in the queue, this method returns the element that will expire next, if one exists.", "history": "Added in API level 1", "FullName": "public E peek ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if an element was removed as a result of this call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this collection, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a single instance of the specified element from this queue, if it is present, whether or not it has expired.", "history": "Added in API level 1", "FullName": "public boolean remove (Object o)"}, "DelayQueue()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new DelayQueue that is initially empty.", "history": "Added in API level 1", "FullName": "public DelayQueue ()"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this queue. The returned array elements are in no particular order. The returned array will be \"safe\" in that no references to it are maintained by this queue. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 1", "FullName": "public Object[] toArray ()"}, "put(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this delay queue. As the queue is unbounded this method will never block.", "history": "Added in API level 1", "FullName": "public void put (E e)"}, "drainTo(java.util.Collection<?superE>)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "Added in API level 1", "FullName": "public int drainTo (Collection<? super E> c)"}, "DelayQueue(java.util.Collection<? extends E>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of elements to initially contain"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a DelayQueue initially containing the elements of the given collection of @B_java#util#concurrent#Delayed_E@ instances.", "history": "added in API level 1", "FullName": "public DelayQueue (Collection<? extends E> c)"}, "offer(E, long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true"]], "Parameters": [["E", "E: the element to add"], ["long", "long: This parameter is ignored as the method never blocks"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: This parameter is ignored as the method never blocks"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this delay queue. As the queue is unbounded this method will never block.", "history": "added in API level 1", "FullName": "public boolean offer (E e, long timeout, TimeUnit unit)"}, "poll(long, java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this queue, or null if the specified waiting time elapses before an element with an expired delay becomes available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue, or the specified wait time expires.", "history": "added in API level 1", "FullName": "public E poll (long timeout, TimeUnit unit)"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractQueue_E@"], "ClassName": "@B_java#util#concurrent#Delayed_E@", "ClassDesc": "An unbounded Delayed elements, in which an element can only be taken when its delay has expired. The head of the queue is that Delayed element whose delay expired furthest in the past. If no delay has expired there is no head and poll will return null. Expiration occurs when an element's getDelay(TimeUnit.NANOSECONDS) method returns a value less than or equal to zero. Even though unexpired elements cannot be removed using take or poll, they are otherwise treated as normal elements. For example, the size method returns the count of both expired and unexpired elements. This queue does not permit null elements. This class and its iterator implement all of the optional methods of the @B_java#util#Collection_E@ and @B_java#util#Iterator_E@ interfaces. The Iterator provided in method @B_java#util#concurrent#DelayQueue#iterator_E@ is not guaranteed to traverse the elements of the DelayQueue in any particular order."}