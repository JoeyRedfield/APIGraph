{"Functions": {"getName(java.util.Locale,int,java.lang.String,boolean[])": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#util#Locale_E@", "Locale no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["boolean[]", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the display name for the given currency in the given locale. This is a convenience overload of getName(ULocale, int, String, boolean[]);", "history": "Added in API level 24", "FullName": "public String getName (Locale locale, int nameStyle, String pluralCount, boolean[] isChoiceFormat)"}, "getName(java.util.Locale,int,boolean[])": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#util#Locale_E@", "Locale no parameter comment"], ["int", "int no parameter comment"], ["boolean[]", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the display name for the given currency in the given locale. This is a convenient method for getName(ULocale, int, boolean[]);", "history": "Added in API level 24", "FullName": "public String getName (Locale locale, int nameStyle, boolean[] isChoiceFormat)"}, "toJavaCurrency()": {"Returns": [["@B_java#util#Currency_E@", "An equivalent Java currency object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a java.util.Currency object based on the currency represented by this Currency.", "history": "Added in API level 29", "FullName": "public Currency toJavaCurrency ()"}, "getName(android.icu.util.ULocale,int,java.lang.String,boolean[])": {"Returns": [["@B_java#lang#String_E@", "display string for this currency. If the resource data contains no entry for this currency, then the ISO 4217 code is returned. If isChoiceFormat[0] is true, then the result is a ChoiceFormat pattern. Otherwise it is a static string. Note: as of ICU 4.4, choice formats are not used, and the value returned in isChoiceFormat is always false."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: locale in which to display currency"], ["int", "int: selector for which kind of name to return"], ["@B_java#lang#String_E@", "String: plural count string for this locale"], ["boolean[]", "boolean: fill-in; isChoiceFormat[0] is set to true if the returned value is a ChoiceFormat pattern; otherwise it is set to false"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the nameStyle is not SYMBOL_NAME, LONG_NAME, or PLURAL_LONG_NAME."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the display name for the given currency in the given locale. For example, the SYMBOL_NAME for the USD currency object in the en_US locale is \"$\". The PLURAL_LONG_NAME for the USD currency object when the currency amount is plural is \"US dollars\", such as in \"3.00 US dollars\"; while the PLURAL_LONG_NAME for the USD currency object when the currency amount is singular is \"US dollar\", such as in \"1.00 US dollar\".", "history": "Added in API level 24", "FullName": "public String getName (ULocale locale, int nameStyle, String pluralCount, boolean[] isChoiceFormat)"}, "getRoundingIncrement()": {"Returns": [["double", "the non-negative rounding increment, or 0.0 if none"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the rounding increment for this currency, or 0.0 if no rounding is done by this currency. This is equivalent to getRoundingIncrement(CurrencyUsage.STANDARD);", "history": "Added in API level 24", "FullName": "public double getRoundingIncrement ()"}, "getSymbol(android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the ULocale for the symbol"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Currency#getName_E@"], "Permissions": [], "Description": "Convenience and compatibility override of getName that requests the symbol name.", "history": "Added in API level 24", "FullName": "public String getSymbol (ULocale uloc)"}, "getName(android.icu.util.ULocale,int,boolean[])": {"Returns": [["@B_java#lang#String_E@", "display string for this currency. If the resource data contains no entry for this currency, then the ISO 4217 code is returned. If isChoiceFormat[0] is true, then the result is a ChoiceFormat pattern. Otherwise it is a static string. Note: as of ICU 4.4, choice formats are not used, and the value returned in isChoiceFormat is always false."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: locale in which to display currency"], ["int", "int: selector for which kind of name to return. The nameStyle should be SYMBOL_NAME, NARROW_SYMBOL_NAME, or LONG_NAME. Otherwise, throw IllegalArgumentException."], ["boolean[]", "boolean: fill-in; isChoiceFormat[0] is set to true if the returned value is a ChoiceFormat pattern; otherwise it is set to false"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the nameStyle is not SYMBOL_NAME or LONG_NAME."]], "SeeAlso": ["@B_android#icu#util#Currency#getName_E@"], "Permissions": [], "Description": "Returns the display name for the given currency in the given locale. For example, the display name for the USD currency object in the en_US locale is \"$\".", "history": "Added in API level 24", "FullName": "public String getName (ULocale locale, int nameStyle, boolean[] isChoiceFormat)"}, "getSymbol(java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the Locale for the symbol"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Currency#getName_E@"], "Permissions": [], "Description": "Convenience and compatibility override of getName that requests the symbol name.", "history": "Added in API level 24", "FullName": "public String getSymbol (Locale loc)"}, "getInstance(java.lang.String)": {"Returns": [["@B_android#icu#util#Currency_E@", "the currency for this iso code"]], "Parameters": [["@B_java#lang#String_E@", "String: the iso code"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if theISOCode is null."], ["@B_java#lang#IllegalArgumentException_E@", "if theISOCode is not a 3-letter alpha code."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a currency object given an ISO 4217 3-letter code.", "history": "Added in API level 24", "FullName": "public static Currency getInstance (String theISOCode)"}, "getAvailableCurrencyCodes(android.icu.util.ULocale,java.util.Date)": {"Returns": [["@B_java#lang#String_E@", "The array of ISO currency codes."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale for which to retrieve currency codes."], ["@B_java#util#Date_E@", "Date: the date for which to retrieve currency codes for the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Strings which contain the currency identifiers that are valid for the given locale on the given date. If there are no such identifiers, returns null. Returned identifiers are in preference order.", "history": "Added in API level 24", "FullName": "public static String[] getAvailableCurrencyCodes (ULocale loc, Date d)"}, "fromJavaCurrency(java.util.Currency)": {"Returns": [["@B_android#icu#util#Currency_E@", "An equivalent ICU currency object."]], "Parameters": [["@B_java#util#Currency_E@", "Currency: The Java currency object to convert."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Currency object based on the currency represented by the given java.util.Currency.", "history": "Added in API level 29", "FullName": "public static Currency fromJavaCurrency (Currency currency)"}, "getDisplayName()": {"Returns": [["@B_java#lang#String_E@", "The display name of this currency"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#Currency#getDisplayName_E@", "@B_android#icu#util#Currency#getName_E@"], "Permissions": [], "Description": "Returns the display name for this currency in the default locale. If the resource data for the default locale contains no entry for this currency, then the ISO 4217 code is returned. Note: This method is a convenience equivalent for @B_java#util#Currency#getDisplayName_E@ and is equivalent to getName(Locale.getDefault(), LONG_NAME, null).", "history": "Added in API level 24", "FullName": "public String getDisplayName ()"}, "getName(java.util.Locale, int, boolean[])": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#util#Locale_E@", "Locale no parameter comment"], ["int", "int no parameter comment"], ["boolean[]", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the display name for the given currency in the given locale. This is a convenient method for getName(ULocale, int, boolean[]);", "history": "added in API level 24", "FullName": "public String getName (Locale locale, int nameStyle, boolean[] isChoiceFormat)"}, "getCurrencyCode()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ISO 4217 3-letter code for this currency object.", "history": "Added in API level 24", "FullName": "public String getCurrencyCode ()"}, "getSymbol()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#Currency#getName_E@", "@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Convenience and compatibility override of getName that requests the symbol name for the default DISPLAY locale.", "history": "Added in API level 24", "FullName": "public String getSymbol ()"}, "getInstance(android.icu.util.ULocale)": {"Returns": [["@B_android#icu#util#Currency_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a currency object for the default currency in the given locale.", "history": "Added in API level 24", "FullName": "public static Currency getInstance (ULocale locale)"}, "getName(android.icu.util.ULocale, int, boolean[])": {"Returns": [["@B_java#lang#String_E@", "display string for this currency. If the resource data contains no entry for this currency, then the ISO 4217 code is returned. If isChoiceFormat[0] is true, then the result is a ChoiceFormat pattern. Otherwise it is a static string. Note: as of ICU 4.4, choice formats are not used, and the value returned in isChoiceFormat is always false."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: locale in which to display currency"], ["int", "int: selector for which kind of name to return. The nameStyle should be either SYMBOL_NAME or LONG_NAME. Otherwise, throw IllegalArgumentException."], ["boolean[]", "boolean: fill-in; isChoiceFormat[0] is set to true if the returned value is a ChoiceFormat pattern; otherwise it is set to false"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the nameStyle is not SYMBOL_NAME or LONG_NAME."]], "SeeAlso": ["@B_android#icu#util#Currency#getName_E@"], "Permissions": [], "Description": "Returns the display name for the given currency in the given locale. For example, the display name for the USD currency object in the en_US locale is \"$\".", "history": "added in API level 24", "FullName": "public String getName (ULocale locale, int nameStyle, boolean[] isChoiceFormat)"}, "getNumericCode()": {"Returns": [["int", "The ISO 4217 numeric code of this currency."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ISO 4217 numeric code for this currency object. Note: If the ISO 4217 numeric code is not assigned for the currency or the currency is unknown, this method returns 0.", "history": "Added in API level 24", "FullName": "public int getNumericCode ()"}, "getDefaultFractionDigits(android.icu.util.Currency.CurrencyUsage)": {"Returns": [["int", "a non-negative number of fraction digits to be displayed"]], "Parameters": [["@B_android#icu#util#Currency#CurrencyUsage_E@", "Currency.CurrencyUsage: the usage of currency(Standard or Cash)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of the number of fraction digits that should be displayed for this currency with Usage.", "history": "Added in API level 24", "FullName": "public int getDefaultFractionDigits (Currency.CurrencyUsage Usage)"}, "getDisplayName(java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "The display name of this currency for the specified locale"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: locale in which to display currency"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Currency#getDisplayName_E@", "@B_android#icu#util#Currency#getName_E@"], "Permissions": [], "Description": "Returns the display name for this currency in the given locale. If the resource data for the given locale contains no entry for this currency, then the ISO 4217 code is returned. Note: This method is a convenience equivalent for @B_java#util#Currency#getDisplayName_E@ and is equivalent to getName(locale, LONG_NAME, null).", "history": "Added in API level 24", "FullName": "public String getDisplayName (Locale locale)"}, "getAvailableULocales()": {"Returns": [["@B_android#icu#util#ULocale_E@", "an array of the available ulocales"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an array of the ulocales for which a currency is defined.", "history": "Added in API level 24", "FullName": "public static ULocale[] getAvailableULocales ()"}, "getAvailableCurrencies()": {"Returns": [["@B_java#util#Set_E@", "The set of available currencies. The returned set could be empty if there is no currency data available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of available currencies. The returned set of currencies contains all of the available currencies, including obsolete ones. The result set can be modified without affecting the available currencies in the runtime.", "history": "Added in API level 24", "FullName": "public static Set<Currency> getAvailableCurrencies ()"}, "getDefaultFractionDigits()": {"Returns": [["int", "a non-negative number of fraction digits to be displayed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of the number of fraction digits that should be displayed for this currency. This is equivalent to getDefaultFractionDigits(CurrencyUsage.STANDARD);", "history": "Added in API level 24", "FullName": "public int getDefaultFractionDigits ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ISO 4217 code for this currency.", "history": "Added in API level 24", "FullName": "public String toString ()"}, "getRoundingIncrement(android.icu.util.Currency.CurrencyUsage)": {"Returns": [["double", "the non-negative rounding increment, or 0.0 if none"]], "Parameters": [["@B_android#icu#util#Currency#CurrencyUsage_E@", "Currency.CurrencyUsage: the usage of currency(Standard or Cash)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the rounding increment for this currency, or 0.0 if no rounding is done by this currency with the Usage.", "history": "Added in API level 24", "FullName": "public double getRoundingIncrement (Currency.CurrencyUsage Usage)"}, "getKeywordValuesForLocale(java.lang.String,android.icu.util.ULocale,boolean)": {"Returns": [["@B_java#lang#String_E@", "an array of values for the given key and the locale. If there is no data, the array will be empty."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose values to look up. the only recognized key is \"currency\""], ["@B_android#icu#util#ULocale_E@", "ULocale: the locale"], ["boolean", "boolean: if true, return only values that are currently used in the locale. Otherwise returns all values."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given a key and a locale, returns an array of values for the key for which data exists. If commonlyUsed is true, these are the values that typically are used with this locale, otherwise these are all values for which data exists. This is a common service API. The only supported key is \"currency\", other values return an empty array. Currency information is based on the region of the locale. If the locale does not indicate a region, @B_android#icu#util#ULocale#addLikelySubtags_E@ is used to infer a region, except for the 'und' locale. If commonlyUsed is true, only the currencies known to be in use as of the current date are returned. When there are more than one, these are returned in preference order (typically, this occurs when a country is transitioning to a new currency, and the newer currency is preferred), see", "history": "Added in API level 24", "FullName": "public static final String[] getKeywordValuesForLocale (String key, ULocale locale, boolean commonlyUsed)"}, "Currency(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The iso code used to construct the currency."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a currency object for the given ISO 4217 3-letter code. This constructor assumes that the code is valid.", "history": "Added in API level 24", "FullName": "protected Currency (String theISOCode)"}, "isAvailable(java.lang.String,java.util.Date,java.util.Date)": {"Returns": [["boolean", "true if the given ISO 4217 3-letter code is supported on the specified date range."]], "Parameters": [["@B_java#lang#String_E@", "String: The ISO 4217 3-letter code."], ["@B_java#util#Date_E@", "Date: The lower bound of the date range, inclusive. When from is null, check the availability of the currency any date before to"], ["@B_java#util#Date_E@", "Date: The upper bound of the date range, inclusive. When to is null, check the availability of the currency any date after from"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "when to is before from."]], "SeeAlso": [], "Permissions": [], "Description": "Queries if the given ISO 4217 3-letter code is available on the specified date range. Note: For checking availability of a currency on a specific date, specify the date on both from and to. When both from and to are null, this method checks if the specified currency is available all time.", "history": "Added in API level 24", "FullName": "public static boolean isAvailable (String code, Date from, Date to)"}, "getAvailableCurrencyCodes(java.util.Locale,java.util.Date)": {"Returns": [["@B_java#lang#String_E@", "The array of ISO currency codes."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the @B_java#util#Locale_E@ for which to retrieve currency codes."], ["@B_java#util#Date_E@", "Date: the date for which to retrieve currency codes for the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Strings which contain the currency identifiers that are valid for the given @B_java#util#Locale_E@ on the given date. If there are no such identifiers, returns null. Returned identifiers are in preference order.", "history": "Added in API level 24", "FullName": "public static String[] getAvailableCurrencyCodes (Locale loc, Date d)"}, "getInstance(java.util.Locale)": {"Returns": [["@B_android#icu#util#Currency_E@", "the currency object for this locale"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a currency object for the default currency in the given locale.", "history": "Added in API level 24", "FullName": "public static Currency getInstance (Locale locale)"}, "getAvailableLocales()": {"Returns": [["@B_java#util#Locale_E@", "an array of the available locales"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an array of the locales for which a currency is defined.", "history": "Added in API level 24", "FullName": "public static Locale[] getAvailableLocales ()"}}, "Inheritance": ["@B_android#icu#util#MeasureUnit_E@"], "ClassName": "android.icu.util.Currency", "ClassDesc": "A class encapsulating a currency, as defined by ISO 4217. A A display symbol, for a specific locale The number of fraction digits to display A rounding increment The Note: This class deliberately resembles"}