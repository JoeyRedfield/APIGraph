{"Functions": {"containsKey(java.lang.Object)": {"Returns": [["boolean", "Returns true if the key exists, else false."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The key to search for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether a key exists in the array.", "history": "Added in API level 19", "FullName": "public boolean containsKey (Object key)"}, "ArrayMap(android.util.ArrayMap<K,V>)": {"Returns": [], "Parameters": [["@B_android#util#ArrayMap_E@", "ArrayMap no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new ArrayMap with the mappings from the given ArrayMap.", "history": "Added in API level 19", "FullName": "public ArrayMap (ArrayMap<K, V> map)"}, "putAll(java.util.Map<? extends K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: The map whose contents are to be retrieved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform a @B_android#util#ArrayMap#put_E@ of all key/value pairs in", "history": "added in API level 19", "FullName": "public void putAll (Map<? extends K, ? extends V> map)"}, "keyAt(int)": {"Returns": [["K", "Returns the key stored at the given index."]], "Parameters": [["int", "int: The desired index, must be between 0 and @B_android#util#ArrayMap#size_E@-1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the key at the given index in the array. For indices outside of the range 0...size()-1, the behavior is undefined for apps targeting @B_android#os#Build#VERSION_CODES#P_E@ and earlier, and an @B_java#lang#ArrayIndexOutOfBoundsException_E@ is thrown for apps targeting @B_android#os#Build#VERSION_CODES#Q_E@ and later.", "history": "Added in API level 19", "FullName": "public K keyAt (int index)"}, "removeAll(java.util.Collection<?>)": {"Returns": [["boolean", "Returns true if any keys were removed from the array map, else false."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: The collection whose contents are to be used to remove keys."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all keys in the array map that exist in the given collection.", "history": "Added in API level 19", "FullName": "public boolean removeAll (Collection<?> collection)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make the array map empty. All storage is released.", "history": "Added in API level 19", "FullName": "public void clear ()"}, "removeAt(int)": {"Returns": [["V", "Returns the value that was stored at this index."]], "Parameters": [["int", "int: The desired index, must be between 0 and @B_android#util#ArrayMap#size_E@-1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove the key/value mapping at the given index. For indices outside of the range 0...size()-1, the behavior is undefined for apps targeting @B_android#os#Build#VERSION_CODES#P_E@ and earlier, and an @B_java#lang#ArrayIndexOutOfBoundsException_E@ is thrown for apps targeting @B_android#os#Build#VERSION_CODES#Q_E@ and later.", "history": "Added in API level 19", "FullName": "public V removeAt (int index)"}, "valueAt(int)": {"Returns": [["V", "Returns the value stored at the given index."]], "Parameters": [["int", "int: The desired index, must be between 0 and @B_android#util#ArrayMap#size_E@-1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the value at the given index in the array. For indices outside of the range 0...size()-1, the behavior is undefined for apps targeting @B_android#os#Build#VERSION_CODES#P_E@ and earlier, and an @B_java#lang#ArrayIndexOutOfBoundsException_E@ is thrown for apps targeting @B_android#os#Build#VERSION_CODES#Q_E@ and later.", "history": "Added in API level 19", "FullName": "public V valueAt (int index)"}, "indexOfValue(java.lang.Object)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an index for which @B_android#util#ArrayMap#valueAt_E@ would return the specified value, or a negative number if no keys map to the specified value. Beware that this is a linear search, unlike lookups by key, and that multiple keys can map to the same value and this will find only one of them.", "history": "Added in API level 29", "FullName": "public int indexOfValue (Object value)"}, "ArrayMap(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new ArrayMap with a given initial capacity.", "history": "Added in API level 19", "FullName": "public ArrayMap (int capacity)"}, "ensureCapacity(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ensure the array map can hold at least", "history": "Added in API level 19", "FullName": "public void ensureCapacity (int minimumCapacity)"}, "setValueAt(int, V)": {"Returns": [["V", "Returns the previous value at the given index."]], "Parameters": [["int", "int: The desired index, must be between 0 and @B_android#util#ArrayMap#size_E@-1."], ["V", "V: The new value to store at this index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the value at a given index in the array.", "history": "added in API level 19", "FullName": "public V setValueAt (int index, V value)"}, "keySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the keys contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_java#util#Set_E@ for iterating over and interacting with all keys in the array map.", "history": "Added in API level 19", "FullName": "public Set<K> keySet ()"}, "containsAll(java.util.Collection<?>)": {"Returns": [["boolean", "Returns true if this array map contains a key for every entry in collection, else returns false."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: The collection whose contents are to be checked against."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine if the array map contains all of the keys in the given collection.", "history": "Added in API level 19", "FullName": "public boolean containsAll (Collection<?> collection)"}, "retainAll(java.util.Collection<?>)": {"Returns": [["boolean", "Returns true if any keys were removed from the array map, else false."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: The collection whose contents are to be used to determine which keys to keep."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all keys in the array map that do", "history": "Added in API level 19", "FullName": "public boolean retainAll (Collection<?> collection)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 19", "FullName": "public int hashCode ()"}, "get(java.lang.Object)": {"Returns": [["V", "Returns the value associated with the given key, or null if there is no such key."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The key of the value to retrieve."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a value from the array.", "history": "Added in API level 19", "FullName": "public V get (Object key)"}, "size()": {"Returns": [["int", "the number of key-value mappings in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of items in this array map.", "history": "Added in API level 19", "FullName": "public int size ()"}, "putAll(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: The map whose contents are to be retrieved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform a @B_android#util#ArrayMap#put_E@ of all key/value pairs in", "history": "Added in API level 19", "FullName": "public void putAll (Map<? extends K, ? extends V> map)"}, "values()": {"Returns": [["@B_java#util#Collection_E@", "a collection view of the values contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_java#util#Collection_E@ for iterating over and interacting with all values in the array map.", "history": "Added in API level 19", "FullName": "public Collection<V> values ()"}, "isEmpty()": {"Returns": [["boolean", "true if this map contains no key-value mappings"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the array map contains no items.", "history": "Added in API level 19", "FullName": "public boolean isEmpty ()"}, "put(K, V)": {"Returns": [["V", "Returns the old value that was stored for the given key, or null if there was no such key."]], "Parameters": [["K", "K: The key under which to store the value. If this key already exists in the array, its value will be replaced."], ["V", "V: The value to store for the given key."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new value to the array map.", "history": "added in API level 19", "FullName": "public V put (K key, V value)"}, "ArrayMap()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new empty ArrayMap. The default capacity of an array map is 0, and will grow once items are added to it.", "history": "Added in API level 19", "FullName": "public ArrayMap ()"}, "remove(java.lang.Object)": {"Returns": [["V", "Returns the value that was stored under the key, or null if there was no such key."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The key of the mapping to remove."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove an existing key from the array map.", "history": "Added in API level 19", "FullName": "public V remove (Object key)"}, "containsValue(java.lang.Object)": {"Returns": [["boolean", "Returns true if the value exists, else false."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The value to search for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether a value exists in the array. This requires a linear search through the entire array.", "history": "Added in API level 19", "FullName": "public boolean containsValue (Object value)"}, "ArrayMap(android.util.ArrayMap<K, V>)": {"Returns": [], "Parameters": [["@B_android#util#ArrayMap_E@", "ArrayMap no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new ArrayMap with the mappings from the given ArrayMap.", "history": "added in API level 23", "FullName": "public ArrayMap (ArrayMap<K, V> map)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of: This implementation composes a string by iterating over its mappings. If this map contains itself as a key or a value, the string \"(this Map)\" will appear in its place.", "history": "Added in API level 19", "FullName": "public String toString ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes. This implementation returns false if the object is not a map, or if the maps have different sizes. Otherwise, for each key in this map, values of both maps are compared. If the values for any key are not equal, the method returns false, otherwise it returns true.", "history": "Added in API level 19", "FullName": "public boolean equals (Object object)"}, "entrySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the mappings contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_java#util#Set_E@ for iterating over and interacting with all mappings in the array map. the semantics of this Set are subtly different than that of a @B_java#util#HashMap_E@: most important, the @B_java#util#Map#Entry_E@ object returned by its iterator is a single object that exists for the entire iterator, so you can @B_java#util#Iterator#next_E@.", "history": "Added in API level 19", "FullName": "public Set<Entry<K, V>> entrySet ()"}, "setValueAt(int,V)": {"Returns": [["V", "Returns the previous value at the given index."]], "Parameters": [["int", "int: The desired index, must be between 0 and @B_android#util#ArrayMap#size_E@-1."], ["V", "V: The new value to store at this index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the value at a given index in the array. For indices outside of the range 0...size()-1, the behavior is undefined for apps targeting @B_android#os#Build#VERSION_CODES#P_E@ and earlier, and an @B_java#lang#ArrayIndexOutOfBoundsException_E@ is thrown for apps targeting @B_android#os#Build#VERSION_CODES#Q_E@ and later.", "history": "Added in API level 19", "FullName": "public V setValueAt (int index, V value)"}, "ArrayMap(android.util.ArrayMap)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new ArrayMap with the mappings from the given ArrayMap.", "history": "Added in API level 19", "FullName": "public ArrayMap (ArrayMap map)"}, "putAll(android.util.ArrayMap<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_android#util#ArrayMap_E@", "ArrayMap: The array whose contents are to be retrieved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform a @B_android#util#ArrayMap#put_E@ of all key/value pairs in", "history": "Added in API level 19", "FullName": "public void putAll (ArrayMap<? extends K, ? extends V> array)"}, "put(K,V)": {"Returns": [["V", "Returns the old value that was stored for the given key, or null if there was no such key."]], "Parameters": [["K", "K: The key under which to store the value. If this key already exists in the array, its value will be replaced."], ["V", "V: The value to store for the given key."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new value to the array map.", "history": "Added in API level 19", "FullName": "public V put (K key, V value)"}, "indexOfKey(java.lang.Object)": {"Returns": [["int", "Returns the index of the key if it exists, else a negative integer."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The key to search for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of a key in the set.", "history": "Added in API level 21", "FullName": "public int indexOfKey (Object key)"}}, "Inheritance": [], "ClassName": "android.util.ArrayMap<K, V>", "ClassDesc": "ArrayMap is a generic key->value mapping data structure that is designed to be more memory efficient than a traditional @B_java#util#HashMap_E@. It keeps its mappings in an array data structure -- an integer array of hash codes for each item, and an Object array of the key/value pairs. This allows it to avoid having to create an extra object for every entry put in to the map, and it also tries to control the growth of the size of these arrays more aggressively (since growing them only requires copying the entries in the array, not rebuilding a hash map). Note that this implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. Because this container is intended to better balance memory use, unlike most other standard Java containers it will shrink its array as items are removed from it. Currently you have no control over this shrinking -- if you set a capacity and then remove an item, it may reduce the capacity to better match the current size. In the future an explicit call to set the capacity should turn off this aggressive shrinking behavior."}