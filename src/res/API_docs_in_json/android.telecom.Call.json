{"Functions": {"getCannedTextResponses()": {"Returns": [["@B_java#util#List_E@", "A list of canned text message responses."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telecom#Call#reject_E@"], "Permissions": [], "Description": "Obtains a list of canned, pre-configured message responses to present to the user as ways of rejecting this Call using via a text message.", "history": "Added in API level 23", "FullName": "public List<String> getCannedTextResponses ()"}, "respondToRttRequest(int,boolean)": {"Returns": [], "Parameters": [["int", "int: The request ID received via @B_android#telecom#Call#Callback#onRttRequest_E@"], ["boolean", "boolean: true if the RTT request should be accepted, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Responds to an RTT request received via the @B_android#telecom#Call#Callback#onRttRequest_E@ )} callback. The ID used here should be the same as the ID that was received via the callback.", "history": "Added in API level 26", "FullName": "public void respondToRttRequest (int id, boolean accept)"}, "getRemainingPostDialSequence()": {"Returns": [["@B_java#lang#String_E@", "The remaining post-dial sequence, or null if there is no post-dial sequence remaining or this Call is not in a post-dial state."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the post-dial sequence remaining to be emitted by this Call, if any.", "history": "Added in API level 23", "FullName": "public String getRemainingPostDialSequence ()"}, "sendCallEvent(java.lang.String, android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The connection event."], ["@B_android#os#Bundle_E@", "Bundle: Bundle containing extra information associated with the event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends a Call event from this Call to the associated @B_android#telecom#Connection_E@ in the @B_android#telecom#ConnectionService_E@. Call events are used to communicate point in time information from an @B_android#telecom#InCallService_E@ to a @B_android#telecom#ConnectionService_E@. A @B_android#telecom#ConnectionService_E@ implementation could define events which enable the @B_android#telecom#InCallService_E@, for example, toggle a unique feature of the @B_android#telecom#ConnectionService_E@. A @B_android#telecom#ConnectionService_E@ can communicate to the @B_android#telecom#InCallService_E@ using @B_android#telecom#Connection#sendConnectionEvent_E@. Events are exposed to @B_android#telecom#ConnectionService_E@ implementations via @B_android#telecom#Connection#onCallEvent_E@. No assumptions should be made as to how a @B_android#telecom#ConnectionService_E@ will handle these events. The @B_android#telecom#InCallService_E@ must assume that the @B_android#telecom#ConnectionService_E@ could chose to ignore some events altogether. Events should be fully qualified (e.g., com.example.event.MY_EVENT) to avoid conflicts between @B_android#telecom#InCallService_E@ implementations. Further, @B_android#telecom#InCallService_E@ implementations shall not re-purpose events in the android.* namespace, nor shall they define their own event types in this namespace. When defining a custom event type, ensure the contents of the extras @B_android#os#Bundle_E@ is clearly defined. Extra keys for this bundle should be named similar to the event type (e.g. com.example.extra.MY_EXTRA). When defining events and the associated extras, it is important to keep their behavior consistent when the associated @B_android#telecom#InCallService_E@ is updated. Support for deprecated events/extras should me maintained to ensure backwards compatibility with older @B_android#telecom#ConnectionService_E@ implementations which were built to support the older behavior.", "history": "added in API level 25", "FullName": "public void sendCallEvent (String event, Bundle extras)"}, "splitFromConference()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instructs this Call to split from any conference call with which it may be connected.", "history": "Added in API level 23", "FullName": "public void splitFromConference ()"}, "isRttActive()": {"Returns": [["boolean", "true if there is a connection, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this call has an active RTT connection.", "history": "Added in API level 26", "FullName": "public boolean isRttActive ()"}, "stopDtmfTone()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instructs this Call to stop any dual-tone multi-frequency signaling (DTMF) tone currently playing. DTMF tones are played by calling @B_android#telecom#Call#playDtmfTone_E@. If no DTMF tone is currently playing, this method will do nothing.", "history": "Added in API level 23", "FullName": "public void stopDtmfTone ()"}, "getChildren()": {"Returns": [["@B_java#util#List_E@", "The children of this Call if this Call is a conference, or an empty List otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the children of this conference Call, if any.", "history": "Added in API level 23", "FullName": "public List<Call> getChildren ()"}, "removeExtras(java.lang.String...)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The keys of the extras to remove."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes extras from this @B_android#telecom#Call_E@.", "history": "Added in API level 25", "FullName": "public void removeExtras (String... keys)"}, "disconnect()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instructs this Call to disconnect.", "history": "Added in API level 23", "FullName": "public void disconnect ()"}, "playDtmfTone(char)": {"Returns": [], "Parameters": [["char", "char: A character representing the DTMF digit for which to play the tone. This value must be one of '0' through '9', '*' or '#'."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instructs this Call to play a dual-tone multi-frequency signaling (DTMF) tone. Any other currently playing DTMF tone in the specified call is immediately stopped.", "history": "Added in API level 23", "FullName": "public void playDtmfTone (char digit)"}, "registerCallback(android.telecom.Call.Callback)": {"Returns": [], "Parameters": [["@B_android#telecom#Call#Callback_E@", "Call.Callback: A Callback."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a callback to this Call.", "history": "Added in API level 23", "FullName": "public void registerCallback (Call.Callback callback)"}, "getDetails()": {"Returns": [["@B_android#telecom#Call#Details_E@", "A @B_android#telecom#Call#Details_E@ object. Depending on the state of the Call, the result may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an object containing call details.", "history": "Added in API level 23", "FullName": "public Call.Details getDetails ()"}, "pullExternalCall()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initiates a request to the @B_android#telecom#ConnectionService_E@ to pull an external call to the local device. Calls to this method are ignored if the call does not have the @B_android#telecom#Call#Details#PROPERTY_IS_EXTERNAL_CALL_E@ property set. An @B_android#telecom#InCallService_E@ will only see calls which support this method if it has the @B_android#telecom#TelecomManager#METADATA_INCLUDE_EXTERNAL_CALLS_E@ metadata set to true in its manifest.", "history": "Added in API level 25", "FullName": "public void pullExternalCall ()"}, "putExtras(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The extras to add."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds some extras to this @B_android#telecom#Call_E@. Existing keys are replaced and new ones are added. No assumptions should be made as to how an In-Call UI or service will handle these extras. Keys should be fully qualified (e.g., com.example.MY_EXTRA) to avoid conflicts.", "history": "Added in API level 25", "FullName": "public void putExtras (Bundle extras)"}, "reject(boolean, java.lang.String)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether to reject with a text message."], ["@B_java#lang#String_E@", "String: An optional text message with which to respond."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instructs this @B_android#telecom#Call#STATE_RINGING_E@ Call to reject.", "history": "added in API level 23", "FullName": "public void reject (boolean rejectWithMessage, String textMessage)"}, "conference(android.telecom.Call)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The other call with which to conference."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instructs this Call to enter a conference.", "history": "Added in API level 23", "FullName": "public void conference (Call callToConferenceWith)"}, "handoverTo(android.telecom.PhoneAccountHandle,int,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: @B_android#telecom#PhoneAccountHandle_E@ of the @B_android#telecom#ConnectionService_E@ to handover this call to."], ["int", "int: Indicates the video state desired after the handover (see the STATE_* constants defined in @B_android#telecom#VideoProfile_E@). Value is either 0 or a combination of @B_android#telecom#VideoProfile#STATE_AUDIO_ONLY_E@, @B_android#telecom#VideoProfile#STATE_TX_ENABLED_E@, @B_android#telecom#VideoProfile#STATE_RX_ENABLED_E@, @B_android#telecom#VideoProfile#STATE_BIDIRECTIONAL_E@, and @B_android#telecom#VideoProfile#STATE_PAUSED_E@"], ["@B_android#os#Bundle_E@", "Bundle: Bundle containing extra information to be passed to the @B_android#telecom#ConnectionService_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initiates a handover of this @B_android#telecom#Call_E@ to the @B_android#telecom#ConnectionService_E@ identified by toHandle. The videoState specified indicates the desired video state after the handover. A call handover is the process where an ongoing call is transferred from one app (i.e. @B_android#telecom#ConnectionService_E@ to another app. The user could, for example, choose to continue a mobile network call in a video calling app. The mobile network call via the Telephony stack is referred to as the source of the handover, and the video calling app is referred to as the destination. When considering a handover scenario the device this method is called on is considered the initiating device (since the user initiates the handover from this device), and the other device is considered the receiving device. When this method is called on the initiating device, the Telecom framework will bind to the @B_android#telecom#ConnectionService_E@ defined by the toHandle @B_android#telecom#PhoneAccountHandle_E@ and invoke @B_android#telecom#ConnectionService#onCreateOutgoingHandoverConnection_E@ to inform the destination app that a request has been made to handover a call to it. The app returns an instance of @B_android#telecom#Connection_E@ to represent the handover call At this point the app should display UI to indicate to the user that a call handover is in process. The destination app is responsible for communicating the handover request from the initiating device to the receiving device. When the app on the receiving device receives the handover request, it calls @B_android#telecom#TelecomManager#acceptHandover_E@ to continue the handover process from the initiating device to the receiving device. At this point the destination app on the receiving device should show UI to allow the user to choose whether they want to continue their call in the destination app. When the destination app on the receiving device calls @B_android#telecom#TelecomManager#acceptHandover_E@, Telecom will bind to its @B_android#telecom#ConnectionService_E@ and call @B_android#telecom#ConnectionService#onCreateIncomingHandoverConnection_E@ to inform it of the handover request. The app returns an instance of @B_android#telecom#Connection_E@ to represent the handover call. If the user of the receiving device accepts the handover, the app calls @B_android#telecom#Connection#setActive_E@ to complete the handover process; Telecom will disconnect the original call. If the user rejects the handover, the app calls @B_android#telecom#Connection#setDisconnected_E@ and specifies a @B_android#telecom#DisconnectCause_E@ of @B_android#telecom#DisconnectCause#CANCELED_E@ to indicate that the handover has been cancelled. Telecom will only allow handovers from @B_android#telecom#PhoneAccount_E@s which declare @B_android#telecom#PhoneAccount#EXTRA_SUPPORTS_HANDOVER_FROM_E@. Similarly, the @B_android#telecom#PhoneAccount_E@ specified by toHandle must declare @B_android#telecom#PhoneAccount#EXTRA_SUPPORTS_HANDOVER_TO_E@. Errors in the handover process are reported to the @B_android#telecom#InCallService_E@ via @B_android#telecom#Call#Callback#onHandoverFailed_E@. Errors in the handover process are reported to the involved @B_android#telecom#ConnectionService_E@s via @B_android#telecom#ConnectionService#onHandoverFailed_E@.", "history": "Added in API level 28", "FullName": "public void handoverTo (PhoneAccountHandle toHandle, int videoState, Bundle extras)"}, "unregisterCallback(android.telecom.Call.Callback)": {"Returns": [], "Parameters": [["@B_android#telecom#Call#Callback_E@", "Call.Callback: A Callback."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters a callback from this Call.", "history": "Added in API level 23", "FullName": "public void unregisterCallback (Call.Callback callback)"}, "sendCallEvent(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The connection event."], ["@B_android#os#Bundle_E@", "Bundle: Bundle containing extra information associated with the event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends a Call event from this Call to the associated @B_android#telecom#Connection_E@ in the @B_android#telecom#ConnectionService_E@. Call events are used to communicate point in time information from an @B_android#telecom#InCallService_E@ to a @B_android#telecom#ConnectionService_E@. A @B_android#telecom#ConnectionService_E@ implementation could define events which enable the @B_android#telecom#InCallService_E@, for example, toggle a unique feature of the @B_android#telecom#ConnectionService_E@. A @B_android#telecom#ConnectionService_E@ can communicate to the @B_android#telecom#InCallService_E@ using @B_android#telecom#Connection#sendConnectionEvent_E@. Events are exposed to @B_android#telecom#ConnectionService_E@ implementations via @B_android#telecom#Connection#onCallEvent_E@. No assumptions should be made as to how a @B_android#telecom#ConnectionService_E@ will handle these events. The @B_android#telecom#InCallService_E@ must assume that the @B_android#telecom#ConnectionService_E@ could chose to ignore some events altogether. Events should be fully qualified (e.g., com.example.event.MY_EVENT) to avoid conflicts between @B_android#telecom#InCallService_E@ implementations. Further, @B_android#telecom#InCallService_E@ implementations shall not re-purpose events in the android.* namespace, nor shall they define their own event types in this namespace. When defining a custom event type, ensure the contents of the extras @B_android#os#Bundle_E@ is clearly defined. Extra keys for this bundle should be named similar to the event type (e.g. com.example.extra.MY_EXTRA). When defining events and the associated extras, it is important to keep their behavior consistent when the associated @B_android#telecom#InCallService_E@ is updated. Support for deprecated events/extras should me maintained to ensure backwards compatibility with older @B_android#telecom#ConnectionService_E@ implementations which were built to support the older behavior.", "history": "Added in API level 25", "FullName": "public void sendCallEvent (String event, Bundle extras)"}, "getState()": {"Returns": [["int", "A state value, chosen from the STATE_* constants."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the state of this Call.", "history": "Added in API level 23", "FullName": "public int getState ()"}, "getRttCall()": {"Returns": [["@B_android#telecom#Call#RttCall_E@", "A @B_android#telecom#Call#RttCall_E@. null if there is no active RTT connection."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this call's RttCall object. The @B_android#telecom#Call#RttCall_E@ instance is used to send and receive RTT text data, as well as to change the RTT mode.", "history": "Added in API level 26", "FullName": "public Call.RttCall getRttCall ()"}, "answer(int)": {"Returns": [], "Parameters": [["int", "int: The video state in which to answer the call. Value is either 0 or a combination of @B_android#telecom#VideoProfile#STATE_AUDIO_ONLY_E@, @B_android#telecom#VideoProfile#STATE_TX_ENABLED_E@, @B_android#telecom#VideoProfile#STATE_RX_ENABLED_E@, @B_android#telecom#VideoProfile#STATE_BIDIRECTIONAL_E@, and @B_android#telecom#VideoProfile#STATE_PAUSED_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instructs this @B_android#telecom#Call#STATE_RINGING_E@ Call to answer.", "history": "Added in API level 23", "FullName": "public void answer (int videoState)"}, "getVideoCall()": {"Returns": [["@B_android#telecom#InCallService#VideoCall_E@", "An Call.VideoCall."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an object that can be used to display video from this Call.", "history": "Added in API level 23", "FullName": "public InCallService.VideoCall getVideoCall ()"}, "sendRttRequest()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends an RTT upgrade request to the remote end of the connection. Success is not guaranteed, and notification of success will be via the @B_android#telecom#Call#Callback#onRttStatusChanged_E@ callback.", "history": "Added in API level 26", "FullName": "public void sendRttRequest ()"}, "swapConference()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Swaps the calls within this conference. See @B_android#telecom#Call#Details#CAPABILITY_SWAP_CONFERENCE_E@.", "history": "Added in API level 23", "FullName": "public void swapConference ()"}, "reject(boolean,java.lang.String)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether to reject with a text message."], ["@B_java#lang#String_E@", "String: An optional text message with which to respond."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instructs this @B_android#telecom#Call#STATE_RINGING_E@ Call to reject.", "history": "Added in API level 23", "FullName": "public void reject (boolean rejectWithMessage, String textMessage)"}, "respondToRttRequest(int, boolean)": {"Returns": [], "Parameters": [["int", "int: The request ID received via @B_android#telecom#Call#Callback#onRttRequest_E@"], ["boolean", "boolean: true if the RTT request should be accepted, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Responds to an RTT request received via the @B_android#telecom#Call#Callback#onRttRequest_E@ )} callback. The ID used here should be the same as the ID that was received via the callback.", "history": "added in API level 26", "FullName": "public void respondToRttRequest (int id, boolean accept)"}, "mergeConference()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Merges the calls within this conference. See @B_android#telecom#Call#Details#CAPABILITY_MERGE_CONFERENCE_E@.", "history": "Added in API level 23", "FullName": "public void mergeConference ()"}, "postDialContinue(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether or not to continue with the post-dial sequence."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instructs this Call to continue playing a post-dial DTMF string. A post-dial DTMF string is a string of digits entered after a phone number, when dialed, that are immediately sent as DTMF tones to the recipient as soon as the connection is made. If the DTMF string contains a @B_android#telecom#TelecomManager#DTMF_CHARACTER_PAUSE_E@ symbol, this Call will temporarily pause playing the tones for a pre-defined period of time. If the DTMF string contains a @B_android#telecom#TelecomManager#DTMF_CHARACTER_WAIT_E@ symbol, this Call will pause playing the tones and notify callbacks via @B_android#telecom#Call#Callback#onPostDialWait_E@. At this point, the in-call app should display to the user an indication of this state and an affordance to continue the postdial sequence. When the user decides to continue the postdial sequence, the in-call app should invoke the @B_android#telecom#Call#postDialContinue_E@ method.", "history": "Added in API level 23", "FullName": "public void postDialContinue (boolean proceed)"}, "getConferenceableCalls()": {"Returns": [["@B_java#util#List_E@", "The list of conferenceable Calls."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of Calls with which this Call is allowed to conference.", "history": "Added in API level 23", "FullName": "public List<Call> getConferenceableCalls ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 23", "FullName": "public String toString ()"}, "phoneAccountSelected(android.telecom.PhoneAccountHandle,boolean)": {"Returns": [], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Call that an account has been selected and to proceed with placing an outgoing call. Optionally sets this account as the default account.", "history": "Added in API level 23", "FullName": "public void phoneAccountSelected (PhoneAccountHandle accountHandle, boolean setDefault)"}, "deflect(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The address to which the call will be deflected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instructs this @B_android#telecom#Call#STATE_RINGING_E@ Call to deflect.", "history": "Added in API level 28", "FullName": "public void deflect (Uri address)"}, "getParent()": {"Returns": [["@B_android#telecom#Call_E@", "The parent Call, or null if this Call is not a child of any conference Calls."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the parent of this Call in a conference, if any.", "history": "Added in API level 23", "FullName": "public Call getParent ()"}, "unhold()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instructs this @B_android#telecom#Call#STATE_HOLDING_E@ call to release from hold.", "history": "Added in API level 23", "FullName": "public void unhold ()"}, "registerCallback(android.telecom.Call.Callback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#telecom#Call#Callback_E@", "Call.Callback: A Callback."], ["@B_android#os#Handler_E@", "Handler: A handler which command and status changes will be delivered to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a callback to this Call.", "history": "Added in API level 23", "FullName": "public void registerCallback (Call.Callback callback, Handler handler)"}, "removeExtras(java.util.List<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The keys of the extras to remove."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes extras from this @B_android#telecom#Call_E@.", "history": "Added in API level 25", "FullName": "public void removeExtras (List<String> keys)"}, "hold()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instructs this Call to go on hold.", "history": "Added in API level 23", "FullName": "public void hold ()"}, "stopRtt()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Terminate the RTT session on this call. The resulting state change will be notified via the @B_android#telecom#Call#Callback#onRttStatusChanged_E@ callback.", "history": "Added in API level 26", "FullName": "public void stopRtt ()"}}, "Inheritance": [], "ClassName": "android.telecom.Call", "ClassDesc": "Represents an ongoing phone call that the in-call app should present to the user."}