{"Functions": {"with(java.time.temporal.TemporalField, long)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "an object of the same type with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified field altered. This returns a new object based on this one with the value for the specified field changed. For example, on a LocalDate, this could be used to set the year, month or day-of-month. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "added in API level 26", "FullName": "public abstract ChronoZonedDateTime<D> with (TemporalField field, long newValue)"}, "plus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "an object of the same type with the specified period added, not null"]], "Parameters": [["long", "long: the amount of the specified unit to add, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period added. This method returns a new object based on this one with the specified period added. For example, on a LocalDate, this could be used to add a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then adding one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "Added in API level 26", "FullName": "public abstract ChronoZonedDateTime<D> plus (long amountToAdd, TemporalUnit unit)"}, "isSupported(java.time.temporal.TemporalField)": {"Returns": [["boolean", "true if the field can be queried, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified field is supported. This checks if the specified field can be queried on this date-time. If false, then calling the @B_java#time#chrono#ChronoZonedDateTime#range_E@, @B_java#time#chrono#ChronoZonedDateTime#get_E@ and @B_java#time#chrono#ChronoZonedDateTime#with_E@ methods will throw an exception. The set of supported fields is defined by the chronology and normally includes all ChronoField fields. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.", "history": "Added in API level 26", "FullName": "public abstract boolean isSupported (TemporalField field)"}, "isBefore(java.time.chrono.ChronoZonedDateTime<?>)": {"Returns": [["boolean", "true if this point is before the specified date-time"]], "Parameters": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "ChronoZonedDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the instant of this date-time is before that of the specified date-time. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ in that it only compares the instant of the date-time. This is equivalent to using dateTime1.toInstant().isBefore(dateTime2.toInstant());. This default implementation performs the comparison based on the epoch-second and nano-of-second.", "history": "Added in API level 26", "FullName": "public boolean isBefore (ChronoZonedDateTime<?> other)"}, "getChronology()": {"Returns": [["@B_java#time#chrono#Chronology_E@", "the chronology, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the chronology of this date-time. The Chronology represents the calendar system in use. The era and other fields in @B_java#time#temporal#ChronoField_E@ are defined by the chronology.", "history": "Added in API level 26", "FullName": "public Chronology getChronology ()"}, "withEarlierOffsetAtOverlap()": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "a ChronoZonedDateTime based on this date-time with the earlier offset, not null"]], "Parameters": [], "Throws": [["@B_java#time#DateTimeException_E@", "if no rules can be found for the zone"], ["@B_java#time#DateTimeException_E@", "if no rules are valid for this date-time"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap. This method only has any effect when the local time-line overlaps, such as at an autumn daylight savings cutover. In this scenario, there are two valid offsets for the local date-time. Calling this method will return a zoned date-time with the earlier of the two selected. If this method is called when it is not an overlap, this is returned. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public abstract ChronoZonedDateTime<D> withEarlierOffsetAtOverlap ()"}, "withZoneSameLocal(java.time.ZoneId)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "a ChronoZonedDateTime based on this date-time with the requested zone, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the time-zone to change to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with a different time-zone, retaining the local date-time if possible. This method changes the time-zone and retains the local date-time. The local date-time is only changed if it is invalid for the new zone. To change the zone and adjust the local date-time, use @B_java#time#chrono#ChronoZonedDateTime#withZoneSameInstant_E@. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public abstract ChronoZonedDateTime<D> withZoneSameLocal (ZoneId zone)"}, "toLocalTime()": {"Returns": [["@B_java#time#LocalTime_E@", "the time part of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the local time part of this date-time. This returns a local time with the same hour, minute, second and nanosecond as this date-time.", "history": "Added in API level 26", "FullName": "public LocalTime toLocalTime ()"}, "minus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "an object of the same type with the specified period subtracted, not null"]], "Parameters": [["long", "long: the amount of the specified unit to subtract, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period subtracted. This method returns a new object based on this one with the specified period subtracted. For example, on a LocalDate, this could be used to subtract a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st March, then subtracting one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "added in API level 27", "FullName": "public ChronoZonedDateTime<D> minus (long amountToSubtract, TemporalUnit unit)"}, "withLaterOffsetAtOverlap()": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "a ChronoZonedDateTime based on this date-time with the later offset, not null"]], "Parameters": [], "Throws": [["@B_java#time#DateTimeException_E@", "if no rules can be found for the zone"], ["@B_java#time#DateTimeException_E@", "if no rules are valid for this date-time"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap. This method only has any effect when the local time-line overlaps, such as at an autumn daylight savings cutover. In this scenario, there are two valid offsets for the local date-time. Calling this method will return a zoned date-time with the later of the two selected. If this method is called when it is not an overlap, this is returned. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public abstract ChronoZonedDateTime<D> withLaterOffsetAtOverlap ()"}, "getLong(java.time.temporal.TemporalField)": {"Returns": [["long", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field as a long. This queries the date-time for the value of the specified field. The returned value may be outside the valid range of values for the field. If the date-time cannot return the value, because the field is unsupported or for some other reason, an exception will be thrown.", "history": "Added in API level 26", "FullName": "public long getLong (TemporalField field)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other date-time"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date-time is equal to another date-time. The comparison is based on the offset date-time and the zone. To compare for the same instant on the time-line, use @B_java#lang#Comparable#compareTo_E@. Only objects of type ChronoZonedDateTime are compared, other types return false.", "history": "Added in API level 26", "FullName": "public abstract boolean equals (Object obj)"}, "toInstant()": {"Returns": [["@B_java#time#Instant_E@", "an Instant representing the same instant, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this date-time to an Instant. This returns an Instant representing the same point on the time-line as this date-time. The calculation combines the", "history": "Added in API level 26", "FullName": "public Instant toInstant ()"}, "with(java.time.temporal.TemporalField,long)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "an object of the same type with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified field altered. This returns a new object based on this one with the value for the specified field changed. For example, on a LocalDate, this could be used to set the year, month or day-of-month. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "Added in API level 26", "FullName": "public abstract ChronoZonedDateTime<D> with (TemporalField field, long newValue)"}, "minus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "an object of the same type with the specified adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with an amount subtracted. This adjusts this temporal, subtracting according to the rules of the specified amount. The amount is typically a @B_java#time#Period_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface, such as @B_java#time#Duration_E@. Some example code indicating how and why this method is used: Note that calling plus followed by minus is not guaranteed to return the same date-time.", "history": "Added in API level 26", "FullName": "public ChronoZonedDateTime<D> minus (TemporalAmount amount)"}, "getOffset()": {"Returns": [["@B_java#time#ZoneOffset_E@", "the zone offset, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the zone offset, such as '+01:00'. This is the offset of the local date-time from UTC/Greenwich.", "history": "Added in API level 26", "FullName": "public abstract ZoneOffset getOffset ()"}, "toLocalDate()": {"Returns": [["D", "the date part of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the local date part of this date-time. This returns a local date with the same year, month and day as this date-time.", "history": "Added in API level 26", "FullName": "public D toLocalDate ()"}, "range(java.time.temporal.TemporalField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to query the range for, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. All fields can be expressed as a long integer. This method returns an object that describes the valid range for that value. The value of this temporal object is used to enhance the accuracy of the returned range. If the date-time cannot return the range, because the field is unsupported or for some other reason, an exception will be thrown. Note that the result only describes the minimum and maximum valid values and it is important not to read too much into them. For example, there could be values within the range that are invalid for the field.", "history": "Added in API level 26", "FullName": "public ValueRange range (TemporalField field)"}, "isAfter(java.time.chrono.ChronoZonedDateTime<?>)": {"Returns": [["boolean", "true if this is after the specified date-time"]], "Parameters": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "ChronoZonedDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the instant of this date-time is after that of the specified date-time. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ in that it only compares the instant of the date-time. This is equivalent to using dateTime1.toInstant().isAfter(dateTime2.toInstant());. This default implementation performs the comparison based on the epoch-second and nano-of-second.", "history": "Added in API level 26", "FullName": "public boolean isAfter (ChronoZonedDateTime<?> other)"}, "timeLineOrder()": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that compares in time-line order ignoring the chronology"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#chrono#ChronoZonedDateTime#isAfter_E@", "@B_java#time#chrono#ChronoZonedDateTime#isBefore_E@", "@B_java#time#chrono#ChronoZonedDateTime#isEqual_E@"], "Permissions": [], "Description": "Gets a comparator that compares ChronoZonedDateTime in time-line order ignoring the chronology. This comparator differs from the comparison in @B_java#lang#Comparable#compareTo_E@ in that it only compares the underlying instant and not the chronology. This allows dates in different calendar systems to be compared based on the position of the date-time on the instant time-line. The underlying comparison is equivalent to comparing the epoch-second and nano-of-second.", "history": "Added in API level 26", "FullName": "public static Comparator<ChronoZonedDateTime<?>> timeLineOrder ()"}, "plus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "an object of the same type with the specified adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with an amount added. This adjusts this temporal, adding according to the rules of the specified amount. The amount is typically a @B_java#time#Period_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface, such as @B_java#time#Duration_E@. Some example code indicating how and why this method is used: Note that calling plus followed by minus is not guaranteed to return the same date-time.", "history": "Added in API level 26", "FullName": "public ChronoZonedDateTime<D> plus (TemporalAmount amount)"}, "toLocalDateTime()": {"Returns": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "the local date-time part of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the local date-time part of this date-time. This returns a local date with the same year, month and day as this date-time.", "history": "Added in API level 26", "FullName": "public abstract ChronoLocalDateTime<D> toLocalDateTime ()"}, "query(java.time.temporal.TemporalQuery<R>)": {"Returns": [["R", "the query result, null may be returned (defined by the query)"]], "Parameters": [["@B_java#time#temporal#TemporalQuery_E@", "TemporalQuery: the query to invoke, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query (defined by the query)"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs (defined by the query)"]], "SeeAlso": [], "Permissions": [], "Description": "Queries this date-time using the specified query. This queries this date-time using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalQuery#queryFrom_E@ method on the specified query passing this as the argument.", "history": "Added in API level 26", "FullName": "public R query (TemporalQuery<R> query)"}, "withZoneSameInstant(java.time.ZoneId)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "a ChronoZonedDateTime based on this date-time with the requested zone, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the time-zone to change to, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with a different time-zone, retaining the instant. This method changes the time-zone and retains the instant. This normally results in a change to the local date-time. This method is based on retaining the same instant, thus gaps and overlaps in the local time-line have no effect on the result. To change the offset while keeping the local time, use @B_java#time#chrono#ChronoZonedDateTime#withZoneSameLocal_E@.", "history": "Added in API level 26", "FullName": "public abstract ChronoZonedDateTime<D> withZoneSameInstant (ZoneId zone)"}, "minus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "an object of the same type with the specified period subtracted, not null"]], "Parameters": [["long", "long: the amount of the specified unit to subtract, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period subtracted. This method returns a new object based on this one with the specified period subtracted. For example, on a LocalDate, this could be used to subtract a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st March, then subtracting one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "Added in API level 26", "FullName": "public ChronoZonedDateTime<D> minus (long amountToSubtract, TemporalUnit unit)"}, "isEqual(java.time.chrono.ChronoZonedDateTime<?>)": {"Returns": [["boolean", "true if the instant equals the instant of the specified date-time"]], "Parameters": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "ChronoZonedDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the instant of this date-time is equal to that of the specified date-time. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ and @B_java#time#chrono#ChronoZonedDateTime#equals_E@ in that it only compares the instant of the date-time. This is equivalent to using dateTime1.toInstant().equals(dateTime2.toInstant());. This default implementation performs the comparison based on the epoch-second and nano-of-second.", "history": "Added in API level 26", "FullName": "public boolean isEqual (ChronoZonedDateTime<?> other)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this date-time as a String. The output will include the full zoned date-time.", "history": "Added in API level 26", "FullName": "public abstract String toString ()"}, "with(java.time.temporal.TemporalAdjuster)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "an object of the same type with the specified adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAdjuster_E@", "TemporalAdjuster: the adjuster to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an adjusted object of the same type as this object with the adjustment made. This adjusts this date-time according to the rules of the specified adjuster. A simple adjuster might simply set the one of the fields, such as the year field. A more complex adjuster might set the date to the last day of the month. A selection of common adjustments is provided in @B_java#time#temporal#TemporalAdjusters_E@. These include finding the \"last day of the month\" and \"next Wednesday\". The adjuster is responsible for handling special cases, such as the varying lengths of month and leap years. Some example code indicating how and why this method is used:", "history": "Added in API level 26", "FullName": "public ChronoZonedDateTime<D> with (TemporalAdjuster adjuster)"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "the date-time, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to a ChronoZonedDateTime"]], "SeeAlso": ["@B_java#time#chrono#Chronology#zonedDateTime_E@"], "Permissions": [], "Description": "Obtains an instance of ChronoZonedDateTime from a temporal object. This creates a zoned date-time based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of ChronoZonedDateTime. The conversion extracts and combines the chronology, date, time and zone from the temporal object. The behavior is equivalent to using @B_java#time#chrono#Chronology#zonedDateTime_E@ with the extracted chronology. Implementations are permitted to perform optimizations such as accessing those fields that are equivalent to the relevant objects. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, ChronoZonedDateTime::from.", "history": "Added in API level 26", "FullName": "public static ChronoZonedDateTime<?> from (TemporalAccessor temporal)"}, "get(java.time.temporal.TemporalField)": {"Returns": [["int", "the value for the field, within the valid range of values"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field as an int. This queries the date-time for the value of the specified field. The returned value will always be within the valid range of values for the field. If the date-time cannot return the value, because the field is unsupported or for some other reason, an exception will be thrown.", "history": "Added in API level 26", "FullName": "public int get (TemporalField field)"}, "toEpochSecond()": {"Returns": [["long", "the number of seconds from the epoch of 1970-01-01T00:00:00Z"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z. This uses the", "history": "Added in API level 26", "FullName": "public long toEpochSecond ()"}, "getZone()": {"Returns": [["@B_java#time#ZoneId_E@", "the zone ID, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the zone ID, such as 'Europe/Paris'. This returns the stored time-zone id used to determine the time-zone rules.", "history": "Added in API level 26", "FullName": "public abstract ZoneId getZone ()"}, "compareTo(java.time.chrono.ChronoZonedDateTime<?>)": {"Returns": [["int", "the comparator value, negative if less, positive if greater"]], "Parameters": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "ChronoZonedDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this date-time to another date-time, including the chronology. The comparison is based first on the instant, then on the local date-time, then on the zone ID, then on the chronology. It is \"consistent with equals\", as defined by @B_java#lang#Comparable_E@. If all the date-time objects being compared are in the same chronology, then the additional chronology stage is not required. This default implementation performs the comparison defined above.", "history": "Added in API level 26", "FullName": "public int compareTo (ChronoZonedDateTime<?> other)"}, "format(java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#lang#String_E@", "the formatted date-time string, not null"]], "Parameters": [["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if an error occurs during printing"]], "SeeAlso": [], "Permissions": [], "Description": "Formats this date-time using the specified formatter. This date-time will be passed to the formatter to produce a string. The default implementation must behave as follows:", "history": "Added in API level 26", "FullName": "public String format (DateTimeFormatter formatter)"}, "plus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "an object of the same type with the specified period added, not null"]], "Parameters": [["long", "long: the amount of the specified unit to add, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period added. This method returns a new object based on this one with the specified period added. For example, on a LocalDate, this could be used to add a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then adding one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "added in API level 26", "FullName": "public abstract ChronoZonedDateTime<D> plus (long amountToAdd, TemporalUnit unit)"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this date-time.", "history": "Added in API level 26", "FullName": "public abstract int hashCode ()"}, "isSupported(java.time.temporal.TemporalUnit)": {"Returns": [["boolean", "true if the unit can be added/subtracted, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified unit is supported. This checks if the specified unit can be added to or subtracted from this date-time. If false, then calling the @B_java#time#chrono#ChronoZonedDateTime#plus_E@ and @B_java#time#chrono#ChronoZonedDateTime#minus_E@ methods will throw an exception. The set of supported units is defined by the chronology and normally includes all ChronoUnit units except FOREVER. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument. Whether the unit is supported is determined by the unit.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalUnit unit)"}}, "Inheritance": [], "ClassName": "@B_java#time#chrono#ChronoLocalDate_E@", "ClassDesc": "A date-time with a time-zone in an arbitrary chronology, intended for advanced globalization use cases. A ChronoZonedDateTime is the abstract representation of an offset date-time where the Chronology chronology, or calendar system, is pluggable. The date-time is defined in terms of fields expressed by @B_java#time#temporal#TemporalField_E@, where most common implementations are defined in @B_java#time#temporal#ChronoField_E@. The chronology defines how the calendar system operates and the meaning of the standard fields. ZonedDateTime rather than this interface, even in the case where the application needs to deal with multiple calendar systems. The rationale for this is explored in detail in @B_java#time#chrono#ChronoLocalDate_E@. Ensure that the discussion in ChronoLocalDate has been read and understood before using this interface."}