{"Functions": {"awaitUntil(java.util.Date)": {"Returns": [["boolean", "false if the deadline has elapsed upon return, else true"]], "Parameters": [["@B_java#util#Date_E@", "Date: the absolute time to wait until"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Implements absolute timed condition wait.", "history": "Added in API level 9", "FullName": "public final boolean awaitUntil (Date deadline)"}, "awaitUninterruptibly()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implements uninterruptible condition wait.", "history": "Added in API level 9", "FullName": "public final void awaitUninterruptibly ()"}, "getWaitingThreads()": {"Returns": [["@B_java#util#Collection_E@", "the collection of threads"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#isHeldExclusively_E@ returns false"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a collection containing those threads that may be waiting on this Condition. Implements @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#getWaitingThreads_E@.", "history": "Added in API level 9", "FullName": "protected final Collection<Thread> getWaitingThreads ()"}, "await(long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "false if the waiting time detectably elapsed before return from the method, else true"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the time argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Implements timed condition wait.", "history": "added in API level 9", "FullName": "public final boolean await (long time, TimeUnit unit)"}, "getWaitQueueLength()": {"Returns": [["int", "the estimated number of waiting threads"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#isHeldExclusively_E@ returns false"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of threads waiting on this condition. Implements @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#getWaitQueueLength_E@.", "history": "Added in API level 9", "FullName": "protected final int getWaitQueueLength ()"}, "signal()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#isHeldExclusively_E@ returns false"]], "SeeAlso": [], "Permissions": [], "Description": "Moves the longest-waiting thread, if one exists, from the wait queue for this condition to the wait queue for the owning lock.", "history": "Added in API level 9", "FullName": "public final void signal ()"}, "signalAll()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#isHeldExclusively_E@ returns false"]], "SeeAlso": [], "Permissions": [], "Description": "Moves all threads from the wait queue for this condition to the wait queue for the owning lock.", "history": "Added in API level 9", "FullName": "public final void signalAll ()"}, "awaitNanos(long)": {"Returns": [["long", "an estimate of the nanosTimeout value minus the time spent waiting upon return from this method. A positive value may be used as the argument to a subsequent call to this method to finish waiting out the desired time. A value less than or equal to zero indicates that no time remains."]], "Parameters": [["long", "long: the maximum time to wait, in nanoseconds"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Implements timed condition wait.", "history": "Added in API level 9", "FullName": "public final long awaitNanos (long nanosTimeout)"}, "hasWaiters()": {"Returns": [["boolean", "true if there are any waiting threads"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#isHeldExclusively_E@ returns false"]], "SeeAlso": [], "Permissions": [], "Description": "Queries whether any threads are waiting on this condition. Implements @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#hasWaiters_E@.", "history": "Added in API level 9", "FullName": "protected final boolean hasWaiters ()"}, "AbstractQueuedLongSynchronizer.ConditionObject()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new ConditionObject instance.", "history": "added in API level 9", "FullName": "public AbstractQueuedLongSynchronizer.ConditionObject ()"}, "await(long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "false if the waiting time detectably elapsed before return from the method, else true"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the time argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Implements timed condition wait.", "history": "Added in API level 9", "FullName": "public final boolean await (long time, TimeUnit unit)"}, "await()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Implements interruptible condition wait.", "history": "Added in API level 9", "FullName": "public final void await ()"}}, "Inheritance": [], "ClassName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject", "ClassDesc": "Condition implementation for a @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer_E@ serving as the basis of a @B_java#util#concurrent#locks#Lock_E@ implementation. Method documentation for this class describes mechanics, not behavioral specifications from the point of view of Lock and Condition users. Exported versions of this class will in general need to be accompanied by documentation describing condition semantics that rely on those of the associated AbstractQueuedLongSynchronizer. This class is Serializable, but all fields are transient, so deserialized conditions have no waiters."}