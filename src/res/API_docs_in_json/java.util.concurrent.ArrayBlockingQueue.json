{"Functions": {"drainTo(java.util.Collection<? super E>)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "added in API level 1", "FullName": "public int drainTo (Collection<? super E> c)"}, "poll(long,java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this queue, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.", "history": "Added in API level 1", "FullName": "public E poll (long timeout, TimeUnit unit)"}, "drainTo(java.util.Collection<? super E>, int)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"], ["int", "int: the maximum number of elements to transfer"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "added in API level 1", "FullName": "public int drainTo (Collection<? super E> c, int maxElements)"}, "offer(E)": {"Returns": [["boolean", "true if the element was added to this queue, else false"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full. This method is generally preferable to method @B_java#util#concurrent#ArrayBlockingQueue#add_E@, which can fail to insert an element only by throwing an exception.", "history": "Added in API level 1", "FullName": "public boolean offer (E e)"}, "remainingCapacity()": {"Returns": [["int", "the remaining capacity"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking. This is always equal to the initial capacity of this queue less the current size of this queue. Note that you cannot always tell if an attempt to insert an element will succeed by inspecting remainingCapacity because it may be the case that another thread is about to insert or remove an element.", "history": "Added in API level 1", "FullName": "public int remainingCapacity ()"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically removes all of the elements from this queue. The queue will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "offer(E,long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before space is available"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the tail of this queue, waiting up to the specified wait time for space to become available if the queue is full.", "history": "Added in API level 1", "FullName": "public boolean offer (E e, long timeout, TimeUnit unit)"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator_E@ over the elements in this queue. The returned spliterator is The Spliterator reports @B_java#util#Spliterator#CONCURRENT_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#NONNULL_E@.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this queue in proper sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this queue in proper sequence. The elements will be returned in order from first (head) to last (tail). The returned iterator is", "history": "Added in API level 1", "FullName": "public Iterator<E> iterator ()"}, "poll()": {"Returns": [["E", "the head of this queue, or null if this queue is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, or returns null if this queue is empty.", "history": "Added in API level 1", "FullName": "public E poll ()"}, "drainTo(java.util.Collection<?superE>,int)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"], ["int", "int: the maximum number of elements to transfer"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "Added in API level 1", "FullName": "public int drainTo (Collection<? super E> c, int maxElements)"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all of the elements in this queue"]], "Parameters": [["T[]", "T: the array into which the elements of the queue are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose"]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array. If the queue fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this queue. If this queue fits in the specified array with room to spare (i.e., the array has more elements than this queue), the element in the array immediately following the end of the queue is set to null. Like the @B_java#util#concurrent#ArrayBlockingQueue#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a queue known to contain only strings. The following code can be used to dump the queue into a newly allocated array of String: toArray(new Object[0]) is identical in function to toArray().", "history": "Added in API level 1", "FullName": "public T[] toArray (T[] a)"}, "size()": {"Returns": [["int", "the number of elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this queue.", "history": "Added in API level 1", "FullName": "public int size ()"}, "ArrayBlockingQueue(int)": {"Returns": [], "Parameters": [["int", "int: the capacity of this queue"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if capacity < 1"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an ArrayBlockingQueue with the given (fixed) capacity and default access policy.", "history": "Added in API level 1", "FullName": "public ArrayBlockingQueue (int capacity)"}, "take()": {"Returns": [["E", "the head of this queue"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.", "history": "Added in API level 1", "FullName": "public E take ()"}, "peek()": {"Returns": [["E", "the head of this queue, or null if this queue is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.", "history": "Added in API level 1", "FullName": "public E peek ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this queue changed as a result of the call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this queue, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element e such that o.equals(e), if this queue contains one or more such elements. Returns true if this queue contained the specified element (or equivalently, if this queue changed as a result of the call). Removal of interior elements in circular array based queues is an intrinsically slow and disruptive operation, so should be undertaken only in exceptional circumstances, ideally only when the queue is known not to be accessible by other threads.", "history": "Added in API level 1", "FullName": "public boolean remove (Object o)"}, "offer(E, long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before space is available"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the tail of this queue, waiting up to the specified wait time for space to become available if the queue is full.", "history": "added in API level 1", "FullName": "public boolean offer (E e, long timeout, TimeUnit unit)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this collection. The string representation consists of a list of the collection's elements in the order they are returned by its iterator, enclosed in square brackets (@B_java#lang#String#valueOf_E@.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "ArrayBlockingQueue(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the capacity of this queue"], ["boolean", "boolean: if true then queue accesses for threads blocked on insertion or removal, are processed in FIFO order; if false the access order is unspecified."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if capacity < 1"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an ArrayBlockingQueue with the given (fixed) capacity and the specified access policy.", "history": "added in API level 1", "FullName": "public ArrayBlockingQueue (int capacity, boolean fair)"}, "put(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the tail of this queue, waiting for space to become available if the queue is full.", "history": "Added in API level 1", "FullName": "public void put (E e)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this queue, in proper sequence. The returned array will be \"safe\" in that no references to it are maintained by this queue. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 1", "FullName": "public Object[] toArray ()"}, "drainTo(java.util.Collection<?superE>)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "Added in API level 1", "FullName": "public int drainTo (Collection<? super E> c)"}, "poll(long, java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this queue, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.", "history": "added in API level 1", "FullName": "public E poll (long timeout, TimeUnit unit)"}, "ArrayBlockingQueue(int,boolean,java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["int", "int: the capacity of this queue"], ["boolean", "boolean: if true then queue accesses for threads blocked on insertion or removal, are processed in FIFO order; if false the access order is unspecified."], ["@B_java#util#Collection_E@", "Collection: the collection of elements to initially contain"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if capacity is less than c.size(), or less than 1."], ["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an ArrayBlockingQueue with the given (fixed) capacity, the specified access policy and initially containing the elements of the given collection, added in traversal order of the collection's iterator.", "history": "Added in API level 1", "FullName": "public ArrayBlockingQueue (int capacity, boolean fair, Collection<? extends E> c)"}, "ArrayBlockingQueue(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the capacity of this queue"], ["boolean", "boolean: if true then queue accesses for threads blocked on insertion or removal, are processed in FIFO order; if false the access order is unspecified."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if capacity < 1"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an ArrayBlockingQueue with the given (fixed) capacity and the specified access policy.", "history": "Added in API level 1", "FullName": "public ArrayBlockingQueue (int capacity, boolean fair)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this queue contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be checked for containment in this queue"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this queue contains the specified element. More formally, returns true if and only if this queue contains at least one element e such that o.equals(e).", "history": "Added in API level 1", "FullName": "public boolean contains (Object o)"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this queue is full"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and throwing an IllegalStateException if this queue is full.", "history": "Added in API level 1", "FullName": "public boolean add (E e)"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractQueue_E@"], "ClassName": "java.util.concurrent.ArrayBlockingQueue<E>", "ClassDesc": "A bounded head of the queue is that element that has been on the queue the longest time. The tail of the queue is that element that has been on the queue the shortest time. New elements are inserted at the tail of the queue, and the queue retrieval operations obtain elements at the head of the queue. This is a classic \"bounded buffer\", in which a fixed-sized array holds elements inserted by producers and extracted by consumers. Once created, the capacity cannot be changed. Attempts to put an element into a full queue will result in the operation blocking; attempts to take an element from an empty queue will similarly block. This class supports an optional fairness policy for ordering waiting producer and consumer threads. By default, this ordering is not guaranteed. However, a queue constructed with fairness set to true grants threads access in FIFO order. Fairness generally decreases throughput but reduces variability and avoids starvation. This class and its iterator implement all of the optional methods of the @B_java#util#Collection_E@ and @B_java#util#Iterator_E@ interfaces."}