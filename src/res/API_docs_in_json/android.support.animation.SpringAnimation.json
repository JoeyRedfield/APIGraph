{"Functions": {"canSkipToEnd()": {"Returns": [["boolean", "true if the spring is damped, otherwise false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries whether the spring can eventually come to the rest position.", "history": "added in version 25.3.0", "FullName": "boolean canSkipToEnd ()"}, "animateToFinalPosition(float)": {"Returns": [], "Parameters": [["float", "float: rest position of the spring"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the final position of the spring. When the animation is running, calling this method would assume the position change of the spring as a continuous movement since last frame, which yields more accurate results than changing the spring position directly through @B_android#support#animation#SpringForce#setFinalPosition_E@. If the animation hasn't started, calling this method will change the spring position, and immediately start the animation.", "history": "added in version 25.3.0", "FullName": "void animateToFinalPosition (float finalPosition)"}, "getSpring()": {"Returns": [["@B_android#support#animation#SpringForce_E@", "the spring that the animation uses for animations"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the spring that the animation uses for animations.", "history": "added in version 25.3.0", "FullName": "SpringForce getSpring ()"}, "skipToEnd()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the spring is undamped (i.e. damping ratio = 0)"], ["@B_android#util#AndroidRuntimeException_E@", "if this method is not called on the main thread"]], "SeeAlso": [], "Permissions": [], "Description": "Skips to the end of the animation. If the spring is undamped, an @B_java#lang#IllegalStateException_E@ will be thrown, as the animation would never reach to an end. It is recommended to check @B_android#support#animation#SpringAnimation#canSkipToEnd_E@ before calling this method. This method should only be called on main thread. If animation is not running, no-op.", "history": "added in version 25.3.0", "FullName": "void skipToEnd ()"}, "setSpring(android.support.animation.SpringForce)": {"Returns": [["@B_android#support#animation#SpringAnimation_E@", "the animation that the spring force is set on"]], "Parameters": [["@B_android#support#animation#SpringForce_E@", "SpringForce: a pre-defined spring force that drives the animation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Uses the given spring as the force that drives this animation. If this spring force has its parameters re-configured during the animation, the new configuration will be reflected in the animation immediately.", "history": "added in version 25.3.0", "FullName": "SpringAnimation setSpring (SpringForce force)"}, "start()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts an animation. If the animation has already been started, no op. Note that calling @B_android#support#animation#DynamicAnimation#start_E@ will not immediately set the property value to start value of the animation. The property values will be changed at each animation pulse, which happens before the draw pass. As a result, the changes will be reflected in the next frame, the same as if the values were set immediately. This method should only be called on main thread.", "history": "added in version 25.3.0", "FullName": "void start ()"}}, "Inheritance": ["java.lang.Object", "@B_android#support#animation#DynamicAnimation_E@"], "ClassName": "android.support.animation.SpringAnimation", "ClassDesc": "SpringAnimation is an animation that is driven by a @B_android#support#animation#SpringForce_E@. The spring force defines the spring's stiffness, damping ratio, as well as the rest position. Once the SpringAnimation is started, on each frame the spring force will update the animation's value and velocity. The animation will continue to run until the spring force reaches equilibrium. If the spring used in the animation is undamped, the animation will never reach equilibrium. Instead, it will oscillate forever. To create a simple @B_android#support#animation#SpringAnimation_E@ that uses the default @B_android#support#animation#SpringForce_E@: Alternatively, a @B_android#support#animation#SpringAnimation_E@ can take a pre-configured @B_android#support#animation#SpringForce_E@, and use that to drive the animation."}