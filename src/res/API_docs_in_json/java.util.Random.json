{"Functions": {"ints(long, int, int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["int", "int: the origin (inclusive) of each random value"], ["int", "int: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero, or randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive). A pseudorandom int value is generated as if it's the result of calling the following method with the origin and bound:", "history": "added in API level 24", "FullName": "public IntStream ints (long streamSize, int randomNumberOrigin, int randomNumberBound)"}, "longs(long)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values"]], "Parameters": [["long", "long: the number of values to generate"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom long values. A pseudorandom long value is generated as if it's the result of calling the method @B_java#util#Random#nextLong_E@.", "history": "Added in API level 24", "FullName": "public LongStream longs (long streamSize)"}, "ints(int, int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["int", "int: the origin (inclusive) of each random value"], ["int", "int: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive). A pseudorandom int value is generated as if it's the result of calling the following method with the origin and bound:", "history": "added in API level 24", "FullName": "public IntStream ints (int randomNumberOrigin, int randomNumberBound)"}, "doubles(long)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of double values"]], "Parameters": [["long", "long: the number of values to generate"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive). A pseudorandom double value is generated as if it's the result of calling the method @B_java#util#Random#nextDouble_E@.", "history": "Added in API level 24", "FullName": "public DoubleStream doubles (long streamSize)"}, "Random()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new random number generator. This constructor sets the seed of the random number generator to a value very likely to be distinct from any other invocation of this constructor.", "history": "Added in API level 1", "FullName": "public Random ()"}, "longs(long, long, long)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["long", "long: the origin (inclusive) of each random value"], ["long", "long: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero, or randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive). A pseudorandom long value is generated as if it's the result of calling the following method with the origin and bound:", "history": "added in API level 24", "FullName": "public LongStream longs (long streamSize, long randomNumberOrigin, long randomNumberBound)"}, "ints()": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom int values. A pseudorandom int value is generated as if it's the result of calling the method @B_java#util#Random#nextInt_E@.", "history": "Added in API level 24", "FullName": "public IntStream ints ()"}, "nextFloat()": {"Returns": [["float", "the next pseudorandom, uniformly distributed float value between 0.0 and 1.0 from this random number generator's sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the next pseudorandom, uniformly distributed float value between 0.0 and 1.0 from this random number generator's sequence. The general contract of nextFloat is that one float value, chosen (approximately) uniformly from the range 0.0f (inclusive) to 1.0f (exclusive), is pseudorandomly generated and returned. All 2float values of the form The method nextFloat is implemented by class Random as if by: The hedge \"approximately\" is used in the foregoing description only because the next method is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm shown would choose float values from the stated range with perfect uniformity. [In early versions of Java, the result was incorrectly calculated as:", "history": "Added in API level 1", "FullName": "public float nextFloat ()"}, "doubles()": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of pseudorandom double values"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive). A pseudorandom double value is generated as if it's the result of calling the method @B_java#util#Random#nextDouble_E@.", "history": "Added in API level 24", "FullName": "public DoubleStream doubles ()"}, "nextBytes(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the byte array to fill with random bytes"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the byte array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Generates random bytes and places them into a user-supplied byte array. The number of random bytes produced is equal to the length of the byte array. The method nextBytes is implemented by class Random as if by:", "history": "Added in API level 1", "FullName": "public void nextBytes (byte[] bytes)"}, "longs()": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom long values. A pseudorandom long value is generated as if it's the result of calling the method @B_java#util#Random#nextLong_E@.", "history": "Added in API level 24", "FullName": "public LongStream longs ()"}, "nextDouble()": {"Returns": [["double", "the next pseudorandom, uniformly distributed double value between 0.0 and 1.0 from this random number generator's sequence"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Math#random_E@"], "Permissions": [], "Description": "Returns the next pseudorandom, uniformly distributed double value between 0.0 and 1.0 from this random number generator's sequence. The general contract of nextDouble is that one double value, chosen (approximately) uniformly from the range 0.0d (inclusive) to 1.0d (exclusive), is pseudorandomly generated and returned. The method nextDouble is implemented by class Random as if by: The hedge \"approximately\" is used in the foregoing description only because the next method is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm shown would choose double values from the stated range with perfect uniformity. [In early versions of Java, the result was incorrectly calculated as:", "history": "Added in API level 1", "FullName": "public double nextDouble ()"}, "nextLong()": {"Returns": [["long", "the next pseudorandom, uniformly distributed long value from this random number generator's sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the next pseudorandom, uniformly distributed long value from this random number generator's sequence. The general contract of nextLong is that one long value is pseudorandomly generated and returned. The method nextLong is implemented by class Random as if by: Random uses a seed with only 48 bits, this algorithm will not return all possible long values.", "history": "Added in API level 1", "FullName": "public long nextLong ()"}, "ints(int,int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["int", "int: the origin (inclusive) of each random value"], ["int", "int: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive). A pseudorandom int value is generated as if it's the result of calling the following method with the origin and bound:", "history": "Added in API level 24", "FullName": "public IntStream ints (int randomNumberOrigin, int randomNumberBound)"}, "longs(long, long)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the origin (inclusive) of each random value"], ["long", "long: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive). A pseudorandom long value is generated as if it's the result of calling the following method with the origin and bound:", "history": "added in API level 24", "FullName": "public LongStream longs (long randomNumberOrigin, long randomNumberBound)"}, "doubles(double, double)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["double", "double: the origin (inclusive) of each random value"], ["double", "double: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive). A pseudorandom double value is generated as if it's the result of calling the following method with the origin and bound:", "history": "added in API level 24", "FullName": "public DoubleStream doubles (double randomNumberOrigin, double randomNumberBound)"}, "doubles(long,double,double)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["double", "double: the origin (inclusive) of each random value"], ["double", "double: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero"], ["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive). A pseudorandom double value is generated as if it's the result of calling the following method with the origin and bound:", "history": "Added in API level 24", "FullName": "public DoubleStream doubles (long streamSize, double randomNumberOrigin, double randomNumberBound)"}, "nextInt()": {"Returns": [["int", "the next pseudorandom, uniformly distributed int value from this random number generator's sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the next pseudorandom, uniformly distributed int value from this random number generator's sequence. The general contract of nextInt is that one int value is pseudorandomly generated and returned. All 2int values are produced with (approximately) equal probability. The method nextInt is implemented by class Random as if by:", "history": "Added in API level 1", "FullName": "public int nextInt ()"}, "longs(long,long)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the origin (inclusive) of each random value"], ["long", "long: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive). A pseudorandom long value is generated as if it's the result of calling the following method with the origin and bound:", "history": "Added in API level 24", "FullName": "public LongStream longs (long randomNumberOrigin, long randomNumberBound)"}, "ints(long)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values"]], "Parameters": [["long", "long: the number of values to generate"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom int values. A pseudorandom int value is generated as if it's the result of calling the method @B_java#util#Random#nextInt_E@.", "history": "Added in API level 24", "FullName": "public IntStream ints (long streamSize)"}, "next(int)": {"Returns": [["int", "the next pseudorandom value from this random number generator's sequence"]], "Parameters": [["int", "int: random bits"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates the next pseudorandom number. Subclasses should override this, as this is used by all other methods. The general contract of next is that it returns an int value and if the argument bits is between 1 and 32 (inclusive), then that many low-order bits of the returned value will be (approximately) independently chosen bit values, each of which is (approximately) equally likely to be 0 or 1. The method next is implemented by class Random by atomically updating the seed to", "history": "Added in API level 1", "FullName": "protected int next (int bits)"}, "nextBoolean()": {"Returns": [["boolean", "the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence. The general contract of nextBoolean is that one boolean value is pseudorandomly generated and returned. The values true and false are produced with (approximately) equal probability. The method nextBoolean is implemented by class Random as if by:", "history": "Added in API level 1", "FullName": "public boolean nextBoolean ()"}, "setSeed(long)": {"Returns": [], "Parameters": [["long", "long: the initial seed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the seed of this random number generator using a single long seed. The general contract of setSeed is that it alters the state of this random number generator object so as to be in exactly the same state as if it had just been created with the argument seed as a seed. The method setSeed is implemented by class Random by atomically updating the seed to haveNextNextGaussian flag used by @B_java#util#Random#nextGaussian_E@. The implementation of setSeed by class Random happens to use only 48 bits of the given seed. In general, however, an overriding method may use all 64 bits of the long argument as a seed value.", "history": "Added in API level 1", "FullName": "public void setSeed (long seed)"}, "doubles(long, double, double)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["double", "double: the origin (inclusive) of each random value"], ["double", "double: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero"], ["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive). A pseudorandom double value is generated as if it's the result of calling the following method with the origin and bound:", "history": "added in API level 24", "FullName": "public DoubleStream doubles (long streamSize, double randomNumberOrigin, double randomNumberBound)"}, "nextInt(int)": {"Returns": [["int", "the next pseudorandom, uniformly distributed int value between zero (inclusive) and bound (exclusive) from this random number generator's sequence"]], "Parameters": [["int", "int: the upper bound (exclusive). Must be positive."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if bound is not positive"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence. The general contract of nextInt is that one int value in the specified range is pseudorandomly generated and returned. All bound possible int values are produced with (approximately) equal probability. The method nextInt(int bound) is implemented by class Random as if by: The hedge \"approximately\" is used in the foregoing description only because the next method is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm shown would choose int values from the stated range with perfect uniformity. The algorithm is slightly tricky. It rejects values that would result in an uneven distribution (due to the fact that 2^31 is not divisible by n). The probability of a value being rejected depends on n. The worst case is n=2^30+1, for which the probability of a reject is 1/2, and the expected number of iterations before the loop terminates is 2. The algorithm treats the case where n is a power of two specially: it returns the correct number of high-order bits from the underlying pseudo-random number generator. In the absence of special treatment, the correct number of", "history": "Added in API level 1", "FullName": "public int nextInt (int bound)"}, "doubles(double,double)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["double", "double: the origin (inclusive) of each random value"], ["double", "double: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive). A pseudorandom double value is generated as if it's the result of calling the following method with the origin and bound:", "history": "Added in API level 24", "FullName": "public DoubleStream doubles (double randomNumberOrigin, double randomNumberBound)"}, "nextGaussian()": {"Returns": [["double", "the next pseudorandom, Gaussian (\"normally\") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the next pseudorandom, Gaussian (\"normally\") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence. The general contract of nextGaussian is that one double value, chosen from (approximately) the usual normal distribution with mean 0.0 and standard deviation 1.0, is pseudorandomly generated and returned. The method nextGaussian is implemented by class Random as if by a threadsafe version of the following: StrictMath.log and one call to StrictMath.sqrt.", "history": "Added in API level 1", "FullName": "public double nextGaussian ()"}, "ints(long,int,int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["int", "int: the origin (inclusive) of each random value"], ["int", "int: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero, or randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive). A pseudorandom int value is generated as if it's the result of calling the following method with the origin and bound:", "history": "Added in API level 24", "FullName": "public IntStream ints (long streamSize, int randomNumberOrigin, int randomNumberBound)"}, "longs(long,long,long)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["long", "long: the origin (inclusive) of each random value"], ["long", "long: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero, or randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive). A pseudorandom long value is generated as if it's the result of calling the following method with the origin and bound:", "history": "Added in API level 24", "FullName": "public LongStream longs (long streamSize, long randomNumberOrigin, long randomNumberBound)"}, "Random(long)": {"Returns": [], "Parameters": [["long", "long: the initial seed"]], "Throws": [], "SeeAlso": ["@B_java#util#Random#setSeed_E@"], "Permissions": [], "Description": "Creates a new random number generator using a single long seed. The seed is the initial value of the internal state of the pseudorandom number generator which is maintained by method @B_java#util#Random#next_E@. The invocation new Random(seed) is equivalent to:", "history": "Added in API level 1", "FullName": "public Random (long seed)"}}, "Inheritance": [], "ClassName": "java.util.Random", "ClassDesc": "An instance of this class is used to generate a stream of pseudorandom numbers. The class uses a 48-bit seed, which is modified using a linear congruential formula. (See Donald Knuth, If two instances of Random are created with the same seed, and the same sequence of method calls is made for each, they will generate and return identical sequences of numbers. In order to guarantee this property, particular algorithms are specified for the class Random. Java implementations must use all the algorithms shown here for the class Random, for the sake of absolute portability of Java code. However, subclasses of class Random are permitted to use other algorithms, so long as they adhere to the general contracts for all the methods. The algorithms implemented by class Random use a protected utility method that on each invocation can supply up to 32 pseudorandomly generated bits. Many applications will find the method @B_java#lang#Math#random_E@ simpler to use. Instances of java.util.Random are threadsafe. However, the concurrent use of the same java.util.Random instance across threads may encounter contention and consequent poor performance. Consider instead using @B_java#util#concurrent#ThreadLocalRandom_E@ in multithreaded designs. Instances of java.util.Random are not cryptographically secure. Consider instead using @B_java#security#SecureRandom_E@ to get a cryptographically secure pseudo-random number generator for use by security-sensitive applications."}