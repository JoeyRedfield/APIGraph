{"Functions": {"newEntityIterator(android.database.Cursor)": {"Returns": [["@B_android#content#EntityIterator_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "TODO: javadoc", "history": "Added in API level 8", "FullName": "public static EntityIterator newEntityIterator (Cursor cursor)"}, "getContactLookupUri(android.content.ContentResolver,android.net.Uri)": {"Returns": [["@B_android#net#Uri_E@", "no returns description in source"]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver no parameter comment"], ["@B_android#net#Uri_E@", "Uri no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Build a @B_android#provider#ContactsContract#Contacts#CONTENT_LOOKUP_URI_E@ style @B_android#net#Uri_E@ for the parent @B_android#provider#ContactsContract#Contacts_E@ entry of the given @B_android#provider#ContactsContract#RawContacts_E@ entry.", "history": "Added in API level 5", "FullName": "public static Uri getContactLookupUri (ContentResolver resolver, Uri rawContactUri)"}}, "Inheritance": [], "ClassName": "android.provider.ContactsContract.RawContacts", "ClassDesc": "Constants for the raw contacts table, which contains one row of contact information for each person in each synced account. Sync adapters and contact management apps are the primary consumers of this API. As soon as a raw contact is inserted or whenever its constituent data changes, the provider will check if the raw contact matches other existing raw contacts and if so will aggregate it with those. The aggregation is reflected in the @B_android#provider#ContactsContract#RawContacts_E@ table by the change of the @B_android#provider#ContactsContract#RawContactsColumns#CONTACT_ID_E@ field, which is the reference to the aggregate contact. Changes to the structured name, organization, phone number, email address, or nickname trigger a re-aggregation. See also @B_android#provider#ContactsContract#AggregationExceptions_E@ for a mechanism to control aggregation programmatically."}