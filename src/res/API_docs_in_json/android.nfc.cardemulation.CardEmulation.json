{"Functions": {"unsetPreferredService(android.app.Activity)": {"Returns": [["boolean", "true when successful"]], "Parameters": [["@B_android#app#Activity_E@", "Activity: The activity which the service was registered for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unsets the preferred service for the specified Activity. Note that the specified Activity must still be in resumed state at the time of this call. A good place to call this method is in your @B_android#app#Activity#onPause_E@ implementation.", "history": "Added in API level 21", "FullName": "public boolean unsetPreferredService (Activity activity)"}, "isDefaultServiceForCategory(android.content.ComponentName,java.lang.String)": {"Returns": [["boolean", "whether service is currently the default service for the category. Requires the Manifest.permission.NFC permission."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The ComponentName of the service"], ["@B_java#lang#String_E@", "String: The category"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Allows an application to query whether a service is currently the default service to handle a card emulation category. Note that if @B_android#nfc#cardemulation#CardEmulation#getSelectionModeForCategory_E@ returns @B_android#nfc#cardemulation#CardEmulation#SELECTION_MODE_ALWAYS_ASK_E@ or @B_android#nfc#cardemulation#CardEmulation#SELECTION_MODE_ASK_IF_CONFLICT_E@, this method will always return false. That is because in these selection modes a default can't be set at the category level. For categories where the selection mode is @B_android#nfc#cardemulation#CardEmulation#SELECTION_MODE_ALWAYS_ASK_E@ or @B_android#nfc#cardemulation#CardEmulation#SELECTION_MODE_ASK_IF_CONFLICT_E@, use @B_android#nfc#cardemulation#CardEmulation#isDefaultServiceForAid_E@ to determine whether a service is the default for a specific AID.", "history": "Added in API level 19", "FullName": "public boolean isDefaultServiceForCategory (ComponentName service, String category)"}, "setPreferredService(android.app.Activity,android.content.ComponentName)": {"Returns": [["boolean", "whether the registration was successful"]], "Parameters": [["@B_android#app#Activity_E@", "Activity: The activity which prefers this service to be invoked"], ["@B_android#content#ComponentName_E@", "ComponentName: The service to be preferred while this activity is in the foreground"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allows a foreground application to specify which card emulation service should be preferred while a specific Activity is in the foreground. The specified Activity must currently be in resumed state. A good paradigm is to call this method in your @B_android#app#Activity#onResume_E@, and to call @B_android#nfc#cardemulation#CardEmulation#unsetPreferredService_E@ in your @B_android#app#Activity#onPause_E@. This method call will fail in two specific scenarios: If the service registers one or more AIDs in the @B_android#nfc#cardemulation#CardEmulation#CATEGORY_PAYMENT_E@ category, but the user has indicated that foreground apps are not allowed to override the default payment service. If the service registers one or more AIDs in the @B_android#nfc#cardemulation#CardEmulation#CATEGORY_OTHER_E@ category that are also handled by the default payment service, and the user has indicated that foreground apps are not allowed to override the default payment service. Use @B_android#nfc#cardemulation#CardEmulation#categoryAllowsForegroundPreference_E@ to determine whether foreground apps can override the default payment service. Note that this preference is not persisted by the OS, and hence must be called every time the Activity is resumed.", "history": "Added in API level 21", "FullName": "public boolean setPreferredService (Activity activity, ComponentName service)"}, "registerAidsForService(android.content.ComponentName,java.lang.String,java.util.List<java.lang.String>)": {"Returns": [["boolean", "whether the registration was successful."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The component name of the service"], ["@B_java#lang#String_E@", "String: The category of AIDs to be registered"], ["@B_java#util#List_E@", "List: A list containing the AIDs to be registered"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a list of AIDs for a specific category for the specified service. If a list of AIDs for that category was previously registered for this service (either statically through the manifest, or dynamically by using this API), that list of AIDs will be replaced with this one. Note that you can only register AIDs for a service that is running under the same UID as the caller of this API. Typically this means you need to call this from the same package as the service itself, though UIDs can also be shared between packages using shared UIDs.", "history": "Added in API level 21", "FullName": "public boolean registerAidsForService (ComponentName service, String category, List<String> aids)"}, "isDefaultServiceForAid(android.content.ComponentName,java.lang.String)": {"Returns": [["boolean", "whether the service is the default handler for the specified AID Requires the Manifest.permission.NFC permission."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The ComponentName of the service"], ["@B_java#lang#String_E@", "String: The ISO7816-4 Application ID"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Allows an application to query whether a service is currently the default handler for a specified ISO7816-4 Application ID.", "history": "Added in API level 19", "FullName": "public boolean isDefaultServiceForAid (ComponentName service, String aid)"}, "setOffHostForService(android.content.ComponentName,java.lang.String)": {"Returns": [["boolean", "whether the registration was successful. This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The component name of the service This value must never be null."], ["@B_java#lang#String_E@", "String: Secure Element to register the AID to. Only accept strings with prefix SIM or prefix eSE. Ref: GSMA TS.26 - NFC Handset Requirements TS26_NFC_REQ_069: For UICC, Secure Element Name SHALL be SIM[smartcard slot] (e.g. SIM/SIM1, SIM2\u2026 SIMn). TS26_NFC_REQ_070: For embedded SE, Secure Element Name SHALL be eSE[number] (e.g. eSE/eSE1, eSE2, etc.). This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Sets the off-host Secure Element for the given service. If off-host SE was initially set (either statically through the manifest, or dynamically by using this API), it will be replaced with this one. All AIDs registered by this service will be re-routed to this Secure Element if successful. AIDs that was statically assigned using manifest will re-route to off-host SE that stated in manifest after NFC toggle. Note that you can only set off-host SE for a service that is running under the same UID as the caller of this API. Typically this means you need to call this from the same package as the service itself, though UIDs can also be shared between packages using shared UIDs. Registeration will be successful only if the Secure Element exists on the device. Requires @B_android#Manifest#permission#NFC_E@", "history": "Added in API level 29", "FullName": "public boolean setOffHostForService (ComponentName service, String offHostSecureElement)"}, "unsetOffHostForService(android.content.ComponentName)": {"Returns": [["boolean", "whether the registration was successful. This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The component name of the service This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Unsets the off-host Secure Element for the given service. Note that this will only remove Secure Element that was dynamically set using the @B_android#nfc#cardemulation#CardEmulation#setOffHostForService_E@ and resets it to a value that was statically assigned using manifest. Note that you can only unset off-host SE for a service that is running under the same UID as the caller of this API. Typically this means you need to call this from the same package as the service itself, though UIDs can also be shared between packages using shared UIDs. Requires @B_android#Manifest#permission#NFC_E@", "history": "Added in API level 29", "FullName": "public boolean unsetOffHostForService (ComponentName service)"}, "getSelectionModeForCategory(java.lang.String)": {"Returns": [["int", "the selection mode for the passed in category"]], "Parameters": [["@B_java#lang#String_E@", "String: The category, for example @B_android#nfc#cardemulation#CardEmulation#CATEGORY_PAYMENT_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the service selection mode for the passed in category. Valid return values are: @B_android#nfc#cardemulation#CardEmulation#SELECTION_MODE_PREFER_DEFAULT_E@ the user has requested a default service for this category, which will be preferred. @B_android#nfc#cardemulation#CardEmulation#SELECTION_MODE_ALWAYS_ASK_E@ the user has requested to be asked every time what service he would like to use in this category. @B_android#nfc#cardemulation#CardEmulation#SELECTION_MODE_ASK_IF_CONFLICT_E@ the user will only be asked to pick a service if there is a conflict.", "history": "Added in API level 19", "FullName": "public int getSelectionModeForCategory (String category)"}, "removeAidsForService(android.content.ComponentName,java.lang.String)": {"Returns": [["boolean", "whether the group was successfully removed."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The component name of the service"], ["@B_java#lang#String_E@", "String: The category of the AIDs to be removed, e.g. @B_android#nfc#cardemulation#CardEmulation#CATEGORY_PAYMENT_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a previously registered list of AIDs for the specified category for the service provided. Note that this will only remove AIDs that were dynamically registered using the @B_android#nfc#cardemulation#CardEmulation#registerAidsForService_E@ method. It will *not* remove AIDs that were statically registered in the manifest. If dynamically registered AIDs are removed using this method, and a statically registered AID group for the same category exists in the manifest, the static AID group will become active again.", "history": "Added in API level 21", "FullName": "public boolean removeAidsForService (ComponentName service, String category)"}, "categoryAllowsForegroundPreference(java.lang.String)": {"Returns": [["boolean", "whether AIDs in the category can be handled by a service specified by the foreground app."]], "Parameters": [["@B_java#lang#String_E@", "String: The category, e.g. @B_android#nfc#cardemulation#CardEmulation#CATEGORY_PAYMENT_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the user has allowed AIDs registered in the specified category to be handled by a service that is preferred by the foreground application, instead of by a pre-configured default. Foreground applications can set such preferences using the @B_android#nfc#cardemulation#CardEmulation#setPreferredService_E@ method.", "history": "Added in API level 21", "FullName": "public boolean categoryAllowsForegroundPreference (String category)"}, "supportsAidPrefixRegistration()": {"Returns": [["boolean", "whether AID prefix registering is supported on this device."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Some devices may allow an application to register all AIDs that starts with a certain prefix, e.g. \"A000000004*\" to register all MasterCard AIDs. Use this method to determine whether this device supports registering AID prefixes.", "history": "Added in API level 21", "FullName": "public boolean supportsAidPrefixRegistration ()"}, "getInstance(android.nfc.NfcAdapter)": {"Returns": [["@B_android#nfc#cardemulation#CardEmulation_E@", "no returns description in source"]], "Parameters": [["@B_android#nfc#NfcAdapter_E@", "NfcAdapter: A reference to an NfcAdapter object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper to get an instance of this class.", "history": "Added in API level 19", "FullName": "public static CardEmulation getInstance (NfcAdapter adapter)"}, "getAidsForService(android.content.ComponentName,java.lang.String)": {"Returns": [["@B_java#util#List_E@", "The list of AIDs registered for this category, or null if it couldn't be found."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The component name of the service"], ["@B_java#lang#String_E@", "String: The category for which the AIDs were registered, e.g. @B_android#nfc#cardemulation#CardEmulation#CATEGORY_PAYMENT_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the currently registered AIDs for the specified category for a service. Note that this will only return AIDs that were dynamically registered using @B_android#nfc#cardemulation#CardEmulation#registerAidsForService_E@ method. It will *not* return AIDs that were statically registered in the manifest.", "history": "Added in API level 21", "FullName": "public List<String> getAidsForService (ComponentName service, String category)"}}, "Inheritance": [], "ClassName": "android.nfc.cardemulation.CardEmulation", "ClassDesc": "This class can be used to query the state of NFC card emulation services. For a general introduction into NFC card emulation, please read the Use of this class requires the @B_android#content#pm#PackageManager#FEATURE_NFC_HOST_CARD_EMULATION_E@ to be present on the device."}