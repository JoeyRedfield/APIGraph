{"Functions": {"cancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#VIBRATE_E@"], "Description": "Turn the vibrator off. Requires @B_android#Manifest#permission#VIBRATE_E@", "history": "Added in API level 1", "FullName": "public abstract void cancel ()"}, "vibrate(long)": {"Returns": [], "Parameters": [["long", "long: The number of milliseconds to vibrate."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#VIBRATE_E@"], "Description": "Use @B_android#os#Vibrator#vibrate_E@ instead. Vibrate constantly for the specified period of time. Requires @B_android#Manifest#permission#VIBRATE_E@", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public void vibrate (long milliseconds)"}, "vibrate(android.os.VibrationEffect)": {"Returns": [], "Parameters": [["@B_android#os#VibrationEffect_E@", "VibrationEffect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#VIBRATE_E@"], "Description": "Requires @B_android#Manifest#permission#VIBRATE_E@", "history": "Added in API level 26", "FullName": "public void vibrate (VibrationEffect vibe)"}, "vibrate(long[],int)": {"Returns": [], "Parameters": [["long[]", "long: an array of longs of times for which to turn the vibrator on or off."], ["int", "int: the index into pattern at which to repeat, or -1 if you don't want to repeat."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#VIBRATE_E@"], "Description": "Use @B_android#os#Vibrator#vibrate_E@ instead. Vibrate with a given pattern. Pass in an array of ints that are the durations for which to turn on or off the vibrator in milliseconds. The first value indicates the number of milliseconds to wait before turning the vibrator on. The next value indicates the number of milliseconds for which to keep the vibrator on before turning it off. Subsequent values alternate between durations in milliseconds to turn the vibrator off or to turn the vibrator on. To cause the pattern to repeat, pass the index into the pattern array at which to start the repeat, or -1 to disable repeating. Requires @B_android#Manifest#permission#VIBRATE_E@", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public void vibrate (long[] pattern, int repeat)"}, "vibrate(long,android.media.AudioAttributes)": {"Returns": [], "Parameters": [["long", "long: The number of milliseconds to vibrate."], ["@B_android#media#AudioAttributes_E@", "AudioAttributes: @B_android#media#AudioAttributes_E@ corresponding to the vibration. For example, specify @B_android#media#AudioAttributes#USAGE_ALARM_E@ for alarm vibrations or @B_android#media#AudioAttributes#USAGE_NOTIFICATION_RINGTONE_E@ for vibrations associated with incoming calls."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#VIBRATE_E@"], "Description": "Use @B_android#os#Vibrator#vibrate_E@ instead. Vibrate constantly for the specified period of time. Requires @B_android#Manifest#permission#VIBRATE_E@", "history": "Added in API level 21 Deprecated in API level 26", "FullName": "public void vibrate (long milliseconds, AudioAttributes attributes)"}, "hasVibrator()": {"Returns": [["boolean", "True if the hardware has a vibrator, else false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether the hardware has a vibrator.", "history": "Added in API level 11", "FullName": "public abstract boolean hasVibrator ()"}, "vibrate(android.os.VibrationEffect,android.media.AudioAttributes)": {"Returns": [], "Parameters": [["@B_android#os#VibrationEffect_E@", "VibrationEffect no parameter comment"], ["@B_android#media#AudioAttributes_E@", "AudioAttributes no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#VIBRATE_E@"], "Description": "Requires @B_android#Manifest#permission#VIBRATE_E@", "history": "Added in API level 26", "FullName": "public void vibrate (VibrationEffect vibe, AudioAttributes attributes)"}, "vibrate(long[],int,android.media.AudioAttributes)": {"Returns": [], "Parameters": [["long[]", "long: an array of longs of times for which to turn the vibrator on or off."], ["int", "int: the index into pattern at which to repeat, or -1 if you don't want to repeat."], ["@B_android#media#AudioAttributes_E@", "AudioAttributes: @B_android#media#AudioAttributes_E@ corresponding to the vibration. For example, specify @B_android#media#AudioAttributes#USAGE_ALARM_E@ for alarm vibrations or @B_android#media#AudioAttributes#USAGE_NOTIFICATION_RINGTONE_E@ for vibrations associated with incoming calls."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#VIBRATE_E@"], "Description": "Use @B_android#os#Vibrator#vibrate_E@ instead. Vibrate with a given pattern. Pass in an array of ints that are the durations for which to turn on or off the vibrator in milliseconds. The first value indicates the number of milliseconds to wait before turning the vibrator on. The next value indicates the number of milliseconds for which to keep the vibrator on before turning it off. Subsequent values alternate between durations in milliseconds to turn the vibrator off or to turn the vibrator on. To cause the pattern to repeat, pass the index into the pattern array at which to start the repeat, or -1 to disable repeating. Requires @B_android#Manifest#permission#VIBRATE_E@", "history": "Added in API level 21 Deprecated in API level 26", "FullName": "public void vibrate (long[] pattern, int repeat, AudioAttributes attributes)"}, "vibrate(long[], int)": {"Returns": [], "Parameters": [["long[]", "long: an array of longs of times for which to turn the vibrator on or off."], ["int", "int: the index into pattern at which to repeat, or -1 if you don't want to repeat."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#VIBRATE_E@"], "Description": "Use @B_android#os#Vibrator#vibrate_E@ instead. Vibrate with a given pattern. Pass in an array of ints that are the durations for which to turn on or off the vibrator in milliseconds. The first value indicates the number of milliseconds to wait before turning the vibrator on. The next value indicates the number of milliseconds for which to keep the vibrator on before turning it off. Subsequent values alternate between durations in milliseconds to turn the vibrator off or to turn the vibrator on. To cause the pattern to repeat, pass the index into the pattern array at which to start the repeat, or -1 to disable repeating. Requires the @B_android#Manifest#permission#VIBRATE_E@ permission.", "history": "added in API level 1", "FullName": "public void vibrate (long[] pattern, int repeat)"}, "vibrate(long, android.media.AudioAttributes)": {"Returns": [], "Parameters": [["long", "long: The number of milliseconds to vibrate."], ["@B_android#media#AudioAttributes_E@", "AudioAttributes: @B_android#media#AudioAttributes_E@ corresponding to the vibration. For example, specify @B_android#media#AudioAttributes#USAGE_ALARM_E@ for alarm vibrations or @B_android#media#AudioAttributes#USAGE_NOTIFICATION_RINGTONE_E@ for vibrations associated with incoming calls."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#VIBRATE_E@"], "Description": "Use @B_android#os#Vibrator#vibrate_E@ instead. Vibrate constantly for the specified period of time.Requires the @B_android#Manifest#permission#VIBRATE_E@ permission.", "history": "added in API level 21", "FullName": "public void vibrate (long milliseconds, AudioAttributes attributes)"}, "hasAmplitudeControl()": {"Returns": [["boolean", "True if the hardware can control the amplitude of the vibrations, otherwise false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether the vibrator has amplitude control.", "history": "Added in API level 26", "FullName": "public abstract boolean hasAmplitudeControl ()"}}, "Inheritance": [], "ClassName": "android.os.Vibrator", "ClassDesc": "Class that operates the vibrator on the device. If your process exits, any vibration you started will stop."}