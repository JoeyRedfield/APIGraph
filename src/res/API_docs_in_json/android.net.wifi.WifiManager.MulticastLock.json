{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 4", "FullName": "public String toString ()"}, "setReferenceCounted(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if this MulticastLock should keep a reference count"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls whether this is a reference-counted or non-reference- counted MulticastLock. Reference-counted MulticastLocks keep track of the number of calls to @B_android#net#wifi#WifiManager#MulticastLock#acquire_E@ and @B_android#net#wifi#WifiManager#MulticastLock#release_E@, and only stop the reception of multicast packets when every call to @B_android#net#wifi#WifiManager#MulticastLock#acquire_E@ has been balanced with a call to @B_android#net#wifi#WifiManager#MulticastLock#release_E@. Non-reference- counted MulticastLocks allow the reception of multicast packets whenever @B_android#net#wifi#WifiManager#MulticastLock#acquire_E@ is called and stop accepting multicast packets whenever @B_android#net#wifi#WifiManager#MulticastLock#release_E@ is called.", "history": "Added in API level 4", "FullName": "public void setReferenceCounted (boolean refCounted)"}, "isHeld()": {"Returns": [["boolean", "true if this MulticastLock is held, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether this MulticastLock is currently held.", "history": "Added in API level 4", "FullName": "public boolean isHeld ()"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unlocks Wifi Multicast, restoring the filter of packets not addressed specifically to this device and saving power. If this MulticastLock is reference-counted, each call to release will decrement the reference count, and the multicast packets will only stop being received when the reference count reaches zero. If the reference count goes below zero (that is, if release is called a greater number of times than @B_android#net#wifi#WifiManager#MulticastLock#acquire_E@), an exception is thrown. If this MulticastLock is not reference-counted, the first call to release (after the radio was multicast locked using @B_android#net#wifi#WifiManager#MulticastLock#acquire_E@) will unlock the multicast, and subsequent calls will be ignored. Note that if any other Wifi Multicast Locks are still outstanding this release call will not have an immediate effect. Only when all applications have released all their Multicast Locks will the Multicast filter be turned back on. Also note that when an app exits or crashes all of its Multicast Locks will be automatically released.", "history": "Added in API level 4", "FullName": "public void release ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 4", "FullName": "protected void finalize ()"}, "acquire()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Locks Wifi Multicast on until @B_android#net#wifi#WifiManager#MulticastLock#release_E@ is called. If this MulticastLock is reference-counted each call to acquire will increment the reference count, and the wifi interface will receive multicast packets as long as the reference count is above zero. If this MulticastLock is not reference-counted, the first call to acquire will turn on the multicast packets, but subsequent calls will be ignored. Only one call to @B_android#net#wifi#WifiManager#MulticastLock#release_E@ will be required, regardless of the number of times that acquire is called. Note that other applications may also lock Wifi Multicast on. Only they can relinquish their lock. Also note that applications cannot leave Multicast locked on. When an app exits or crashes, any Multicast locks will be released.", "history": "Added in API level 4", "FullName": "public void acquire ()"}}, "Inheritance": [], "ClassName": "android.net.wifi.WifiManager.MulticastLock", "ClassDesc": "Allows an application to receive Wifi Multicast packets. Normally the Wifi stack filters out packets not explicitly addressed to this device. Acquring a MulticastLock will cause the stack to receive packets addressed to multicast addresses. Processing these extra packets can cause a noticeable battery drain and should be disabled when not needed."}