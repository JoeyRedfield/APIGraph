{"Functions": {"getPageContentRect()": {"Returns": [["@B_android#graphics#Rect_E@", "The content rectangle. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the content rectangle. This is the area of the page that contains printed data and is relative to the page top left.", "history": "Added in API level 19", "FullName": "public Rect getPageContentRect ()"}, "PrintedPdfDocument(android.content.Context,android.print.PrintAttributes)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: Context instance for accessing resources. This value must never be null."], ["@B_android#print#PrintAttributes_E@", "PrintAttributes: The print attributes. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new document. @B_android#graphics#pdf#PdfDocument#close_E@.", "history": "Added in API level 19", "FullName": "public PrintedPdfDocument (Context context, PrintAttributes attributes)"}, "getPageHeight()": {"Returns": [["int", "The page height in PostScript points (1/72th of an inch). Value is 0 or greater"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the page height.", "history": "Added in API level 19", "FullName": "public int getPageHeight ()"}, "startPage(int)": {"Returns": [["@B_android#graphics#pdf#PdfDocument#Page_E@", "A blank page. This value will never be null."]], "Parameters": [["int", "int: The page number. Must be a non negative. Value is 0 or greater"]], "Throws": [], "SeeAlso": ["@B_android#graphics#pdf#PdfDocument#finishPage_E@"], "Permissions": [], "Description": "Starts a new page. The page is created using width, height and content rectangle computed from the print attributes passed in the constructor and the given page number to create an appropriate @B_android#graphics#pdf#PdfDocument#PageInfo_E@. After the page is created you can draw arbitrary content on the page's canvas which you can get by calling @B_android#graphics#pdf#PdfDocument#Page#getCanvas_E@. After you are done drawing the content you should finish the page by calling @B_android#graphics#pdf#PdfDocument#finishPage_E@. After the page is finished you should no longer access the page or its canvas. @B_android#graphics#pdf#PdfDocument#close_E@. Also do not call this method if the last page returned by this method is not finished by calling @B_android#graphics#pdf#PdfDocument#finishPage_E@.", "history": "Added in API level 19", "FullName": "public PdfDocument.Page startPage (int pageNumber)"}, "getPageWidth()": {"Returns": [["int", "The page width in PostScript points (1/72th of an inch). Value is 0 or greater"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the page width.", "history": "Added in API level 19", "FullName": "public int getPageWidth ()"}}, "Inheritance": ["@B_android#graphics#pdf#PdfDocument_E@"], "ClassName": "android.print.pdf.PrintedPdfDocument", "ClassDesc": "This class is a helper for creating a PDF file for given print attributes. It is useful for implementing printing via the native Android graphics APIs. This class computes the page width, page height, and content rectangle from the provided print attributes and these precomputed values can be accessed via @B_android#print#pdf#PrintedPdfDocument#getPageWidth_E@, @B_android#print#pdf#PrintedPdfDocument#getPageHeight_E@, and @B_android#print#pdf#PrintedPdfDocument#getPageContentRect_E@, respectively. The @B_android#print#pdf#PrintedPdfDocument#startPage_E@ methods creates pages whose @B_android#graphics#pdf#PdfDocument#PageInfo_E@ is initialized with the precomputed values for width, height, and content rectangle. A typical use of the APIs looks like this:"}