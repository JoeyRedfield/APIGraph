{"Functions": {"setSubject(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a distinguished name in RFC 2253 format (or null)"]], "Throws": [["@B_java#io#IOException_E@", "if a parsing error occurs (incorrect form for DN)"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the subject criterion. The specified distinguished name must match the subject distinguished name in the X509Certificate. If null, any subject distinguished name will do. If subjectDN is not null, it should contain a distinguished name, in RFC 2253 format.", "history": "Added in API level 1", "FullName": "public void setSubject (String subjectDN)"}, "getIssuerAsBytes()": {"Returns": [["byte[]", "a byte array containing the required issuer distinguished name in ASN.1 DER format (or null)"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an encoding error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the issuer criterion as a byte array. This distinguished name must match the issuer distinguished name in the X509Certificate. If null, the issuer criterion is disabled and any issuer distinguished name will do. If the value returned is not null, it is a byte array containing a single DER encoded distinguished name, as defined in X.501. The ASN.1 notation for this structure is supplied in the documentation for @B_java#security#cert#X509CertSelector#setIssuer_E@. Note that the byte array returned is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public byte[] getIssuerAsBytes ()"}, "setPathToNames(java.util.Collection<java.util.List<?>>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: a Collection with one entry per name (or null)"]], "Throws": [["@B_java#io#IOException_E@", "if a parsing error occurs"]], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getPathToNames_E@"], "Permissions": [], "Description": "Sets the pathToNames criterion. The X509Certificate must not include name constraints that would prohibit building a path to the specified names. This method allows the caller to specify, with a single method call, the complete set of names which the X509Certificates's name constraints must permit. The specified value replaces the previous value for the pathToNames criterion. This constraint is useful when building a certification path forward (from the target toward the trust anchor. If a partial path has been built, any candidate certificate must not include name constraints that would prohibit building a path to any of the names in the partial path. The names parameter (if not null) is a Collection with one entry for each name to be included in the pathToNames criterion. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. If null is supplied as the value for this argument, no pathToNames check will be performed. Each name in the Collection may be specified either as a String or as an ASN.1 encoded byte array. For more details about the formats used, see @B_java#security#cert#X509CertSelector#addPathToName_E@ and @B_java#security#cert#X509CertSelector#addPathToName_E@. @B_java#security#cert#X509CertSelector#addPathToName_E@ for more information. Note that the names parameter can contain duplicate names (same name and name type), but they may be removed from the Collection of names returned by the @B_java#security#cert#X509CertSelector#getPathToNames_E@ method. Note that a deep copy is performed on the Collection to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setPathToNames (Collection<List<?>> names)"}, "setSubjectPublicKey(java.security.PublicKey)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the subject public key to check for (or null)"]], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getSubjectPublicKey_E@"], "Permissions": [], "Description": "Sets the subjectPublicKey criterion. The X509Certificate must contain the specified subject public key. If null, no subjectPublicKey check will be done.", "history": "Added in API level 1", "FullName": "public void setSubjectPublicKey (PublicKey key)"}, "setPolicy(java.util.Set<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#util#Set_E@", "Set: a Set of certificate policy OIDs in string format (or null). Each OID is represented by a set of nonnegative integers separated by periods."]], "Throws": [["@B_java#io#IOException_E@", "if a parsing error occurs on the OID such as the first component is not 0, 1 or 2 or the second component is greater than 39."]], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getPolicy_E@"], "Permissions": [], "Description": "Sets the policy constraint. The X509Certificate must include at least one of the specified policies in its certificate policies extension. If certPolicySet is empty, then the X509Certificate must include at least some specified policy in its certificate policies extension. If certPolicySet is null, no policy check will be performed. Note that the Set is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setPolicy (Set<String> certPolicySet)"}, "getCertificateValid()": {"Returns": [["@B_java#util#Date_E@", "the Date to check (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setCertificateValid_E@"], "Permissions": [], "Description": "Returns the certificateValid criterion. The specified date must fall within the certificate validity period for the X509Certificate. If null, no certificateValid check will be done. Note that the Date returned is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public Date getCertificateValid ()"}, "getAuthorityKeyIdentifier()": {"Returns": [["byte[]", "the key identifier (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setAuthorityKeyIdentifier_E@"], "Permissions": [], "Description": "Returns the authorityKeyIdentifier criterion. The X509Certificate must contain a AuthorityKeyIdentifier extension with the specified value. If null, no authorityKeyIdentifier check will be done. Note that the byte array returned is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public byte[] getAuthorityKeyIdentifier ()"}, "setMatchAllSubjectAltNames(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: if true, the flag is enabled; if false, the flag is disabled."]], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getMatchAllSubjectAltNames_E@"], "Permissions": [], "Description": "Enables/disables matching all of the subjectAlternativeNames specified in the @B_java#security#cert#X509CertSelector#setSubjectAlternativeNames_E@ or @B_java#security#cert#X509CertSelector#addSubjectAlternativeName_E@ methods. If enabled, the X509Certificate must contain all of the specified subject alternative names. If disabled, the X509Certificate must contain at least one of the specified subject alternative names. The matchAllNames flag is true by default.", "history": "Added in API level 1", "FullName": "public void setMatchAllSubjectAltNames (boolean matchAllNames)"}, "setKeyUsage(boolean[])": {"Returns": [], "Parameters": [["boolean[]", "boolean: a boolean array in the same format as the boolean array returned by @B_java#security#cert#X509Certificate#getKeyUsage_E@. Or null."]], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getKeyUsage_E@"], "Permissions": [], "Description": "Sets the keyUsage criterion. The X509Certificate must allow the specified keyUsage values. If null, no keyUsage check will be done. Note that an X509Certificate that has no keyUsage extension implicitly allows all keyUsage values. Note that the boolean array supplied here is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setKeyUsage (boolean[] keyUsage)"}, "getSubject()": {"Returns": [["@B_javax#security#auth#x500#X500Principal_E@", "the required subject distinguished name as X500Principal (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the subject criterion as an X500Principal. This distinguished name must match the subject distinguished name in the X509Certificate. If null, the subject criterion is disabled and any subject distinguished name will do.", "history": "Added in API level 1", "FullName": "public X500Principal getSubject ()"}, "setCertificateValid(java.util.Date)": {"Returns": [], "Parameters": [["@B_java#util#Date_E@", "Date: the Date to check (or null)"]], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getCertificateValid_E@"], "Permissions": [], "Description": "Sets the certificateValid criterion. The specified date must fall within the certificate validity period for the X509Certificate. If null, no certificateValid check will be done. Note that the Date supplied here is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setCertificateValid (Date certValid)"}, "addPathToName(int, byte[])": {"Returns": [], "Parameters": [["int", "int: the name type (0-8, as specified in RFC 3280, section 4.2.1.7)"], ["byte[]", "byte: a byte array containing the name in ASN.1 DER encoded form"]], "Throws": [["@B_java#io#IOException_E@", "if a parsing error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adds a name to the pathToNames criterion. The X509Certificate must not include name constraints that would prohibit building a path to the specified name. This method allows the caller to add a name to the set of names which the X509Certificates's name constraints must permit. The specified name is added to any previous value for the pathToNames criterion. If the name is a duplicate, it may be ignored. The name is provided as a byte array. This byte array should contain the DER encoded name, as it would appear in the GeneralName structure defined in RFC 3280 and X.509. The ASN.1 definition of this structure appears in the documentation for @B_java#security#cert#X509CertSelector#addSubjectAlternativeName_E@. Note that the byte array supplied here is cloned to protect against subsequent modifications.", "history": "added in API level 1", "FullName": "public void addPathToName (int type, byte[] name)"}, "getSubjectPublicKeyAlgID()": {"Returns": [["@B_java#lang#String_E@", "the object identifier (OID) of the signature algorithm to check for (or null). An OID is represented by a set of nonnegative integers separated by periods."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setSubjectPublicKeyAlgID_E@"], "Permissions": [], "Description": "Returns the subjectPublicKeyAlgID criterion. The X509Certificate must contain a subject public key with the specified algorithm. If null, no subjectPublicKeyAlgID check will be done.", "history": "Added in API level 1", "FullName": "public String getSubjectPublicKeyAlgID ()"}, "getExtendedKeyUsage()": {"Returns": [["@B_java#util#Set_E@", "an immutable Set of key purpose OIDs in string format (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setExtendedKeyUsage_E@"], "Permissions": [], "Description": "Returns the extendedKeyUsage criterion. The X509Certificate must allow the specified key purposes in its extended key usage extension. If the keyPurposeSet returned is empty or null, no extendedKeyUsage check will be done. Note that an X509Certificate that has no extendedKeyUsage extension implicitly allows all key purposes.", "history": "Added in API level 1", "FullName": "public Set<String> getExtendedKeyUsage ()"}, "setIssuer(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a distinguished name in RFC 2253 format (or null)"]], "Throws": [["@B_java#io#IOException_E@", "if a parsing error occurs (incorrect form for DN)"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the issuer criterion. The specified distinguished name must match the issuer distinguished name in the X509Certificate. If null, any issuer distinguished name will do. If issuerDN is not null, it should contain a distinguished name, in RFC 2253 format.", "history": "Added in API level 1", "FullName": "public void setIssuer (String issuerDN)"}, "getBasicConstraints()": {"Returns": [["int", "the value for the basic constraints constraint"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setBasicConstraints_E@"], "Permissions": [], "Description": "Returns the basic constraints constraint. If the value is greater than or equal to zero, the X509Certificates must include a basicConstraints extension with a pathLen of at least this value. If the value is -2, only end-entity certificates are accepted. If the value is -1, no basicConstraints check is done.", "history": "Added in API level 1", "FullName": "public int getBasicConstraints ()"}, "addSubjectAlternativeName(int,byte[])": {"Returns": [], "Parameters": [["int", "int: the name type (0-8, as listed above)"], ["byte[]", "byte: a byte array containing the name in ASN.1 DER encoded form"]], "Throws": [["@B_java#io#IOException_E@", "if a parsing error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adds a name to the subjectAlternativeNames criterion. The X509Certificate must contain all or at least one of the specified subjectAlternativeNames, depending on the value of the matchAllNames flag (see @B_java#security#cert#X509CertSelector#setMatchAllSubjectAltNames_E@). This method allows the caller to add a name to the set of subject alternative names. The specified name is added to any previous value for the subjectAlternativeNames criterion. If the specified name is a duplicate, it may be ignored. The name is provided as a byte array. This byte array should contain the DER encoded name, as it would appear in the GeneralName structure defined in RFC 3280 and X.509. The encoded byte array should only contain the encoded value of the name, and should not include the tag associated with the name in the GeneralName structure. The ASN.1 definition of this structure appears below. Note that the byte array supplied here is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void addSubjectAlternativeName (int type, byte[] name)"}, "getPolicy()": {"Returns": [["@B_java#util#Set_E@", "an immutable Set of certificate policy OIDs in string format (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setPolicy_E@"], "Permissions": [], "Description": "Returns the policy criterion. The X509Certificate must include at least one of the specified policies in its certificate policies extension. If the Set returned is empty, then the X509Certificate must include at least some specified policy in its certificate policies extension. If the Set returned is null, no policy check will be performed.", "history": "Added in API level 1", "FullName": "public Set<String> getPolicy ()"}, "setSerialNumber(java.math.BigInteger)": {"Returns": [], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: the certificate serial number to match (or null)"]], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getSerialNumber_E@"], "Permissions": [], "Description": "Sets the serialNumber criterion. The specified serial number must match the certificate serial number in the X509Certificate. If null, any certificate serial number will do.", "history": "Added in API level 1", "FullName": "public void setSerialNumber (BigInteger serial)"}, "getCertificate()": {"Returns": [["@B_java#security#cert#X509Certificate_E@", "the X509Certificate to match (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setCertificate_E@"], "Permissions": [], "Description": "Returns the certificateEquals criterion. The specified X509Certificate must be equal to the X509Certificate passed to the match method. If null, this check is not applied.", "history": "Added in API level 1", "FullName": "public X509Certificate getCertificate ()"}, "setExtendedKeyUsage(java.util.Set<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#util#Set_E@", "Set: a Set of key purpose OIDs in string format (or null). Each OID is represented by a set of nonnegative integers separated by periods."]], "Throws": [["@B_java#io#IOException_E@", "if the OID is invalid, such as the first component being not 0, 1 or 2 or the second component being greater than 39."]], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getExtendedKeyUsage_E@"], "Permissions": [], "Description": "Sets the extendedKeyUsage criterion. The X509Certificate must allow the specified key purposes in its extended key usage extension. If keyPurposeSet is empty or null, no extendedKeyUsage check will be done. Note that an X509Certificate that has no extendedKeyUsage extension implicitly allows all key purposes. Note that the Set is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setExtendedKeyUsage (Set<String> keyPurposeSet)"}, "setIssuer(javax.security.auth.x500.X500Principal)": {"Returns": [], "Parameters": [["@B_javax#security#auth#x500#X500Principal_E@", "X500Principal: a distinguished name as X500Principal (or null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the issuer criterion. The specified distinguished name must match the issuer distinguished name in the X509Certificate. If null, any issuer distinguished name will do.", "history": "Added in API level 1", "FullName": "public void setIssuer (X500Principal issuer)"}, "match(java.security.cert.Certificate)": {"Returns": [["boolean", "true if the Certificate should be selected, false otherwise"]], "Parameters": [["@B_java#security#cert#Certificate_E@", "Certificate: the Certificate to be checked"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decides whether a Certificate should be selected.", "history": "Added in API level 1", "FullName": "public boolean match (Certificate cert)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "the copy"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this object.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a String describing the contents of the CertSelector"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a printable representation of the CertSelector.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "addPathToName(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the name type (0-8, as specified in RFC 3280, section 4.2.1.7)"], ["@B_java#lang#String_E@", "String: the name in string form"]], "Throws": [["@B_java#io#IOException_E@", "if a parsing error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adds a name to the pathToNames criterion. The X509Certificate must not include name constraints that would prohibit building a path to the specified name. This method allows the caller to add a name to the set of names which the X509Certificates's name constraints must permit. The specified name is added to any previous value for the pathToNames criterion. If the name is a duplicate, it may be ignored. The name is provided in string format. RFC 822, DNS, and URI names use the well-established string formats for those types (subject to the restrictions included in RFC 3280). IPv4 address names are supplied using dotted quad notation. OID address names are represented as a series of nonnegative integers separated by periods. And directory names (distinguished names) are supplied in RFC 2253 format. No standard string format is defined for otherNames, X.400 names, EDI party names, IPv6 address names, or any other type of names. They should be specified using the @B_java#security#cert#X509CertSelector#addPathToName_E@ method.", "history": "added in API level 1", "FullName": "public void addPathToName (int type, String name)"}, "getSubjectAlternativeNames()": {"Returns": [["@B_java#util#Collection_E@", "a Collection of names (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setSubjectAlternativeNames_E@"], "Permissions": [], "Description": "Returns a copy of the subjectAlternativeNames criterion. The X509Certificate must contain all or at least one of the specified subjectAlternativeNames, depending on the value of the matchAllNames flag (see @B_java#security#cert#X509CertSelector#getMatchAllSubjectAltNames_E@). If the value returned is null, no subjectAlternativeNames check will be performed. If the value returned is not null, it is a Collection with one entry for each name to be included in the subject alternative name criterion. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. Note that the Collection returned may contain duplicate names (same name and name type). Each subject alternative name in the Collection may be specified either as a String or as an ASN.1 encoded byte array. For more details about the formats used, see @B_java#security#cert#X509CertSelector#addSubjectAlternativeName_E@ and @B_java#security#cert#X509CertSelector#addSubjectAlternativeName_E@. Note that a deep copy is performed on the Collection to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public Collection<List<?>> getSubjectAlternativeNames ()"}, "getSubjectAsBytes()": {"Returns": [["byte[]", "a byte array containing the required subject distinguished name in ASN.1 DER format (or null)"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an encoding error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the subject criterion as a byte array. This distinguished name must match the subject distinguished name in the X509Certificate. If null, the subject criterion is disabled and any subject distinguished name will do. If the value returned is not null, it is a byte array containing a single DER encoded distinguished name, as defined in X.501. The ASN.1 notation for this structure is supplied in the documentation for @B_java#security#cert#X509CertSelector#setSubject_E@. Note that the byte array returned is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public byte[] getSubjectAsBytes ()"}, "getKeyUsage()": {"Returns": [["boolean[]", "a boolean array in the same format as the boolean array returned by @B_java#security#cert#X509Certificate#getKeyUsage_E@. Or null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setKeyUsage_E@"], "Permissions": [], "Description": "Returns the keyUsage criterion. The X509Certificate must allow the specified keyUsage values. If null, no keyUsage check will be done. Note that the boolean array returned is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public boolean[] getKeyUsage ()"}, "getSubjectKeyIdentifier()": {"Returns": [["byte[]", "the key identifier (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setSubjectKeyIdentifier_E@"], "Permissions": [], "Description": "Returns the subjectKeyIdentifier criterion. The X509Certificate must contain a SubjectKeyIdentifier extension with the specified value. If null, no subjectKeyIdentifier check will be done. Note that the byte array returned is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public byte[] getSubjectKeyIdentifier ()"}, "setAuthorityKeyIdentifier(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the authority key identifier (or null)"]], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getAuthorityKeyIdentifier_E@"], "Permissions": [], "Description": "Sets the authorityKeyIdentifier criterion. The X509Certificate must contain an AuthorityKeyIdentifier extension for which the contents of the extension value matches the specified criterion value. If the criterion value is null, no authorityKeyIdentifier check will be done. If authorityKeyID is not null, it should contain a single DER encoded value corresponding to the contents of the extension value (not including the object identifier, criticality setting, and encapsulating OCTET STRING) for an AuthorityKeyIdentifier extension. The ASN.1 notation for this structure follows. Authority key identifiers are not parsed by the X509CertSelector. Instead, the values are compared using a byte-by-byte comparison. When the keyIdentifier field of AuthorityKeyIdentifier is populated, the value is usually taken from the SubjectKeyIdentifier extension in the issuer's certificate. Note, however, that the result of X509Certificate.getExtensionValue(<SubjectKeyIdentifier Object Identifier>) on the issuer's certificate may NOT be used directly as the input to setAuthorityKeyIdentifier. This is because the SubjectKeyIdentifier contains only a KeyIdentifier OCTET STRING, and not a SEQUENCE of KeyIdentifier, GeneralNames, and CertificateSerialNumber. In order to use the extension value of the issuer certificate's SubjectKeyIdentifier extension, it will be necessary to extract the value of the embedded KeyIdentifier OCTET STRING, then DER encode this OCTET STRING inside a SEQUENCE. For more details on SubjectKeyIdentifier, see @B_java#security#cert#X509CertSelector#setSubjectKeyIdentifier_E@. Note also that the byte array supplied here is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setAuthorityKeyIdentifier (byte[] authorityKeyID)"}, "setSubject(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: a byte array containing the distinguished name in ASN.1 DER format (or null)"]], "Throws": [["@B_java#io#IOException_E@", "if an encoding error occurs (incorrect form for DN)"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the subject criterion. The specified distinguished name must match the subject distinguished name in the X509Certificate. If null, any subject distinguished name will do. If subjectDN is not null, it should contain a single DER encoded distinguished name, as defined in X.501. For the ASN.1 notation for this structure, see @B_java#security#cert#X509CertSelector#setIssuer_E@.", "history": "Added in API level 1", "FullName": "public void setSubject (byte[] subjectDN)"}, "getIssuer()": {"Returns": [["@B_javax#security#auth#x500#X500Principal_E@", "the required issuer distinguished name as X500Principal (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the issuer criterion as an X500Principal. This distinguished name must match the issuer distinguished name in the X509Certificate. If null, the issuer criterion is disabled and any issuer distinguished name will do.", "history": "Added in API level 1", "FullName": "public X500Principal getIssuer ()"}, "getNameConstraints()": {"Returns": [["byte[]", "a byte array containing the ASN.1 DER encoding of a NameConstraints extension used for checking name constraints. null if no name constraints check will be performed."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setNameConstraints_E@"], "Permissions": [], "Description": "Returns the name constraints criterion. The X509Certificate must have subject and subject alternative names that meet the specified name constraints. The name constraints are returned as a byte array. This byte array contains the DER encoded form of the name constraints, as they would appear in the NameConstraints structure defined in RFC 3280 and X.509. The ASN.1 notation for this structure is supplied in the documentation for @B_java#security#cert#X509CertSelector#setNameConstraints_E@. Note that the byte array returned is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public byte[] getNameConstraints ()"}, "addSubjectAlternativeName(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the name type (0-8, as specified in RFC 3280, section 4.2.1.7)"], ["@B_java#lang#String_E@", "String: the name in string form (not null)"]], "Throws": [["@B_java#io#IOException_E@", "if a parsing error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adds a name to the subjectAlternativeNames criterion. The X509Certificate must contain all or at least one of the specified subjectAlternativeNames, depending on the value of the matchAllNames flag (see @B_java#security#cert#X509CertSelector#setMatchAllSubjectAltNames_E@). This method allows the caller to add a name to the set of subject alternative names. The specified name is added to any previous value for the subjectAlternativeNames criterion. If the specified name is a duplicate, it may be ignored. The name is provided in string format. @B_java#security#cert#X509CertSelector#addSubjectAlternativeName_E@ method.", "history": "Added in API level 1", "FullName": "public void addSubjectAlternativeName (int type, String name)"}, "addPathToName(int,byte[])": {"Returns": [], "Parameters": [["int", "int: the name type (0-8, as specified in RFC 3280, section 4.2.1.7)"], ["byte[]", "byte: a byte array containing the name in ASN.1 DER encoded form"]], "Throws": [["@B_java#io#IOException_E@", "if a parsing error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adds a name to the pathToNames criterion. The X509Certificate must not include name constraints that would prohibit building a path to the specified name. This method allows the caller to add a name to the set of names which the X509Certificates's name constraints must permit. The specified name is added to any previous value for the pathToNames criterion. If the name is a duplicate, it may be ignored. The name is provided as a byte array. This byte array should contain the DER encoded name, as it would appear in the GeneralName structure defined in RFC 3280 and X.509. The ASN.1 definition of this structure appears in the documentation for @B_java#security#cert#X509CertSelector#addSubjectAlternativeName_E@. Note that the byte array supplied here is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void addPathToName (int type, byte[] name)"}, "addSubjectAlternativeName(int, byte[])": {"Returns": [], "Parameters": [["int", "int: the name type (0-8, as listed above)"], ["byte[]", "byte: a byte array containing the name in ASN.1 DER encoded form"]], "Throws": [["@B_java#io#IOException_E@", "if a parsing error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adds a name to the subjectAlternativeNames criterion. The X509Certificate must contain all or at least one of the specified subjectAlternativeNames, depending on the value of the matchAllNames flag (see @B_java#security#cert#X509CertSelector#setMatchAllSubjectAltNames_E@). This method allows the caller to add a name to the set of subject alternative names. The specified name is added to any previous value for the subjectAlternativeNames criterion. If the specified name is a duplicate, it may be ignored. The name is provided as a byte array. This byte array should contain the DER encoded name, as it would appear in the GeneralName structure defined in RFC 3280 and X.509. The encoded byte array should only contain the encoded value of the name, and should not include the tag associated with the name in the GeneralName structure. The ASN.1 definition of this structure appears below. Note that the byte array supplied here is cloned to protect against subsequent modifications.", "history": "added in API level 1", "FullName": "public void addSubjectAlternativeName (int type, byte[] name)"}, "addSubjectAlternativeName(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the name type (0-8, as specified in RFC 3280, section 4.2.1.7)"], ["@B_java#lang#String_E@", "String: the name in string form (not null)"]], "Throws": [["@B_java#io#IOException_E@", "if a parsing error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adds a name to the subjectAlternativeNames criterion. The X509Certificate must contain all or at least one of the specified subjectAlternativeNames, depending on the value of the matchAllNames flag (see @B_java#security#cert#X509CertSelector#setMatchAllSubjectAltNames_E@). This method allows the caller to add a name to the set of subject alternative names. The specified name is added to any previous value for the subjectAlternativeNames criterion. If the specified name is a duplicate, it may be ignored. The name is provided in string format. @B_java#security#cert#X509CertSelector#addSubjectAlternativeName_E@ method.", "history": "added in API level 1", "FullName": "public void addSubjectAlternativeName (int type, String name)"}, "setSubjectPublicKey(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: a byte array containing the subject public key in ASN.1 DER form (or null)"]], "Throws": [["@B_java#io#IOException_E@", "if an encoding error occurs (incorrect form for subject public key)"]], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getSubjectPublicKey_E@"], "Permissions": [], "Description": "Sets the subjectPublicKey criterion. The X509Certificate must contain the specified subject public key. If null, no subjectPublicKey check will be done. Because this method allows the public key to be specified as a byte array, it may be used for unknown key types. If key is not null, it should contain a single DER encoded SubjectPublicKeyInfo structure, as defined in X.509. The ASN.1 notation for this structure is as follows. Note that the byte array supplied here is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setSubjectPublicKey (byte[] key)"}, "setNameConstraints(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: a byte array containing the ASN.1 DER encoding of a NameConstraints extension to be used for checking name constraints. Only the value of the extension is included, not the OID or criticality flag. Can be null, in which case no name constraints check will be performed."]], "Throws": [["@B_java#io#IOException_E@", "if a parsing error occurs"]], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getNameConstraints_E@"], "Permissions": [], "Description": "Sets the name constraints criterion. The X509Certificate must have subject and subject alternative names that meet the specified name constraints. The name constraints are specified as a byte array. This byte array should contain the DER encoded form of the name constraints, as they would appear in the NameConstraints structure defined in RFC 3280 and X.509. The ASN.1 definition of this structure appears below. Note that the byte array supplied here is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setNameConstraints (byte[] bytes)"}, "getPrivateKeyValid()": {"Returns": [["@B_java#util#Date_E@", "the Date to check (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setPrivateKeyValid_E@"], "Permissions": [], "Description": "Returns the privateKeyValid criterion. The specified date must fall within the private key validity period for the X509Certificate. If null, no privateKeyValid check will be done. Note that the Date returned is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public Date getPrivateKeyValid ()"}, "setCertificate(java.security.cert.X509Certificate)": {"Returns": [], "Parameters": [["@B_java#security#cert#X509Certificate_E@", "X509Certificate: the X509Certificate to match (or null)"]], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getCertificate_E@"], "Permissions": [], "Description": "Sets the certificateEquals criterion. The specified X509Certificate must be equal to the X509Certificate passed to the match method. If null, then this check is not applied. This method is particularly useful when it is necessary to match a single certificate. Although other criteria can be specified in conjunction with the certificateEquals criterion, it is usually not practical or necessary.", "history": "Added in API level 1", "FullName": "public void setCertificate (X509Certificate cert)"}, "setBasicConstraints(int)": {"Returns": [], "Parameters": [["int", "int: the value for the basic constraints constraint"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the value is less than -2"]], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getBasicConstraints_E@"], "Permissions": [], "Description": "Sets the basic constraints constraint. If the value is greater than or equal to zero, X509Certificates must include a basicConstraints extension with a pathLen of at least this value. If the value is -2, only end-entity certificates are accepted. If the value is -1, no check is done. This constraint is useful when building a certification path forward (from the target toward the trust anchor. If a partial path has been built, any candidate certificate must have a maxPathLen value greater than or equal to the number of certificates in the partial path.", "history": "Added in API level 1", "FullName": "public void setBasicConstraints (int minMaxPathLen)"}, "setSubjectPublicKeyAlgID(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The object identifier (OID) of the algorithm to check for (or null). An OID is represented by a set of nonnegative integers separated by periods."]], "Throws": [["@B_java#io#IOException_E@", "if the OID is invalid, such as the first component being not 0, 1 or 2 or the second component being greater than 39."]], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getSubjectPublicKeyAlgID_E@"], "Permissions": [], "Description": "Sets the subjectPublicKeyAlgID criterion. The X509Certificate must contain a subject public key with the specified algorithm. If null, no subjectPublicKeyAlgID check will be done.", "history": "Added in API level 1", "FullName": "public void setSubjectPublicKeyAlgID (String oid)"}, "setIssuer(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: a byte array containing the distinguished name in ASN.1 DER encoded form (or null)"]], "Throws": [["@B_java#io#IOException_E@", "if an encoding error occurs (incorrect form for DN)"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the issuer criterion. The specified distinguished name must match the issuer distinguished name in the X509Certificate. If null is specified, the issuer criterion is disabled and any issuer distinguished name will do. If issuerDN is not null, it should contain a single DER encoded distinguished name, as defined in X.501. The ASN.1 notation for this structure is as follows. Note that the byte array specified here is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setIssuer (byte[] issuerDN)"}, "getSubjectAsString()": {"Returns": [["@B_java#lang#String_E@", "the required subject distinguished name in RFC 2253 format (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the subject criterion as a String. This distinguished name must match the subject distinguished name in the X509Certificate. If null, the subject criterion is disabled and any subject distinguished name will do. If the value returned is not null, it is a distinguished name, in RFC 2253 format.", "history": "Added in API level 1", "FullName": "public String getSubjectAsString ()"}, "getSubjectPublicKey()": {"Returns": [["@B_java#security#PublicKey_E@", "the subject public key to check for (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setSubjectPublicKey_E@"], "Permissions": [], "Description": "Returns the subjectPublicKey criterion. The X509Certificate must contain the specified subject public key. If null, no subjectPublicKey check will be done.", "history": "Added in API level 1", "FullName": "public PublicKey getSubjectPublicKey ()"}, "getSerialNumber()": {"Returns": [["@B_java#math#BigInteger_E@", "the certificate serial number to match (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setSerialNumber_E@"], "Permissions": [], "Description": "Returns the serialNumber criterion. The specified serial number must match the certificate serial number in the X509Certificate. If null, any certificate serial number will do.", "history": "Added in API level 1", "FullName": "public BigInteger getSerialNumber ()"}, "getPathToNames()": {"Returns": [["@B_java#util#Collection_E@", "a Collection of names (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setPathToNames_E@"], "Permissions": [], "Description": "Returns a copy of the pathToNames criterion. The X509Certificate must not include name constraints that would prohibit building a path to the specified names. If the value returned is null, no pathToNames check will be performed. If the value returned is not null, it is a Collection with one entry for each name to be included in the pathToNames criterion. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. Note that the Collection returned may contain duplicate names (same name and name type). Each name in the Collection may be specified either as a String or as an ASN.1 encoded byte array. For more details about the formats used, see @B_java#security#cert#X509CertSelector#addPathToName_E@ and @B_java#security#cert#X509CertSelector#addPathToName_E@. Note that a deep copy is performed on the Collection to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public Collection<List<?>> getPathToNames ()"}, "getIssuerAsString()": {"Returns": [["@B_java#lang#String_E@", "the required issuer distinguished name in RFC 2253 format (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the issuer criterion as a String. This distinguished name must match the issuer distinguished name in the X509Certificate. If null, the issuer criterion is disabled and any issuer distinguished name will do. If the value returned is not null, it is a distinguished name, in RFC 2253 format.", "history": "Added in API level 1", "FullName": "public String getIssuerAsString ()"}, "setSubject(javax.security.auth.x500.X500Principal)": {"Returns": [], "Parameters": [["@B_javax#security#auth#x500#X500Principal_E@", "X500Principal: a distinguished name as X500Principal (or null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the subject criterion. The specified distinguished name must match the subject distinguished name in the X509Certificate. If null, any subject distinguished name will do.", "history": "Added in API level 1", "FullName": "public void setSubject (X500Principal subject)"}, "addPathToName(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the name type (0-8, as specified in RFC 3280, section 4.2.1.7)"], ["@B_java#lang#String_E@", "String: the name in string form"]], "Throws": [["@B_java#io#IOException_E@", "if a parsing error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adds a name to the pathToNames criterion. The X509Certificate must not include name constraints that would prohibit building a path to the specified name. This method allows the caller to add a name to the set of names which the X509Certificates's name constraints must permit. The specified name is added to any previous value for the pathToNames criterion. If the name is a duplicate, it may be ignored. The name is provided in string format. RFC 822, DNS, and URI names use the well-established string formats for those types (subject to the restrictions included in RFC 3280). IPv4 address names are supplied using dotted quad notation. OID address names are represented as a series of nonnegative integers separated by periods. And directory names (distinguished names) are supplied in RFC 2253 format. No standard string format is defined for otherNames, X.400 names, EDI party names, IPv6 address names, or any other type of names. They should be specified using the @B_java#security#cert#X509CertSelector#addPathToName_E@ method.", "history": "Added in API level 1", "FullName": "public void addPathToName (int type, String name)"}, "setSubjectKeyIdentifier(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the subject key identifier (or null)"]], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getSubjectKeyIdentifier_E@"], "Permissions": [], "Description": "Sets the subjectKeyIdentifier criterion. The X509Certificate must contain a SubjectKeyIdentifier extension for which the contents of the extension matches the specified criterion value. If the criterion value is null, no subjectKeyIdentifier check will be done. If subjectKeyID is not null, it should contain a single DER encoded value corresponding to the contents of the extension value (not including the object identifier, criticality setting, and encapsulating OCTET STRING) for a SubjectKeyIdentifier extension. The ASN.1 notation for this structure follows. Since the format of subject key identifiers is not mandated by any standard, subject key identifiers are not parsed by the X509CertSelector. Instead, the values are compared using a byte-by-byte comparison. Note that the byte array supplied here is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setSubjectKeyIdentifier (byte[] subjectKeyID)"}, "getMatchAllSubjectAltNames()": {"Returns": [["boolean", "true if the flag is enabled; false if the flag is disabled. The flag is true by default."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#setMatchAllSubjectAltNames_E@"], "Permissions": [], "Description": "Indicates if the X509Certificate must contain all or at least one of the subjectAlternativeNames specified in the @B_java#security#cert#X509CertSelector#setSubjectAlternativeNames_E@ or @B_java#security#cert#X509CertSelector#addSubjectAlternativeName_E@ methods. If true, the X509Certificate must contain all of the specified subject alternative names. If false, the X509Certificate must contain at least one of the specified subject alternative names.", "history": "Added in API level 1", "FullName": "public boolean getMatchAllSubjectAltNames ()"}, "setPrivateKeyValid(java.util.Date)": {"Returns": [], "Parameters": [["@B_java#util#Date_E@", "Date: the Date to check (or null)"]], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getPrivateKeyValid_E@"], "Permissions": [], "Description": "Sets the privateKeyValid criterion. The specified date must fall within the private key validity period for the X509Certificate. If null, no privateKeyValid check will be done. Note that the Date supplied here is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setPrivateKeyValid (Date privateKeyValid)"}, "setSubjectAlternativeNames(java.util.Collection<java.util.List<?>>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: a Collection of names (or null)"]], "Throws": [["@B_java#io#IOException_E@", "if a parsing error occurs"]], "SeeAlso": ["@B_java#security#cert#X509CertSelector#getSubjectAlternativeNames_E@"], "Permissions": [], "Description": "Sets the subjectAlternativeNames criterion. The X509Certificate must contain all or at least one of the specified subjectAlternativeNames, depending on the value of the matchAllNames flag (see @B_java#security#cert#X509CertSelector#setMatchAllSubjectAltNames_E@). This method allows the caller to specify, with a single method call, the complete set of subject alternative names for the subjectAlternativeNames criterion. The specified value replaces the previous value for the subjectAlternativeNames criterion. The names parameter (if not null) is a Collection with one entry for each name to be included in the subject alternative name criterion. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. If null is supplied as the value for this argument, no subjectAlternativeNames check will be performed. Each subject alternative name in the Collection may be specified either as a String or as an ASN.1 encoded byte array. For more details about the formats used, see @B_java#security#cert#X509CertSelector#addSubjectAlternativeName_E@ and @B_java#security#cert#X509CertSelector#addSubjectAlternativeName_E@. @B_java#security#cert#X509CertSelector#addSubjectAlternativeName_E@ for more information. Note that the names parameter can contain duplicate names (same name and name type), but they may be removed from the Collection of names returned by the @B_java#security#cert#X509CertSelector#getSubjectAlternativeNames_E@ method. Note that a deep copy is performed on the Collection to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setSubjectAlternativeNames (Collection<List<?>> names)"}, "X509CertSelector()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an X509CertSelector. Initially, no criteria are set so any X509Certificate will match.", "history": "Added in API level 1", "FullName": "public X509CertSelector ()"}}, "Inheritance": [], "ClassName": "java.security.cert.X509CertSelector", "ClassDesc": "A CertSelector that selects X509Certificates that match all specified criteria. This class is particularly useful when selecting certificates from a CertStore to build a PKIX-compliant certification path. When first constructed, an X509CertSelector has no criteria enabled and each of the get methods return a default value (null, or -1 for the @B_java#security#cert#X509CertSelector#getBasicConstraints_E@ method). Therefore, the @B_java#security#cert#X509CertSelector#match_E@ method would return true for any X509Certificate. Typically, several criteria are enabled (by calling @B_java#security#cert#X509CertSelector#setIssuer_E@ or @B_java#security#cert#X509CertSelector#setKeyUsage_E@, for instance) and then the X509CertSelector is passed to @B_java#security#cert#CertStore#getCertificates_E@ or some similar method. Several criteria can be enabled (by calling @B_java#security#cert#X509CertSelector#setIssuer_E@ and @B_java#security#cert#X509CertSelector#setSerialNumber_E@, for example) such that the match method usually uniquely matches a single X509Certificate. We say usually, since it is possible for two issuing CAs to have the same distinguished name and each issue a certificate with the same serial number. Other unique combinations include the issuer, subject, subjectKeyIdentifier and/or the subjectPublicKey criteria. Please refer to Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize."}