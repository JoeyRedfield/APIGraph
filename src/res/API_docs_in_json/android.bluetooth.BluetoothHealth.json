{"Functions": {"getDevicesMatchingConnectionStates(int[])": {"Returns": [["@B_java#util#List_E@", "List of devices. The list will be empty on error."]], "Parameters": [["int[]", "int: Array of states. States can be one of @B_android#bluetooth#BluetoothProfile#STATE_CONNECTED_E@, @B_android#bluetooth#BluetoothProfile#STATE_CONNECTING_E@, @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTED_E@, @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTING_E@,"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Get a list of devices that match any of the given connection states. If none of the devices match any of the given states, an empty list will be returned. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission. This is not specific to any application configuration but represents the connection state of the local Bluetooth adapter for this profile. This can be used by applications like status bar which would just like to know the state of the local adapter.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public List<BluetoothDevice> getDevicesMatchingConnectionStates (int[] states)"}, "connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)": {"Returns": [["boolean", "If true, the callback associated with the application config will be called."]], "Parameters": [["@B_android#bluetooth#BluetoothDevice_E@", "BluetoothDevice: The remote Bluetooth device."], ["@B_android#bluetooth#BluetoothHealthAppConfiguration_E@", "BluetoothHealthAppConfiguration: The application configuration which has been registered using @B_android#bluetooth#BluetoothHealth#registerSinkAppConfiguration_E@"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Health Device Profile (HDP) and MCAP protocol are no longer used. New apps should use Bluetooth Low Energy based solutions such as @B_android#bluetooth#BluetoothGatt_E@, @B_android#bluetooth#BluetoothAdapter#listenUsingL2capChannel_E@, or @B_android#bluetooth#BluetoothDevice#createL2capChannel_E@ Connect to a health device which has the @B_android#bluetooth#BluetoothHealth#SOURCE_ROLE_E@. This is an asynchronous call. If this function returns true, the callback associated with the application configuration will be called. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public boolean connectChannelToSource (BluetoothDevice device, BluetoothHealthAppConfiguration config)"}, "unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)": {"Returns": [["boolean", "Success or failure."]], "Parameters": [["@B_android#bluetooth#BluetoothHealthAppConfiguration_E@", "BluetoothHealthAppConfiguration: The health app configuration"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Health Device Profile (HDP) and MCAP protocol are no longer used. New apps should use Bluetooth Low Energy based solutions such as @B_android#bluetooth#BluetoothGatt_E@, @B_android#bluetooth#BluetoothAdapter#listenUsingL2capChannel_E@, or @B_android#bluetooth#BluetoothDevice#createL2capChannel_E@ Unregister an application configuration that has been registered using @B_android#bluetooth#BluetoothHealth#registerSinkAppConfiguration_E@ Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public boolean unregisterAppConfiguration (BluetoothHealthAppConfiguration config)"}, "getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "null on failure, ParcelFileDescriptor on success."]], "Parameters": [["@B_android#bluetooth#BluetoothDevice_E@", "BluetoothDevice: The remote Bluetooth health device"], ["@B_android#bluetooth#BluetoothHealthAppConfiguration_E@", "BluetoothHealthAppConfiguration: The application configuration"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Health Device Profile (HDP) and MCAP protocol are no longer used. New apps should use Bluetooth Low Energy based solutions such as @B_android#bluetooth#BluetoothGatt_E@, @B_android#bluetooth#BluetoothAdapter#listenUsingL2capChannel_E@, or @B_android#bluetooth#BluetoothDevice#createL2capChannel_E@ Get the file descriptor of the main channel associated with the remote device and application configuration. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission. Its the responsibility of the caller to close the ParcelFileDescriptor when done.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public ParcelFileDescriptor getMainChannelFd (BluetoothDevice device, BluetoothHealthAppConfiguration config)"}, "getConnectedDevices()": {"Returns": [["@B_java#util#List_E@", "List of devices. The list will be empty on error."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Get connected devices for the health profile. Return the set of devices which are in state @B_android#bluetooth#BluetoothProfile#STATE_CONNECTED_E@ Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission. This is not specific to any application configuration but represents the connection state of the local Bluetooth adapter for this profile. This can be used by applications like status bar which would just like to know the state of the local adapter.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public List<BluetoothDevice> getConnectedDevices ()"}, "registerSinkAppConfiguration(java.lang.String,int,android.bluetooth.BluetoothHealthCallback)": {"Returns": [["boolean", "If true, callback will be called."]], "Parameters": [["@B_java#lang#String_E@", "String: The friendly name associated with the application or configuration."], ["int", "int: The dataType of the Source role of Health Profile to which the sink wants to connect to."], ["@B_android#bluetooth#BluetoothHealthCallback_E@", "BluetoothHealthCallback: A callback to indicate success or failure of the registration and all operations done on this application configuration."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Health Device Profile (HDP) and MCAP protocol are no longer used. New apps should use Bluetooth Low Energy based solutions such as @B_android#bluetooth#BluetoothGatt_E@, @B_android#bluetooth#BluetoothAdapter#listenUsingL2capChannel_E@, or @B_android#bluetooth#BluetoothDevice#createL2capChannel_E@ Register an application configuration that acts as a Health SINK. This is the configuration that will be used to communicate with health devices which will act as the @B_android#bluetooth#BluetoothHealth#SOURCE_ROLE_E@. This is an asynchronous call and so the callback is used to notify success or failure if the function returns true. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public boolean registerSinkAppConfiguration (String name, int dataType, BluetoothHealthCallback callback)"}, "getConnectionState(android.bluetooth.BluetoothDevice)": {"Returns": [["int", "State of the profile connection. One of @B_android#bluetooth#BluetoothProfile#STATE_CONNECTED_E@, @B_android#bluetooth#BluetoothProfile#STATE_CONNECTING_E@, @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTED_E@, @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTING_E@"]], "Parameters": [["@B_android#bluetooth#BluetoothDevice_E@", "BluetoothDevice: Remote bluetooth device."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Get the current connection state of the profile. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission. This is not specific to any application configuration but represents the connection state of the local Bluetooth adapter with the remote device. This can be used by applications like status bar which would just like to know the state of the local adapter.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public int getConnectionState (BluetoothDevice device)"}, "disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)": {"Returns": [["boolean", "If true, the callback associated with the application config will be called."]], "Parameters": [["@B_android#bluetooth#BluetoothDevice_E@", "BluetoothDevice: The remote Bluetooth device."], ["@B_android#bluetooth#BluetoothHealthAppConfiguration_E@", "BluetoothHealthAppConfiguration: The application configuration which has been registered using @B_android#bluetooth#BluetoothHealth#registerSinkAppConfiguration_E@"], ["int", "int: The channel id associated with the channel"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Health Device Profile (HDP) and MCAP protocol are no longer used. New apps should use Bluetooth Low Energy based solutions such as @B_android#bluetooth#BluetoothGatt_E@, @B_android#bluetooth#BluetoothAdapter#listenUsingL2capChannel_E@, or @B_android#bluetooth#BluetoothDevice#createL2capChannel_E@ Disconnect a connected health channel. This is an asynchronous call. If this function returns true, the callback associated with the application configuration will be called. Requires @B_android#Manifest#permission#BLUETOOTH_E@ permission.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public boolean disconnectChannel (BluetoothDevice device, BluetoothHealthAppConfiguration config, int channelId)"}}, "Inheritance": [], "ClassName": "android.bluetooth.BluetoothHealth", "ClassDesc": "Health Device Profile (HDP) and MCAP protocol are no longer used. New apps should use Bluetooth Low Energy based solutions such as @B_android#bluetooth#BluetoothGatt_E@, @B_android#bluetooth#BluetoothAdapter#listenUsingL2capChannel_E@, or @B_android#bluetooth#BluetoothDevice#createL2capChannel_E@ Public API for Bluetooth Health Profile. BluetoothHealth is a proxy object for controlling the Bluetooth Service via IPC. How to connect to a health device which is acting in the source role. Use @B_android#bluetooth#BluetoothAdapter#getProfileProxy_E@ to get the BluetoothHealth proxy object. Create an @B_android#bluetooth#BluetoothHealth_E@ callback and call @B_android#bluetooth#BluetoothHealth#registerSinkAppConfiguration_E@ to register an application configuration Pair with the remote device. This currently needs to be done manually from Bluetooth Settings Connect to a health device using @B_android#bluetooth#BluetoothHealth#connectChannelToSource_E@. Some devices will connect the channel automatically. The @B_android#bluetooth#BluetoothHealth_E@ callback will inform the application of channel state change. Use the file descriptor provided with a connected channel to read and write data to the health channel. The received data needs to be interpreted using a health manager which implements the IEEE 11073-xxxxx specifications. When done, close the health channel by calling @B_android#bluetooth#BluetoothHealth#disconnectChannel_E@ and unregister the application configuration calling @B_android#bluetooth#BluetoothHealth#unregisterAppConfiguration_E@"}