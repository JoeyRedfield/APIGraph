{"Functions": {"initialize(int,boolean,java.security.SecureRandom)": {"Returns": [], "Parameters": [["int", "int: the modulus length in bits. Valid values are any multiple of 64 between 512 and 1024, inclusive, 2048, and 3072."], ["boolean", "boolean: whether or not to generate new parameters for the modulus length requested."], ["@B_java#security#SecureRandom_E@", "SecureRandom: the random bit source to use to generate key bits; can be null."]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if modlen is invalid, or unsupported, or if genParams is false and there are no precomputed parameters for the requested modulus length."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes the key pair generator for a given modulus length (instead of parameters), and an optional SecureRandom bit source. If a SecureRandom bit source is needed but not supplied, i.e. null, a default SecureRandom instance will be used. If genParams is true, this method generates new p, q and g parameters. If it is false, the method uses precomputed parameters for the modulus length requested. If there are no precomputed parameters for that modulus length, an exception will be thrown. It is guaranteed that there will always be default parameters for modulus lengths of 512 and 1024 bits.", "history": "Added in API level 1", "FullName": "public abstract void initialize (int modlen, boolean genParams, SecureRandom random)"}, "initialize(java.security.interfaces.DSAParams,java.security.SecureRandom)": {"Returns": [], "Parameters": [["@B_java#security#interfaces#DSAParams_E@", "DSAParams: the parameters to use to generate the keys."], ["@B_java#security#SecureRandom_E@", "SecureRandom: the random bit source to use to generate key bits; can be null."]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if the params value is invalid, null, or unsupported."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes the key pair generator using the DSA family parameters (p,q and g) and an optional SecureRandom bit source. If a SecureRandom bit source is needed but not supplied, i.e. null, a default SecureRandom instance will be used.", "history": "Added in API level 1", "FullName": "public abstract void initialize (DSAParams params, SecureRandom random)"}}, "Inheritance": [], "ClassName": "java.security.interfaces.DSAKeyPairGenerator", "ClassDesc": "An interface to an object capable of generating DSA key pairs. The initialize methods may each be called any number of times. If no initialize method is called on a DSAKeyPairGenerator, the default is to generate 1024-bit keys, using precomputed p, q and g parameters and an instance of SecureRandom as the random bit source. Users wishing to indicate DSA-specific parameters, and to generate a key pair suitable for use with the DSA algorithm typically Note: it is not always necessary to do do algorithm-specific initialization for a DSA key pair generator. That is, it is not always necessary to call an initialize method in this interface. Algorithm-independent initialization using the initialize method in the KeyPairGenerator interface is all that is needed when you accept defaults for algorithm-specific parameters. Note: Some earlier implementations of this interface may not support larger sizes of DSA parameters such as 2048 and 3072-bit."}