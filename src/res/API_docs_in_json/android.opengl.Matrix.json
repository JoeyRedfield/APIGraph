{"Functions": {"rotateM(float[],int,float[],int,float,float,float,float)": {"Returns": [], "Parameters": [["float[]", "float: returns the result"], ["int", "int: index into rm where the result matrix starts"], ["float[]", "float: source matrix"], ["int", "int: index into m where the source matrix starts"], ["float", "float: angle to rotate in degrees"], ["float", "float: X axis component"], ["float", "float: Y axis component"], ["float", "float: Z axis component"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Rotates matrix m by angle a (in degrees) around the axis (x, y, z). m and rm must not overlap.", "history": "Added in API level 1", "FullName": "public static void rotateM (float[] rm, int rmOffset, float[] m, int mOffset, float a, float x, float y, float z)"}, "setLookAtM(float[],int,float,float,float,float,float,float,float,float,float)": {"Returns": [], "Parameters": [["float[]", "float: returns the result"], ["int", "int: index into rm where the result matrix starts"], ["float", "float: eye point X"], ["float", "float: eye point Y"], ["float", "float: eye point Z"], ["float", "float: center of view X"], ["float", "float: center of view Y"], ["float", "float: center of view Z"], ["float", "float: up vector X"], ["float", "float: up vector Y"], ["float", "float: up vector Z"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Defines a viewing transformation in terms of an eye point, a center of view, and an up vector.", "history": "Added in API level 8", "FullName": "public static void setLookAtM (float[] rm, int rmOffset, float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ)"}, "translateM(float[],int,float,float,float)": {"Returns": [], "Parameters": [["float[]", "float: matrix"], ["int", "int: index into m where the matrix starts"], ["float", "float: translation factor x"], ["float", "float: translation factor y"], ["float", "float: translation factor z"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Translates matrix m by x, y, and z in place.", "history": "Added in API level 1", "FullName": "public static void translateM (float[] m, int mOffset, float x, float y, float z)"}, "scaleM(float[],int,float[],int,float,float,float)": {"Returns": [], "Parameters": [["float[]", "float: returns the result"], ["int", "int: index into sm where the result matrix starts"], ["float[]", "float: source matrix"], ["int", "int: index into m where the source matrix starts"], ["float", "float: scale factor x"], ["float", "float: scale factor y"], ["float", "float: scale factor z"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Scales matrix m by x, y, and z, putting the result in sm. m and sm must not overlap.", "history": "Added in API level 1", "FullName": "public static void scaleM (float[] sm, int smOffset, float[] m, int mOffset, float x, float y, float z)"}, "translateM(float[],int,float[],int,float,float,float)": {"Returns": [], "Parameters": [["float[]", "float: returns the result"], ["int", "int: index into sm where the result matrix starts"], ["float[]", "float: source matrix"], ["int", "int: index into m where the source matrix starts"], ["float", "float: translation factor x"], ["float", "float: translation factor y"], ["float", "float: translation factor z"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Translates matrix m by x, y, and z, putting the result in tm. m and tm must not overlap.", "history": "Added in API level 1", "FullName": "public static void translateM (float[] tm, int tmOffset, float[] m, int mOffset, float x, float y, float z)"}, "scaleM(float[], int, float, float, float)": {"Returns": [], "Parameters": [["float[]", "float: matrix to scale"], ["int", "int: index into m where the matrix starts"], ["float", "float: scale factor x"], ["float", "float: scale factor y"], ["float", "float: scale factor z"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Scales matrix m in place by sx, sy, and sz.", "history": "added in API level 1", "FullName": "public static void scaleM (float[] m, int mOffset, float x, float y, float z)"}, "Matrix()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "All methods are static, do not instantiate this class.", "history": "Added in API level 1", "FullName": "public Matrix ()"}, "length(float, float, float)": {"Returns": [["float", "the length of a vector"]], "Parameters": [["float", "float: x coordinate of a vector"], ["float", "float: y coordinate of a vector"], ["float", "float: z coordinate of a vector"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Computes the length of a vector.", "history": "added in API level 1", "FullName": "public static float length (float x, float y, float z)"}, "frustumM(float[],int,float,float,float,float,float,float)": {"Returns": [], "Parameters": [["float[]", "float: the float array that holds the output perspective matrix"], ["int", "int: the offset into float array m where the perspective matrix data is written"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Defines a projection matrix in terms of six clip planes.", "history": "Added in API level 1", "FullName": "public static void frustumM (float[] m, int offset, float left, float right, float bottom, float top, float near, float far)"}, "setIdentityM(float[], int)": {"Returns": [], "Parameters": [["float[]", "float: returns the result"], ["int", "int: index into sm where the result matrix starts"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets matrix m to the identity matrix.", "history": "added in API level 1", "FullName": "public static void setIdentityM (float[] sm, int smOffset)"}, "invertM(float[],int,float[],int)": {"Returns": [["boolean", "true if the matrix could be inverted, false if it could not."]], "Parameters": [["float[]", "float: the array that holds the output inverted matrix"], ["int", "int: an offset into mInv where the inverted matrix is stored."], ["float[]", "float: the input array"], ["int", "int: an offset into m where the input matrix is stored."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inverts a 4 x 4 matrix. mInv and m must not overlap.", "history": "Added in API level 1", "FullName": "public static boolean invertM (float[] mInv, int mInvOffset, float[] m, int mOffset)"}, "translateM(float[], int, float, float, float)": {"Returns": [], "Parameters": [["float[]", "float: matrix"], ["int", "int: index into m where the matrix starts"], ["float", "float: translation factor x"], ["float", "float: translation factor y"], ["float", "float: translation factor z"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Translates matrix m by x, y, and z in place.", "history": "added in API level 1", "FullName": "public static void translateM (float[] m, int mOffset, float x, float y, float z)"}, "invertM(float[], int, float[], int)": {"Returns": [["boolean", "true if the matrix could be inverted, false if it could not."]], "Parameters": [["float[]", "float: the array that holds the output inverted matrix"], ["int", "int: an offset into mInv where the inverted matrix is stored."], ["float[]", "float: the input array"], ["int", "int: an offset into m where the input matrix is stored."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inverts a 4 x 4 matrix. mInv and m must not overlap.", "history": "added in API level 1", "FullName": "public static boolean invertM (float[] mInv, int mInvOffset, float[] m, int mOffset)"}, "multiplyMV(float[],int,float[],int,float[],int)": {"Returns": [], "Parameters": [["float[]", "float: The float array that holds the result vector."], ["int", "int: The offset into the result array where the result vector is stored."], ["float[]", "float: The float array that holds the left-hand-side matrix."], ["int", "int: The offset into the lhs array where the lhs is stored"], ["float[]", "float: The float array that holds the right-hand-side vector."], ["int", "int: The offset into the rhs vector where the rhs vector is stored."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if resultVec, lhsMat, or rhsVec are null, or if resultVecOffset + 4 > resultVec.length or lhsMatOffset + 16 > lhsMat.length or rhsVecOffset + 4 > rhsVec.length."]], "SeeAlso": [], "Permissions": [], "Description": "Multiplies a 4 element vector by a 4x4 matrix and stores the result in a 4-element column vector. In matrix notation: result = lhs x rhs The same float array may be passed for resultVec, lhsMat, and/or rhsVec. However, the resultVec element values are undefined if the resultVec elements overlap either the lhsMat or rhsVec elements.", "history": "Added in API level 1", "FullName": "public static void multiplyMV (float[] resultVec, int resultVecOffset, float[] lhsMat, int lhsMatOffset, float[] rhsVec, int rhsVecOffset)"}, "orthoM(float[],int,float,float,float,float,float,float)": {"Returns": [], "Parameters": [["float[]", "float: returns the result"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Computes an orthographic projection matrix.", "history": "Added in API level 1", "FullName": "public static void orthoM (float[] m, int mOffset, float left, float right, float bottom, float top, float near, float far)"}, "setRotateM(float[],int,float,float,float,float)": {"Returns": [], "Parameters": [["float[]", "float: returns the result"], ["int", "int: index into rm where the result matrix starts"], ["float", "float: angle to rotate in degrees"], ["float", "float: X axis component"], ["float", "float: Y axis component"], ["float", "float: Z axis component"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a matrix for rotation by angle a (in degrees) around the axis (x, y, z). An optimized path will be used for rotation about a major axis (e.g. x=1.0f y=0.0f z=0.0f).", "history": "Added in API level 1", "FullName": "public static void setRotateM (float[] rm, int rmOffset, float a, float x, float y, float z)"}, "transposeM(float[],int,float[],int)": {"Returns": [], "Parameters": [["float[]", "float: the array that holds the output transposed matrix"], ["int", "int: an offset into mTrans where the transposed matrix is stored."], ["float[]", "float: the input array"], ["int", "int: an offset into m where the input matrix is stored."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Transposes a 4 x 4 matrix. mTrans and m must not overlap.", "history": "Added in API level 1", "FullName": "public static void transposeM (float[] mTrans, int mTransOffset, float[] m, int mOffset)"}, "setRotateEulerM(float[], int, float, float, float)": {"Returns": [], "Parameters": [["float[]", "float: returns the result"], ["int", "int: index into rm where the result matrix starts"], ["float", "float: angle of rotation, in degrees"], ["float", "float: angle of rotation, in degrees"], ["float", "float: angle of rotation, in degrees"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts Euler angles to a rotation matrix.", "history": "added in API level 1", "FullName": "public static void setRotateEulerM (float[] rm, int rmOffset, float x, float y, float z)"}, "perspectiveM(float[],int,float,float,float,float)": {"Returns": [], "Parameters": [["float[]", "float: the float array that holds the perspective matrix"], ["int", "int: the offset into float array m where the perspective matrix data is written"], ["float", "float: field of view in y direction, in degrees"], ["float", "float: width to height aspect ratio of the viewport"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Defines a projection matrix in terms of a field of view angle, an aspect ratio, and z clip planes.", "history": "Added in API level 14", "FullName": "public static void perspectiveM (float[] m, int offset, float fovy, float aspect, float zNear, float zFar)"}, "scaleM(float[],int,float,float,float)": {"Returns": [], "Parameters": [["float[]", "float: matrix to scale"], ["int", "int: index into m where the matrix starts"], ["float", "float: scale factor x"], ["float", "float: scale factor y"], ["float", "float: scale factor z"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Scales matrix m in place by sx, sy, and sz.", "history": "Added in API level 1", "FullName": "public static void scaleM (float[] m, int mOffset, float x, float y, float z)"}, "rotateM(float[], int, float, float, float, float)": {"Returns": [], "Parameters": [["float[]", "float: source matrix"], ["int", "int: index into m where the matrix starts"], ["float", "float: angle to rotate in degrees"], ["float", "float: X axis component"], ["float", "float: Y axis component"], ["float", "float: Z axis component"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Rotates matrix m in place by angle a (in degrees) around the axis (x, y, z).", "history": "added in API level 1", "FullName": "public static void rotateM (float[] m, int mOffset, float a, float x, float y, float z)"}, "setRotateEulerM(float[],int,float,float,float)": {"Returns": [], "Parameters": [["float[]", "float: returns the result"], ["int", "int: index into rm where the result matrix starts"], ["float", "float: angle of rotation, in degrees"], ["float", "float: angle of rotation, in degrees"], ["float", "float: angle of rotation, in degrees"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts Euler angles to a rotation matrix.", "history": "Added in API level 1", "FullName": "public static void setRotateEulerM (float[] rm, int rmOffset, float x, float y, float z)"}, "transposeM(float[], int, float[], int)": {"Returns": [], "Parameters": [["float[]", "float: the array that holds the output transposed matrix"], ["int", "int: an offset into mTrans where the transposed matrix is stored."], ["float[]", "float: the input array"], ["int", "int: an offset into m where the input matrix is stored."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Transposes a 4 x 4 matrix. mTrans and m must not overlap.", "history": "added in API level 1", "FullName": "public static void transposeM (float[] mTrans, int mTransOffset, float[] m, int mOffset)"}, "multiplyMM(float[],int,float[],int,float[],int)": {"Returns": [], "Parameters": [["float[]", "float: The float array that holds the result."], ["int", "int: The offset into the result array where the result is stored."], ["float[]", "float: The float array that holds the left-hand-side matrix."], ["int", "int: The offset into the lhs array where the lhs is stored"], ["float[]", "float: The float array that holds the right-hand-side matrix."], ["int", "int: The offset into the rhs array where the rhs is stored."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if result, lhs, or rhs are null, or if resultOffset + 16 > result.length or lhsOffset + 16 > lhs.length or rhsOffset + 16 > rhs.length."]], "SeeAlso": [], "Permissions": [], "Description": "Multiplies two 4x4 matrices together and stores the result in a third 4x4 matrix. In matrix notation: result = lhs x rhs. Due to the way matrix multiplication works, the result matrix will have the same effect as first multiplying by the rhs matrix, then multiplying by the lhs matrix. This is the opposite of what you might expect. The same float array may be passed for result, lhs, and/or rhs. However, the result element values are undefined if the result elements overlap either the lhs or rhs elements.", "history": "Added in API level 1", "FullName": "public static void multiplyMM (float[] result, int resultOffset, float[] lhs, int lhsOffset, float[] rhs, int rhsOffset)"}, "rotateM(float[],int,float,float,float,float)": {"Returns": [], "Parameters": [["float[]", "float: source matrix"], ["int", "int: index into m where the matrix starts"], ["float", "float: angle to rotate in degrees"], ["float", "float: X axis component"], ["float", "float: Y axis component"], ["float", "float: Z axis component"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Rotates matrix m in place by angle a (in degrees) around the axis (x, y, z).", "history": "Added in API level 1", "FullName": "public static void rotateM (float[] m, int mOffset, float a, float x, float y, float z)"}, "length(float,float,float)": {"Returns": [["float", "the length of a vector"]], "Parameters": [["float", "float: x coordinate of a vector"], ["float", "float: y coordinate of a vector"], ["float", "float: z coordinate of a vector"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Computes the length of a vector.", "history": "Added in API level 1", "FullName": "public static float length (float x, float y, float z)"}, "setIdentityM(float[],int)": {"Returns": [], "Parameters": [["float[]", "float: returns the result"], ["int", "int: index into sm where the result matrix starts"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets matrix m to the identity matrix.", "history": "Added in API level 1", "FullName": "public static void setIdentityM (float[] sm, int smOffset)"}}, "Inheritance": [], "ClassName": "android.opengl.Matrix", "ClassDesc": "Matrix math utilities. These methods operate on OpenGL ES format matrices and vectors stored in float arrays. Matrices are 4 x 4 column-vector matrices stored in column-major order:"}