{"Functions": {"group()": {"Returns": [["@B_java#net#InetAddress_E@", "the multicast group"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the multicast group for which this membership key was created. This method will continue to return the group even after the membership becomes @B_java#nio#channels#MembershipKey#isValid_E@.", "history": "Added in API level 26", "FullName": "public abstract InetAddress group ()"}, "drop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Drop membership. If the membership key represents a membership to receive all datagrams then the membership is dropped and the channel will no longer receive any datagrams sent to the group. If the membership key is source-specific then the channel will no longer receive datagrams sent to the group from that source address. After membership is dropped it may still be possible to receive datagrams sent to the group. This can arise when datagrams are waiting to be received in the socket's receive buffer. After membership is dropped then the channel may @B_java#nio#channels#MulticastChannel#join_E@ the group again in which case a new membership key is returned. Upon return, this membership object will be @B_java#nio#channels#MembershipKey#isValid_E@. If the multicast group membership is already invalid then invoking this method has no effect. Once a multicast group membership is invalid, it remains invalid forever.", "history": "Added in API level 26", "FullName": "public abstract void drop ()"}, "sourceAddress()": {"Returns": [["@B_java#net#InetAddress_E@", "The source address if this membership key is source-specific, otherwise null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the source address if this membership key is source-specific, or null if this membership is not source-specific.", "history": "Added in API level 26", "FullName": "public abstract InetAddress sourceAddress ()"}, "block(java.net.InetAddress)": {"Returns": [["@B_java#nio#channels#MembershipKey_E@", "This membership key"]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: The source address to block"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the source parameter is not a unicast address or is not the same address type as the multicast group"], ["@B_java#lang#IllegalStateException_E@", "If this membership key is source-specific or is no longer valid"], ["@B_java#lang#UnsupportedOperationException_E@", "If the underlying operating system does not support source filtering"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Block multicast datagrams from the given source address. If this membership key is not source-specific, and the underlying operating system supports source filtering, then this method blocks multicast datagrams from the given source address. If the given source address is already blocked then this method has no effect. After a source address is blocked it may still be possible to receive datagrams from that source. This can arise when datagrams are waiting to be received in the socket's receive buffer.", "history": "Added in API level 26", "FullName": "public abstract MembershipKey block (InetAddress source)"}, "isValid()": {"Returns": [["boolean", "true if this membership key is valid, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this membership is valid. A multicast group membership is valid upon creation and remains valid until the membership is dropped by invoking the @B_java#nio#channels#MembershipKey#drop_E@ method, or the channel is closed.", "history": "Added in API level 26", "FullName": "public abstract boolean isValid ()"}, "networkInterface()": {"Returns": [["@B_java#net#NetworkInterface_E@", "the network interface"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the network interface for which this membership key was created. This method will continue to return the network interface even after the membership becomes @B_java#nio#channels#MembershipKey#isValid_E@.", "history": "Added in API level 26", "FullName": "public abstract NetworkInterface networkInterface ()"}, "MembershipKey()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 26", "FullName": "protected MembershipKey ()"}, "unblock(java.net.InetAddress)": {"Returns": [["@B_java#nio#channels#MembershipKey_E@", "This membership key"]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: The source address to unblock"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the given source address is not currently blocked or the membership key is no longer valid"]], "SeeAlso": [], "Permissions": [], "Description": "Unblock multicast datagrams from the given source address that was previously blocked using the @B_java#nio#channels#MembershipKey#block_E@ method.", "history": "Added in API level 26", "FullName": "public abstract MembershipKey unblock (InetAddress source)"}, "channel()": {"Returns": [["@B_java#nio#channels#MulticastChannel_E@", "the channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the channel for which this membership key was created. This method will continue to return the channel even after the membership becomes @B_java#nio#channels#MembershipKey#isValid_E@.", "history": "Added in API level 26", "FullName": "public abstract MulticastChannel channel ()"}}, "Inheritance": [], "ClassName": "java.nio.channels.MembershipKey", "ClassDesc": "A token representing the membership of an Internet Protocol (IP) multicast group. A membership key may represent a membership to receive all datagrams sent to the group, or it may be source-specific, meaning that it represents a membership that receives only datagrams from a specific source address. Whether or not a membership key is source-specific may be determined by invoking its @B_java#nio#channels#MembershipKey#sourceAddress_E@ method. A membership key is valid upon creation and remains valid until the membership is dropped by invoking the @B_java#nio#channels#MembershipKey#drop_E@ method, or the channel is closed. The validity of the membership key may be tested by invoking its @B_java#nio#channels#MembershipKey#isValid_E@ method. Where a membership key is not source-specific and the underlying operation system supports source filtering, then the @B_java#nio#channels#MembershipKey#block_E@ and @B_java#nio#channels#MembershipKey#unblock_E@ methods can be used to block or unblock multicast datagrams from particular source addresses."}