{"Functions": {"openNonAssetFd(java.lang.String)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: Name of the asset to retrieve. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Open a non-asset as an asset by mmapping it and returning an @B_android#content#res#AssetFileDescriptor_E@. This provides direct access to all of the files included in an application package (not only its assets). Applications should not normally use this. The asset must not be compressed, or an exception will be thrown.", "history": "Added in API level 1", "FullName": "public AssetFileDescriptor openNonAssetFd (String fileName)"}, "openXmlResourceParser(int, java.lang.String)": {"Returns": [["@B_android#content#res#XmlResourceParser_E@", "no returns description in source This value will never be null."]], "Parameters": [["int", "int: Identifier of the package to be opened."], ["@B_java#lang#String_E@", "String: The name of the file to retrieve. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a parser for a compiled XML file.", "history": "added in API level 1", "FullName": "public XmlResourceParser openXmlResourceParser (int cookie, String fileName)"}, "openNonAssetFd(int, java.lang.String)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "no returns description in source This value will never be null."]], "Parameters": [["int", "int: Identifier of the package to be opened."], ["@B_java#lang#String_E@", "String: Name of the asset to retrieve. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Open a non-asset as an asset by mmapping it and returning an @B_android#content#res#AssetFileDescriptor_E@. This provides direct access to all of the files included in an application package (not only its assets). Applications should not normally use this. The asset must not be compressed, or an exception will be thrown.", "history": "added in API level 1", "FullName": "public AssetFileDescriptor openNonAssetFd (int cookie, String fileName)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "openNonAssetFd(int,java.lang.String)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "This value will never be null."]], "Parameters": [["int", "int: Identifier of the package to be opened."], ["@B_java#lang#String_E@", "String: Name of the asset to retrieve. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Open a non-asset as an asset by mmapping it and returning an @B_android#content#res#AssetFileDescriptor_E@. This provides direct access to all of the files included in an application package (not only its assets). Applications should not normally use this. The asset must not be compressed, or an exception will be thrown.", "history": "Added in API level 1", "FullName": "public AssetFileDescriptor openNonAssetFd (int cookie, String fileName)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close this asset manager.", "history": "Added in API level 1", "FullName": "public void close ()"}, "getLocales()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the locales that this asset manager contains data for. On SDK 21 (Android 5.0: Lollipop) and above, Locale strings are valid @B_java#util#Locale#forLanguageTag_E@. On SDK 20 (Android 4.4W: Kitkat for watches) and below, locale strings are of the form ll_CC where ll is a two letter language code, and CC is a two letter country code.", "history": "Added in API level 1", "FullName": "public String[] getLocales ()"}, "list(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "String[] Array of strings, one for each asset. These file names are relative to 'path'. You can open the file by concatenating 'path' and a name in the returned string (via File) and passing that to open(). This value may be null."]], "Parameters": [["@B_java#lang#String_E@", "String: A relative path within the assets, i.e., \"docs/home.html\". This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": ["@B_android#content#res#AssetManager#open_E@"], "Permissions": [], "Description": "Return a String array of all the assets at the given path.", "history": "Added in API level 1", "FullName": "public String[] list (String path)"}, "open(java.lang.String)": {"Returns": [["@B_java#io#InputStream_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the asset to open. This name can be hierarchical. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": ["@B_android#content#res#AssetManager#open_E@", "@B_android#content#res#AssetManager#list_E@"], "Permissions": [], "Description": "Open an asset using ACCESS_STREAMING mode. This provides access to files that have been bundled with an application as assets -- that is, files placed in to the \"assets\" directory.", "history": "Added in API level 1", "FullName": "public InputStream open (String fileName)"}, "openXmlResourceParser(java.lang.String)": {"Returns": [["@B_android#content#res#XmlResourceParser_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the file to retrieve. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a parser for a compiled XML file.", "history": "Added in API level 1", "FullName": "public XmlResourceParser openXmlResourceParser (String fileName)"}, "open(java.lang.String, int)": {"Returns": [["@B_java#io#InputStream_E@", "no returns description in source This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the asset to open. This name can be hierarchical.This value must never be null."], ["int", "int: Desired access mode for retrieving the data."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": ["@B_android#content#res#AssetManager_E@", "@B_android#content#res#AssetManager#open_E@", "@B_android#content#res#AssetManager#list_E@"], "Permissions": [], "Description": "Open an asset using an explicit access mode, returning an InputStream to read its contents. This provides access to files that have been bundled with an application as assets -- that is, files placed in to the \"assets\" directory.", "history": "added in API level 1", "FullName": "public InputStream open (String fileName, int accessMode)"}, "openXmlResourceParser(int,java.lang.String)": {"Returns": [["@B_android#content#res#XmlResourceParser_E@", "This value will never be null."]], "Parameters": [["int", "int: Identifier of the package to be opened."], ["@B_java#lang#String_E@", "String: The name of the file to retrieve. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a parser for a compiled XML file.", "history": "Added in API level 1", "FullName": "public XmlResourceParser openXmlResourceParser (int cookie, String fileName)"}, "open(java.lang.String,int)": {"Returns": [["@B_java#io#InputStream_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the asset to open. This name can be hierarchical. This value must never be null."], ["int", "int: Desired access mode for retrieving the data."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": ["@B_android#content#res#AssetManager_E@", "@B_android#content#res#AssetManager#open_E@", "@B_android#content#res#AssetManager#list_E@"], "Permissions": [], "Description": "Open an asset using an explicit access mode, returning an InputStream to read its contents. This provides access to files that have been bundled with an application as assets -- that is, files placed in to the \"assets\" directory.", "history": "Added in API level 1", "FullName": "public InputStream open (String fileName, int accessMode)"}, "openFd(java.lang.String)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "An open AssetFileDescriptor. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the asset to open. This name can be hierarchical. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Open an uncompressed asset by mmapping it and returning an @B_android#content#res#AssetFileDescriptor_E@. This provides access to files that have been bundled with an application as assets -- that is, files placed in to the \"assets\" directory. The asset must be uncompressed, or an exception will be thrown.", "history": "Added in API level 1", "FullName": "public AssetFileDescriptor openFd (String fileName)"}}, "Inheritance": [], "ClassName": "android.content.res.AssetManager", "ClassDesc": "Provides access to an application's raw asset files; see @B_android#content#res#Resources_E@ for the way most applications will want to retrieve their resource data. This class presents a lower-level API that allows you to open and read raw files that have been bundled with the application as a simple stream of bytes."}