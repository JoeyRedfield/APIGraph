{"Functions": {"descendingKeySet()": {"Returns": [["@B_java#util#NavigableSet_E@", "a reverse order navigable set view of the keys in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a reverse order @B_java#util#NavigableSet_E@ view of the keys contained in this map. The set's iterator returns the keys in descending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.", "history": "Added in API level 9", "FullName": "public abstract NavigableSet<K> descendingKeySet ()"}, "subMap(K, boolean, K, boolean)": {"Returns": [["@B_java#util#NavigableMap_E@", "a view of the portion of this map whose keys range from fromKey to toKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"], ["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if fromKey and toKey cannot be compared to one another using this map's comparator (or, if the map has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if fromKey or toKey cannot be compared to keys currently in the map."], ["@B_java#lang#NullPointerException_E@", "if fromKey or toKey is null and this map does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", "if fromKey is greater than toKey; or if this map itself has a restricted range, and fromKey or toKey lies outside the bounds of the range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey to toKey. If fromKey and toKey are equal, the returned map is empty unless fromInclusive and toInclusive are both true. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside of its range, or to construct a submap either of whose endpoints lie outside its range.", "history": "added in API level 9", "FullName": "public abstract NavigableMap<K, V> subMap (K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)"}, "navigableKeySet()": {"Returns": [["@B_java#util#NavigableSet_E@", "a navigable set view of the keys in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#NavigableSet_E@ view of the keys contained in this map. The set's iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.", "history": "Added in API level 9", "FullName": "public abstract NavigableSet<K> navigableKeySet ()"}, "firstEntry()": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the least key, or null if this map is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the least key in this map, or null if the map is empty.", "history": "Added in API level 9", "FullName": "public abstract Entry<K, V> firstEntry ()"}, "subMap(K,boolean,K,boolean)": {"Returns": [["@B_java#util#NavigableMap_E@", "a view of the portion of this map whose keys range from fromKey to toKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"], ["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if fromKey and toKey cannot be compared to one another using this map's comparator (or, if the map has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if fromKey or toKey cannot be compared to keys currently in the map."], ["@B_java#lang#NullPointerException_E@", "if fromKey or toKey is null and this map does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", "if fromKey is greater than toKey; or if this map itself has a restricted range, and fromKey or toKey lies outside the bounds of the range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey to toKey. If fromKey and toKey are equal, the returned map is empty unless fromInclusive and toInclusive are both true. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside of its range, or to construct a submap either of whose endpoints lie outside its range.", "history": "Added in API level 9", "FullName": "public abstract NavigableMap<K, V> subMap (K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)"}, "higherKey(K)": {"Returns": [["K", "the least key greater than key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the least key strictly greater than the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public abstract K higherKey (K key)"}, "ceilingEntry(K)": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the least key greater than or equal to key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public abstract Entry<K, V> ceilingEntry (K key)"}, "pollFirstEntry()": {"Returns": [["@B_java#util#Map#Entry_E@", "the removed first entry of this map, or null if this map is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.", "history": "Added in API level 9", "FullName": "public abstract Entry<K, V> pollFirstEntry ()"}, "higherEntry(K)": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the least key greater than key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public abstract Entry<K, V> higherEntry (K key)"}, "descendingMap()": {"Returns": [["@B_java#util#NavigableMap_E@", "a reverse order view of this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a reverse order view of the mappings contained in this map. The descending map is backed by this map, so changes to the map are reflected in the descending map, and vice-versa. If either map is modified while an iteration over a collection view of either map is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The returned map has an ordering equivalent to @B_java#util#Collections#reverseOrder_E@(comparator()). The expression m.descendingMap().descendingMap() returns a view of m essentially equivalent to m.", "history": "Added in API level 9", "FullName": "public abstract NavigableMap<K, V> descendingMap ()"}, "ceilingKey(K)": {"Returns": [["K", "the least key greater than or equal to key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the least key greater than or equal to the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public abstract K ceilingKey (K key)"}, "tailMap(K,boolean)": {"Returns": [["@B_java#util#NavigableMap_E@", "a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if fromKey is not compatible with this map's comparator (or, if the map has no comparator, if fromKey does not implement @B_java#lang#Comparable_E@). Implementations may, but are not required to, throw this exception if fromKey cannot be compared to keys currently in the map."], ["@B_java#lang#NullPointerException_E@", "if fromKey is null and this map does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", "if this map itself has a restricted range, and fromKey lies outside the bounds of the range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "Added in API level 9", "FullName": "public abstract NavigableMap<K, V> tailMap (K fromKey, boolean inclusive)"}, "pollLastEntry()": {"Returns": [["@B_java#util#Map#Entry_E@", "the removed last entry of this map, or null if this map is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.", "history": "Added in API level 9", "FullName": "public abstract Entry<K, V> pollLastEntry ()"}, "lastEntry()": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the greatest key, or null if this map is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.", "history": "Added in API level 9", "FullName": "public abstract Entry<K, V> lastEntry ()"}, "headMap(K,boolean)": {"Returns": [["@B_java#util#NavigableMap_E@", "a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey"]], "Parameters": [["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if toKey is not compatible with this map's comparator (or, if the map has no comparator, if toKey does not implement @B_java#lang#Comparable_E@). Implementations may, but are not required to, throw this exception if toKey cannot be compared to keys currently in the map."], ["@B_java#lang#NullPointerException_E@", "if toKey is null and this map does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", "if this map itself has a restricted range, and toKey lies outside the bounds of the range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "Added in API level 9", "FullName": "public abstract NavigableMap<K, V> headMap (K toKey, boolean inclusive)"}, "floorKey(K)": {"Returns": [["K", "the greatest key less than or equal to key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the greatest key less than or equal to the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public abstract K floorKey (K key)"}, "headMap(K)": {"Returns": [["@B_java#util#SortedMap_E@", "a view of the portion of this map whose keys are strictly less than toKey"]], "Parameters": [["K", "K: high endpoint (exclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are strictly less than toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to headMap(toKey, false).", "history": "Added in API level 9", "FullName": "public abstract SortedMap<K, V> headMap (K toKey)"}, "subMap(K, K)": {"Returns": [["@B_java#util#SortedMap_E@", "a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive"]], "Parameters": [["K", "K: low endpoint (inclusive) of the keys in the returned map"], ["K", "K: high endpoint (exclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive. (If fromKey and toKey are equal, the returned map is empty.) The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to subMap(fromKey, true, toKey, false).", "history": "added in API level 11", "FullName": "public abstract SortedMap<K, V> subMap (K fromKey, K toKey)"}, "floorEntry(K)": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the greatest key less than or equal to key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public abstract Entry<K, V> floorEntry (K key)"}, "subMap(K,K)": {"Returns": [["@B_java#util#SortedMap_E@", "a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive"]], "Parameters": [["K", "K: low endpoint (inclusive) of the keys in the returned map"], ["K", "K: high endpoint (exclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive. (If fromKey and toKey are equal, the returned map is empty.) The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to subMap(fromKey, true, toKey, false).", "history": "Added in API level 9", "FullName": "public abstract SortedMap<K, V> subMap (K fromKey, K toKey)"}, "tailMap(K)": {"Returns": [["@B_java#util#SortedMap_E@", "a view of the portion of this map whose keys are greater than or equal to fromKey"]], "Parameters": [["K", "K: low endpoint (inclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are greater than or equal to fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to tailMap(fromKey, true).", "history": "Added in API level 9", "FullName": "public abstract SortedMap<K, V> tailMap (K fromKey)"}, "tailMap(K, boolean)": {"Returns": [["@B_java#util#NavigableMap_E@", "a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if fromKey is not compatible with this map's comparator (or, if the map has no comparator, if fromKey does not implement @B_java#lang#Comparable_E@). Implementations may, but are not required to, throw this exception if fromKey cannot be compared to keys currently in the map."], ["@B_java#lang#NullPointerException_E@", "if fromKey is null and this map does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", "if this map itself has a restricted range, and fromKey lies outside the bounds of the range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "added in API level 9", "FullName": "public abstract NavigableMap<K, V> tailMap (K fromKey, boolean inclusive)"}, "headMap(K, boolean)": {"Returns": [["@B_java#util#NavigableMap_E@", "a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey"]], "Parameters": [["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if toKey is not compatible with this map's comparator (or, if the map has no comparator, if toKey does not implement @B_java#lang#Comparable_E@). Implementations may, but are not required to, throw this exception if toKey cannot be compared to keys currently in the map."], ["@B_java#lang#NullPointerException_E@", "if toKey is null and this map does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", "if this map itself has a restricted range, and toKey lies outside the bounds of the range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "added in API level 9", "FullName": "public abstract NavigableMap<K, V> headMap (K toKey, boolean inclusive)"}, "lowerEntry(K)": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the greatest key less than key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public abstract Entry<K, V> lowerEntry (K key)"}, "lowerKey(K)": {"Returns": [["K", "the greatest key less than key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the greatest key strictly less than the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public abstract K lowerKey (K key)"}}, "Inheritance": [], "ClassName": "java.util.NavigableMap<K, V>", "ClassDesc": "A @B_java#util#SortedMap_E@ extended with navigation methods returning the closest matches for given search targets. Methods @B_java#util#NavigableMap#lowerEntry_E@, @B_java#util#NavigableMap#floorEntry_E@, @B_java#util#NavigableMap#ceilingEntry_E@, and @B_java#util#NavigableMap#higherEntry_E@ return Map.Entry objects associated with keys respectively less than, less than or equal, greater than or equal, and greater than a given key, returning null if there is no such key. Similarly, methods @B_java#util#NavigableMap#lowerKey_E@, @B_java#util#NavigableMap#floorKey_E@, @B_java#util#NavigableMap#ceilingKey_E@, and @B_java#util#NavigableMap#higherKey_E@ return only the associated keys. All of these methods are designed for locating, not traversing entries. A NavigableMap may be accessed and traversed in either ascending or descending key order. The @B_java#util#NavigableMap#descendingMap_E@ method returns a view of the map with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. Methods @B_java#util#NavigableMap#subMap_E@, @B_java#util#NavigableMap#headMap_E@, and @B_java#util#NavigableMap#tailMap_E@ differ from the like-named SortedMap methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Submaps of any NavigableMap must implement the NavigableMap interface. This interface additionally defines methods @B_java#util#NavigableMap#firstEntry_E@, @B_java#util#NavigableMap#pollFirstEntry_E@, @B_java#util#NavigableMap#lastEntry_E@, and @B_java#util#NavigableMap#pollLastEntry_E@ that return and/or remove the least and greatest mappings, if any exist, else returning null. Implementations of entry-returning methods are expected to return Map.Entry pairs representing snapshots of mappings at the time they were produced, and thus generally do not support the optional Entry.setValue method. Note however that it is possible to change mappings in the associated map using method put. Methods @B_java#util#NavigableMap#subMap_E@, @B_java#util#NavigableMap#headMap_E@, and @B_java#util#NavigableMap#tailMap_E@ are specified to return SortedMap to allow existing implementations of SortedMap to be compatibly retrofitted to implement NavigableMap, but extensions and implementations of this interface are encouraged to override these methods to return NavigableMap. Similarly, @B_java#util#SortedMap#keySet_E@ can be overridden to return @B_java#util#NavigableSet_E@."}