{"Functions": {"iterator()": {"Returns": [["@B_java#util#Iterator_E@", "the iterator associated with this DirectoryStream"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this directory stream is closed or the iterator has already been returned"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the iterator associated with this DirectoryStream.", "history": "Added in API level 26", "FullName": "public abstract Iterator<T> iterator ()"}}, "Inheritance": [], "ClassName": "java.nio.file.DirectoryStream<T>", "ClassDesc": "An object to iterate over the entries in a directory. A directory stream allows for the convenient use of the for-each construct to iterate over a directory. An important property of the directory stream's Iterator is that its @B_java#util#Iterator#hasNext_E@ method is guaranteed to read-ahead by at least one element. If hasNext method returns true, and is followed by a call to the next method, it is guaranteed that the next method will not throw an exception due to an I/O error, or because the stream has been @B_java#io#Closeable#close_E@. The Iterator does not support the @B_java#util#Iterator#remove_E@ operation. A DirectoryStream is opened upon creation and is closed by invoking the close method. Closing a directory stream releases any resources associated with the stream. Failure to close the stream may result in a resource leak. The try-with-resources statement provides a useful construct to ensure that the stream is closed: Once a directory stream is closed, then further access to the directory, using the Iterator, behaves as if the end of stream has been reached. Due to read-ahead, the Iterator may return one or more elements after the directory stream has been closed. Once these buffered elements have been read, then subsequent calls to the hasNext method returns false, and subsequent calls to the next method will throw NoSuchElementException. A directory stream is not required to be close method, then the second thread may block until the read operation is complete. If an I/O error is encountered when accessing the directory then it causes the Iterator's hasNext or next methods to throw @B_java#nio#file#DirectoryIteratorException_E@ with the @B_java#io#IOException_E@ as the cause. As stated above, the hasNext method is guaranteed to read-ahead by at least one element. This means that if hasNext method returns true, and is followed by a call to the next method, then it is guaranteed that the next method will not fail with a DirectoryIteratorException. The elements returned by the iterator are in no specific order. Some file systems maintain special links to the directory itself and the directory's parent directory. Entries representing these links are not returned by the iterator. The iterator is DirectoryStream is created."}