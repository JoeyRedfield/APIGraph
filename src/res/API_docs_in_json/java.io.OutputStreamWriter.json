{"Functions": {"write(char[],int,int)": {"Returns": [], "Parameters": [["char[]", "char: Buffer of characters"], ["int", "int: Offset from which to start writing characters"], ["int", "int: Number of characters to write"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a portion of an array of characters.", "history": "Added in API level 1", "FullName": "public void write (char[] cbuf, int off, int len)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closes the stream, flushing it first. Once the stream has been closed, further write() or flush() invocations will cause an IOException to be thrown. Closing a previously closed stream has no effect.", "history": "Added in API level 1", "FullName": "public void close ()"}, "write(java.lang.String, int, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: A String"], ["int", "int: Offset from which to start writing characters"], ["int", "int: Number of characters to write"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a portion of a string.", "history": "added in API level 1", "FullName": "public void write (String str, int off, int len)"}, "OutputStreamWriter(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: An OutputStream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an OutputStreamWriter that uses the default character encoding.", "history": "Added in API level 1", "FullName": "public OutputStreamWriter (OutputStream out)"}, "OutputStreamWriter(java.io.OutputStream,java.nio.charset.Charset)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: An OutputStream"], ["@B_java#nio#charset#Charset_E@", "Charset: A charset"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an OutputStreamWriter that uses the given charset.", "history": "Added in API level 1", "FullName": "public OutputStreamWriter (OutputStream out, Charset cs)"}, "write(int)": {"Returns": [], "Parameters": [["int", "int: int specifying a character to be written"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a single character.", "history": "Added in API level 1", "FullName": "public void write (int c)"}, "getEncoding()": {"Returns": [["@B_java#lang#String_E@", "The historical name of this encoding, or possibly null if the stream has been closed"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#nio#charset#Charset_E@"], "Permissions": [], "Description": "Returns the name of the character encoding being used by this stream. If the encoding has an historical name then that name is returned; otherwise the encoding's canonical name is returned. If this instance was created with the @B_java#io#OutputStreamWriter#OutputStreamWriter_E@ constructor then the returned name, being unique for the encoding, may differ from the name passed to the constructor. This method may return", "history": "Added in API level 1", "FullName": "public String getEncoding ()"}, "OutputStreamWriter(java.io.OutputStream,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: An OutputStream"], ["@B_java#lang#String_E@", "String: The name of a supported @B_java#nio#charset#Charset_E@"]], "Throws": [["@B_java#io#UnsupportedEncodingException_E@", "If the named encoding is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an OutputStreamWriter that uses the named charset.", "history": "Added in API level 1", "FullName": "public OutputStreamWriter (OutputStream out, String charsetName)"}, "write(java.lang.String,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: A String"], ["int", "int: Offset from which to start writing characters"], ["int", "int: Number of characters to write"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a portion of a string.", "history": "Added in API level 1", "FullName": "public void write (String str, int off, int len)"}, "OutputStreamWriter(java.io.OutputStream,java.nio.charset.CharsetEncoder)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: An OutputStream"], ["@B_java#nio#charset#CharsetEncoder_E@", "CharsetEncoder: A charset encoder"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an OutputStreamWriter that uses the given charset encoder.", "history": "Added in API level 1", "FullName": "public OutputStreamWriter (OutputStream out, CharsetEncoder enc)"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Flushes the stream.", "history": "Added in API level 1", "FullName": "public void flush ()"}, "write(char[], int, int)": {"Returns": [], "Parameters": [["char[]", "char: Buffer of characters"], ["int", "int: Offset from which to start writing characters"], ["int", "int: Number of characters to write"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a portion of an array of characters.", "history": "added in API level 1", "FullName": "public void write (char[] cbuf, int off, int len)"}}, "Inheritance": ["@B_java#io#Writer_E@"], "ClassName": "java.io.OutputStreamWriter", "ClassDesc": "An OutputStreamWriter is a bridge from character streams to byte streams: Characters written to it are encoded into bytes using a specified @B_java#nio#charset#Charset_E@. The charset that it uses may be specified by name or may be given explicitly, or the platform's default charset may be accepted. Each invocation of a write() method causes the encoding converter to be invoked on the given character(s). The resulting bytes are accumulated in a buffer before being written to the underlying output stream. The size of this buffer may be specified, but by default it is large enough for most purposes. Note that the characters passed to the write() methods are not buffered. For top efficiency, consider wrapping an OutputStreamWriter within a BufferedWriter so as to avoid frequent converter invocations. For example: A A This class always replaces malformed surrogate elements and unmappable character sequences with the charset's default"}