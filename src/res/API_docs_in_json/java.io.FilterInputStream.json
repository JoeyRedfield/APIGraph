{"Functions": {"available()": {"Returns": [["int", "an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next caller of a method for this input stream. The next caller might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes. This method returns the result of @B_java#io#FilterInputStream#in_E@.available().", "history": "Added in API level 1", "FullName": "public int available ()"}, "read(byte[])": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#read_E@"], "Permissions": [], "Description": "Reads up to byte.length bytes of data from this input stream into an array of bytes. This method blocks until some input is available. This method simply performs the call read(b, 0, b.length) and returns the result. It is important that it does in.read(b) instead; certain subclasses of FilterInputStream depend on the implementation strategy actually used.", "history": "Added in API level 1", "FullName": "public int read (byte[] b)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if the stream has not been marked or if the mark has been invalidated."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@", "@B_java#io#FilterInputStream#mark_E@"], "Permissions": [], "Description": "Repositions this stream to the position at the time the mark method was last called on this input stream. This method simply performs in.reset(). Stream marks are intended to be used in situations where you need to read ahead a little to see what's in the stream. Often this is most easily done by invoking some general parser. If the stream is of the type handled by the parse, it just chugs along happily. If the stream is not of that type, the parser should toss an exception when it fails. If this happens within readlimit bytes, it allows the outer code to reset the stream and try another parser.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "markSupported()": {"Returns": [["boolean", "true if this stream type supports the mark and reset method; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@", "@B_java#io#InputStream#mark_E@", "@B_java#io#InputStream#reset_E@"], "Permissions": [], "Description": "Tests if this input stream supports the mark and reset methods. This method simply performs in.markSupported().", "history": "Added in API level 1", "FullName": "public boolean markSupported ()"}, "read(byte[],int,int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "Reads up to len bytes of data from this input stream into an array of bytes. If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned. This method simply performs in.read(b, off, len) and returns the result.", "history": "Added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "FilterInputStream(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the underlying input stream, or null if this instance is to be created without an underlying stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a FilterInputStream by assigning the argument in to the field this.in so as to remember it for later use.", "history": "Added in API level 1", "FullName": "protected FilterInputStream (InputStream in)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "Closes this input stream and releases any system resources associated with the stream. This method simply performs in.close().", "history": "Added in API level 1", "FullName": "public void close ()"}, "read()": {"Returns": [["int", "the next byte of data, or -1 if the end of the stream is reached."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "Reads the next byte of data from this input stream. The value byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown. This method simply performs in.read() and returns the result.", "history": "Added in API level 1", "FullName": "public int read ()"}, "skip(long)": {"Returns": [["long", "the actual number of bytes skipped."]], "Parameters": [["long", "long: the number of bytes to be skipped."]], "Throws": [["@B_java#io#IOException_E@", "if the stream does not support seek, or if some other I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Skips over and discards n bytes of data from the input stream. The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0. The actual number of bytes skipped is returned. This method simply performs in.skip(n).", "history": "Added in API level 1", "FullName": "public long skip (long n)"}, "read(byte[], int, int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "Reads up to len bytes of data from this input stream into an array of bytes. If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned. This method simply performs in.read(b, off, len) and returns the result.", "history": "added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "mark(int)": {"Returns": [], "Parameters": [["int", "int: the maximum limit of bytes that can be read before the mark position becomes invalid."]], "Throws": [], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@", "@B_java#io#FilterInputStream#reset_E@"], "Permissions": [], "Description": "Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at the last marked position so that subsequent reads re-read the same bytes. The readlimit argument tells this input stream to allow that many bytes to be read before the mark position gets invalidated. This method simply performs in.mark(readlimit).", "history": "Added in API level 1", "FullName": "public void mark (int readlimit)"}}, "Inheritance": ["@B_java#io#InputStream_E@"], "ClassName": "java.io.FilterInputStream", "ClassDesc": "A FilterInputStream contains some other input stream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality. The class FilterInputStream itself simply overrides all methods of InputStream with versions that pass all requests to the contained input stream. Subclasses of FilterInputStream may further override some of these methods and may also provide additional methods and fields."}