{"Functions": {"remove()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the remove operation is not supported by this list iterator"], ["@B_java#lang#IllegalStateException_E@", "if neither next nor previous have been called, or remove or add have been called after the last call to next or previous"]], "SeeAlso": [], "Permissions": [], "Description": "Removes from the list the last element that was returned by @B_java#util#ListIterator#next_E@ or @B_java#util#ListIterator#previous_E@ (optional operation). This call can only be made once per call to next or previous. It can be made only if @B_java#util#ListIterator#add_E@ has not been called after the last call to next or previous.", "history": "Added in API level 1", "FullName": "public abstract void remove ()"}, "previous()": {"Returns": [["E", "the previous element in the list"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if the iteration has no previous element"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the previous element in the list and moves the cursor position backwards. This method may be called repeatedly to iterate through the list backwards, or intermixed with calls to @B_java#util#ListIterator#next_E@ to go back and forth. (Note that alternating calls to next and previous will return the same element repeatedly.)", "history": "Added in API level 1", "FullName": "public abstract E previous ()"}, "add(E)": {"Returns": [], "Parameters": [["E", "E: the element to insert"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the add method is not supported by this list iterator"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this list"], ["@B_java#lang#IllegalArgumentException_E@", "if some aspect of this element prevents it from being added to this list"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into the list (optional operation). The element is inserted immediately before the element that would be returned by @B_java#util#ListIterator#next_E@, if any, and after the element that would be returned by @B_java#util#ListIterator#previous_E@, if any. (If the list contains no elements, the new element becomes the sole element on the list.) The new element is inserted before the implicit cursor: a subsequent call to next would be unaffected, and a subsequent call to previous would return the new element. (This call increases by one the value that would be returned by a call to nextIndex or previousIndex.)", "history": "Added in API level 1", "FullName": "public abstract void add (E e)"}, "hasPrevious()": {"Returns": [["boolean", "true if the list iterator has more elements when traversing the list in the reverse direction"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this list iterator has more elements when traversing the list in the reverse direction. (In other words, returns true if @B_java#util#ListIterator#previous_E@ would return an element rather than throwing an exception.)", "history": "Added in API level 1", "FullName": "public abstract boolean hasPrevious ()"}, "set(E)": {"Returns": [], "Parameters": [["E", "E: the element with which to replace the last element returned by next or previous"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the set operation is not supported by this list iterator"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this list"], ["@B_java#lang#IllegalArgumentException_E@", "if some aspect of the specified element prevents it from being added to this list"], ["@B_java#lang#IllegalStateException_E@", "if neither next nor previous have been called, or remove or add have been called after the last call to next or previous"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the last element returned by @B_java#util#ListIterator#next_E@ or @B_java#util#ListIterator#previous_E@ with the specified element (optional operation). This call can be made only if neither @B_java#util#ListIterator#remove_E@ nor @B_java#util#ListIterator#add_E@ have been called after the last call to next or previous.", "history": "Added in API level 1", "FullName": "public abstract void set (E e)"}, "next()": {"Returns": [["E", "the next element in the list"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if the iteration has no next element"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the next element in the list and advances the cursor position. This method may be called repeatedly to iterate through the list, or intermixed with calls to @B_java#util#ListIterator#previous_E@ to go back and forth. (Note that alternating calls to next and previous will return the same element repeatedly.)", "history": "Added in API level 1", "FullName": "public abstract E next ()"}, "nextIndex()": {"Returns": [["int", "the index of the element that would be returned by a subsequent call to next, or list size if the list iterator is at the end of the list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the element that would be returned by a subsequent call to @B_java#util#ListIterator#next_E@. (Returns list size if the list iterator is at the end of the list.)", "history": "Added in API level 1", "FullName": "public abstract int nextIndex ()"}, "hasNext()": {"Returns": [["boolean", "true if the list iterator has more elements when traversing the list in the forward direction"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this list iterator has more elements when traversing the list in the forward direction. (In other words, returns true if @B_java#util#ListIterator#next_E@ would return an element rather than throwing an exception.)", "history": "Added in API level 1", "FullName": "public abstract boolean hasNext ()"}, "previousIndex()": {"Returns": [["int", "the index of the element that would be returned by a subsequent call to previous, or -1 if the list iterator is at the beginning of the list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the element that would be returned by a subsequent call to @B_java#util#ListIterator#previous_E@. (Returns -1 if the list iterator is at the beginning of the list.)", "history": "Added in API level 1", "FullName": "public abstract int previousIndex ()"}}, "Inheritance": [], "ClassName": "java.util.ListIterator<E>", "ClassDesc": "An iterator for lists that allows the programmer to traverse the list in either direction, modify the list during iteration, and obtain the iterator's current position in the list. A ListIterator has no current element; its previous() and the element that would be returned by a call to next(). An iterator for a list of length n has n+1 possible cursor positions, as illustrated by the carets (^) below: @B_java#util#ListIterator#remove_E@ and @B_java#util#ListIterator#set_E@ methods are @B_java#util#ListIterator#next_E@ or @B_java#util#ListIterator#previous_E@. This interface is a member of the"}