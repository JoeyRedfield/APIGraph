{"Functions": {"wrap(java.io.OutputStream)": {"Returns": [["@B_java#io#OutputStream_E@", "the output stream for encoding the byte data into the specified Base64 encoded format"]], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: the output stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Wraps an output stream for encoding byte data using the @B_java#util#Base64_E@ encoding scheme. It is recommended to promptly close the returned output stream after use, during which it will flush all possible leftover bytes to the underlying output stream. Closing the returned output stream will close the underlying output stream.", "history": "Added in API level 26", "FullName": "public OutputStream wrap (OutputStream os)"}, "withoutPadding()": {"Returns": [["@B_java#util#Base64#Encoder_E@", "an equivalent encoder that encodes without adding any padding character at the end"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an encoder instance that encodes equivalently to this one, but without adding any padding character at the end of the encoded byte data. The encoding scheme of this encoder instance is unaffected by this invocation. The returned encoder instance should be used for non-padding encoding operation.", "history": "Added in API level 26", "FullName": "public Base64.Encoder withoutPadding ()"}, "encodeToString(byte[])": {"Returns": [["@B_java#lang#String_E@", "A String containing the resulting Base64 encoded characters"]], "Parameters": [["byte[]", "byte: the byte array to encode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Encodes the specified byte array into a String using the @B_java#util#Base64_E@ encoding scheme. This method first encodes all input bytes into a base64 encoded byte array and then constructs a new String by using the encoded byte array and the @B_java#nio#charset#StandardCharsets#ISO_8859_1_E@ charset. In other words, an invocation of this method has exactly the same effect as invoking new String(encode(src), StandardCharsets.ISO_8859_1).", "history": "Added in API level 26", "FullName": "public String encodeToString (byte[] src)"}, "encode(byte[], byte[])": {"Returns": [["int", "The number of bytes written to the output byte array"]], "Parameters": [["byte[]", "byte: the byte array to encode"], ["byte[]", "byte: the output byte array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if dst does not have enough space for encoding all input bytes."]], "SeeAlso": [], "Permissions": [], "Description": "Encodes all bytes from the specified byte array using the @B_java#util#Base64_E@ encoding scheme, writing the resulting bytes to the given output byte array, starting at offset 0. It is the responsibility of the invoker of this method to make sure the output byte array dst has enough space for encoding all bytes from the input byte array. No bytes will be written to the output byte array if the output byte array is not big enough.", "history": "added in API level 26", "FullName": "public int encode (byte[] src, byte[] dst)"}, "encode(byte[],byte[])": {"Returns": [["int", "The number of bytes written to the output byte array"]], "Parameters": [["byte[]", "byte: the byte array to encode"], ["byte[]", "byte: the output byte array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if dst does not have enough space for encoding all input bytes."]], "SeeAlso": [], "Permissions": [], "Description": "Encodes all bytes from the specified byte array using the @B_java#util#Base64_E@ encoding scheme, writing the resulting bytes to the given output byte array, starting at offset 0. It is the responsibility of the invoker of this method to make sure the output byte array dst has enough space for encoding all bytes from the input byte array. No bytes will be written to the output byte array if the output byte array is not big enough.", "history": "Added in API level 26", "FullName": "public int encode (byte[] src, byte[] dst)"}, "encode(byte[])": {"Returns": [["byte[]", "A newly-allocated byte array containing the resulting encoded bytes."]], "Parameters": [["byte[]", "byte: the byte array to encode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Encodes all bytes from the specified byte array into a newly-allocated byte array using the @B_java#util#Base64_E@ encoding scheme. The returned byte array is of the length of the resulting bytes.", "history": "Added in API level 26", "FullName": "public byte[] encode (byte[] src)"}, "encode(java.nio.ByteBuffer)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "A newly-allocated byte buffer containing the encoded bytes."]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the source ByteBuffer to encode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Encodes all remaining bytes from the specified byte buffer into a newly-allocated ByteBuffer using the @B_java#util#Base64_E@ encoding scheme. Upon return, the source buffer's position will be updated to its limit; its limit will not have been changed. The returned output buffer's position will be zero and its limit will be the number of resulting encoded bytes.", "history": "Added in API level 26", "FullName": "public ByteBuffer encode (ByteBuffer buffer)"}}, "Inheritance": [], "ClassName": "java.util.Base64.Encoder", "ClassDesc": "This class implements an encoder for encoding byte data using the Base64 encoding scheme as specified in RFC 4648 and RFC 2045. Instances of @B_java#util#Base64#Encoder_E@ class are safe for use by multiple concurrent threads. Unless otherwise noted, passing a null argument to a method of this class will cause a @B_java#lang#NullPointerException_E@ to be thrown."}